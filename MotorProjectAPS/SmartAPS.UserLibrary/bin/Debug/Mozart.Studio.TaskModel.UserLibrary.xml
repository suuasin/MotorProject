<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mozart.Studio.TaskModel.UserLibrary</name>
    </assembly>
    <members>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.DateUtility">
            <summary>
            	<para>This is the utility set class for date/time format.</para>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbDateTimeFormat">
            <summary>Get default format for date type string including time.</summary>
            <remarks>The format is "yyyyMMdd HHmmss".</remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbDateFormat">
            <summary>Get default format for date type string.</summary>
            <remarks>The format: "yyyyMMdd".</remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbTimeFormat">
            <summary>Get default format for time type string.</summary>
            <remarks>The format is "HHmmss".</remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbNowString">
            <summary>
            	<para>Converted the system time (DateTime.Now) to DbDateTimeFormat type string.</para>
            </summary>
            <returns>Returns the converted DbDateTimeFormat time/date string.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToDate(System.String)">
            <summary>Converts date type string to DateTime format.</summary>
            <param name="value">
            	<para>The date format for conversion should be year, month, day</para>
            	<para>or year, month, day using '-' or'/' delimiter.</para>
            	<para>The string type for year should be typed in with four digits natural number. </para>
            </param>
            <remarks>
            	<para>The time will not convert and will be set as 12:00:00 AM.</para>
            	<!--EndFragment-->
            </remarks>
            <returns>Returns the converted date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToTime(System.String)">
            <summary>
            	<para>Converts string type time interval to time/date of DateTime type. The base time/date is 1900년 1월 1일 오전 12시 0분 0초입니다.</para>
            </summary>
            <param name="value">
            	<para>This is the string type time interval. The string format is "HHmmss" or "HHmm".</para>
            </param>
            <returns>This is the time/date format of converted DateTime. If the seconds of input time interval is larger than 59 seconds, the seconds will be converted to 59 seconds.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToDateTime(System.String,System.Boolean)">
            <summary>Converts date type string to DateTime format.</summary>
            <param name="value">
            	<para>The date format for conversion should be year, month, day</para>
            	<para>or year, month, day using '-' or'/' delimiter.</para>
            	<para>The string type for year should be typed in with four digits natural number. </para>
            </param>
            <param name="withTime">This determines wether to include hour, minute, second in the string for conversion</param>
            <returns>Returns the converted date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToTimeSpan(System.String)">
            <summary>Converts the string type time interval to TimeSpan type.</summary>
            <param name="value">This is the string type time interval. The string format is "HHmmss" or "HHmm".</param>
            <returns>This is the time interval format of converted TimeSpan. If the seconds of input time interval is larger than 59 seconds, the seconds will be converted to 59 seconds.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToDateString(System.DateTime)">
            <summary>Converts DateTime type date to DbDateFormat type string.</summary>
            <param name="dateTime">Target date to be converted.</param>
            <returns>Converted string to DbDateFormat type</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToTimeString(System.DateTime)">
            <summary>Converts DateTime type date to DbDateFormat type string.</summary>
            <param name="time">Target time to be converted.</param>
            <returns>Time converted string type.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToString(System.DateTime,System.Boolean)">
            <summary>Converts the DateTime type to string type.</summary>
            <param name="dateTime">Target date to be converted.</param>
            <param name="withTime">This determines wether to include hour, minute, second in the string for conversion.</param>
            <returns>This is the date converted to string type. If withTime is true, convert date to DbDateTimeFormat, or else, convert date to string type of DbDateTimeFormat.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToStringTrimSec(System.DateTime)">
            <summary>Convert DateTime type time/date to string type. In here, seconds will be excluded.</summary>
            <param name="dateTime">Target time/date to be converted.</param>
            <returns>Time/Date converted to string type.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToStringTrimSec(System.TimeSpan)">
            <summary>
            	<para>Convert TimeSpan type time interval to string type. In here, seconds will be excluded.</para>
            </summary>
            <param name="time">Target time interval to be converted.</param>
            <returns>This is the time interval converted to string type. If time interval is 1 day or above, time interval will be  converted to "dd.hh::mm:ss" or else, time interval will be converted to "hh:mm:ss".</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToString(System.TimeSpan)">
            <summary>
            	<para>Convert TimeSpan type time interval to string type.</para>
            	<para>Convert time format to string type, string Format: If time interval is 1 day or above, convert to dd.hh:mm:ss, or if lower than 1 day convert to hh:mm:ss.</para>
            </summary>
            <param name="time">Target time interval to be converted. </param>
            <returns>This is the time interval converted to string type. If time interval is 1 day or above, time interval will be  converted to "dd.hh::mm:ss" or else, time interval will be converted to "hh:mm:ss".</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbToTimeStringTrimSec(System.DateTime)">
            <summary>
            	<para>Convert DateTime type time to DbTimeFormat type string. In here, seconds will be excluded.</para>
            </summary>
            <param name="time">Target time to be converted.</param>
            <returns>This is the time converted to string type.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DbNullify(System.DateTime)">
            <summary>DbNullify determines whether the DateTime object is equal to minumum value(DateTime.MinValue) and returns the result. </summary>
            <param name="dt">Target DateTime object for determination</param>
            <returns>If DateTime object is equal to DateTime.MinValue return Null (DBNull.Value), or else, return the corresponding DateTime object. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.ToDisplayString(System.DateTime,System.Boolean)">
            <summary>
            	<para>Convert DateTime type time/date to string type.</para>
            </summary>
            <param name="dateTime">Target time/date to be converted.</param>
            <param name="dateOnly">
            	<para>This determines wether to include hour, minute, second in the string for conversion. Default value is false.</para>
            </param>
            <returns>This is date converted to string type.If dateOnly is true, the format follows the DateFormat, or else, the format follows DateTimeFormat.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfMonth(System.DateTime)">
            <summary>
            	<para>Calculates the end time/date of Step on the last day of the month. </para>
            </summary>
            <param name="date">"date" is the target time/date.</param>
            <returns>
            	<para>The calculation result is the end time/date of the Step on the last day of the month.</para>
            	<para>[EX] If, Step start time is 06:00 AM and input date is September(9), the result is 10/1 06:00 AM.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfMonthT(System.DateTime)">
            <summary>The end date/time of the Step on the last day of the month is calculated based on start time/date of the Step according to the input time/date. </summary>
            <param name="date">This is the target time/date.</param>
            <returns>
            	<para>The calculation result is the end time/date of the Step on the last day of the month.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is 9/1 07:00 AM, then the result is 10/1 06:00 AM.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is 9/1 05:00 AM, then the result is 9/1 06:00 AM.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.LastDayOfMonth(System.DateTime)">
            <summary>
            	<para>This calculates the start time of the Step on the last day of the month through the input date.</para>
            </summary>
            <param name="date">This is the target time/date.</param>
            <returns>
            	<para>This is the start time of the Step on the last day of the month.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is September(9), then result is 9/30 06:00 AM</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetDaysInMonth(System.Int32,System.Int32)">
            <summary> This returns the number of days of the input year/month</summary>
            <param name="yy">This is the target year.</param>
            <param name="mm">This is the target month.</param>
            <returns>This is the total number of days in year/month.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DiffMonths(System.Int32,System.Int32)">
            <summary>
            	<para>This calculates the month gap (yearMonth2-yearMonth1) among the two integer type dates </para>
            </summary>
            <param name="yearMonth1">
            	<para>The year/month integer value</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <param name="yearMonth2">
            	<para>The integer value of year/month.</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <remarks>The month gap among two input values(year/month). </remarks>
            <returns>
            	<para>This is the result of the calculated gap(month).</para>
            	<para>[EX] If yearMonth1=201406 and yearMonth2=201501, then the result value 7 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.AddMonths(System.Int32,System.Int32)">
            <summary>
            	<para>Add month(input value) to the base year/month(integer type: yyyMM) and return the result. </para>
            </summary>
            <param name="yearMonth">
            	<para>This is the integer value of year/month.</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <param name="months">The number of months to add.</param>
            <returns>The calculation result of year/month.(integer)</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.ToYearMonth(System.String)">
            <summary>Convert string type year/month to integer type.</summary>
            <param name="yearMonth">This is the string value of year/month. The format is "yyyyMM".</param>
            <returns>This is the converted year/month to integer. The unit and ten's digit stands for month and the remaining places are year.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.ToYearMonth(System.DateTime)">
            <summary>Converts DateTime type date to integer type.</summary>
            <param name="now">The target date to be converted to integer.</param>
            <returns>
            	<para>This is the converted date to integer. The unit and ten's digit stands for month and the remaining places are year.</para>
            	<para>[EX] If target date is 2014/9, the result 201409 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetSpanToNextDay(System.DateTime)">
            <summary>Calculates the remaining time until the start date of the next Step.</summary>
            <param name="now">The target time used to calculate the remaining time until the start date of the next Step.</param>
            <returns>
            	<para>The remaining time until the start date of the next Step. </para>
            	<para>[EX] If Step start time is 06:00 AM, input time is 10:00 PM, then 8 hours as result is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetSpanToNextShift(System.DateTime)">
            <summary>
            	<para>Calculates the remaining time until the next shift.</para>
            </summary>
            <param name="now">The target time used to calculate the remaining time until the next shift.</param>
            <returns>
            	<para>The remaining time until the next shift.</para>
            	<para>[EX] If start time of Step is 06:00 AM, shift interval is 8 hours and input time is 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            	<para></para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetSpanToNext(System.DateTime,System.TimeSpan)">
            <summary>
            <para>This divides a day according to the input time interval. Then, it will calculate the reamining time from the current time until the beginning of the the next time interval. </para>
            </summary>
            <param name="now">This is the target time.</param>
            <param name="ts">This is the input value for time interval.</param>
            <returns>
            	<para>This returns the remaining time from the current time untile the be</para>
            	<para>[EX] If a day start at 06:00 AM, time interval is 2 hours and current time is 2014/9/1 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetStartTimeOfInterval(System.DateTime,System.TimeSpan)">
            <summary xml:lang="ko-kr">
            공장의 일 시작 시간 기준으로 현재 시간 이후의 인터벌 시작 시간을 반환합니다. 
            </summary>
            <param name="now">현재 시간입니다.</param> 
            <param name="ts">인터벌의 간격입니다.</param>
            <returns>
                <para>다음 인터벌 시작 시간입니다. </para>
                <para>현재 시간이 인터벌 시작 시간과 동일한 경우 현재 시간을 반환합니다.</para>
                <para>그 외의 경우 다음 인터벌 시작 시간을 반환합니다.</para>
                <para>[EX] 공장의 일 시작 시간이 06:00 AM이고, 인터벌의 간격이 2시간이고, 현재 시간이 09:35 AM인 경우 반환값은 10:00 AM입니다.</para>
            </returns>
            <summary>
            Returns the DateTime of the next start time with the current DateTime and the specified interaval in reference to the factory start time.
            </summary>
            <param name="now">The current time to get the next start time of the interval.</param> 
            <param name="ts">The timespan interval to get the next start time of the specified interval from the current time in reference to the factory start time.</param>
            <returns>
                <para>Returns the next start time of the specified interval. </para>
                <para>Current time (<em>now</em>) is returned if the specified current time is same as the next start time of the specified interval.</para>
                <para>Otherwise the next start time of the specified interval is returned as the following example.</para>
                <para>[EX] If the factory start time is 06:00 AM, interval is 2 hours and current time is 09:35 AM, 10:00 AM is returned as the next start time of the interval.</para>
                <para>Since the reference time is 06:00 AM and each of the next start time of the specified interval would be 08:00, 10:00, 12:00 and so on, the closest start time of the interval from the given current time 09:35AM would be 10:00 in this example. </para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.ToSortableString(System.DateTime,System.Boolean)">
            <summary>Converts DateTime type time/date to string type possible for sorting.</summary>
            <param name="dateTime">The target time/date to be converted.</param>
            <param name="dateOnly">
            	<para>This determines wether to include hour, minute, second in the string for conversion. Default value is false.</para>
            </param>
            <return>This is time/date converted to string type.If dateOnly is true, the format follows the format "yyyy-MM-dd", or else, the format is "yyyy-MM-dd HH:mm:ss"</return>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.ToIdentityString(System.DateTime)">
            <summary>Converts DateTime type time/date to string type. (Format: yyyyMMdd-HHmmss)</summary>
            <param name="dt">This is the target time/date to be converted.</param>
            <returns>
            	<para>This is the time/date converted to string type. The format is "yyyyMMdd-HHmmss".</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.FromString(System.String)">
            <summary>
            	<para>Converts string type date to Nullable DateTime type.</para>
            	<para>Converts string to Nullable DateTime type. If the value of string is null or System.String.Empty or if data cannot be converted to DateTime type, return null.</para>
            </summary>
            <param name="value">The target string type time/date to be converted.</param>
            <returns>The time/date converted to DateTime type.If the value of string is null or System.String.Empty or if data cannot be converted to DateTime type, return null.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartTimeOfNextWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the Factory start date a week after from the week of the input date . The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek)..</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start day a week after from the week of the input date.</para>
            	<para>[EX] If input date is 2014 September 1st 13:11:11, factory start day is Monday, factory start time is 06:00:00, the result 2014 September 4th 06:00:00 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartTimeOfWeekF(System.DateTime)">
            <summary>
            	<para> Calculates the Factory start date of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start date of the week of the input date. The time follows the factory start time.</para>
            	<para>[EX] If input date is 2014 September 1st 13:11:11, factory start day is Monday, factory start time is 06:00:00, the result 2014 September 1st 06:00:00 is returned</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartDayOfWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the Factory start date of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start date of the week of the input date. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input time and date is 2015 March 4th, Wenesday 05:01:02, factory start day is Monday, 2015 March 2nd, Monday, 05:02:01 is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartDayOfWeekTF(System.DateTime)">
            <summary>
            	<para></para>
            	<para>Calculates the Factory start date of the week of the input date including the Factory day boundary standard date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>Returns the Factory start date of the week including the Factory day boundary date from the input date.</para>
            	<para>[EX] If Factory start day is Monday, start time is 06:00, input date and time is 2015 March 4th 15:40, 2015 March 2nd Monday 06:00 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The last day of the week follows the Factory's last day of the week.(Mozart.SeePlan.ShopCalendar.EndWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date and time is 2015 September 1st, Tuesday 05:01:02, Factory start day is Monday, 2015 September 6th, Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfWeekTF(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to.</para>
            	<para>[EX] If input date is 2015 September 1st, Tuesday 05:01:02. Factory start day is Monday, 2015 September 6th Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNameOfF(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            	<para>Calculates the week number difference among two input DateTime type dates. The week number difference is calculated based on the first day of the week of the input dates. </para>
            </summary>
            <param name="s0">The date in DateTime type. The base date to calculate week number.</param>
            <param name="now">The date in DateTime type. The target date to calcylate week number.</param>
            <param name="weeks">
            	<para>The week number to add to the result.</para>
            	<para>[TIP] Input 0 to only calculate the week number difference.</para>
            </param>
            <returns>
            	<para>Return the difference of week including the weeks value of the input DateTime type dates input through string type . The format "W00" is followed.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 5th, then result is W00.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, then result is W01.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, value of weeks is 1, then result is W02.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNameOfTF(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            	<para>Calculates the week number difference among two input DateTime type dates. The week number difference is calculated based on the first day of the week of the input dates. The week numbers are calculated by determining the dates based on Factory day boundary time.</para>
            </summary>
            <param name="s0">The date in DateTime type. The base date used to calculate week number.</param>
            <param name="now">The date in DateTime type. The target date used to calculate week number.</param>
            <param name="weeks">
            	<para>The week number to add to the result.</para>
            	<para>[TIP] Input 0 to only calculate the week number difference.</para>
            </param>
            <returns>
            	<para>Return the difference of week including the weeks value of the input DateTime type dates input through string type . The format "W00" is followed.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 5th, then result is W00.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, then result is W01.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, value of weeks is 1, then result is W02..</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearWF(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The last day of the week follows the Factory's last day of the week.(Mozart.SeePlan.ShopCalendar.EnbWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearWTF(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. 문자열은 The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearF(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearTF(System.DateTime)">
            <summary>
                <para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para> Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearW(System.DateTime,System.DayOfWeek)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearTW(System.DateTime,System.DayOfWeek)">
            <summary>
                <para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. 주의 마지막 요일은 요일입니다.</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearS(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The start day of the week is Monday.</para>
            </summary>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearS(System.DateTime,System.Func{System.DateTime,System.Int32})">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            </summary>
            <param name="weekOfYearFunc">The function to calculate week number from DateTime type date.</param>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If the year of input date is 2014, input week number is 1, 201401 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekNoOfYearS(System.DateTime,System.Int32)">
            <summary>
            	<para>Combines the year and week number of the input date and calculates week number in string type.</para>
            </summary>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <param name="week">Week number.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If the year of input date is 2014, input week number is 1, 201401 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekName(System.String,System.String)">
            <summary>
            	<para>Calculates the week number difference among two input dates.</para>
            </summary>
            <param name="w0">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekno">Week number data type is string type. The format should follow "yyyyWW".</param>
            <returns>
            	<para>The week number difference among the two input dates is returned as string type. The format "W00" is followed. If w0 is the week begind weekno or same week, the difference is calculated as 0. If length of weekno is longer than 6, remaining strings except the first 6 digits will be added to the strings behind week number difference.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, W07 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 201529, W00 is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518ABC, W07ABC is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekName(System.String,System.String,System.Func{System.DateTime,System.String})">
            <summary>
            	<para>Calculates the week number difference among two input dates.</para>
            </summary>
            <param name="w0">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekno">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekNoOfYearFunc">The function to calculate week number from DateType date.</param>
            <returns>
            	<para>The week number difference among the two input dates is returned as string type. The format "W00" is followed. If w0 is the week begind weekno or same week, the difference is calculated as 0. If length of weekno is longer than 6, remaining strings except the first 6 digits will be added to the strings behind week number difference.</para>
            	<para>If year of weekno is behind the year from w0, weekNoOfYearFunc is used to calculate the first day of the first week number of the year weekno belongs to.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, W07 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 201529, W00 is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518ABC, W07ABC is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DiffWeekNo(System.String,System.String)">
            <summary>Calculates the difference among two input week numbers.</summary>
            <param name="w0">
            	<para>Week number data type is string type. The format should follow "yyyyWW".</para>
            </param>
            <param name="w1">Week number data type is string type. The format should follow "yyyyWW".</param>
            <returns>
            	<para>The week number difference among two input dates is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, 7 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 2015129 -1 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            	<para>The result from Mozart.SeePlan.FactoryConfiguration,WeekOfYearFunc2 function.</para>
            	<para>Uses CultureInfo.InvariantCulture.</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            	<para>The result from Mozart.SeePlan.FactoryConfiguration,WeekOfYearFunc2 function.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="culture">The object containing the calendar and date information of other regions.</param>
            <returns>
            	<para>Return week number as integer type.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfWeek(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The first day of the week is Monday.</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to.. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 September 1st Tuesday 05:01:02, last day of the week is Sunday, 2015 September 6th Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.EndDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Calculates the last day of the week from the input date.</summary>
            <param name="date">Target date and time.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 September 1st Tuesday 05:01:02, last day of the week is Sunday, 2015 September 5th Saturday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</summary>
            <param name="date">Target date and time.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>The first day of the week where input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 March 4nd, Wednesday, 05:01:02, last day of the week is Sunday, 2015 March 2nd, Monday, 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.StartDayOfWeek(System.DateTime)">
            <summary>
            	<para>Calculates the first day of week where the input date belongs to. The first day of the week is Monday.</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The first day of the week where input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 March 4nd, Wednesday, 05:01:02, last day of the week is Sunday, 2015 March 2nd, Monday, 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.DiffWeek(System.DayOfWeek,System.Int32)">
            <summary>
            	<para>Calculates the number of former days from input day.</para>
            </summary>
            <param name="dow">Target day.</param>
            <param name="d">Number of days.</param>
            <returns>
            	<para>Returns the number of former days from the input day.</para>
            	<para>[EX] If input day is Monday and number of day is 1, Sunday is returned.</para>
            	<para>[EX] If target day is Thursday and number of days is 3, Monday is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetIso8601WeekOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The first day of the week is Monday. </para>
            </summary>
            <param name="date">Target date.</param>
            <remarks>
            	<para>If January 1st of the corresponding year is in between Monday~Thursday, January 1st is week 1.</para>
            	<para>If January 1st of the corresponding year is in between Friday~Sunday, The week of January 1st is the last week of the previous year.</para>
            </remarks>
            <returns>
            	<para>The week number of the input date. Week number starts from 1.</para>
            	<para>[EX] If input date is 2015 January 4th, 1 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 2 is returned.</para>
            	<para>[EX] If input date is 2013 December 31st, 1 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.DateUtility.GetIso8601WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>Calculates the week number from the input date. The first day of the week is Monday. </summary>
            <param name="time">Target date.</param>
            <param name="culture">The object containing the calendar and date information of other regions.</param>
            <remarks>
            	<para>If January 1st of the corresponding year is in between Monday~Thursday, January 1st is week 1 of the current year.</para>
            	<para>If January 1st of the corresponding year is in between Friday~Sunday, The week of January 1st is the last week of the previous year.</para>
            </remarks>
            <returns>
            	<para>The week number of the input date. Week number starts from 1.</para>
            	<para>[EX] If input date is 2015 January 4th, 1 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 2 is returned.</para>
            	<para>[EX] If input date is 2013 December 31st, 1 is returned.</para>
            </returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration">
            <summary>
            The storage class that stores default environmental variables of Factory used for Planning. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Name">
            <summary>
            Name of Configuration
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.DbDateTimeFormat">
            <summary>
            Configure string type and refer data of date + time to be stored in DB.
            </summary>
            <remarks>
            Property of DbDateTimeFormat of DateUtility calss,
            You can configure the string return type of DbToString function.
            The default value is in "yyyyMMdd HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.DbDateFormat">
            <summary>
            Configure string type and refer data of date to be stored in DB.
            </summary>
            <remarks>
            Property of DbDateTimeFormat of DateUtility calss,
            You can configure the string return type of DbToString function.
            The default value is in "yyyyMMdd HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.DbTimeFormat">
            <summary>
            Configure string type and refer data of time to be stored in DB.
            </summary>
            <remarks>
            Property of DbTimeFormat of DateUtility calss, 
            You can configure the string return type of DbToString function.
            The default value is in "HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.DateTimeFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to DateTime to string.  
            </summary>
            <remark>
            You can configure the string return type of DbDisplayString function of DateUtility calss.
            Default value is in "yyyy/MM/dd HH:mm:ss" format. 
            </remark>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.DateFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to Date Type to string. 
            </summary>
            <remark>
            You can configure the string return type of DbDisplayString function of DateUtility calss.
            Default value is in "yyyy/MM/dd" format. 
            </remark>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.TimeFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to time to string. 
            </summary>
            <remarks>
            Default value is in "HH:mm:ss" format. 
            </remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.IdentityNull">
            <summary>
            String to replace Null string from the system.
            Default value is  "-". 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.AnyString">
            <summary>
            The symbol for string to be used for searching and replacing strings. 
            Default value is  "%".
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.AnyChar">
            <summary>
            The symbol for string to be used for searching and replacing strings.
            Default value is  "_".
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.StartOffset">
            <summary>
            The time gap information between 00:00 and the Factory start time (of the day).
            The default value is 6 hours. When the factory operation hour starts at 06:00, set as StartOffset = 6hr. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.StartTime">
            <summary>
            The information of factory start time. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.EndTime">
            <summary>
            The information of factory end time.(of the day)
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.ShiftCount">
            <summary>
            The total shift counts. If there are three shifts the return value is 3. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.ShiftHours">
            <summary>
            The shift hours per shift of the factory.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Shifts">
            <summary>
            Returns information per shift of the factory. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.ShiftNames">
            <summary>
            Returns shift name array. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.WorkCalendar">
            <summary>
            Returns WorkCalender.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.StartWeek">
            <summary>
            Returns the start day of the week. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.EndWeek">
            <summary>
            Returns the last day of the week. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Holidays">
            <summary>
            Returns the day-offs(holidays). The format is Dictionart&lt;holiday date, holiday name%gt. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.WeekOfYearFunc">
            <summary>
            The function is to return the week information of the year with user input date. 
            </summary>
            <example>
            int week_no = FactoryConfiguration.Current.WeekOfYearFunc(DateTime.Now) 
            </example>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.WeekOfYearFunc2">
            <summary>
            The function is to return the week information of the year with user input date. 
            </summary>
            <example>
            int week_no = FactoryConfiguration.Current.WeekOfYearFunc2(DateTime.Now, Culture.InvarientCulture) 
            </example>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.TimeInfo">
            <summary>
            Configure the shift rotation and the start time of factory. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.AddHoliday(System.DateTime,System.String)">
            <summary>
            Add holidays of the factory.
            </summary>
            <param name="dt">Date of the holiday.</param>
            <param name="name">Name of the holiday. Default value is null.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.IsHoliday(System.DateTime)">
            <summary>
            Determine whether input date is holiday or not. 
            </summary>
            <param name="dt">Target date</param>
            <returns>If input date is holiday, return<strong>true</strong>, if not, return<strong>false</strong></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.RemoveHoliday(System.DateTime)">
            <summary>
            Delete holiday information. 
            </summary>
            <param name="dt">Target date</param>
            <returns>If holiday is deleted, return <strong>true</strong>, if not, return <strong>false</strong></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.GetWorkCalendar">
            <summary xml:lang="ko-kr">
            하루 중 마지막 Shift 기준의 작업 시간 관리 개체를 반환합니다.
            </summary>
            <returns>하루 중 마지막 Shift 기준의 작업 시간 관리 개체입니다.</returns>
            <summary>
            Returns the work time management object(WorkCalendar) for the last shift of the day.
            </summary>
            <returns>Returns the work time management object(WorkCalendar) for the last shift of the day.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.GetWorkCalendar(System.Int32)">
            <summary xml:lang="ko-kr">
                <para>주어진 Shift 기준의 작업 시간 관리 개체를 반환합니다.</para>
            </summary>
            <param name="shiftType">대상 Shift입니다. 하루 중 첫 번째 Shift에 대한 값은 1입니다.</param>
            <returns>
                <para>주어진 Shift 기준의 작업 시간 관리 개체입니다.</para>
                <para>주어진 Shift 값이 0보다 작거나 전체 Shift의 수보다 큰 경우 null을 반환합니다.</para>
            </returns>
            <summary>
                <para>Returns the work time management object(WorkCalendar) for the specified shift of the day.</para>
            </summary>
            <param name="shiftType">The integer value of the specified shift. The first shift of the day is 1.</param>
            <returns>
                <para>Returns the work time management object(WorkCalendar) for the specified shift of the day.</para>
                <para>Null is returned if specified shift <em>shiftType</em> is less than 0 or greater than the entire shift number.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.SetWorkCalendar(System.Int32,Mozart.Studio.TaskModel.UserLibrary.WorkCalendar)">
            <summary>
            Returns WorkCalender of designated shift. 
            </summary>
            <param name="shiftType">Target shift variable</param>
            <param name="workCalendar">Target shift's WorkCalender </param>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Default">
            <summary>
            This is the default FactoryConfiguration information. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Current">
            <summary xml:lang="ko-kr">
                <para>현 시뮬레이션 대상 공장 구성 정보를 가져오거나 설정합니다.</para>
                <para>구성 정보가 설정되지 않은 경우 기본 공장 구성 정보를 반환합니다.</para>
            </summary>
            <summary>
                <para>Gets or sets the specified factory configuration information for simulation.</para>
                <para>If no factory information is configured, default factory information is returned.</para>
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.GetOrAdd(System.String)">
            <summary>
            Returns the Factory Configuration input name. 
            If there is no name matching with the input name value, 
            FactoryConfiguration same as the name in Current will be generated. 
            </summary>
            <param name="name">Target FactoryConfiguration name to be searched</param>
            <returns>FactoryConfiguration object.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Get(System.String)">
            <summary>
            Returns the Factory Configuration input name 
            </summary>
            <param name="name">Target FactoryConfiguration name to be searched</param>
            <returns>FactoryConfiguration object. If there is no matching results, return Default.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.SetCurrent(System.String)">
            <summary>
            Configure the current FactoryConfiguration. 
            </summary>
            <param name="name">New name for FactoryConfiguration.</param>
            <returns>Returns the FactoryConfiguration with new name.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.ConfigSetter.#ctor(System.String)">
            <summary>
            Constructor of the current ConfigSetter class. 
            </summary>
            <param name="name">New name for ConfigSetter. </param>
            <remarks>Saves the previous name to old and changes the name input through FactoryConfiguration.</remarks>
            <returns></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.ConfigSetter.Dispose">
            <summary>
            Defines the handler to be called at the end of ConfigSetter class.
            </summary>
            <remarks>Recovers the saved previous name.</remarks>
            <returns></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryConfiguration.Check(Mozart.Studio.TaskModel.Projects.IModelProject,System.Func{Mozart.Studio.TaskModel.Projects.IModelProject,Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo})">
            <summary>
            Sets the factory configuration information according to the information in the specified model or according to the logics defined in the delegate.  
            </summary>
            <param name="project">The model to get the factory configuraion information.</param>
            <param name="func">The delegate representing the method to get factory information from the specified model.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo">
            <summary>
            This is the shift information class of the factory.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.Default">
            <summary>
            Default shift information. If other Factory Time information is used for dates and holidays, 
            this determines whether the dates are the default shift information. 
            </summary>
            <remarks>Default value is fales</remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.Name">
            <summary>
            Name of the shift information.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.StartOffset">
            <summary>
            Configure and refer the time gap between 00:00 and factory start time(refers the date change of the start time). 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.ShiftNames">
            <summary>
            Configure and refer the shift name array.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.ShiftHours">
            <summary>
            Configure and refer each shift time schedule. 
            </summary>
            <remarks>Default time is 00:00</remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.StartOfWeek">
            <summary>
            Configure and refer the start day of the week. 
            </summary>
            <remarks>Default value is "Monday"</remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.FactoryTimeInfo.#ctor">
            <summary xml:lang="ko-kr">
                <para>공장 시간 설정 정보를 생성합니다.</para>
                <para>일 공장 시작 시간의 기본값은 오전 6시 정각입니다.</para>
                <para>주 공장 시작일의 기본값은 월요일입니다.</para>
                <para>한 Shift 기간은 0 시간입니다.</para>
            </summary>
            <summary>
                <para>Initializes a new instance of the <em>FactoryTimeInfo</em> class.</para>
                <para>The default value of the factory time is 06:00AM.</para>
                <para>The default value of first day of the factory week is Monday.</para>
                <para>The default value of the shift hour is 0 hour.</para>
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.LogExtensions">
            <summary>
            Helper class used for writing logs. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.LogExtensions.WriteTable(Mozart.Logging.ILog,System.String,System.Data.DataTable)">
            <summary>
            Write data from DataTable to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="dt">DataTable type DataTable class.</param>
            <remarks>DataRow is classifed by Tab.</remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.LogExtensions.WriteTable(Mozart.Logging.ILog,System.String,System.Data.DataTable,System.String)">
            <summary>
            Write data from DataTable to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="dt">DataTable type DataTable class.</param>
            <param name="separator">Seperator among string type DataRow</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.LogExtensions.WriteSet(Mozart.Logging.ILog,System.String,System.Data.DataSet)">
            <summary>
            Write data from DataSet to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="ds">DataSet type ds variable.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.LogExtensions.WriteSet(Mozart.Logging.ILog,System.String,System.Data.DataSet,System.String)">
            <summary>
            Write data from DataSet to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="ds">DataSet type ds variable.</param>
            <param name="separator">Seperator among string type DataSet</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.ShiftInfo">
            <summary>
            Factory's shift rotation information class. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShiftInfo.Name">
            <summary>
            Name of Shift.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShiftInfo.Time">
            <summary>
            Shift time.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShiftInfo.OrderedTime">
            <summary>
            Shift start time. 
            </summary>
            <remarks>
            If the first shift starts at 06:00, shift hours are 8 hours and is 3 rotations, the shift times are - 1st shift: 06:00, 2nd shift: 14:00, 3rd shift: 22:00.  
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShiftInfo.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            ShiftInfo constructor. 
            </summary>
            <param name="name">string type shift name</param>
            <param name="ts">TimeSpan type shift time</param>
            <param name="ats">TimeSpan type ats variable</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar">
            <summary>
            This shows the summary of ShopCalender. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.IsMinusStartOffset">
            <summary>
            Checks if the time gap among factory start time of the day and 00:00 is negative numeral. 
            </summary>
            <remarks>
            If the result is negative, the start time of the factory is the entire day.
            [EX] If StartOffSet = 2시간, IsMinusStartOffset = true, The factory start time of 2015/05/28 is 2015/05/27 02:00. 
            </remarks>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartTime">
            <summary>
            Factory's start time of the day. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.EndTime">
            <summary>
            Factory's end time of the day. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ShiftCount">
            <summary>
            The total shift counts of the day.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ShiftHours">
            <summary>
            Shift hours per shift.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.Shifts">
            <summary>
            Shift information.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ShiftNames">
            <summary>
            Shift name
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartWeek">
            <summary>
            Start day of the week.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.EndWeek">
            <summary>
            Last day of the week.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.IsHolidayT(System.DateTime)">
            <summary>
            Distinguishes the input date and the factory start time of the day 
            Returns whether the input date is holiday or not. 
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <remarks>
            [EX] Registered holiday is 2015/03/01 and factory start time is 06:00,
            If dt is 2015/03/01 06:00:00, it is confirmed as 2015/03/01 so the return value is true. 
            If dt is 2015/03/01 02:00:00, it is confirmed as 2015/02/28 so the return value is false. 
            </remarks>
            <returns>If input time is holiday, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.IsHolidayTEnd(System.DateTime)">
            <summary>
            Distinguishes the input date and the factory end time of the day 
            Returns whether the input date is holiday or not. 
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <returns>If input time is holiday, return true, or else, return false.</returns>
            <remarks>
            [EX] Registered holiday is 2015/03/01 and factory start time is 06:00,
            If dt is 2015/03/01 06:00:00, it is confirmed as 2015/02/28 so the return value is false. 
            If dt is 2015/03/01 07:00:00, it is confirmed as 2015/03/01 so the return value is true. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.IsHoliday(System.DateTime)">
            <summary>
            Returns whether the input date is holiday or not. 
            This does not distinguish the input date with the factory operation date. Only the input date is used for handling.  
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <returns>If input time is holiday, return true, or else, return false.</returns>        
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.AddHoliday(System.DateTime,System.String)">
            <summary>
            Add holiday information to target date.
            </summary>
            <param name="dt">The variable of the DateTime type target date to add information.</param>
            <param name="name">String type holiday name.</param>
            <remarks>
            Only Date information is valid for target date. 
            The default value of holiday name is null.
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.RemoveHoliday(System.DateTime)">
            <summary>
            Deletes a sepcific holiday information. 
            </summary>
            <param name="dt">The variable of the DateTime type target date to delete information.</param>
            <remarks>
            Only Date information is valid for target date.
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ClassifyShift(System.DateTime)">
            <summary>
            Returns index for the corresponding shift. 
            </summary>
            <param name="dt">DateTime type variable.</param>
            <remarks>
            The beginning of the shift index is 1. 
            If dt is within the boudary time of the shift, the shift index is returned referring to the Start time. 
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            yyyyMMDD 06:00 ==> Shift index:1,
            yyyyMMDD 08:00 ==> Shift index:1,
            yyyyMMDD 014:00 ==> Shift index:2
            </remarks>
            <returns>Shift index 입니다.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ClassifyShiftEnd(System.DateTime)">
            <summary>
            Returns the shift index of the target dt. 
            </summary>
            <param name="dt">DateTime type variable.</param>
            <remarks>
            The beginning of the shift index is 1. 
            If dt is within the boudary time of the shift, the shift index is returned referring to the End time.
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            yyyyMMDD 06:00 ==> Shift index:3,
            yyyyMMDD 08:00 ==> Shift index:1,
            yyyyMMDD 14:00 ==> Shift index:1
            </remarks>
            <returns>Shift index 입니다.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.GetShiftStartTime(System.DateTime,System.Int32)">
            <summary>
            Returns the shift start time of the shift index and target date. 
            </summary>
            <param name="dt">The variable of DateTime type target date.</param>
            <param name="shiftNo">Integer type target shiftNo variable.</param>
            <remarks>
            Only Date information is valid for target date.
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            input dt = 2015.05.20 01:00:00, shiftNo = 1 ==> , 2015.05.20 06:00:00
            </remarks>
            <returns>Returns shift start date + time. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ShiftStartTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the input time from the factory start time, 
            search and return shift time through the input time information.
            </summary>
            <param name="dt">The variable of DateTime type target date and time.</param>
            <remarks>
            If dt is within the boundary time of shift/factory time , distinguish dt from the shift time and factory start time.  
            [EX]
            If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            2015/05/22 05:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00
            2015/05/22 07:00:00 ==> 2015/05/22 06:00:00
            </remarks>
            <returns>Return shift start time+date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ShiftStartTimeOfDayTEnd(System.DateTime)">
            <summary>
            Distinguish the input time from the factory end time, 
            search and return shift time through the input time information.
            </summary>
            <param name="dt">The variable of DateTime type target date and time.</param>
            <returns>Integer  Integer type shift start datetime and time variable dt..</returns>
            <remarks>
            If dt is within the boundary time of shift/factory time , distinguish dt from the shift time and factory end time.
            [EX]
            If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3,
            2015/05/22 05:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 06:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 07:00:00 ==> 2015/05/22 06:00:00   
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ConvertToShiftNo(System.String)">
            <summary>
            Convert and return Shift Name to Shift index.
            </summary>
            <param name="shiftName">String type target shiftNo variable.</param>
            <returns>If there is no matching Shift result, return 0. 
            Or else, return the index which the first shift starts with index number 1. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.ConverToShiftName(System.Int32)">
            <summary>
            Convert and return Shift index to Shift name. 
            </summary>
            <param name="shiftNo">Integer type shiftNo variable</param>
            <remarks>
            The beginning of shift index is 1.
            </remarks>
            <returns>If there is no matching Shift Name from Shift No, Shift Name, return null.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return target date and factory start time.
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time. 
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/21 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/22 06:00:00 
            </remarks>
            <returns>Return the factory start time of the target date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.EndTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return target date and factory start time.
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time. 
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00    
            </remarks>
            <returns>Return the factory end time of the target date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartTimeOfNextDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return next date and factory start time of the next date.
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time.
            [EX]If factory start time is 06:00:00, 
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00 
            </remarks>
            <returns>Return the next day and the factory start time of the next day. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartTimeOfDay(System.DateTime)">
            <summary>
            Return the factory start time of the target date.
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time. 
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/22 06:00:00 
            </remarks>
            <returns>Return the factory start time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.EndTimeOfDay(System.DateTime)">
            <summary>
            Return the factory end time of the target date.
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time.
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00 
            </remarks>
            <returns>Return the factory end time of the target date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.StartTimeOfNextDay(System.DateTime)">
            <summary>
            Return the factory start time of the next day of input date. 
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time.
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            </remarks>
            <returns>Return the factory start time of the next day of the target date.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.SplitDate(System.DateTime)">
            <summary>
            Distinguish the date from the input time referring the factory start time. 
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            [EX]If dt is within the boundary of factory start time, return the date of factory start time.  
            If 06:00:00 is the factory start time, 3/21 is returned when dt is 3/21 06:00:00
            </remarks>
            <returns>Returns the distinguished date data.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.SplitDateEnd(System.DateTime)">
            <summary>
            Distinguish the date from the input time referring the factory end time.
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            [EX]If 06:00:00 is the factory start time, and dt is 3/21 06:00:00, 3/20 is returned. 
            </remarks>
            <returns>Returns the distinguished date data.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.SplitDateTime(System.DateTime,System.DateTime@,System.TimeSpan@)">
            <summary>
            Seperate time and date of the factory start time. 
            </summary>
            <param name="dt">The variable of DateTime type target time</param>
            <param name="date">The variable of DateTime type target date.</param>
            <param name="time">The TimeSpan type divided time variable.</param>
            <remarks>
            The target time is seperated as time and date. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.SplitDateTimeEnd(System.DateTime,System.DateTime@,System.TimeSpan@)">
            <summary>
            Seperate time and date of the factory end time. 
            </summary>
            <param name="dt">The variable of DateTime type target time</param>
            <param name="date">The variable of DateTime type target date.</param>
            <param name="time">The TimeSpan type divided time variable.</param>
            <remarks>
            The target time is seperated as time and date. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.SplitTime(System.DateTime)">
            <summary>
            Seperate input time as time and date and return through TimeSpan
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            If dt is smaller than factory start date, add 1. 
            [EX]If factory start time is 06:00:00, 
            2015/05/22 05:00:00 ==> 1.05:00:00,
            2015/05/22 06:00:00 ==> 0.06:00:00
            </remarks>
            <returns>Return the time informatio of the input time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.AdjustSectionTime(System.TimeSpan)">
            <summary>
            Return the the adjusted SectionTime according to factory start time.
            </summary>
            <param name="time">TimeSpan type input variable.</param>
            <remarks>
            If input time is smaller than factory start time, add 1. 
            </remarks>
            <returns>Returns the adjusted TimeSpan information.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.AdjustSectionDateTime(System.DateTime)">
            <summary>
            Return the the adjusted SectionTime according to factory start time.
            </summary>
            <param name="dt">The input variable of DateTime type time.</param>
            <remarks>
            If input time is smaller than factory start time, add 1 and return 
            However, in case of MinusStartOffset, subtract 1 and return.
            </remarks>
            <returns>Returns the adjusted TimeSpan information.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ShopCalendar.GetWorkCalendar(System.Int32)">
            <summary>
            Return WorkCalender of target shift. 
            </summary>
            <param name="shift">Target shift information variable. </param>
            <remarks>
            Return the WorkCalender configured in FactoryConfiguration. 
            </remarks>
            <returns>Returns the Workcalendar type class</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions">
            <summary>
            This is StringBuilderExtension class providing extension to combine strings to a particular format. 
            </summary>
            <remarks>
            Provides the following extension functions.  
            1. Features string type entity of modifiable charcters with sequence value. 
            2. Able to add, delete, change, insert logs and modify them.
            3. Helpful to use for making a single sentence by connecting consecutive strings in sequence. 
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.StringDoubleLine80" -->
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.StringSingleLine80">
            <summary xml:lang="ko-kr">
            한 줄을 구분하기 위해 길이 80인 '-' 문자열 변수 입니다.
            </summary>
            <summary>
            A string varibale to express single line string('-'). This will express 80 characters for '-'.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.AppendDoubleLine(System.Text.StringBuilder)">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 두 줄 라인 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 변수 buffer 입니다.</param>
            <summary>
            Affix double line to the target string buffer. 
            </summary>
            <param name="buffer">StringBuilder type string variable.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.AppendSingleLine(System.Text.StringBuilder)">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 한 줄 라인 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 변수 buffer 입니다.</param>
            <summary>
            Affix single line to the target string buffer.
            </summary>
            <param name="buffer">StringBuilder type string variable.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 대상 format 형식으로 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">대상 문자열 buffer 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">대상 객체 args 변수 입니다.</param>
            <remarks>
            대상 format형식으로 문자열이 조합됩니다.
            대상 format으로 문자열을 덧붙인후, 한줄 띄워쓰기가 적용됩니다.
            </remarks>
            <summary>
            Affix string type format to the target string buffer.
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Target object args variable.</param>
            <remarks>
            Strings are combined as target format. 
            After combining strings to the target format, new line is applied. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.InsertLine(System.Text.StringBuilder,System.Int32,System.String)">
            <summary xml:lang="ko-kr">
            대상 index 위치의 다음 줄에 대상 text를 이어붙입니다.
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="text">이어붙일 문자열 변수 text 입니다.</param>
            <summary>
            Insert target text to to the next line of target index. 
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">Variable to designate location to insert.</param>
            <param name="text">Target text variable to insert.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.InsertLine(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 index 위치의 다음 줄에 대상 format 형식으로 문자열을 이어붙입니다.
            </summary>
            <param name="buffer">대상 문자열 buffer 변수 입니다.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">대상 객체 args 변수 입니다.</param>
            <remarks>
            한줄 띄어쓰기후에, 대상 format형식으로 문자열 buffer에 이어붙입니다.
            </remarks>
            <summary>
            Insert string as target format to the next line of target index. 
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">Index variable to designate location to insert.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Target object args variable.</param>
            <remarks>
            Insert string to buffer as target format after new line. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringBuilderExtensions.InsertFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 index 위치이후에 대상 format 형식으로 문자열을 이어붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 buffer 변수 입니다.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">객체 배열 형식의 대상 args 변수 입니다.</param>
            <remarks>
            대상 format형식으로 문자열 buffer의 index 위치에 이어붙입니다.
            </remarks>
            <summary>
            Insert string as target format next to the target index. 
            </summary>
            <param name="buffer">Target StringBuilder type string buffer variable.</param>
            <param name="index">Index variable to designate location to insert.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Object array type target args variable.</param>
            <remarks>
            Insert string to the designated index location as target format. 
            </remarks>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.StringUtility">
            <summary xml:lang="ko-kr">
            Seeplan의 문자열 데이터의 압축과 압축을 풀기위한 활용함수 집합 클래스입니다.
            </summary>
            <summary>
            Utility set class to compress/decompress SeePlan string data.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.StringUtility.IdentityNull">
            <summary xml:lang="ko-kr">
            Null Value 문자열입니다.
            </summary>
            <summary>
            Null Value string.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.IsEmptyID(System.String)">
            <summary xml:lang="ko-kr">
            입력된 문자열이 null 이거나 IdentityNull 과 같은지 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="text">판별대상 문자열입니다.</param>
            <returns xml:lang="ko-kr">공백문자열인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>를 반환합니다.</returns>
            <summary>
            Determine whether input string is null or equal to IdentityNull.
            </summary>
            <param name="text">Target string to distinguish.</param>
            <returns>If it is an empty string, return <strong>true</strong>, if not, return <strong>false</strong></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Pack(System.String)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <returns xml:lang="ko-kr">압축된 문자열을 반환합니다.</returns>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <returns>Return compressed string.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Pack(System.String,System.IO.Stream)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <param xml:lang="ko-kr" name="outputStream">압축된 문자열을 저장하는 Stream입니다.</param>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <param name="outputStream">Stream that saves compressed string.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Pack(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <param xml:lang="ko-kr" name="outputStream">압축된 문자열을 저장하는 Stream입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.</param>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <param name="outputStream">Stream that saves compressed string.</param>
            <param name="encoding">Encoding property</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Unpack(System.String)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축된 문자열입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="data">Compressed string.</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Unpack(System.IO.Stream)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="inputStream">Stream of compressed string.</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Unpack(System.IO.Stream,System.Text.Encoding)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.y</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="inputStream">Stream of compressed string.</param>
            <param name="encoding">Encoding property</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.StringUtility.Unpack(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.</param>
            <param xml:lang="ko-kr" name="bufferSize">버퍼 사이즈입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">Stream of compressed string.</param>
            <param xml:lang="ko-kr" name="encoding">Encoding property</param>
            <param xml:lang="ko-kr" name="bufferSize">Buffer size</param>
            <returns xml:lang="ko-kr">Return decompressed string.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.TimeSpanExtensions">
            <summary xml:lang="ko-kr">
            TimeSpan 데이터에 대한 확장 클래스입니다.
            </summary>
            <summary>
            Extended class for TimeSpan data.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeSpanExtensions.Divide(System.TimeSpan,System.Double)">
            <summary xml:lang="ko-kr">
            시간구간 데이터를 특정 값으로 나눕니다.
            </summary>
            <param name="ts">분할대상 시간구간 데이터입니다.</param>
            <param name="scalar">시간구간을 나누는 값입니다.</param>
            <returns>분할된 시간구간 데이터를 반환합니다.</returns>
            <summary>
            Divide time section data with specific value.
            </summary>
            <param name="ts">Target time section to seperate.</param>
            <param name="scalar">Value to divide time section.</param>
            <returns>Return divided time section.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.Tools">
            <summary xml:lang="ko-kr">
            Object간의 Compare 클래스입니다.
            </summary>
            <summary>
            Class to compare objects.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.Tools.ObjEquals(System.Object,System.Object)">
            <summary xml:lang="ko-kr">
            두 Object간의 Equals 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="x">비교할 대상 x 객체 입니다.</param>
            <param xml:lang="ko-kr" name="y">비교할 대상 y 객체 입니다.</param>
            <returns xml:lang="ko-kr">Equals 여부를 반환합니다.</returns>
            <summary>
            Check for equals among two objects.
            </summary>
            <param name="x">Target object x for comparison</param>
            <param name="y">Target object y for comparison</param>
            <returns>Return whether two objects are equal or not.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.Tools.ObjCompare(System.Object,System.Object)">
            <summary xml:lang="ko-kr">
            두 Object간의 비교 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="x">비교할 대상 x 객체 입니다.</param>
            <param xml:lang="ko-kr" name="y">비교할 대상 y 객체 입니다.</param>
            <remarks>
            비교한 결과를 1, 0, -1중에 하나의 값을 반환합니다.
            </remarks>
            <returns xml:lang="ko-kr">비교한 결과를 반환합니다.</returns>
            <summary>
            Determine whether to compare two objects.
            </summary>
            <param name="x">Target object x for comparison</param>
            <param name="y">Target object y for comparison</param>
            <remarks>
            Returns one of the following values: 1, 0, -1
            </remarks>
            <returns>Return comparison result.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.TimeUnit">
            <summary>
            Defines units of time. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Century">
            <summary>
            100 year
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Decade">
            <summary>
            10 year
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Year">
            <summary>
            1 year
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.HalfYear">
            <summary>
            6 month
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Quarter">
            <summary>
            3 month
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Month">
            <summary>
            1 month
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Week">
            <summary>
            week
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Day">
            <summary>
            day
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.HalfDay">
            <summary>
            12 hours
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Hour">
            <summary>
            hour
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Minute">
            <summary>
            miniute
            </summary> 
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Second">
            <summary>
            second
            </summary> 
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.Millisecond">
            <summary>
            millisecond
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUnit.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.TimeUtility">
            <summary xml:lang="ko-kr">
            시간 형식 데이터에 대한 활용함수 클래스입니다.
            </summary>
            <summary>
            The data class of time type data function. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.MillisPerDay">
            <summary xml:lang="ko-kr">
            하루의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Day converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.MillisPerHour">
            <summary xml:lang="ko-kr">
            한 시간의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Hour converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.MillisPerMinute">
            <summary xml:lang="ko-kr">
            1분의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Minute converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.MillisPerSecond">
            <summary xml:lang="ko-kr">
            1초의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Second converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TicksPerDay">
            <summary xml:lang="ko-kr">
            하루의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Day converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TicksPerHour">
            <summary xml:lang="ko-kr">
            한시간의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Hour converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TicksPerMinute">
            <summary xml:lang="ko-kr">
            1분의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Minute converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TicksPerSecond">
            <summary xml:lang="ko-kr">
            1초의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Second converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TicksPerMillisecond">
            <summary xml:lang="ko-kr">
            천분의 1초를 천만분의 1초로 환산한 값입니다.
            </summary>
            <summary>
            Microsecond converted to 10 microseconds.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.AddTime(System.DateTime,System.Int64)">
            <summary xml:lang="ko-kr">
            입력된 시간에 천만분의 1초 단위의 시간을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time" >대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="ticks">더해지는 시간입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add 10 microsecond time unit to input time.
            </summary>
            <param name="time">Target time.</param>
            <param name="ticks">Time to be added</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.AddTime(System.DateTime,Mozart.Studio.TaskModel.UserLibrary.TimeUnit,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 설정된 단위의 시간을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">시간 단위입니다.</param>
            <param xml:lang="ko-kr" name="count">더해지는 시간입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add configured time unit to input time..
            </summary>
            <param name="time">Target time.</param>
            <param name="unit">Time unit.</param>
            <param name="count">Time to be added.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.AddTime(System.DateTime,System.TimeSpan,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 시간간격을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unitDuration">더해지는 시간간격입니다.</param>
            <param xml:lang="ko-kr" name="count">unitDuration 의 배율입니다.
            양수인경우 대상시간에 unitDuration*배율의 시간을 더합니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add time interval to input time. 
            </summary>
            <param name="time">Target time.</param>
            <param name="unitDuration">Time interval to be added.</param>
            <param name="count">Scale factor of unitDuration.
            If it is positive number add unitDuration*scale factor to target time.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.AddTime(System.DateTime,System.Globalization.Calendar,Mozart.Studio.TaskModel.UserLibrary.TimeUnit,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 시간간격을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="calendar">Calender 타입의 Base 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">시간단위입니다.</param>
            <param xml:lang="ko-kr" name="count">더하는 값입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add time interval to input time.
            </summary>
            <param name="time">Target time.</param>
            <param name="calendar">Base time of Calender type.</param>
            <param name="unit">Time unit.</param>
            <param name="count">Value to be added.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.GetTicksPerUnit(Mozart.Studio.TaskModel.UserLibrary.TimeUnit)">
            <summary xml:lang="ko-kr">
            시간단위를 천만분의 1초 기준의 단위로 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="unit">시간단위 유형입니다.</param>
            <returns xml:lang="ko-kr">천만분의 1초 단위 환산시간을 반환합니다.</returns>
            <summary>
            Return time unit to 10 microseconds. 
            </summary>
            <param name="unit">Type of time unit.</param>
            <returns>Return time converted to 10 microseconds.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.GetTimeUnit(System.Int64)">
            <summary xml:lang="ko-kr">
            입력된 천만분의 1단위 시간을 TimeUnit 유형으로 반환합니다. 
            </summary>
            <param xml:lang="ko-kr" name="ticks">입력된 시간입니다.</param>
            <returns xml:lang="ko-kr">결과 시간 단위를 반환합니다.</returns>
            <summary>
            Return input 10 microseconds unit to TimeUnit type
            </summary>
            <param name="ticks">Input time</param>
            <returns>Return time unit result</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.GetTimeUnit(System.TimeSpan)">
            <summary xml:lang="ko-kr">
            입력된 시간간격에 대한 TimeUnit 을 반환합니다. 
            </summary>
            <param xml:lang="ko-kr" name="duration">입력된 시간간격입니다.</param>
            <returns xml:lang="ko-kr">결과 시간 단위를 반환합니다.</returns>
            <summary>
            Return TimeUnit of the input time interval.
            </summary>
            <param name="duration">Input time interval</param>
            <returns>Return time unit result.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.Max(System.DateTime,System.DateTime)">
            <summary xml:lang="ko-kr">
            입력된 시간중 더 큰값을 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="t1">비교대상 시간 1입니다. </param>
            <param xml:lang="ko-kr" name="t2">비교대상 시간 2입니다.</param>
            <returns xml:lang="ko-kr">두값중 더 큰값을 반환합니다.</returns>
            <summary>
            Compare two input time and return larger value.
            </summary>
            <param name="t1">Target time 1 for comparison.</param>
            <param name="t2">Target time 2 for comparison.</param>
            <returns>Return larger value.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.Min(System.DateTime,System.DateTime)">
            <summary xml:lang="ko-kr">
            입력된 시간중 더 작은값을 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="t1">비교대상 시간 1입니다. </param>
            <param xml:lang="ko-kr" name="t2">비교대상 시간 2입니다.</param>
            <returns xml:lang="ko-kr">두 값중 더 작은값을 반환합니다.</returns>
            <summary>
            Compare two input time and return smaller value. 
            </summary>
            <param name="t1">Target time 1 for comparison.</param>
            <param name="t2">Target time 2 for comparison.</param>
            <returns>Return smaller value.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TrimTime(System.DateTime,System.DateTime,System.Int64)">
            <summary xml:lang="ko-kr">
            reference시각을 duration간격으로 대상 시간까지 더합니다. 
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 반환합니다.</returns>
            <summary>
            Add duration interval to reference time until target time. 
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="duration"></param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time. 
            </remarks>
            <returns>Return time value result.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TrimTime(System.DateTime,System.DateTime,System.TimeSpan,System.Int32)">
            <summary xml:lang="ko-kr">
            reference시각을 unitDuration * steps간격으로 대상 시간까지 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unitDuration">tick단위로 더해지는 시간입니다.</param>
            /// <param name="steps">더해지는 steps 수 입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 반환합니다.</returns>
            <summary>
            Add unitDuration*steps interval to reference time until target time. 
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="unitDuration">Time added in tick unit.</param>
            <param name="steps">Number of steps count to be added.</param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time.
            </remarks>
            <returns>Return time value result.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.TimeUtility.TrimTime(System.DateTime,System.DateTime,Mozart.Studio.TaskModel.UserLibrary.TimeUnit,System.Int32,System.Globalization.DateTimeFormatInfo)">
            <summary xml:lang="ko-kr">
            reference시각을 unitDuration * steps간격으로 대상 시간까지 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">tick단위로 더해지는 시간입니다.</param>
            <param xml:lang="ko-kr" name="steps">더해지는 steps 수 입니다.</param>
            <param xml:lang="ko-kr" name="dateFormat">반환하는 결과 시간 포맷입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 dateFormat 형식으로 반환합니다.</returns>
            <summary>
            Add unitDuration*steps interval to reference time until target time.
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="unit">Time added in tick unit.</param>
            <param name="steps">Number of steps count to be added.</param>
            <param name="dateFormat">Format of the returned time.</param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time.
            </remarks>
            <returns>Return time value result as dateFormat type.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.#ctor(System.String,System.Int32,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:DelegatedPropertyDescriptor"/> class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="index">The zero-based index.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="componentType">Type of the component.</param>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.</returns>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the property.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandablePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandableTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"/>.</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandableTypeDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:DesignTimeTypeDescriptor"/> class.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandableTypeDescriptor.GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ExpandableTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.Extensions.GetCtx``1(Mozart.Studio.Documents.Document)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.Extensions.GetCtx``1(Mozart.Studio.TaskModel.Projects.IExperimentResultItem)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.PackedIndexAttribute">
            <summary>
            Defines the metadata attribute to identify the property of the decompressed/split substring should be stored. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.PackedIndexAttribute.Index">
            <summary>
            The zero-based number to specify the property of the decompressed/split substring is located. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedIndexAttribute.#ctor">
            <summary>
            Initializes a new instance of the <em>PackedIndexAttribute</em> class.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedIndexAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <em>PackedIndexAttribute</em> class with the specifed index of this instance. 
            </summary>
            <param name="index">The zeron-based interger to specifiy the location of this instance.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper">
            <summary>
            The helper class to access to <em>DevExpress.XtraCharts</em> control to visualize data as bars, areas, lines and other shapes.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.CreatSeries(DevExpress.XtraCharts.ChartControl,System.String[],System.String,DevExpress.XtraCharts.ViewType,System.Boolean)">
            <summary>
            Creates a collections of series at runtime with the collection of series point values, series point argument and view type
            </summary>
            <param name="chartControl">The control to access to all collections of series.</param>
            <param name="valueMembers">The collection of the names of the data fields that contain series point values.</param>
            <param name="argumnntMember">The name of the data field that contains series point arguments.</param>
            <param name="type">The visual type of the chart.(Bar, Area, Pie, Point and Lines, etc) </param>
            <param name="isLableVisible">Indicates a value whether to display labels for the created collection of series.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.CreatSeries(DevExpress.XtraCharts.ChartControl,System.String,System.String,System.Int32,DevExpress.XtraCharts.ViewType,System.Boolean)">
            <summary>
            Creates an individual series with the specified series point value, serieis point argument, and series index. 
            </summary>
            <param name="chartControl">The control to access to all collections of series.</param>
            <param name="valueMember">The name of the data field that contains the series point value.</param>
            <param name="argumnntMember">The name of the data field that contains the series point argument.</param>
            <param name="seriesIndex">The zero-based index of this series.</param>
            <param name="type">The visual type of the chart.(Bar, Area, Pie, Point and Lines, etc)</param>
            <param name="isLableVisible">Indicates a value whether to display labels for the created series.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.SetNumeric(DevExpress.XtraCharts.ChartControl,DevExpress.XtraCharts.NumericFormat,System.Int32)">
            <summary>
            Sets the format applied to numeric values. 
            </summary>
            <param name="chartControl">The control to access to all collections of series.</param>
            <param name="format">The enumration specifying the values to specify the formatting applied to numeric values.</param>
            <param name="precision"></param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.SetLineMarker(DevExpress.XtraCharts.ChartControl,System.Int32)">
            <summary>
            Sets the size of the data point markers displayed by the series of the line view type.
            </summary>
            <param name="chartControl">The control to access to all collections of series.</param>
            <param name="markerSize">The integer value which specifies the size of the marker.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.SetLineMarker(DevExpress.XtraCharts.ChartControl,System.Int32,System.Int32)">
            <summary>
            Sets the size of the data point markers displayed by the series in the specified index of the line view type.
            </summary>
            <param name="chartControl">The control to access to all collections of series.</param>
            <param name="seriesIndex">The index of the series to change the marker size.</param>
            <param name="markerSize">The integer value which specifies the size of the marker.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.SetVisibleMarker(DevExpress.XtraCharts.ChartControl,System.Boolean)">
            <summary>
            Sets the visibility of the series point markers.
            </summary>
            <param name="chart">The control to access to all collections of series.</param>
            <param name="visible">The value to indicate whether the series point markers to be visible.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraChartHelper.SetThickness(DevExpress.XtraCharts.ChartControl,System.Int32)">
            <summary>
            Sets the thickness of the line.
            </summary>
            <param name="chart">The control to access to all collections of series.</param>
            <param name="thickness">The integer value wich specifies the thickness of the line.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.EqpState">
            <summary>
            Specifies the equipment state
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.PM">
            <summary>
            The equipment is hoalding a preventive maintenance. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.SETUP">
            <summary>
            Setup is performed to the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.BUSY">
            <summary>
            The equipment is currently processing an entity(wafer,lot,batch). 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.IDLE">
            <summary>
            No work is operating from this equipment. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.IDLERUN">
            <summary>
            The equipment loaded with an entity and processing it, but cannot track in the other entities. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.DOWN">
            <summary>
            The equipment is off and deactivated for certain reasons. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.EqpState.NONE">
            <summary>
            No state of the equipment is specified.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.PackedTable">
            <summary>
            Provides functionality to pack and unpack texts to an array using deliminator to sperate the contents within. 
            </summary>
            <remarks>
            This class is mainly used for writing and spliting data of LoadingHistory output. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Pack``1(``0)">
            <summary>
            Converts the value of the specified type to string and concatenates the specified value from the beggining to last index of <em>PackedIndexAtrribute</em> using the specified separator between each element. 
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to merge.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Unpack``1(System.String[])">
            <summary>
            Unpacks(Decompress) the packed(compressed) string into substrings based on the strings in an array.
            </summary>
            <typeparam name="T">The type of the return type.</typeparam>
            <param name="gzip">The string array that delimits the substrings in this string.</param>
            <returns>The specified type with each of the substring from <em>gzip</em> set to each member of the return type structure.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Unpack``1(System.Data.DataRow,System.String)">
            <summary>
            Decompresses the compressed string into substring based on the strings in the column which name starts with the specified prefix.
            If prefix is null, "INFO_GZIP" is set by default. 
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="row">The row that contains the string to unpack.</param>
            <param name="prefix">The prefix of the column name in the specified row. Default value is null. If null or empty, prefix is "INFO_GZIP".</param>
            <returns>The specified type with each of the substring from <em>gzip</em> set to each member of the return type structure. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Split``1(System.String[])">
            <summary>
            Splits the string into substrings based on the strings in an array.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="gzip">The string array that delimits the substrings </param>
            <returns>The specified type with each of the substring from <em>gzip</em> set to each member of the return type structure.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Split``1(System.Data.DataRow,System.String)">
            <summary>
            Splits the string of the specified column which name starts with the specified prefix. 
            </summary>
            <typeparam name="T">The type of the return value</typeparam>
            <param name="row">The data row to get the column with the prefix. Default value is null. If null or empty, prefix is "INFO_GZIP".</param>
            <param name="prefix">The prefix to get the column in the specified data row.</param>
            <returns>The specified type with each of the substring from <em>gzip</em> set to each member of the return type structure.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Unpack(System.String[])">
            <summary>
            Decompresses the compressed string into substring based on the strings in an array.
            </summary>
            <param name="gzip">A string array that delimits the substrings in this string.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>gzip</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Unpack(System.Data.DataRow,System.String)">
            <summary>
            Decompresses the compressed string into substring based on the strings in the column which name starts with the specified prefix.
            </summary>
            <param name="row">The data row to get the column of the specified prefix.</param>
            <param name="prefix">The prefix to get the column from the specified row. Default value is null. If null or empty, prefix is "INFO_GZIP".</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in the column of the <em>row</em> </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Split(System.String[])">
            <summary>
            Splits a string into substrings based on the strings in an array. 
            </summary>
            <param name="gzip">A string array that delimits the substrings in this string.</param>
            <returns>An array whose elements contain the substrins in this string that are deleimited by one or more strings in <em>gzip</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.PackedTable.Split(System.Data.DataRow,System.String)">
            <summary>
            Decompresses the compressed string into substring based on the strings in the column whicc name starts with the specified prefix.
            </summary>
            <param name="row">The data row to get the column of the specified prefix.</param>
            <param name="prefix">The prefix to get the column from the specified row. Default value is null. If null or empty, prefix is "INFO_GZIP".</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in the column of the <em>row</em>.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper">
             <summary>
            The helper class to access to  <em>DevExpress.XtraSpreadSheet</em> and <em>DevExpress.Spreadsheet</em> to draw worksheet.
             </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.AltColor">
            <summary>
            Specifies the light color of RGB(277,277,277). 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.AltColor2">
            <summary>
            Specifies the white color.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.InitGanttSheet(DevExpress.XtraSpreadsheet.SpreadsheetControl)">
            <summary>
            Initializes the spread sheet control and worksheet.
            </summary>
            <param name="sheetControl">The spread sheet control to initialize.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.BuildDefaultStyles(DevExpress.Spreadsheet.IWorkbook)">
            <summary>
            Apply the default style of this instance to the cells of the specified workbook. 
            </summary>
            <param name="workbook">The workbook to apply the default style.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.CopyFont(DevExpress.Spreadsheet.Style,DevExpress.Spreadsheet.Style)">
            <summary>
            Converts the specified cell font setting to the current stlye of this instance. 
            </summary>
            <param name="from">The cell font style that is to be converted.</param>
            <param name="to">The cell font style the <em>from</em> is to be converted to.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ResizeColumnToFit(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Double)">
            <summary>
            Adjusts the width of the columns to accommodate cell content of the specified worksheet.
            </summary>
            <param name="grid">The worksheet to adjust the width of the columns.</param>
            <param name="start">The integer value specifying the zero-based index of the first column to be automatically resized.</param>
            <param name="end">The integer value specifying the zero-based index of the last column to be automatically resized.</param>
            <param name="margin">The value specifying the zero-based margin of the columns.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ResizeRowToFit(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Double)">
            <summary>
            Adjusts the height of rows to accommodate cell content of the specified worksheet.
            </summary>
            <param name="grid">The worksheet to adjust the height of the rows.</param>
            <param name="start">The integer value specifying the zero-based index of the first row to be automatically resized.</param>
            <param name="end">The integer value specifying the zero-based index of the last row to be automatically resized.</param>
            <param name="margin">The value specifying the zero-based margin of the rows.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintColumnInterior(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color)">
            <summary>
            Fills the cell content of the specified column index with the specified color.
            </summary>
            <param name="grid">The worksheet to fill the column color.</param>
            <param name="colIndex">The integer value specifying the zero-based index of the column to fill color.</param>
            <param name="color">The ARGB color to fill.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintRowInterior(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color)">
            <summary>
            Fills the cell content of the specified row index with the specified color.
            </summary>
            <param name="grid">The worksheet to fill the row color.</param>
            <param name="rowIndex">The integer value specifying the zero-based index of the row to fill color.</param>
            <param name="color">The ARGB color to fill.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintRowCells(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Fills the cell content of the specified row index with the specified color, starting from the first column to the specified column index.
            </summary>
            <param name="grid">The worksheet to fill the row color.</param>
            <param name="rowIndex">The integer value specifying the zero-based index of the row to fill color.</param>
            <param name="endColIdx">The integer value specifying the zero-based index of the last column to fill color.</param>
            <param name="color">The ARGB color to fill.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintRowFontColor(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the font color of all cells in the specified row index to specified color.
            </summary>
            <param name="grid">The worksheet to set the font color of the cells in the row.</param>
            <param name="rowIndex">The integer value specifying the zero-based index of the row to change the font color of all cells.</param>
            <param name="color">The ARGB color to set font color.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintCellFontColor(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the font color of the cell of the specified row and column to the specfied color.
            </summary>
            <param name="grid">The worksheet to set the font color of the cell.</param>
            <param name="rowIndex">The integer value specifying the zero-based index of the row in which the cell is located.</param>
            <param name="colIndex">The integer value specifying the zero-based index of the column in which the cell belongs to.</param>
            <param name="color">The ARGB color to set font color.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.PaintCell(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Fills the cell of the specified row and column to the specified color.
            </summary>
            <param name="grid">The worksheet to fill the color of the cell.</param>
            <param name="rowIndex">The integer value specifying the zero-based index of the row in which the cell is located.</param>
            <param name="colIndex">The integer value specifying the zero-based index of the column in which the cell is located.</param>
            <param name="color">The ARGB color to fill.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.GetAlpabetColName(System.Int32)">
            <summary>
            Returns the alphabet letter of the specified column index.
            </summary>
            <param name="columnIndex">The number to get the alphabet letter.</param>
            <returns>The alphabet letter of the specified column index number.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.GetXlsFileName(System.String,System.String)">
            <summary>
            Creates xlsx format excel file name by combining the specfied prefix and file. 
            The final output of the return value is "prefix_filename.xlsx"
            </summary>
            <param name="prefix">The string to use as prefix of the file name.</param>
            <param name="filename">The string of the file name to come after prefix.</param>
            <returns>The xlsx format file name.</returns>
            <remarks>
            <para>Any slash ('/') in <em>prefix</em> is replaced to underscore ('_'). </para>
            <para>An underscore ('_') is used as seperator among <em>prefix</em> and <em>filename</em>, in which is different from the underscore replaced from slash.</para>
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ExportToXls(DevExpress.Spreadsheet.Worksheet,System.String)">
            <summary>
            <para>Exports the current worksheet and save as Excel file with specified file name.</para>
            <para>The supported file formats are .xlsx and .xls.</para>
            </summary>
            <param name="worksheet">The worksheet to export to excel.</param>
            <param name="filename">The name of the file to save.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ExportToXls(DevExpress.Spreadsheet.Worksheet,System.String,System.Drawing.Color)">
            <summary>
            Exports the current worksheet and save as Excel file format with the specified name and sets the header of the Excel sheet with the specified color.
            The supported file formats are .xlsx and .xls.
            </summary>
            <param name="worksheet">The worksheet to export to excel.</param>
            <param name="filename">The name of the file to save.</param>
            <param name="color">The ARGB color to set header back color.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ExportToHtml(DevExpress.Spreadsheet.Worksheet,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the current worksheet and save as Html file format with the specified name.
            The supported file formats are .html.
            </summary>
            <param name="worksheet">The worksheet to export to excel.</param>
            <param name="filename">The name of the file to save.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.FreezeIfNeeds(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32)">
            <summary>
            Freezes the specified number of rows, columns or both rows and columns at the top and on the left side of the worksheet.
            </summary>
            <param name="grid">The worksheet to freeze the specified number of rows and columns.</param>
            <param name="rowOffset">An integer value that specifies the zero-based offset of the last row to be frozen relative to the first row in a worksheet. </param>
            <param name="columnOffset">An integer value that specifies the zero-based offset of the last column to be frozen relative to the first column in a worksheet. </param>
            <remarks>
            <para>If <em>columnOffset</em> is larger than zero and <em>rowOffset</em> is zero, only columns will freeze.</para>
            <para>If <em>rowOffset</em> is larger than zero and <em>columnOffset</em> is zero, only rows will freeze.</para>
            <para>Otherwise, if both <em>rowOffset</em>, <em>coloumnOffset</em> is larger than zero, both rows and columns of the specified number will freeze.</para>
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.MergeRows(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges the cells by the specified cell range indexes of the bounding rows for each columns as much as the spcfieid column index.
            </summary>
            <param name="grid">The work sheet to merge the rows and columns.</param>
            <param name="fromRowIdx">The integer that is the zero-based index of the top row.</param>
            <param name="toRowIdx">The integer that is the zero-based index of the bottom row.</param>
            <param name="cols">The integer that is the zero-based index of the left and rigt column. Also the numbers of columns to merge one by one.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.MergeRowsOneColumn(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges the cells by the specified cell range indexes of the bounding rows of the specified column.
            </summary>
            <param name="grid">The work sheet to merge the rows and columns</param>
            <param name="fromRowIdx">The integer that is the zero-based index of the top row.</param>
            <param name="toRowIdx">The integer that is the zero-based index of the bottom row.</param>
            <param name="colIdx">The integer that is the zero-based index of the left and right column. Also the column index to merge.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.CreateRow(DevExpress.Spreadsheet.Worksheet,System.Int32@)">
            <summary>
            Creates a new row following the specified row index. 
            </summary>
            <param name="grid">The worksheet to add row.</param>
            <param name="rowIndex">The integer that is the zero-based index of the row.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnWidth(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32)">
            <summary>
            Adjust the width size of the cells of the specified column.
            </summary>
            <param name="grid">The worksheet to adjust the width of the specified column.</param>
            <param name="columnIndex">The integer that is the zero-based index of the column. </param>
            <param name="width">The size to adjust width.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetUsedColumnFillColor(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            Returns the cell range of the last modified columns of the specified column index, filled with the specified color.  
            </summary>
            <param name="grid">The worksheet to fill the colors of the columns.</param>
            <param name="columnIndex">The integer that is the zero-based inedx of the the column to fill the color.</param>
            <param name="color">The ARGB color to fill.</param>
            <param name="startRowIndex">The integer that is the zero-based index of the top row.</param>
            <returns>The cell range of the last modified columns with cells filled with the specified color. </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderRightLine(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjusts the color and style of the right border line of the specified column with the specified color and line style.
            </summary>
            <param name="grid">The worksheet to adjust the right border line and color of the column.</param>
            <param name="columnIndex">The integer of the zero-based index position of the column. </param>
            <param name="color">The ARGB color to color the line.</param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderRightLine(DevExpress.Spreadsheet.Worksheet,System.Int32,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjust the color of the right border line of the specified columns to blue with the specified border line style. 
            </summary>
            <param name="grid">The worksheet to adjust the right border line and color of the column.</param>
            <param name="columnIndex">The integer of the zero-based index position of the column. </param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderRightLine(DevExpress.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Changes the right border line of the specified columns to thin line.
            </summary>
            <param name="grid">The worksheet to adjust the right border line of the columns.</param>
            <param name="columnIndex">The integer of the zero-based index poisiton of the column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderLeftLine(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjusts the color and style of the left border line of the specified column with the specified color and line style.
            </summary>
            <param name="grid">The worksheet to adjust the left border line and color of the column.</param>
            <param name="columnIndex">The integer of the zero-based index position of the column. </param>
            <param name="color">The ARGB color to color the line.</param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderLeftLine(DevExpress.Spreadsheet.Worksheet,System.Int32,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjust the color of the left border line of the specified columns to blue with the specified border line style. 
            </summary>
            <param name="grid">The worksheet to adjust the left border line and color of the column.</param>
            <param name="columnIndex">The integer of the zero-based index position of the column. </param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnBorderLeftLine(DevExpress.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Changes the left border line of the specified columns to thin line.
            </summary>
            <param name="grid">The worksheet to adjust the left border line of the columns.</param>
            <param name="columnIndex">The integer of the zero-based index poisiton of the column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderTopLine(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjusts the color and style of the top border line of the specified row with the specified color and line style.
            </summary>
            <param name="grid">The worksheet to adjust the top border line and color of the row.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row.</param>
            <param name="color">The ARGB color to color the line.</param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderTopLine(DevExpress.Spreadsheet.Worksheet,System.Int32,DevExpress.Spreadsheet.BorderLineStyle)">
            <summary>
            Adjust the color of the top border line of the specified row to gray with the specified border line style. 
            </summary>
            <param name="grid">The worksheet to adjust the top border line and color of the row.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row. </param>
            <param name="lineStyle">The enuermation containing values to specify border line styles.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderTopLine(DevExpress.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Changes the top border line of the specified row to thin line.
            </summary>
            <param name="grid">The worksheet to adjust the top border line of the row.</param>
            <param name="rowIndex">The integer of the zero-based index poisiton of the row.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderBottomLine(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color)">
            <summary>
            Adjusts the line style of the bottom border line of the specified row to thin line with the specified color.
            </summary>
            <param name="grid">The worksheet to adjust the bottom border line and color of the row.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row.</param>
            <param name="color">The ARGB color to color the line.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderBottomLine(DevExpress.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Adjust the color of the bottom border line of the specified rows to gray. 
            </summary>
            <param name="grid">The worksheet to adjust the bottom border line and color of the rows.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderBottomThickLine(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Drawing.Color)">
            <summary>
            Adjust the line style of the bottom border line of the specified row to thick line with the specified color.
            </summary>
            <param name="grid">The worksheet to adjut the bottom border line and color of the row.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row.</param>
            <param name="color">The ARGB color to color the line.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowBorderBottomThickLine(DevExpress.Spreadsheet.Worksheet,System.Int32)">
            <summary>
            Adjust the line style of the bottom border line of the specified row to thick line and dark blue color.
            </summary>
            <param name="grid">The worksheet to adjust the bottom border line and color of the row.</param>
            <param name="rowIndex">The integer of the zero-based index position of the row.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetTotalIntValue(DevExpress.Spreadsheet.Cell,DevExpress.Spreadsheet.Cell)">
            <summary>
             <para>Converts the two values of the specified cells into integer,adds them, and sets the font color correspondent to the summation result.</para>
            </summary>
            <param name="totInfo">The cell to contain summation result.</param>
            <param name="cellInfo">The cell to add value to <em>totInfo</em>.</param>
            <remakrs>
                <para>If the summation of the result is negative, the cell font color is red;otherwise, black.</para>
            </remakrs>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetTotalIntValue(DevExpress.Spreadsheet.Cell,System.Int32)">
            <summary>
             <para>Converts the value of the specified cell into integer,gets the sum of the converted value and the specified integer value, and sets the font color correspondent to the summation result.</para>
            </summary>
            <param name="totInfo">The cell to contain summation result.</param>
            <param name="value">The value to add to <em>totInfo</em>.</param>
            <remakrs>
                <para>If the summation of the result is negative, the cell font color is red;otherwise, black.</para>
            </remakrs>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetDateTimeValue(DevExpress.Spreadsheet.Cell,System.DateTime)">
            <summary>
            Sets the specified <em>DateTime</em> to the value of the specified cell in "MM/dd/yyyy hh:mm" string format.
            </summary>
            <param name="info">The cell to set the string date and time.</param>
            <param name="time">The date and time to set to the specified cell.</param>
            <returns>The cell set with the specified date and time in "MM/dd/yyyy hh:mm" string format.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCheckValue(DevExpress.Spreadsheet.Cell,System.Boolean)">
            <summary>
            Sets the specified cell style to CheckCell style and set the specified value to the cell value in string format.
            </summary>
            <param name="info">The cell to set the style.</param>
            <param name="value">The boolean value to convert to string and set to the specified cell value.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellFormulaValue(DevExpress.Spreadsheet.Cell,System.String)">
            <summary>
            Sets the specified formula to the specified cell formula.
            </summary>
            <param name="info">The cell to set the formula.</param>
            <param name="formula">The formula to set to the cell formula. The formala can be general mathematical form or excel function form.</param>
            <returns>The cell set with the specified formula or the result value of the formula.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellIntValue(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Converts the specified object to integer value and sets it to the value of the specified cell with the font color representing the value.
            </summary>
            <param name="info">The cell to set the value and font color.</param>
            <param name="value">The value to set to the specified cell value.</param>
            <returns>
                <para>The cell set with the value and the font color representing the value.</para>
                <para>Positive : Font color of the cell is black.</para>
                <para>Negative : Font color of the cell is red.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellIntValue(DevExpress.Spreadsheet.Cell,System.Object,System.Int32)">
            <summary>
            Converts the specified object to integer value, sets the value to specified cell value, and compares <em>value</em> and <em>compValue</em> to specify the font color of the cell.
            </summary>
            <param name="info">The cell to set the value and font color.</param>
            <param name="value">The value to set the specified cell value.</param>
            <param name="compValue">The integer value to compare to <em>value</em> to indicate the font color of the specified cell. </param>
            <returns>
                <para>The cell set with the value and the font color representing the value.</para>
                <para><em>value</em> &lt; <em>compValue</em> : Font color of the cell is red.</para>
                <para>Otherwise, font color of the cell is black.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellEditIntValue(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Converts the specifed object to interger type and sets to the specified cell value, specifying the font color of the value.
            The cell style is also set to <em>BuiltInStyleId.Input</em>. 
            </summary>
            <param name="info">The cell to set style, value and font color.</param>
            <param name="value">The object to convert to integer and set to the cell value.</param>
            <returns>
                <para>The cell info set with style, value and font color. The font color follows the following condition.</para>
                <para><em>value</em> is less than zero : The font color of the cell is red.</para>
                <para>Otherwise, the font colof of the cell is black.</para>
            </returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellFloatValue(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Converts the specified object to float format and sets to the cell value and alignes the cell content to the right horizontally. 
            </summary>
            <param name="info">The cell to set the value.</param>
            <param name="value">The object to convert to float and set to the specified cell value.</param>
            <returns>The cell set with the specified <em>value</em> as float format.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellText(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Sets the specified object as the value to the given cell and alignes the cell content horizontally to the left. 
            </summary>
            <param name="info">The cell to set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <returns>The cell set with the speicifed <em>value</em> aligned horizontally to the left.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellText(DevExpress.Spreadsheet.Cell,System.Object,System.Boolean)">
            <summary>
            Sets the specified object as the value to the given cell, alignes the cell content horizontally to the left and specifies whether the cell content is to be formatted as bold.
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <param name="bold">Indicates whether the specified cell content is formatted as bold. <em>true</em> if the cell text is bold; otherwise, <em>false</em></param>
            <returns>The cell set with the specified <em>value</em> aligned horizontally to the left, indicating whether the <em>value</em> is formatted as bold.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellCenterText(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Sets the specified object as the value to the given cell,centered horizontally. 
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <returns>The cell set with the speicifed <em>value</em> centered horizontally.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellCenterText(DevExpress.Spreadsheet.Cell,System.Object,System.Boolean)">
            <summary>
            Sets the specified object as the value to the given cell, centers the cell content horizontally and specifies whether the cell content is to be formatted as bold.
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <param name="bold">Indicates whether the specified cell content is formatted as bold. <em>true</em> if the cell text is bold; otherwise, <em>false</em></param>
            <returns>The cell set with the specified <em>value</em> centered horizontally, indicating whether the <em>value</em> is formatted as bold.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellRightText(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Sets the specified object as the value to the given cell and aligns the cell content horizontally to the right. 
            </summary>
            <param name="info">The cell to set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <returns>The cell set with the speicifed <em>value</em> aligned horizontally to the right.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellRightText(DevExpress.Spreadsheet.Cell,System.Object,System.Boolean)">
            <summary>
            Sets the specified object as the value to the given cell, aligns the cell content to the right and specifies whether the cell content is to be formatted as bold.
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <param name="bold">Indicates whether the specified cell content is formatted as bold. <em>true</em> if the cell text is bold; otherwise, <em>false</em></param>
            <returns>The cell set with the specified <em>value</em> aligned to the right, indicating whether the <em>value</em> is formatted as bold.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetCellText(DevExpress.Spreadsheet.Cell,System.Object,System.Drawing.Color,DevExpress.Spreadsheet.SpreadsheetHorizontalAlignment,System.Boolean)">
            <summary>
            Sets the the specified object as the value to the given cell with the specified font color, cell content alignement and indicating whether the cell content to be formatted as bold. 
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <param name="textColor">Specifies the font color.</param>
            <param name="hAlign">Specifies the cell content alignment</param>
            <param name="bold">Indicates whether the specified cell content is formatted as bold. <em>true</em> if the cell text is bold; otherwise, <em>false</em></param>
            <returns>The cell set with the specified <em>value</em>, font color specified as in <em>textColor</em>, aligned horizontally to the specified  <em>hAlign</em> and indicating whether the cell content to be formated as bold.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetEditCellText(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Sets the specified object as the value to the given cell and sets the cell style as <em>DevExpress.Spreadsheet.BuiltInStyleId.Input</em>.
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value</param>
            <returns>The cell set with the specified <em>value</em> and cell style as <em>DevExpress.Spreadhseet.BuildInStyleId.Input</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetTotCellValue(DevExpress.Spreadsheet.Cell,System.Object)">
            <summary>
            Sets the specified object as the value to the given cell using "TotalCell" as cell style.
            </summary>
            <param name="info">The cell to access and set the value.</param>
            <param name="value">The object to set the cell value.</param>
            <returns>The cell set with the specified <em>value</em> and cell stlye as "TotalCell".</returns>
            <remarks>
            <para>The cell style "TotalCell" consisits the followings : </para>
            <para> Text in the cell horizontally aligned to the right</para>
            <para> Text in the cell centered vertically.</para>
            <para> Cell text format is "###,###,###".</para>
            <para> Cell background color is RGB(219,236,216)</para>
            <para> The contents in the cell are wrapped into multiple lines.</para>
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.GetValue(System.Object)">
            <summary>
            Returns the integer value of the specified object.
            </summary>
            <param name="oValue">The object to convert to integer.</param>
            <returns>The integer value of the specified object. If the type of the object is string and is empty, return 0.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetColumnHidden(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Hides range of columns in the specified <em>WorkSheet</em>. 
            </summary>
            <param name="grid">The specified <em>Worksheet</em> to hide range of columns.</param>
            <param name="start">The zero-based starting index of the range to hide the columns.</param>
            <param name="end">The length of the range to hide the columns.</param>
            <param name="visible">Specifies the value to hide columns. <em>true</em> to hide; otherwise, <em>false</em>.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowHidden(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Hides range of rows in the specified <em>WorkSheet</em>.
            </summary>
            <param name="grid">The specified <em>Worksheet</em> to hide range of rows.</param>
            <param name="start">The zero-based starting index of the range to hide the rows.</param>
            <param name="end">The length of the range to hide the rows.</param>
            <param name="visible">Specifies the value to hide the rows. <em>true</em> to hide; otherwise, <em>false</em>.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SetRowHeight(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32,System.Single)">
            <summary>
            Adjusts the row heights within the specified range. 
            </summary>
            <param name="grid">The specified <em>Worksheet</em> to adjust the row heights.</param>
            <param name="start">The zero-based starting index of the range to adjust the heights of the rows.</param>
            <param name="end">The length of the range to adjust the heights of the rows.</param>
            <param name="height">The size of the height to adjust within the specified range.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SelectRowUsed(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Selects range of edited columns in the specified row in the specified worksheet and specifies whether the selection expands to fit merged cells. 
            </summary>
            <param name="grid">The specified <em>Worksheet</em> to select the range of columns in the specified row.</param>
            <param name="rowIndex">The zero-based index of the top and bottom row.</param>
            <param name="expandToMergedCellsSize">Indicates a value whether to expand the selection to include merged cells. <em>true</em>, expand the selection to include mergeds cells; otherwise, <em>false</em>.</param>
            <param name="startColumnIndex">The zero-based starting index of the range of columns. (left column)</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.GetMergedTopRowIndex(DevExpress.Spreadsheet.Worksheet,System.Int32,System.Int32)">
            <summary>
            Gets the top row index of the merged cells within the specified row and column index.
            </summary>
            <param name="grid">The specified <em>Worksheet</em> to get the top row of the merged cells within the range.</param>
            <param name="rowIndex">The zero-based row index to search the merged cells.</param>
            <param name="columnIndex">The zero-based column index to search the merged cells.</param>
            <returns>The zero-based top row index of the merged cells. If the specified <em>rowIndex</em> and <em>columnIndex</em> is not within the range of the merged cells, 0 is returned.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn">
            <summary>
            The class providing functionality to create SF style grouped column.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn.Caption">
            <summary>
            The caption of the group column.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn.StartColName">
            <summary>
            The name of the starting column of the group. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn.EndColName">
            <summary>
            The name of the last column of the group.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <em>SFGroupColumn</em> class with the cpation and name of the start and end coulmn of the column group.
            </summary>
            <param name="caption">The caption of the group column.</param>
            <param name="strtColname">The name of the starting column of the group. </param>
            <param name="endColname">The name of the last column of the group.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn">
            <summary>
            The class providing functionality to create SF style column.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.Key">
            <summary>
            The string value to use as key for the column. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.Caption">
            <summary>
            The caption of the column. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.Width">
            <summary>
            The size of width of the column. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.HasRightBorder">
            <summary>
            Indicates whether the column has a right border line.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.HasGroupedColumn">
            <summary>
            Indicates whether the column has a grouped column.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.HAlign">
            <summary>
            Specifies the horizontal alignment. The value of this property can be null. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified key and width size.</para>
            <para>The column will not have grouped columns and right border line.</para>
            <para><em>key</em> will be used as the caption of the column.</para>
            </summary>
            <param name="key">The string value to use as key for the column.</param>
            <param name="width">The size of width of the column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.String,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified key, width size and caption text.</para>
            <para>The column will not have grouped columns and right border line.</para>
            </summary>
            <param name="key">The string value to use as key for the column. </param>
            <param name="caption">The caption of the column. </param>
            <param name="width">The size of width of the column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified the specified key, width size and specifying whether the column has grouped columns.</para>
            <para>The column will not have right border line.</para>
            <oara><em>key</em> will be used as the caption of the column.</oara>
            </summary>
            <param name="key">The string value to use as key for the column.</param>
            <param name="width">The size of width of the column.</param>
            <param name="hasGrouped">Indicates whether the column has a grouped column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified the specified key, width size, caption and specifying whether the column has grouped columns.</para>
            <para>The column will not have right border line.</para>
            </summary>
            <param name="key">The string value to use as key for the column.</param>
            <param name="caption">The caption of the column.</param>
            <param name="width">The size of width of the column.</param>
            <param name="hasGrouped">Indicates whether the column has a grouped column.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified key, width size, specifies whether to have right border line and specifies whether the column is a grouped column.</para>
            <para><em>key</em> will be used as the caption of the column.</para>
            </summary>
            <param name="key">The string value to use as key for the column.</param>
            <param name="width">The size of width of the column.</param>
            <param name="isGrouped">Indicates whether the column is a grouped column.</param>
            <param name="hasRightBorder">Indicates whether the column has a right border line.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <em>SfColumn</em> class with the specified key, cpation, width size, specifies whether to have right border line and specifies whether the column is a grouped column.</para>
            </summary>
            <param name="key">The string value to use as key for the column.</param>
            <param name="caption">The caption of the column.</param>
            <param name="width">The size of width of the column.</param>
            <param name="hasGrouped">Indicates whether the column has grouped columns.</param>
            <param name="hasRightBorder">Indicates whether the column has a right border line.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo">
            <summary>
            The class prodviding functionaity to set column header information to the <em>Worksheet</em>.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.Workbook">
            <summary>
            Gets the the current <em>Workbook</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.Worksheet">
            <summary>
            Gets the current <em>Worksheet</em> instance.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.CurrnetColumnIndex">
            <summary>
            Gets the index of the current column to set as column header. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.ColumnCount">
            <summary>
            Gets the number of columns mapped for column headers. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.#ctor(DevExpress.Spreadsheet.IWorkbook,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initizlizes a new instnace of the <em>ColumnHeaderInfo</em> class to set column header information on the current worksheet of the workbook document at the specified row and column index and specifies whether this column is a multi-header column.
            </summary>
            <param name="grid">The <em>Workbook</em> to access and set column header information to the active worksheet.</param>
            <param name="rowindex">The zero-based row index to set the column header.</param>
            <param name="columnindex">The zero-based column index where the header starts.</param>
            <param name="hasmultiheader">Specifies whether this column header has multi column headers.</param>
            <param name="colCount">The number of columns mapped to be column header.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.TryGetColumnIndex(System.String)">
            <summary>
            Finds the column index in the <em>ColumnHeaderInfo</em> by the specified column header key value. 
            </summary>
            <param name="key">The key of the column header to search for.</param>
            <returns>The index of the mapped column in the <em>ColumnHeaderInfo</em> that contains the key value specified.; otherwise -1 if the key value does not exist.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.AddColumn(Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn)">
            <summary>
            Adds the specified column to the list of columns of the <em>ColumnHeaderInfo</em>. 
            </summary>
            <param name="column">The column to add.</param>
            <returns>The column to add to the list of column headers of the <em>ColumnHeaderInfo</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.AddGroupColumn(Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfGroupColumn)">
            <summary>
            Adds the specified group column to the list of group columns of the <em>ColumnHeaderInfo</em>.
            </summary>
            <param name="group">The group column to add to the list of group columns of this instance.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.GetCellInfo(System.Int32,System.String)">
            <summary>
            Gets the cell by the specified row index and column name.
            </summary>
            <param name="rowIdx">The zero-based index of the row to find.</param>
            <param name="colName">The string containing the key of the column to find the column index.</param>
            <returns>The <em>Cell</em> from the worksheet that matches <em>rowIdx</em> and <em>colName</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo.Build">
            <summary>
            Locks the current <em>Workbook</em> object to update the worksheet by creating column headers with this instance. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraSheetSizeHelper.Resizer.#ctor(Mozart.Studio.TaskModel.UserLibrary.XtraSheetSizeHelper)">
            <summary>
            Initializes a new insance of the <em>GanttResizerObj</em> class with <em>GanttSizeObj</em> object.
            </summary>
            <param name="obj">The controller to change the size of the cells in the gantt chart.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar">
            <summary>
            The class to create a bar to draw in the gantt chart containing the item of the loading history information of the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.TkinTime">
            <summary>
            The track in time of the entity to the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.TkoutTime">
            <summary>
            The track out time of the entity from the euqipment. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.TIQty">
            <summary>
            The quantity of the entity that tracked in. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.TOQty">
            <summary>
            The quantity of the entity that tracked out from the equipment after processing. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.State">
            <summary>
            The equipment state. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.IsShiftSplit">
            <summary>
            Indicates a value whether this bar was split from shift.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.Bounds">
            <summary>
            The size and location of the bar. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.#ctor(System.DateTime,System.DateTime,System.Double,System.Double,Mozart.Studio.TaskModel.UserLibrary.EqpState)">
            <summary>
            Initializes a new instance of the <em>Bar</em> class with the specified loading history information. 
            </summary>
            <param name="tkin"></param>
            <param name="tkout"></param>
            <param name="tiqty"></param>
            <param name="toqty"></param>
            <param name="state"></param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.Merge(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Returns a value whether to merge track in/out quantity of the specified bar to this instance. 
            </summary>
            <param name="bar">The bar to determine whether to merge to this bar.</param>
            <returns><em>true</em> to marge the <em>bar</em> to this instance;otherwise; <em>false.</em></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.IsConflict(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Returns a value to indicate whether the track in/out time of the specified bar conflicts with the track in/out time of this instance.
            </summary>
            <param name="bar">The bar to compare track in/out time to this instance.</param>
            <returns><em>true</em> if there is a conflict;otherwise, <em>false.</em></returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.Clone">
            <summary>
            Returns a shallow copy of the current bar.
            </summary>
            <returns>A shallow copy of the current bar.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar.CompareTo(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Compares the track in time of this instance to a specified <em>Bar</em> object and indicates whether this instance precedes, follows, or appears in the the smae position in the sort order as the specified <em>Bar</em>.
            </summary>
            <param name="other">The <em>Bar</em> objcect to compare this instance to, or null.</param>
            <returns>
            <para>A signed integer indicating the position of this instance in the sort order in relation to the <em>other</em> parameter.</para>
            <para>Less than zero : This instance precedes <em>other</em>.</para>
            <para>Zero : This instance has the same position in the sort order as <em>other</em>.</para>
            <para>Greater than zero : This instance follows <em>other</em> or <em>other</em> is null.</para>
            </returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarList">
            <summary>
            Represents the collections of the <em>Bar</em>.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarList.IsConflict(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Returns a value to indicate if the track in/out of the specified <em>Bar</em> conflicts with any of the <em>Bar</em> in this collection.
            </summary>
            <param name="bar">The bar to compare track in/out time to the items in this collection.</param>
            <returns><em>true</em> if there is a conflict;otherwise, false.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventHandler">
            <summary>
            Represents the method that will handle an event of the cell. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the cell.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarEventHandler">
            <summary>
            Represents the method that will handle an event of the bar. 
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">The event data of the bar.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventHandler">
            <summary>
            Represents the method that will handle an event to draw bar. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data to draw the bar.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs">
            <summary>
            Represents the event data of a cell.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs.Cell">
            <summary>
            Gets a cell object. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs.RowIndex">
            <summary>
            Gets the index number of the row. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs.ColIndex">
            <summary>
            Gets the index number of the column. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs.Mouse">
            <summary>
            Gets the mouse event data. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.CellEventArgs.#ctor(DevExpress.Spreadsheet.Cell)">
            <summary>
            Initializes a new instance of the <em>CellEventArgs</em> class with the specfied cell. 
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarEventArgs">
            <summary>
            Represents the event dat of the bar. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarEventArgs.Bar">
            <summary>
            Gets a bar object. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarEventArgs.#ctor(DevExpress.Spreadsheet.Cell,Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Initializes a new instance of the <em>BarEventArgs</em> class with the specified cell and bar. 
            </summary>
            <param name="cell"></param>
            <param name="bar"></param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs">
            <summary>
            Represents the event data to draw the bar. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.Graphics">
            <summary>
            Gets the <em>Graphic</em> object to encapsulate a GDI+ drawing surface. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.Background">
            <summary>
            Gets or sets the <em>BrushInfo</em> object to fill the back color of the bar. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.DrawDefault">
            <summary>
            Gets or sets the value that indicates whether to use default setting to draw the bar, 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.Text">
            <summary>
            Gets or sets the text of the bar. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.ForeColor">
            <summary>
            Gets or sets the forecolor of the bar, 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.FrameColor">
            <summary>
            Gets or sets the frame color of the bar. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.DrawFrame">
            <summary>
            Gets or sets a value that indicates whether to draw a frame on the bar. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BarDrawEventArgs.#ctor(System.Drawing.Graphics,DevExpress.Spreadsheet.Cell,Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Initializes a new instance of the <em>BarDrawEventArgs</em> classs with the specified bar to draw, the cell to draw the bar, and the drawing surface.
            </summary>
            <param name="g">The drawing surface.</param>
            <param name="cell">The cell to draw the bar.</param>
            <param name="bar">The bar to draw.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushStyle">
            <summary>
            Specifies the BrushStyle used by <see cref="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo"/>.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushStyle.None">
            <summary>
            The <see cref="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo"/> is an empty object.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushStyle.Solid">
            <summary>
            The <see cref="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo"/> represents a solid fill.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushStyle.Pattern">
            <summary>
            The <see cref="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo"/> represents a pattern fill.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo">
            <summary>
            Provides functionality to fill back color.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.#ctor">
            <summary>
            Overloaded. Initializes a new empty instance of BrushInfo.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with the specified solid backcolor.
            </summary>
            <param name="color">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.BackColor"/> used as solid background.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.HatchStyle"/>.</param>
            <param name="foreColor">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.BackColor"/> used for the pattern.</param>
            <param name="backColor">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.BackColor"/> used for the pattern.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.#ctor(DevExpress.Spreadsheet.Drawings.ShapeFillPatternType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a shape fill style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.HatchStyle"/>.</param>
            <param name="foreColor">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.BackColor"/> used for the pattern.</param>
            <param name="backColor">A <see cref="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.BrushInfo.BackColor"/> used for the pattern.</param>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttSizeControl.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttSizeControl.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttSizeControl.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마십시오.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem">
            <summary>
            <para>Represents the row group of the gantt chart. In general, if gantt chart is drawn for <em>Equipment</em> (EqpGantt), this <em>Equipment</em> is considered to be the row group of the gantt chart.</para>
            <para>If no row group exists, the row itself represents the row group. </para>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.Items">
            <summary>
            Gets the collection of <em>BarList</em> with its key.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.Nodes">
            <summary>
            Gets the list of <em>BarList</em>.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.SchedBar">
            <summary>
            Gets the <em>ScheduledBar</em> object.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.#ctor">
            <summary>
            Initializes a new instance of the <em>GanttItem</em> class.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.GetBarItem(System.String,System.Predicate{Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar})">
            <summary>
            Searches the <em>BarList</em> of the specified key and searches for the <em>Bar</em> that mathces the conditions defined by the specified predicate, and returns the last occurence within the <em>BarList</em> of the key.
            </summary>
            <param name="key">The key to search for the <em>BarList</em> in this <em>GanttItem</em>.</param>
            <param name="predicate">The <em>Predicate&lt;Bar&gt;</em> delegate that defines the conditions of the <em>Bar</em> to search for.</param>
            <returns>The last <em>Bar</em> from the <em>BarList</em> of the specified <em>key</em>, that matches the conditions defined by the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><em>predicate</em> is <em>null</em>.</exception>
            <remarks><em>Null</em> is returned when no mathcing <em>BarList</em> is found for the specified <em>key</em>.</remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.LinkBar(Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView,System.Boolean)">
            <summary>
            Creates <em>LinkedBar</em> and <em>LinkedBarNode</em> from the bar in the list of <em>BarList</em>. 
            </summary>
            <param name="gv">The <em>GanttView</em> object to check the bar is within <em>CellUnitMinutes</em>.</param>
            <param name="isDefault">Specifies whether to use the first element of the <em>BarList</em> as the key of <em>LinkedBarNode</em>.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.AddLinkedNode(System.String,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode)">
            <summary>
            Adds the specified key and <em>LinkedBarNode</em> to <em>ScheduledBar</em>.
            </summary>
            <param name="key">The key of the <em>LinkedBarNode</em> to add.</param>
            <param name="lnkBarNode">The <em>LinkedBarNode</em> to add.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.AddLinkedNode(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode)">
            <summary>
            Used for overriding. Adds the specified <em>Bar</em> and <em>LinkedBarNode</em> defined through this method. 
            </summary>
            <param name="bar">The <em>Bar</em> to use as key of the <em>LinkedBarNode</em> to add.</param>
            <param name="lnkBarNode">The <em>LinkedBarNode</em> to add.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.Expand(System.Boolean)">
            <summary>
            Expands the row or columns to draw the bars that has conflicts among each other.
            </summary>
            <param name="isDefault"></param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem.Clone">
            <summary>
            Creates a shallow copy of the current <em>GanttItem</em> object.
            </summary>
            <returns>A shallow copy of the current <em>GanttItem</em> object.</returns>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.DateGroupPattern">
            <summary>
            <para>Gets or sets the string pattern of date group used in gantt chart.</para>
            <para>"MMdd HH:mm" is used as default.</para>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.DateKeyPattern">
            <summary>
            <para>Gets or sets the string pattern of the date key used in gantt chart.</para>
            <para>"yyyyMMddHH" is set by defult.</para>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.CellUnitMinutes">
            <summary>
            <para>Gets or sets the time range of a cell in minutes.</para>
            <para>One cell is considered as one hour by default.</para>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.SchedBarComparer">
            <summary>
            Gets the comparer method to compare two <em>LinkedBarNode</em> objects.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.FromTime">
            <summary>
            Gets and sets the date and time value of the starting date and time of the gantt chart. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.ToTime">
            <summary>
            Gets and sets the date and time value of the end date and time of the gantt chart. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.FixedRowCount">
            <summary>
            Gets and sets the integer value that specifies the number of rows fixed. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.FixedColCount">
            <summary>
            Gets and sets the integer value that specifies the number of columns fixed. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.FirstRowIndex">
            <summary>
            Gets or sets the index of the first row in the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.LastRowIndex">
            <summary>
            Gets or sets the index of the last row in the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.FirstColIndex">
            <summary>
            Gets or sets the index of the first column in the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.LastColIndex">
            <summary>
            Gets or sets the index of the last column in the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BarBackground">
            <summary>
            Gets or sets the <em>BrushInfo</em> object to fill background color of the bar.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.CellInfoMap">
            <summary>
            Gets the <em>GanttGridCellMap</em> object to set the cell location to draw the bar.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.ColumnHeader">
            <summary>
            Gets or sets the <em>ColumnHeaderInfo</em> object to set column headers of the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Control">
            <summary>
            Gets the <em>SpreatsheetControl</em> object of this instance. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Workbook">
            <summary>
            Gets the current workbook.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Worksheet">
            <summary>
            Gets the first worksheet of the current workbook.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.DefaultColumnWidth">
            <summary>
            Gets or sets the default size of the width of the columns.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.DefaultRowHeight">
            <summary>
            Gets or sets the default size of the height of the rows.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.GroupRows">
            <summary>
            Gets the number of rows in the group.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.#ctor(DevExpress.XtraSpreadsheet.SpreadsheetControl)">
            <summary>
            Initiailizes a new instance of the <em>GanttView</em> class with <em>DevExpress.XtraSpreadsheet.SpreadhsheetControl</em>
            </summary>
            <param name="sheetControl">The <em>DevExpress.XtraSpreadsheet.SpreadsheetControl</em> which emulates the Microsoft® Excel® look and feel.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.SetDayCells">
            <summary>
            Sets the information of <em>CellUnitMinutes</em>, <em>DateKeyPattern</em> and <em>DateGroupPattern</em> of this instance in day unit.
            </summary>
            <remarks>
            <em>CellUnitMinutes</em> = 1,440 minutes 
            <em>DateKeyPatter</em> = "yyyyMMdd"
            <em>DateGroupPattern</em> = "MMdd HH"
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Adjacency(System.DateTime,System.DateTime)">
            <summary>
            <para>Specifies a value whether the total minutes of the subtraction of the given two time interval is within the <em>CellUnitMinutes</em>.</para> 
            <para><em>CellUnitMinutes</em> by default is 60 minutes.</para> 
            </summary>
            <param name="a">The date and time value to subtract from (the minuend).</param>
            <param name="b"> The date and time value to subtract (the subtrahend).</param>
            <returns><em>true</em> if the total minutes of the substraction of <em>a</em>, <em>b</em> is within <em>CellUnitMinutes</em>; otherwise, <em>false</em>.</returns>
            <remarks>
            <para>The hour, minutes and seconds of the <em>DateTime</em> of both <em>a</em> and <em>b</em> is converted to <em>TimeSpan</em>.</para>
            <para>In the gantt chart, a cell is considered as the time range defined in <em>CellUnitMinutes</em>. By default one cell is one hour.</para>
            <para>When drawing equipment gantt chart for inline type equipment, entities are loaded continously. To express this as a bar, the bars should be linked first to be drawn.</para>
            <para></para>
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.LinkBar(Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar,Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Adds and connects the specified <em>Bar</em> to the specified <em>LinkedBar</em> and returns a value to indicate the specified <em>Bar</em> is linked to the specified <em>LinkedBar</em>.
            </summary>
            <param name="lbar">The <em>LinkedBar</em> to add the specified <em>bar</em> into, if possible. </param>
            <param name="bar">The <em>Bar</em> to add to the specified <em>LinkedBar</em>, if possible.</param>
            <returns><em>true</em> if the specified <em>bar</em> is added to the specified <em>lbar</em>; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Clear">
            <summary>
            Clears all items in <em>CellMInfoMap</em> and <em>GroupRows</em> of this instance.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.ResetWorksheet">
            <summary>
            Resets the current worksheet. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.EnableTooltip(System.ComponentModel.IContainer)">
            <summary>
            Enables the tool tip to show information of the bar when mouse pointer is over the bar.
            </summary>
            <param name="container">The container to store one or more components. </param>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderShiftChanged">
            <summary>
            The event that associates with <em>GanttColumnHeaderEventHandler</em> delegate to apply user definition to handle this event when shift information of the column header is changed. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderHourChanged">
            <summary>
            The event that associates with <em>GanttColumnHeaderEventHandler</em> delegate to apply user definition to handle this event when hour information of the column header is changed. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderDone">
            <summary>
            The event that associates with <em>GanttColumnHeaderEventHandler</em> delegate to apply user definition to handle this event to finish column header setting. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindItemAdded">
            <summary>
            The event that associates with <em>GanttItemEventHandler</em> delegate to apply user definition to handle this event when <em>GanttItem</em> is added for binding.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindRowAdding">
            <summary>
            The event that associates with <em>GanttRowEventHandler</em> delegate to apply user definition to handle this event for adding rows for binding occurs. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindRowAdded">
            <summary>
            The event that associates with <em>GanttRowEventHandler</em> delegate to apply user definition to handle this event when row for binding is added.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindBarAdded">
            <summary>
            The event that associates with <em>GanttCellEvenHandler</em> delegate to apply user definition to handle this event when <em>Bar</em> for binding is added.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindDone">
            <summary>
            The event that associates with <em>System.EventHandler</em> delegate to apply user definition to handle this event to finish binding. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.SetColumnHeaders(System.Int32,Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.SfColumn[])">
            <summary>
            Sets the specified array of columns as column headers to the current worksheet.  
            </summary>
            <param name="count">Number of columns to set to column headers.</param>
            <param name="columns">The one-dimensional, zero-based array containing columns to set as column headers.</param>
            <remarks>
            <para>Occurs the following events to set column headers to this worksheet : </para>
            <list type="bullet">
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderShiftChanged.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderHourChanged.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.HeaderDone.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.UpdateFreezing">
            <summary>
            Updates the freeze range of the rows and columns.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.Bind(System.Collections.Generic.IEnumerable{Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem})">
            <summary>
            Binds the bars and the row groups to the current worksheet to draw gantt chart. 
            </summary>
            <param name="list">The list of <em>GanttItem</em> to bind to the worksheet.</param>
            <remarks>
            <para>Occurs the following events for binding bars and the row groups worksheet : </para>
            <list type="bullet">
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindItemAdded.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindRowAdding.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindRowAdded.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindBarAdded.</description>
            </item>
            <item>
            <description>Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BindDone.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BarDoubleClick">
            <summary>
            The event that associates with <em>BarEventHandler</em> to apply user definition to handle bar double click event.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BarClick">
            <summary>
            The event that associates with <em>BarEventHandler</em> to apply user definition to handle bar click event. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.CellDoubleClick">
            <summary>
            The event that associates with <em>CellEventHandler</em> to apply user definition to handle cell double click event.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.CellClick">
            <summary>
            The event that associates with <em>CellEventHandler</em> to apply user definition to handle cell click event.
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttView.BarDraw">
            <summary>
            The event that associates with <em>BarDrawEventHandler</em> to apply user definition to handle bar drawing event.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttColumnHeaderEventHandler">
            <summary>
            Represents the method that will handle the header column event of the gantt chart. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the column header of the gantt chart.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItemEventHandler">
            <summary>
            Represents the method that will handle the event for the item of the gantt chart.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the item of the gantt chart.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventHandler">
            <summary>
            Represents the method that will handle the row event of the gantt chart. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the gantt chart row.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventHandler">
            <summary>
            Represents the method that will handle the cell event of the gantt chart.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the gantt chart cell.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellSizeChangedEventHandler">
            <summary>
            Represents the method that will handle the event when the size of cell is changed from the gantt chart. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data of the changed cell size from the gantt chart.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttColumnHeaderEventArgs">
            <summary>
            Represents the event data of the header column of the gantt chart. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttColumnHeaderEventArgs.Time">
            <summary>
            Gets the date and time to display to the header column. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttColumnHeaderEventArgs.ColumnHeader">
            <summary>
            Gets the object containing the header column information. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttColumnHeaderEventArgs.#ctor(Mozart.Studio.TaskModel.UserLibrary.XtraSheetHelper.ColumnHeaderInfo,System.DateTime)">
            <summary>
            Initializes a new instance of the <em>GanttColumnHeaderEventArgs</em> class with the specified header column information and the date and time,
            </summary>
            <param name="columnHeader">The header column information to use from this instance.</param>
            <param name="time">The date and time to display to the header column.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItemEventArgs">
            <summary>
            Represents the event data of the item in the gantt chart. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItemEventArgs.Item">
            <summary>
            Gets the object containing bars in different forms. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItemEventArgs.#ctor(Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem)">
            <summary>
            Initializes a new instance of the <em>GanttItemEventArgs</em> class with the specified collections of bars in the same group. 
            </summary>
            <param name="item">The <em>GanttItem</em> objcet.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs">
            <summary>
            Represents the event data of the gantt chart row. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs.Node">
            <summary>
            Gets the collections of <em>LinkedBarList</em>.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs.RowIndex">
            <summary>
            Gets the indext specifying the location of the row. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs.Index">
            <summary>
            Gets the unique index of the binding count of the row. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs.Key">
            <summary>
            Gets the key that indicates the collections of <em>LinkedBarNode</em> keys.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttRowEventArgs.#ctor(Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <em>GanttRowEventArgs</em> class.
            </summary>
            <param name="item">The <em>GanttItem</em> object.</param>
            <param name="node">The collection of <em>LinkedBarList</em>.</param>
            <param name="rowIndex">The row index</param>
            <param name="index">The row binding count.</param>
            <param name="key">The key of the collections of LinkedBarNodes.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs">
            <summary>
            Represents the event data of the gantt chart cell. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs.Node">
            <summary>
            Gets the collection of <em>LinkedBarList</em>.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs.RowIndex">
            <summary>
            Gets the index number specifying the location of the row. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs.Bar">
            <summary>
            Gets the list of bars. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs.ColIndex">
            <summary>
            Gets the index number specifying the location of the column.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellEventArgs.#ctor(Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttItem,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <em>GanttCellEventArgs</em> class. 
            </summary>
            <param name="item">The <em>GanttItem</em> object</param>
            <param name="node">The collection of <em>LinkedBarList</em>.</param>
            <param name="bar">The <em>LinkedBar</em> object</param>
            <param name="rowIndex">The index of the row.</param>
            <param name="colIndex">The index of the column.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellSizeEventArgs">
            <summary>
            Represents the event data containing the changed cell size of the gantt chart.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellSizeEventArgs.Height">
            <summary>
            Gets the height of the cell.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellSizeEventArgs.Width">
            <summary>
            Gets the width of the cell. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttCellSizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instnace of the <em>GanttCellSizeEventArgs</em> with the height and width to change the cell size.
            </summary>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar">
            <summary>
            Represesnts collections of continoulsy linked bars. 
            </summary>
            <remarks>
            This list is created from <em>Mozart.StudioTaskModel.UserLibary.GanttChart.GanttItem.LinkBar</em> method. 
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar.#ctor(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Adds the specified <em>Bar</em> object to the <em>BarList</em> list. 
            </summary>
            <param name="bar">The bar object to add to the <em>BarList</em>.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar.GetBarAt(System.Single,System.Single)">
            <summary>
            Returns the bar located at the specified point within the this <em>LinkedBar</em> instance. 
            </summary>
            <param name="x">The x-coordinate of the point to locate the bar.</param>
            <param name="y">The y-coordinate of the point to locate the bar.</param>
            <returns>The <em>Bar</em> located at <em>x</em> and <em>y</em> within the <em>LinkedBar</em>; otherwise, null if not located.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar.CumulateQty(System.Double@,System.Double@)">
            <summary>
            Accumulates the track in and track out entity quantities of the bar. 
            </summary>
            <param name="sumti">The accumulated track in entity quantities.</param>
            <param name="sumto">The accumulated track out entity quantities.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar.Clone">
            <summary>
            Creates a shallow copy of the current <em>LinkedBar</em> object.
            </summary>
            <returns>A shallow copy of the current <em>LinkedBar</em> object.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBar.AddBar(Mozart.Studio.TaskModel.UserLibrary.GanttChart.Bar)">
            <summary>
            Adds a bar to the <em>BarList</em> of the current <em>LinkedBar</em> object.
            </summary>
            <param name="bar"></param>
            <remakrs>
            <para>If the track in time of the specified <em>bar</em> is earlier than the track in time of the <em>LinkedBar</em>, the track in time of the <em>LinkedBar</em> is adjusted to the track in time of the specified <em>bar</em>.</para>
            <para>If the track out time of the specified <em>bar</em> is later than the track out time of the <em>LinkedBar</em>, the track out time of the <em>LinkedBar</em> is adjusted to the track out time of the specified <em>bar</em>.</para>
            </remakrs>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarList">
            <summary>
            Represents the list of <em>LinkedBar</em>.
            </summary>
            <remarks>
            This list is created from <em>Mozart.StudioTaskModel.UserLibary.GanttChart.GanttItem.LinkBar</em> method. 
            </remarks>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode">
            <summary>
            Represents the list of <em>LinkedBar</em> in the same row of the gantt chart. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode.LinkedBarList">
            <summary>
            Represents the list of <em>LinkedBar</em>.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNodeList">
            <summary>
            Represents the list of <em>LinkedBarNode</em>.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar">
            <summary>
            Represents the collections of <em>LinkedBarNodeList</em> of the same row group in gantt chart. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar.Nodes">
            <summary>
            Represents a collection of key/LinkedBarNodeList pairs sorted on the key. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar.#ctor">
            <summary>
            Initializes a new instance of the <em>ScheduledBar</em> instance, which intializes a collection of key/LinkedBarNodeList pairs sorted that are sorted on the key.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar.AddNode(System.String,Mozart.Studio.TaskModel.UserLibrary.GanttChart.LinkedBarNode)">
            <summary>
            Adds the specified key and <em>LinkedBarNode</em> to <em>LinkedBarNodeList</em>.
            </summary>
            <param name="nodeKey">The key of the <em>LinkedBarNode</em> to add.</param>
            <param name="linkBarNode">The <em>LinkedBarNode</em> to add.</param>
            <remarks>
            A new <em>LinkedBarNodeList</em> is created if no matching list of the specfied key of the <em>LinkedBarNode</em> is not found.
            </remarks>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar.MergeNodes(Mozart.Studio.TaskModel.UserLibrary.GanttChart.ScheduledBar)">
            <summary>
            Merges a specified <em>ScheduledBar</em> and its value into the current <em>ScheduledBar</em>. The <em>LinkedBarNodeList</em> of the same key will not be merged.
            </summary>
            <param name="other">The <em>ScheduledBar</em> to merge to this <em>ScheduledBar</em>.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl">
            <summary>
            Represents a control that can be used to search data in gantt chart with the specified text value. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.FindValue">
            <summary>
            Gets or sets the string value to search in the gantt chart. 
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.Spreadsheet">
            <summary>
            Gets or sets the <em>SpreadsheetControl</em> object of the gantt chart. 
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.FindClick">
            <summary>
            Represents the method that will handle the event when the find button click event is invoked.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.GanttChart.GanttFindControl.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마십시오.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper">
            <summary>
            The helper class to access to <em>DevExpress</em> controls related to drawing pivot grid. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.ClearPivotGridFields(DevExpress.XtraPivotGrid.PivotGridControl)">
            <summary>
            Removes all items in the field. 
            </summary>
            <param name="pivotGridControl">The pivot grid control to remove all items from its field. </param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddPivotGridField(DevExpress.XtraPivotGrid.PivotGridControl,System.String,DevExpress.XtraPivotGrid.PivotArea)">
            <summary>
            Adds a new field with the specified name and location to the end of the collection.
            </summary>
            <param name="pivotGridControl">The pivot grid control to add the field.</param>
            <param name="fieldName">The string that identifies the name of the database field that will be assigned to the new <em>PivotGridField</em> object.</param>
            <param name="pivotArea">The <em>PivotGridArea</em> value that identrifies the area in which the new <em>PivotGridField</em> object will be positioned.</param>
            <returns>The <em>PivotGrildField</em> object that has been added to the collection.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldColumnArea(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String,System.Nullable{DevExpress.XtraPivotGrid.PivotGroupInterval})">
            <summary>
            Adds a column header to the pivot grid field with the specified name. 
            </summary>
            <param name="pivotGridControl">The pivot grid control to use to add column header to the specified field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="caption">The display caption of the field.</param>
            <param name="pivotGroupInterval">The enumeration containing values to specify how the values of the specific colmun or row field are combined into groups.</param>
            <returns>The <em>PivotGrildField</em> object with new column header added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldRowArea(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String)">
            <summary>
            Adds a row header to the pivot grid field with the specified name. 
            </summary>
            <param name="pivotGridControl">The pivot grid control to use to add row header to the specified field.</param>
            <param name="fieldName">The name of the field..</param>
            <param name="caption">The display caption of the field.</param>
            <returns>The <em>PivotGrildField</em> object with new row header added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldDataArea(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String,System.Nullable{DevExpress.Data.PivotGrid.PivotSummaryType},System.Type)">
            <summary>
            Adds a data area to the pivot grid field with the specified name. 
            </summary>
            <param name="pivotGridControl">The pivot grid control to use to add data area to the specified field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="caption">The display caption of the field.</param>
            <param name="pivotSummaryType">The enumeration containing values to specify summary function type.</param>
            <param name="type">The type of the cell and value format.</param>
            <returns>The <em>PivotGrildField</em> object with new data area added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldDataArea(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String,System.Nullable{DevExpress.Data.PivotGrid.PivotSummaryType},System.String)">
            <summary>
            Adds a data area to the pivot grid field with the specified name and setting the column and vaule with specified format.
            </summary>
            <param name="pivotGridControl">The pivot grid control to use to add data area to the specified field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="caption">The display caption of the field.</param>
            <param name="pivotSummaryType">The enumeration containing values to specify summary function type.</param>
            <param name="sFormat">The string indicating the pattern for the format of the cell and value.</param>
            <returns>The <em>PivotGrildField</em> object with new data area added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.SetFormatString(DevExpress.XtraPivotGrid.PivotGridField,System.String)">
            <summary>
            Sets the pattern for the formatting values of the cell and value in the specified pivot grid field. 
            </summary>
            <param name="pivotGridField">The pivot grid control to set cell and value format of the field.</param>
            <param name="sFormat">The string indicating the pattern for the format of the cell and value.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.GetFieldName(System.String)">
            <summary>
            Returns the string indicating the name of the pivot grid field in "field_fieldName" format.
            </summary>
            <param name="fieldName">The name of the pivot grid field.</param>
            <returns>The string indicating the name of the pivot grid field in "field_fieldName" format</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.SetMinHeight(DevExpress.XtraPivotGrid.PivotGridControl)">
            <summary>
            Sets the height that is the lower limit size.  
            </summary>
            <param name="pivotGridControl">The pivot grid control to adjust the height size.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.SetMinHeight(DevExpress.XtraPivotGrid.PivotGridControl,System.Int32)">
            <summary>
            Sets the height that is the lower limit size.
            </summary>
            <param name="pivotGridControl">The pivot grid control to adjust the height size.</param>
            <param name="addHeight">Additional height to limit the size.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.SetGridStyleFormatCondition(DevExpress.XtraPivotGrid.PivotGridControl,System.String)">
            <summary>
            Sets the pivot grid style format condition of the specified pivot grid field.
            </summary>
            <param name="pivotGrid">The pivot grid control to set the format condition of the field.</param>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldRowArea``1(DevExpress.XtraPivotGrid.PivotGridControl,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Adds a row header to the pivot grid field with the given property. 
            </summary>
            <typeparam name="T">The type of the item in <em>AddFieldRowArea</em>.</typeparam>
            <param name="pivotGridControl">The pivot grid cotrol to use to add row header to the field.</param>
            <param name="property">The name of field from the return value of expression of the specified type.</param>
            <param name="caption">The display caption of the field. Default value is null. If null, it will use the name of the <em>property</em>.</param>
            <returns>The <em>PivotGrildField</em> object with new row header added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldColumnArea``1(DevExpress.XtraPivotGrid.PivotGridControl,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{DevExpress.XtraPivotGrid.PivotGroupInterval},System.String)">
            <summary>
            Adds a column header to the pivot grid field with the given property. 
            </summary>
            <typeparam name="T">The type of the item in <em>AddFieldColumnArea</em>.</typeparam>
            <param name="pivotGridControl">The pivot grid cotrol to use to add column header to the field.</param>
            <param name="property">The name of field name from the return value of expression of the specified type.</param>
            <param name="groupInterval">The enumeration containing values to specify how the values of the specific colmun or row field are combined into groups. Allows null.</param>
            <param name="caption">The display caption of the field. Default value is null. If null, it will use the name of the <em>property</em>.</param>
            <returns>The <em>PivotGrildField</em> object with new column header added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldDataArea``1(DevExpress.XtraPivotGrid.PivotGridControl,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{DevExpress.Data.PivotGrid.PivotSummaryType},System.String)">
            <summary>
            Adds a data area to the pivot grid field with the given property and setting the column and vaule with specified format
            </summary>
            <typeparam name="T">The type of the item in <em>AddFieldDataArea</em>.</typeparam>
            <param name="pivotGridControl">The pivot grid control to use to add data area to the field. </param>
            <param name="property">The name of field name from the return value of expression of the specified type.</param>
            <param name="summaryType">The enumeration containing values to specify summary function type. Allows null.</param>
            <param name="caption">The display caption of the field. Default value is null. If null, it will use the name of the <em>property</em>.</param>
            <returns>The <em>PivotGrildField</em> object with new data area added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldFilterArea``1(DevExpress.XtraPivotGrid.PivotGridControl,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a filter area to the pivot grid field.
            </summary>
            <typeparam name="T">The type of the item in <em>AddFieldFilterArea</em>.</typeparam>
            <param name="pivotGridControl">The pivot grid control to use to add filter area to the field.</param>
            <param name="property">The name of field name from the return value of expression of the specified type.</param>
            <returns>The <em>PivotGrildField</em> object with new filter area added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.AddFieldPivotArea``1(DevExpress.XtraPivotGrid.PivotGridControl,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DevExpress.XtraPivotGrid.PivotArea)">
            <summary>
            Adds a pivot area to the pivot grid field.
            </summary>
            <typeparam name="T">The type of the item in <em>AddFieldPivotArea</em>.</typeparam>
            <param name="pivotGridControl">The pivot grid control to use to add pivot area to the field.</param>
            <param name="property">The name of field name from the return value of expression of the specified type.</param>
            <param name="pivotArea"></param>
            <returns>The <em>PivotGrildField</em> object with new pivot area added.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.CreatePivotGridFields(DevExpress.XtraPivotGrid.PivotGridControl,Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable,System.String)">
            <summary>
            Creates pivot grid fields by mapping the information in the specified <em>DataViewTable</em> to the row, column, data, and filter area of this grid.
            </summary>
            <param name="pivotGridControl">The pivot grid contorl to create the fields.</param>
            <param name="dataViewTable">A <em>DataViewTable</em> object to map to the row, column, data and filter area of this grid. </param>
            <param name="except">The name of the column of the specified <em>DataViewTable</em> to exclude from adding to the field.</param>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable">
            <summary>
            Represents a databindalble, customized view of the data table for sorting,filtering, searching, editing and navigation.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.DataTable">
            <summary>
            The data table to create view. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.Columns">
            <summary>
            Represents a collection of keys and values of the colmuns. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.#ctor">
            <summary>
            Initializes a new instance of the <em>DataViewTable</em> class.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <em>DataViewTable</em> class with the specified data table name. 
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.AddColumn(System.String,System.String,System.Type,DevExpress.XtraPivotGrid.PivotArea,System.Nullable{DevExpress.Data.PivotGrid.PivotSummaryType},System.Nullable{DevExpress.XtraPivotGrid.PivotGroupInterval})">
            <summary>
            Adds a new data view column to the data table. 
            </summary>
            <param name="name">The key of the data view column to add.</param>
            <param name="caption">The dispaly caption of the column.</param>
            <param name="type">The colmun data type.</param>
            <param name="pivotArea">The enumeration containing values to specify field area.(Row, Column, Filter, Data)</param>
            <param name="pivotSummaryType">The enumeration containing values to specify summary function type. Allows null.</param>
            <param name="groupInterval">The enumeration containing values to specify how the values of the specific colmun or row field are combined into groups. Allows null.</param>
            <returns>The <em>DataViewColumn</em> object to add to the data table.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.AddDataTableConstraints(System.String,System.Data.DataColumn[],System.Boolean)">
            <summary>
            Constructs a new <em>System.Data.UniqueConstraints</em> with the specified name, collections of <em>DataColumn</em> and value that indicates whether the column is a primary key and adds it to the <em>Systme.Data.ConstraintCollection</em>.
            </summary>
            <param name="name">The name of the <em>System.Data.UniqueConstraints</em>.</param>
            <param name="columns">The array of <em>DataColumn</em> to which the constriaint applies.</param>
            <param name="primaryKey">Specifies whether the column should be the primary key. If <em>true</em>, the column will be a pribary key column.</param>
            <returns>A new <em>System.Data.UniqueConstraints</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.AddDataTablePrimaryKey(System.Data.DataColumn[])">
            <summary>
            Constructs a new <em>System.Data.UniqueConstraints</em> of specified collections of <em>DataColumn</em> as primary key and adds it to the <em>Systme.Data.ConstraintCollection</em>.
            </summary>
            <param name="columns">The array of <em>DataColumn</em> to which the constraint applies.</param>
            <returns>A new <em>System.Data.UniqueConstraints</em> in which the <em>columns</em> are primary key.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewTable.FindDataRow(System.Object[])">
            <summary>
            Gets the row that contains the specified primary key values. 
            </summary>
            <param name="keys">An array of primary key values to find. The type of the array is object.</param>
            <returns>A <em>DataRow</em> object that contains the primary key values specified.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewColumn">
            <summary>
            Represents a databindable, customized view of the data column.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewColumn.FieldArea">
            <summary>
            The enumeration containing values to specify field area.(Row, Column, Filter, Data)
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewColumn.SummaryType">
            <summary>
            The <em>System.Nullable&lt;PivotSummaryType&gt;</em> enumeration containing the values to sepcify summary function types.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewColumn.GroupInterval">
            <summary>
            The <em>System.Nullable&lt;PivotGroupInterval&gt;</em> enumeration containing the values to specify how the values of the specific column or row field are combined into groups.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.DataViewColumn.#ctor(System.String,System.Type,DevExpress.XtraPivotGrid.PivotArea,System.Nullable{DevExpress.Data.PivotGrid.PivotSummaryType},System.Nullable{DevExpress.XtraPivotGrid.PivotGroupInterval})">
            <summary>
            Initializes a new instance of the <em>DataViewColumn</em> class with the specified column data type, area of the grid to map, summary type and value grouping type.
            </summary>
            <param name="name">The name of the column. This is used as the key when adding the column to the <em>Columns</em> collection.</param>
            <param name="type">The column data type.</param>
            <param name="fieldArea">The field area type to set.</param>
            <param name="summaryType">The summary type to set.</param>
            <param name="groupInterval">The value grouping type to set.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.SaveXml(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String)">
            <summary>
            Saves the specified pivot grid table to an XML file. 
            </summary>
            <param name="pivotGrid">The pivot grid control to get fields to save.</param>
            <param name="dirPath">The directory path to save the XML file.</param>
            <param name="fileName">The file name to save.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.LoadXml(DevExpress.XtraPivotGrid.PivotGridControl,System.String,System.String)">
            <summary>
            Loads an XML file to the specified pivot grid table. 
            </summary>
            <param name="pivotGrid">The pivot grid control to map the XML properties to this fields.</param>
            <param name="dirPath">The directory path to load the XML file.</param>
            <param name="fileName">The file name to load.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.ObjectsToString(System.Object[])">
            <summary>
            Concatenates the elements of an object array, using commma punctuation (',') as spearator between each element.
            </summary>
            <param name="value">An array that continas the elements to concatenate.</param>
            <returns>A string that consisits of elements of <em>value</em> delimited by comma punctuation. If <em>value</em> is an empty array, the method returns <em>System.String.Empty</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.StringToObjects(System.String)">
            <summary>
            Splits the specified string into substrings using comma punctuation (',') as delimiter and stores into an object array.
            </summary>
            <param name="text">The string to split into substrings.</param>
            <returns>An array whose elements contain the substrings in this strings that are delimted by one or more strings by comma punctuation (',').</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.ConvertToPivotArea(System.String)">
            <summary>
            Converts the string respresentation of the name or numeric value of one or more enumerated constants to an equivalent <em>PivotArea</em> type objcet. 
            The operation is not case-sensitive. 
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <returns>The converted <em>PivotArea</em> value of the <em>value</em>.</returns>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.XtraPivotGridHelper.ConvertToPivotSortOrder(System.String)">
            <summary>
            Converts the string respresentation of the name or numeric value of one or more enumerated constants to an equivalent <em>PivotSortOrder</em> type objcet. 
            The operation is not case-sensitive. 
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <returns>The converted <em>PivotSortOrder</em> value of the <em>value</em>.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.ColorGenerator">
            <summary>
            Generates ARGB color. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.ColorGenerator.GetColor(System.String)">
            <summary>
            Returns a generated ARGB(alpha,red,green,blue) color for the specified key.
            </summary>
            <param name="key">The key to get the generated color.</param>
            <returns>The generated ARGB(alpha,red,green,blue) color of the specified key.</returns>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.Strings">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_ARG_DOES_NOT_SPECIFY_HOUR">
            <summary>
              startTime does not specify an hour과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_ARG_NULL">
            <summary>
              {0}: Invalid parameter &apos;{1}&apos; passed to method: null과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_ARG_VIOLATE_MIN_SIZE">
            <summary>
              Value of argument ({0}) must be grater then 0.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_ARRAY_ARG_NO_CONTENTS">
            <summary>
              The length of argument ({0}) must be grater than 0.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_INVALID_ARG">
            <summary>
              Argument({0}) must be grater than agrument ({1})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_INVALID_ARG_ARRAY_ORDER">
            <summary>
              Argument &apos;times&apos; array items has time conflict (next item&apos;s StartTime &lt; prev item&apos;s EndTime)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_INVALID_BASE_CAL_ARG">
            <summary>
              specified base calendar is not a base calendar과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_INVALID_BASE_CAL_SAME">
            <summary>
              The base calendar cannot be this calendar과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_INVALID_TRY_TO_CHANGE">
            <summary>
              Changing this calendar is not allowed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.Strings.EXCEPTION_TIMESPAN_MUST_BE_POSITIVE">
            <summary>
              duration must not be negative과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox">
            <summary>
            Represents a control with a drop-downlist that can be shown or hidden by clicking the arrow on the control and check box for each items that user can select and clear. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.NONE">
            <summary>
            Specifies no check boxes are checked. 
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.ALL">
            <summary>
            Specifies all check boxes are checked.
            </summary>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.firstTime">
            <summary>
            A value that indicates whether the items and check state in the list is its initial state.  
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.Items">
            <summary>
            Gets access to the item collection in <em>CheckedComboBox</em>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.CheckedItems">
            <summary>
            Gets all the checked items in <em>CheckedComboBox</em>
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.ListBox">
            <summary>
            Gets the checked list box control to use.
            </summary>
        </member>
        <member name="P:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.EditValue">
            <summary>
            Gets or sets the changed value from <em>CheckedComboBox</em>
            </summary>
        </member>
        <member name="E:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.ItemChecked">
            <summary>
            Occurs when the checked state of an item changes.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.#ctor">
            <summary>
            Initializes a new instance of the <em>CheckedComboBox</em> class. 
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.ShowPopup">
            <summary>
            Opens a popup window.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.SetItemCheckState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
            Sets the check state of the value. 
            </summary>
            <param name="index">The zero-based index of the item.</param>
            <param name="value"><em>CheckState</em> enumeration member specifying the check state of the item.</param>
        </member>
        <member name="F:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:Mozart.Studio.TaskModel.UserLibrary.CheckedComboBox.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마십시오.
            </summary>
        </member>
    </members>
</doc>
