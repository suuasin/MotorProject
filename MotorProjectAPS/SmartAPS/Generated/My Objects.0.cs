/*------------------------------------------------------------------------------------------------------------------------------------------------------------
 <auto-generated>
     This code was generated by a mozart.

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using SmartAPS.DataModel;

namespace SmartAPS
{
    
    /// <summary>
    /// DataModel part 
    /// </summary>
    public partial class InputMart : InputRepository
    {
        public EntityTable<SmartAPSMoMaster> SmartAPSMoMaster
        {
            get
            {
                return this.GetTable<SmartAPSMoMaster>();
            }
        }
        public EntityTable<SmartAPSPlanWip> SmartAPSPlanWip
        {
            get
            {
                return this.GetTable<SmartAPSPlanWip>();
            }
        }
        private EntityView<SmartAPSPlanWip> _SmartAPSPlanWipView;
        /// <summary>
        /// Key: MapStep
        /// </summary>
        public EntityView<SmartAPSPlanWip> SmartAPSPlanWipView
        {
            get
            {
                if ((this._SmartAPSPlanWipView == null))
                {
                    this._SmartAPSPlanWipView = this.CreateView<SmartAPSPlanWip>(this.SmartAPSPlanWip, null, "MapStep", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSPlanWipView;
            }
        }
        public EntityTable<SmartAPSWipInfo> SmartAPSWipInfo
        {
            get
            {
                return this.GetTable<SmartAPSWipInfo>();
            }
        }
        private EntityView<SmartAPSWipInfo> _SmartAPSWipInfoView;
        /// <summary>
        /// Key: LotID
        /// </summary>
        public EntityView<SmartAPSWipInfo> SmartAPSWipInfoView
        {
            get
            {
                if ((this._SmartAPSWipInfoView == null))
                {
                    this._SmartAPSWipInfoView = this.CreateView<SmartAPSWipInfo>(this.SmartAPSWipInfo, null, "LotID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSWipInfoView;
            }
        }
        public EntityTable<SmartAPSProcess> SmartAPSProcess
        {
            get
            {
                return this.GetTable<SmartAPSProcess>();
            }
        }
        private EntityView<SmartAPSProcess> _SmartAPSProcessView;
        /// <summary>
        /// Key: ProcessID
        /// </summary>
        public EntityView<SmartAPSProcess> SmartAPSProcessView
        {
            get
            {
                if ((this._SmartAPSProcessView == null))
                {
                    this._SmartAPSProcessView = this.CreateView<SmartAPSProcess>(this.SmartAPSProcess, null, "ProcessID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSProcessView;
            }
        }
        public EntityTable<SmartAPSProduct> SmartAPSProduct
        {
            get
            {
                return this.GetTable<SmartAPSProduct>();
            }
        }
        private EntityView<SmartAPSProduct> _SmartAPSProductView;
        /// <summary>
        /// Key: ProductID
        /// </summary>
        public EntityView<SmartAPSProduct> SmartAPSProductView
        {
            get
            {
                if ((this._SmartAPSProductView == null))
                {
                    this._SmartAPSProductView = this.CreateView<SmartAPSProduct>(this.SmartAPSProduct, null, "ProductID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSProductView;
            }
        }
        public EntityTable<SmartAPSStdStep> SmartAPSStdStep
        {
            get
            {
                return this.GetTable<SmartAPSStdStep>();
            }
        }
        private EntityView<SmartAPSStdStep> _SmartAPSStdStepView;
        /// <summary>
        /// Key: StdStepID
        /// </summary>
        public EntityView<SmartAPSStdStep> SmartAPSStdStepView
        {
            get
            {
                if ((this._SmartAPSStdStepView == null))
                {
                    this._SmartAPSStdStepView = this.CreateView<SmartAPSStdStep>(this.SmartAPSStdStep, null, "StdStepID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSStdStepView;
            }
        }
        public EntityTable<SmartAPSPMList> SmartAPSPMList
        {
            get
            {
                return this.GetTable<SmartAPSPMList>();
            }
        }
        private EntityView<SmartAPSPMList> _SmartAPSPMListLineView;
        /// <summary>
        /// Key: LineID
        /// </summary>
        public EntityView<SmartAPSPMList> SmartAPSPMListLineView
        {
            get
            {
                if ((this._SmartAPSPMListLineView == null))
                {
                    this._SmartAPSPMListLineView = this.CreateView<SmartAPSPMList>(this.SmartAPSPMList, null, "LineID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSPMListLineView;
            }
        }
        public EntityTable<SmartAPSProductRoute> SmartAPSProductRoute
        {
            get
            {
                return this.GetTable<SmartAPSProductRoute>();
            }
        }
        private EntityView<SmartAPSProductRoute> _SmartAPSProductRouteFromStepDemandView;
        /// <summary>
        /// Keys: FromProductId, StepId, MoDemandId
        /// </summary>
        public EntityView<SmartAPSProductRoute> SmartAPSProductRouteFromStepDemandView
        {
            get
            {
                if ((this._SmartAPSProductRouteFromStepDemandView == null))
                {
                    this._SmartAPSProductRouteFromStepDemandView = this.CreateView<SmartAPSProductRoute>(this.SmartAPSProductRoute, null, "FromProductId,StepId,MoDemandId", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSProductRouteFromStepDemandView;
            }
        }
        public EntityTable<SmartAPSInTarget> SmartAPSInTarget
        {
            get
            {
                return this.GetTable<SmartAPSInTarget>();
            }
        }
        private EntityView<SmartAPSInTarget> _SmartAPSInTargetView;
        /// <summary>
        /// Keys: Product, TargetDate
        /// </summary>
        public EntityView<SmartAPSInTarget> SmartAPSInTargetView
        {
            get
            {
                if ((this._SmartAPSInTargetView == null))
                {
                    this._SmartAPSInTargetView = this.CreateView<SmartAPSInTarget>(this.SmartAPSInTarget, null, "Product,TargetDate", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSInTargetView;
            }
        }
        private EntityView<SmartAPSInTarget> _SmartAPSInTargetViewByProd;
        /// <summary>
        /// Key: Product
        /// </summary>
        public EntityView<SmartAPSInTarget> SmartAPSInTargetViewByProd
        {
            get
            {
                if ((this._SmartAPSInTargetViewByProd == null))
                {
                    this._SmartAPSInTargetViewByProd = this.CreateView<SmartAPSInTarget>(this.SmartAPSInTarget, null, "Product", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSInTargetViewByProd;
            }
        }
        private EntityView<SmartAPSInTarget> _SmartAPSInTargetViewByDemand;
        /// <summary>
        /// Keys: Product, TargetDate, DemandID
        /// </summary>
        public EntityView<SmartAPSInTarget> SmartAPSInTargetViewByDemand
        {
            get
            {
                if ((this._SmartAPSInTargetViewByDemand == null))
                {
                    this._SmartAPSInTargetViewByDemand = this.CreateView<SmartAPSInTarget>(this.SmartAPSInTarget, null, "Product,TargetDate,DemandID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSInTargetViewByDemand;
            }
        }
        public EntityTable<SmartAPSOutAct> SmartAPSOutAct
        {
            get
            {
                return this.GetTable<SmartAPSOutAct>();
            }
        }
        private EntityView<SmartAPSOutAct> _SmartAPSOutActView;
        /// <summary>
        /// Key: Product
        /// </summary>
        public EntityView<SmartAPSOutAct> SmartAPSOutActView
        {
            get
            {
                if ((this._SmartAPSOutActView == null))
                {
                    this._SmartAPSOutActView = this.CreateView<SmartAPSOutAct>(this.SmartAPSOutAct, null, "Product", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSOutActView;
            }
        }
        public EntityTable<SmartAPSPsi> SmartAPSPsi
        {
            get
            {
                return this.GetTable<SmartAPSPsi>();
            }
        }
        private EntityView<SmartAPSPsi> _SmartAPSPsiView;
        /// <summary>
        /// Keys: customerId, productId, item, date
        /// </summary>
        public EntityView<SmartAPSPsi> SmartAPSPsiView
        {
            get
            {
                if ((this._SmartAPSPsiView == null))
                {
                    this._SmartAPSPsiView = this.CreateView<SmartAPSPsi>(this.SmartAPSPsi, null, "customerId,productId,item,date", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSPsiView;
            }
        }
        private EntityView<SmartAPSPsi> _SmartAPSPsiDateView;
        /// <summary>
        /// Key: date
        /// </summary>
        public EntityView<SmartAPSPsi> SmartAPSPsiDateView
        {
            get
            {
                if ((this._SmartAPSPsiDateView == null))
                {
                    this._SmartAPSPsiDateView = this.CreateView<SmartAPSPsi>(this.SmartAPSPsi, null, "date", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSPsiDateView;
            }
        }
        public EntityTable<SmartAPSTool> SmartAPSTool
        {
            get
            {
                return this.GetTable<SmartAPSTool>();
            }
        }
        public EntityTable<SmartAPSWeightPreset> SmartAPSWeightPreset
        {
            get
            {
                return this.GetTable<SmartAPSWeightPreset>();
            }
        }
        private EntityView<SmartAPSWeightPreset> _SmartAPSWeightPresetView;
        /// <summary>
        /// Key: Name
        /// </summary>
        public EntityView<SmartAPSWeightPreset> SmartAPSWeightPresetView
        {
            get
            {
                if ((this._SmartAPSWeightPresetView == null))
                {
                    this._SmartAPSWeightPresetView = this.CreateView<SmartAPSWeightPreset>(this.SmartAPSWeightPreset, null, "Name", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSWeightPresetView;
            }
        }
        public EntityTable<SmartAPSEqp> SmartAPSEqp
        {
            get
            {
                return this.GetTable<SmartAPSEqp>();
            }
        }
        private EntityView<SmartAPSEqp> _SmartAPSEqpView;
        /// <summary>
        /// Key: EqpID
        /// </summary>
        public EntityView<SmartAPSEqp> SmartAPSEqpView
        {
            get
            {
                if ((this._SmartAPSEqpView == null))
                {
                    this._SmartAPSEqpView = this.CreateView<SmartAPSEqp>(this.SmartAPSEqp, null, "EqpID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SmartAPSEqpView;
            }
        }
        public EntityTable<SmartAPSFactoryBreakTime> SmartAPSFactoryBreakTime
        {
            get
            {
                return this.GetTable<SmartAPSFactoryBreakTime>();
            }
        }
        private List<SmartAPS.Outputs.EQP_PLAN> _RemoveEqpPlan;
        public List<SmartAPS.Outputs.EQP_PLAN> RemoveEqpPlan
        {
            get
            {
                if ((this._RemoveEqpPlan == null))
                {
                    this._RemoveEqpPlan = new List<SmartAPS.Outputs.EQP_PLAN>();
                }
                return this._RemoveEqpPlan;
            }
        }
        private Dictionary<string, int> _strCnt;
        public Dictionary<string, int> strCnt
        {
            get
            {
                if ((this._strCnt == null))
                {
                    this._strCnt = new Dictionary<string, int>();
                }
                return this._strCnt;
            }
        }
        private Dictionary<string, object> _TempWipInfo;
        public Dictionary<string, object> TempWipInfo
        {
            get
            {
                if ((this._TempWipInfo == null))
                {
                    this._TempWipInfo = new Dictionary<string, object>();
                }
                return this._TempWipInfo;
            }
        }
        private List<SmartAPS.Outputs.EQP_PLAN> _WriteEqpPlans;
        public List<SmartAPS.Outputs.EQP_PLAN> WriteEqpPlans
        {
            get
            {
                if ((this._WriteEqpPlans == null))
                {
                    this._WriteEqpPlans = new List<SmartAPS.Outputs.EQP_PLAN>();
                }
                return this._WriteEqpPlans;
            }
        }
        private List<SmartAPS.Outputs.EQP_PLAN> _EqpPlans;
        public List<SmartAPS.Outputs.EQP_PLAN> EqpPlans
        {
            get
            {
                if ((this._EqpPlans == null))
                {
                    this._EqpPlans = new List<SmartAPS.Outputs.EQP_PLAN>();
                }
                return this._EqpPlans;
            }
        }
        private Dictionary<string, int> _LotIdCnt;
        public Dictionary<string, int> LotIdCnt
        {
            get
            {
                if ((this._LotIdCnt == null))
                {
                    this._LotIdCnt = new Dictionary<string, int>();
                }
                return this._LotIdCnt;
            }
        }
        private Dictionary<string, SmartAPS.DataModel.SmartAPSLot> _Lots;
        public Dictionary<string, SmartAPS.DataModel.SmartAPSLot> Lots
        {
            get
            {
                if ((this._Lots == null))
                {
                    this._Lots = new Dictionary<string, SmartAPS.DataModel.SmartAPSLot>();
                }
                return this._Lots;
            }
        }
        private List<SmartAPS.DataModel.SmartAPSLot> _MergeLots;
        public List<SmartAPS.DataModel.SmartAPSLot> MergeLots
        {
            get
            {
                if ((this._MergeLots == null))
                {
                    this._MergeLots = new List<SmartAPS.DataModel.SmartAPSLot>();
                }
                return this._MergeLots;
            }
        }
        private int _FactoryShiftIndex;
        public int FactoryShiftIndex
        {
            get
            {
                return this._FactoryShiftIndex;
            }
            set
            {
                _FactoryShiftIndex = value;
            }
        }
        private string _FactoryShiftName;
        public string FactoryShiftName
        {
            get
            {
                return this._FactoryShiftName;
            }
            set
            {
                _FactoryShiftName = value;
            }
        }
        private string[] _FactoryShiftNames = Mozart.SeePlan.FactoryConfiguration.Current.ShiftNames;
        public string[] FactoryShiftNames
        {
            get
            {
                return this._FactoryShiftNames;
            }
            set
            {
                _FactoryShiftNames = value;
            }
        }
        private int _PlanDays;
        public int PlanDays
        {
            get
            {
                return this._PlanDays;
            }
            set
            {
                _PlanDays = value;
            }
        }
        private int _PlanHours;
        public int PlanHours
        {
            get
            {
                return this._PlanHours;
            }
            set
            {
                _PlanHours = value;
            }
        }
        private System.Diagnostics.Stopwatch _SimDayWatch;
        public System.Diagnostics.Stopwatch SimDayWatch
        {
            get
            {
                return this._SimDayWatch;
            }
            set
            {
                _SimDayWatch = value;
            }
        }
        private System.Diagnostics.Stopwatch _SimHourWatch;
        public System.Diagnostics.Stopwatch SimHourWatch
        {
            get
            {
                return this._SimHourWatch;
            }
            set
            {
                _SimHourWatch = value;
            }
        }
        private System.Diagnostics.Stopwatch _SimWatch;
        /// <summary>
        /// simwatch
        /// </summary>
        public System.Diagnostics.Stopwatch SimWatch
        {
            get
            {
                return this._SimWatch;
            }
            set
            {
                _SimWatch = value;
            }
        }
        protected override void ClearMyObjects()
        {
            base.ClearMyObjects();
            this.DisposeIfNeeds(this._SmartAPSPlanWipView);
            this._SmartAPSPlanWipView = null;
            this.DisposeIfNeeds(this._SmartAPSWipInfoView);
            this._SmartAPSWipInfoView = null;
            this.DisposeIfNeeds(this._SmartAPSProcessView);
            this._SmartAPSProcessView = null;
            this.DisposeIfNeeds(this._SmartAPSProductView);
            this._SmartAPSProductView = null;
            this.DisposeIfNeeds(this._SmartAPSStdStepView);
            this._SmartAPSStdStepView = null;
            this.DisposeIfNeeds(this._SmartAPSPMListLineView);
            this._SmartAPSPMListLineView = null;
            this.DisposeIfNeeds(this._SmartAPSProductRouteFromStepDemandView);
            this._SmartAPSProductRouteFromStepDemandView = null;
            this.DisposeIfNeeds(this._SmartAPSInTargetView);
            this._SmartAPSInTargetView = null;
            this.DisposeIfNeeds(this._SmartAPSInTargetViewByProd);
            this._SmartAPSInTargetViewByProd = null;
            this.DisposeIfNeeds(this._SmartAPSInTargetViewByDemand);
            this._SmartAPSInTargetViewByDemand = null;
            this.DisposeIfNeeds(this._SmartAPSOutActView);
            this._SmartAPSOutActView = null;
            this.DisposeIfNeeds(this._SmartAPSPsiView);
            this._SmartAPSPsiView = null;
            this.DisposeIfNeeds(this._SmartAPSPsiDateView);
            this._SmartAPSPsiDateView = null;
            this.DisposeIfNeeds(this._SmartAPSWeightPresetView);
            this._SmartAPSWeightPresetView = null;
            this.DisposeIfNeeds(this._SmartAPSEqpView);
            this._SmartAPSEqpView = null;
            this.DisposeIfNeeds(this._RemoveEqpPlan);
            this._RemoveEqpPlan = null;
            this.DisposeIfNeeds(this._strCnt);
            this._strCnt = null;
            this.DisposeIfNeeds(this._TempWipInfo);
            this._TempWipInfo = null;
            this.DisposeIfNeeds(this._WriteEqpPlans);
            this._WriteEqpPlans = null;
            this.DisposeIfNeeds(this._EqpPlans);
            this._EqpPlans = null;
            this.DisposeIfNeeds(this._LotIdCnt);
            this._LotIdCnt = null;
            this.DisposeIfNeeds(this._Lots);
            this._Lots = null;
            this.DisposeIfNeeds(this._MergeLots);
            this._MergeLots = null;
        }
    }
    /// <summary>
    /// SmartAPS Conatant class
    /// </summary>
    public partial class Constants
    {
        public const string MODEL_NAME = "MODEL_NAME";
        /// <summary>
        /// StdStepInfo의 Tat를 사용할 지 StepTat의 Tat를 사용할지 여부
        /// </summary>
        public const string USE_STD_STEP_TAT_INFO = "USE_STD_STEP_TAT_INFO";
        /// <summary>
        /// StdStepInfo의 Yield를 사용할 지 StepYield의 Yield를 사용할지 여부
        /// </summary>
        public const string USE_STD_STEP_YIELD_INFO = "USE_STD_STEP_YIELD_INFO";
        /// <summary>
        /// {INPUT_ALL_AT_START/PERIODIC}, 장비 투입시점을 정할 때 사용하는 옵션
        /// </summary>
        public const string RELEASE_LOT_OPTION = "RELEASE_LOT_OPTION";
        /// <summary>
        /// 반제품을 완제품으로 만들 때 1개의 Lot을 분할하여 만들 수 있는 경우 True로 설정 합니다.
        /// </summary>
        public const string PART_PROD_SPLIT_OPTION = "PART_PROD_SPLIT_OPTION";
        /// <summary>
        /// 반제품을 완제품으로 만들 때 2개 이상의 Lot을 병합하여 만들 수 없는 경우 True로 설정 합니다.
        /// </summary>
        public const string ADD_LOTS_ASSY_CONSTRAINT = "ADD_LOTS_ASSY_CONSTRAINT";
        /// <summary>
        /// {ERROR/DUMMY_BUCKET}, LOT이 목적지(장비)를 찾지 못하였을 때 사용하는 옵션
        /// </summary>
        public const string NOT_FOUND_DEST_OPTION = "NOT_FOUND_DEST_OPTION";
        /// <summary>
        /// FixStartTime 계산 시 OutQty를 활용한 계산된 StateTime 사용 여부
        /// </summary>
        public const string USE_CALC_STATE_TIME = "USE_CALC_STATE_TIME";
        /// <summary>
        /// {NORMAL/INPUT_ALL_AT_START/BUFFER}, Demand 투입 시간을 조절하는 옵션
        /// </summary>
        public const string RELEASE_TIME_OPTION = "RELEASE_TIME_OPTION";
        /// <summary>
        /// 납기 - RELEASE_TIME_BUFFER 전에 투입 (HOUR)
        /// </summary>
        public const string RELEASE_TIME_BUFFER = "RELEASE_TIME_BUFFER";
        /// <summary>
        /// {NONE/DEFAULT/USE_STEP_SETUP/USE_EQP_GRP_SETUP/CUSTOM}, Setup Time 옵션
        /// </summary>
        public const string SETUP_TIME_OPTION = "SETUP_TIME_OPTION";
        /// <summary>
        /// SIMPLE_EQP_ARRANGE 사용 여부 (사용시 EQP_ARRANGE 대신 SIMPLE_EQPARRANGE 사용)
        /// </summary>
        public const string USE_SIMPLE_EQP_ARRANGE = "USE_SIMPLE_EQP_ARRANGE";
        /// <summary>
        /// Hart Pegging을 사용할지 정하는 옵션 (true : Demand단위 패깅, false : Product단위 패깅)
        /// </summary>
        public const string USE_HARD_PEGGING_OPTION = "USE_HARD_PEGGING_OPTION";
        /// <summary>
        /// bool / true일 경우 InputPlan을 IN_PLAN의 값으로 채움
        /// </summary>
        public const string USE_IN_PLAN_OPTION = "USE_IN_PLAN_OPTION";
        /// <summary>
        /// KIT_ID를 사용하는 경우 어떤 OPTION을 사용할지 여부
        /// </summary>
        public const string KIT_OPTION = "KIT_OPTION";
        /// <summary>
        /// UNPEG된 WIP을 사용할지 여부
        /// </summary>
        public const string USE_UNPEG_WIP_OPTION = "USE_UNPEG_WIP_OPTION";
        /// <summary>
        /// IN_TARGET을 기반으로 가상 재공을 생성하여 FW에 투입시키는 로직 적용 유무 옵션
        /// </summary>
        public const string BLOCK_IN_TARGET_LOTS = "BLOCK_IN_TARGET_LOTS";
        public const string FIFO = "FIFO";
        public const string WEIGHTSUM = "WEIGHTSUM";
        public const string WEIGHTSORTED = "WEIGHTSORTED";
        public const string EDD = "EDD";
        public const string SPT = "SPT";
        public const string LPT = "LPT";
        public const string MIN_SETUP = "MIN_SETUP";
        public const string AbbrDAY = "D";
        public const string AbbrHOUR = "H";
        public const string AbbrMIN = "M";
        public const string AbbrSEC = "S";
        public const int DayValue = 216000;
        public const int HourValue = 3600;
        public const int MinValue = 60;
        public const string SECOND = "SECOND";
        public const string HOUR = "HOUR";
        public const string MINUTE = "MINUTE";
        public const string ASC = "ASC";
        public const string DESC = "DESC";
        public const string QTY = "QTY";
        public const string CNT = "CNT";
        public const string PARTIAL_QTY = "PARTIAL_QTY";
        /// <summary>
        /// Default
        /// </summary>
        public const string DEFAULT = "DEFAULT";
        /// <summary>
        /// Product의 INPUT_BATCH_SIZE가 0인 경우 사용합니다. 두 값이 모두 0이면 결과는 0이 됩니다.
        /// </summary>
        public const string DEFAULT_INPUT_BATCH_SIZE = "DEFAULT_INPUT_BATCH_SIZE";
        /// <summary>
        /// StdStepInfo의 STEP_YIELD가 0인 경우 사용합니다. 두 값이 모두 0이면 결과는 0이 됩니다.
        /// </summary>
        public const string DEFAULT_STEP_YIELD = "DEFAULT_STEP_YIELD";
        /// <summary>
        /// StdStepInfo의 STEP_TAT가 0인 경우 사용합니다. 두 값이 모두 0이면 결과는 0이 됩니다.
        /// </summary>
        public const string DEFAULT_STEP_TAT_MINUTES = "DEFAULT_STEP_TAT_MINUTES";
        /// <summary>
        /// 투입계획을 투입 시에 일정한 간격으로 투입을 하기 위하여 사용 됩니다.
        /// </summary>
        public const string DEFAULT_RELEASE_TERM = "DEFAULT_RELEASE_TERM";
        /// <summary>
        /// Product의 LOT_SIZE가 0인 경우 사용합니다. 두 값이 모두 0이면 SeePlan Config의 LotUnitSize를 사용합니다.
        /// </summary>
        public const string DEFAULT_LOT_SIZE = "DEFAULT_LOT_SIZE";
        /// <summary>
        /// EQP_ARRANGE의 PROC_TIME이 0인 경우 사용합니다. 두 값이 모두 0이면 결과는 0이 됩니다.
        /// </summary>
        public const string DEFAULT_PROC_TIME = "DEFAULT_PROC_TIME";
        /// <summary>
        /// EQP_ARRANGE의 TACT_TIME이 0인 경우 사용합니다. 두 값이 모두 0이면 결과는 0이 됩니다.
        /// </summary>
        public const string DEFAULT_TACT_TIME = "DEFAULT_TACT_TIME";
        /// <summary>
        /// SETUP_TIME_OPTION이 DEFAULT로 되어 있을 경우 설정된 값 사용
        /// </summary>
        public const string DEFAULT_SETUP_TIME = "DEFAULT_SETUP_TIME";
        /// <summary>
        /// WIP이 조립 공정에 조립이 되지 않은 상태로 대기하고 있는 경우에 대한 기록
        /// </summary>
        public const string WAITING_LOT_AT_ASSEMBLY_STEP = "WAITING_LOT_AT_ASSEMBLY_STEP";
        public const string PERIODIC = "PERIODIC";
        public const string AT_ENGINE_START = "AT_ENGINE_START";
        public const string SPECIFIC_RELEASE_TIME = "SPECIFIC_RELEASE_TIME";
        public const string NORMAL = "NORMAL";
        public const string ON_TARGET_TIME = "ON_TARGET_TIME";
        public const string IN = "IN";
        public const string OUT = "OUT";
        public const string WAIT = "WAIT";
        public const string BOM = "BOM";
        public const string CHANGE = "CHANGE";
        public const string RunPeg = "RunPeg";
        public const string WaitPeg = "WaitPeg";
        public const string PostRunPeg = "PostRunPeg";
        public const string PostWaitPeg = "PostWaitPeg";
        public const string Position = "Position";
        public const string DUMMY = "DUMMY";
        public const string ERROR = "ERROR";
        public const string AUTO = "AUTO";
        public const string MANUAL = "MANUAL";
        public const string NONE = "NONE";
        public const string USE_STEP_SETUP = "USE_STEP_SETUP";
        public const string USE_EQP_SETUP = "USE_EQP_SETUP";
        public const string CUSTOM = "CUSTOM";
        public const string MAT = "MAT";
        public const string PLAN = "PLAN";
        public const string RUN = "RUN";
        public const string HOLD = "HOLD";
        public const string PREP = "PREP";
        /// <summary>
        /// INVALID_INPUT
        /// </summary>
        public const string INVALID_INPUT = "INVALID_INPUT";
        /// <summary>
        /// 구분자
        /// </summary>
        public const string Delimiter = "SAPSDelimiter";
        /// <summary>
        /// Either "FR_PRODCUT_ID" or "TO_PRODUCT_ID" cannot be found.
        /// </summary>
        public const string PE0001 = "PE0001";
        /// <summary>
        /// Product under "DEMAND_ID" cannot be found.
        /// </summary>
        public const string IN0001 = "IN0001";
        /// <summary>
        /// IN_PLAN의 PRODUCT_ID가 null인 경우
        /// </summary>
        public const string PE0002 = "PE0002";
        /// <summary>
        /// IN_PLAN의 PRODUCT_ID가 PRODUCT 테이블에 정의되지 않은 경우
        /// </summary>
        public const string PE0003 = "PE0003";
        /// <summary>
        /// PRODUCT 테이블의 PROCESS_ID가 PROCESS 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0002 = "IN0002";
        /// <summary>
        /// FIRM_PLAN과 WIP에 중복된 WIP정보가 있을 경우
        /// </summary>
        public const string IN0003 = "IN0003";
        /// <summary>
        /// WIP의 PRODUCT_ID가 PRODUCT 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0004 = "IN0004";
        /// <summary>
        /// WIP의 STEP_ID가 STEP_ROUTE에 정의되어 있지 않은 경우
        /// </summary>
        public const string IN0005 = "IN0005";
        /// <summary>
        /// WIP의 STEP_ID가 STD_STEP_INFO에 정의되어 있지 않은 경우
        /// </summary>
        public const string IN0006 = "IN0006";
        /// <summary>
        /// WIP의 EQP_ID가 EQP 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0007 = "IN0007";
        /// <summary>
        /// WIP의 STATE에 사전 정의 되지 않은 State값이 입력 되어있을 경우 (NULL일 경우 포함)
        /// </summary>
        public const string IN0008 = "IN0008";
        /// <summary>
        /// FIRM_PLAN과 WIP에 중복된 WIP정보가 있을 경우
        /// </summary>
        public const string IN0009 = "IN0009";
        /// <summary>
        /// FIRM_PLAN의 PRODUCT_ID가 PRODUCT 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0010 = "IN0010";
        /// <summary>
        /// FIRM_PLAN의 STEP_ID가 해당 PRODUCT(PROCESS)의 STEP이 아닌 경우
        /// </summary>
        public const string IN0011 = "IN0011";
        /// <summary>
        /// FIRM_PLAN의 STEP_ID가 STD_STEP_INFO에 정의되지 않은 경우
        /// </summary>
        public const string IN0012 = "IN0012";
        /// <summary>
        /// FIRM_PLAN의 EQP_ID가 EQP 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0013 = "IN0013";
        /// <summary>
        /// FIRM_PLAN의 FIRM_TYPE에 사전 정의 되지 않은 FIRM_TYPE값이 입력 되어있을 경우(NULL일 경우 포함)
        /// </summary>
        public const string IN0014 = "IN0014";
        /// <summary>
        /// OUT_STOCK의 PRODUCT_ID가 PRODUCT 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0015 = "IN0015";
        /// <summary>
        /// MATERIAL_BOM의 PRODCUT_ID가 PRODUCT 테이블에 정의되지 않은 경우
        /// </summary>
        public const string IN0016 = "IN0016";
        /// <summary>
        /// MATERIAL_BOM의 OPER_ID가 해당 PRODUCT(PROCESS)의 STEP이 아닌 경우
        /// </summary>
        public const string IN0017 = "IN0017";
        /// <summary>
        /// When NOT_FOUND_DEST_OPTION is set to ERROR, the lot cannot be dispatched to any equipment due to the lack of the EQP_ARRANGE information.
        /// </summary>
        public const string SI0001 = "SI0001";
        /// <summary>
        /// PROCESS에 FirstStep이 없는 경우(STEP_ROUTE에 정의되지 않은 경우)
        /// </summary>
        public const string SI0002 = "SI0002";
        /// <summary>
        /// STEP_ROUTE의 STEP_ID가 STD_STEP_INFO에 정의되지 않은 경우
        /// </summary>
        public const string IN0018 = "IN0018";
        /// <summary>
        /// STEP_ROUTE의 STEP_ID가 STD_STEP_INFO에 정의되지 않은 경우
        /// </summary>
        public const string IN0019 = "IN0019";
        /// <summary>
        /// FirmPlan의 시작시간이 이미 지나버린 경우
        /// </summary>
        public const string SI0003 = "SI0003";
        /// <summary>
        /// FirmPlan의 시작시간이 종료시점보다 이후일 경우
        /// </summary>
        public const string SI0004 = "SI0004";
        /// <summary>
        /// FirmPlan의 시간과 PM시간이 겹치는 경우
        /// </summary>
        public const string SI0005 = "SI0005";
        /// <summary>
        /// FirmPlan의 Key가 중복되는 경우
        /// </summary>
        public const string IN0020 = "IN0020";
        /// <summary>
        /// FrimPlan의 Step이 Run중인 재공의 Step과 중복되는 경우
        /// </summary>
        public const string IN0021 = "IN0021";
        /// <summary>
        /// FirmPlan의 EQP_ID가 EQUIPMENT에 정의되지 않은 경우
        /// </summary>
        public const string IN0022 = "IN0022";
        /// <summary>
        /// PRODUCT_ROUTE의 CHANGE_TYPE이 IN일 때 STEP_ROUTE가 조립 공정까지 정의되어 있지 않은 경우
        /// </summary>
        public const string SI0006 = "SI0006";
        /// <summary>
        /// PROCESS가 STEP_ROUTE에 정의되지 않은 경우
        /// </summary>
        public const string IN0023 = "IN0023";
        /// <summary>
        /// MATERIAL_BOM의 OPER_ID가 STD_STEP_INFO에 정의되지 않은 경우
        /// </summary>
        public const string IN0024 = "IN0024";
        /// <summary>
        /// WIP에 KIT_ID가 있는 경우 각 재공들의 수량을 기반으로 만들 수 있는 만큼 조립 재공의 수량으로 결정 후, 남은 수량에 대해 초기 공정 초기화 작업 수행
        /// </summary>
        public const string OPTION01 = "OPTION01";
        /// <summary>
        /// WIP에 KIT_ID가 있는 경우 각 재공들의 수량을 기반으로 만들 수 있는 만큼을 조립 재공의 수량으로 결정 후, 남은 수량은 Unpegging 진행
        /// </summary>
        public const string OPTION02 = "OPTION02";
        /// <summary>
        /// WIP에 KIT_ID가 있는 경우 각 재공 중 최대 수량을 기반으로 조립 재공의 수량을 결정
        /// </summary>
        public const string OPTION03 = "OPTION03";
        /// <summary>
        /// SPLIT_INFO의 기준정보 입력이 올바르지 않은 경우
        /// </summary>
        public const string IN0025 = "IN0025";
        /// <summary>
        /// SPLIT_INFO의 CRITERIA가 사전 정의되어 있지 않은 값을 입력한 경우
        /// </summary>
        public const string IN0026 = "IN0026";
        /// <summary>
        /// SPLIT_INFO의 PRODUCT가 PRODUCT 테이블에 정의되어 있지 않은 경우
        /// </summary>
        public const string IN0027 = "IN0027";
        /// <summary>
        /// SPLIT_INFO의 STEP_ID가 STEP_ROUTE에 정의되어 있지 않은 경우
        /// </summary>
        public const string IN0028 = "IN0028";
        public const string PRODUCT_ID = "PRODUCT_ID";
        public const string STEP_ID = "STEP_ID";
        /// <summary>
        /// 예약 재공의 설비정보가 올바르지 않은 경우
        /// </summary>
        public const string IN0029 = "IN0029";
        public const string BUSY = "BUSY";
        public const string NO_TARGET = "NO_TARGET";
        public const string EXCESS = "EXCESS";
        public const string NOT_FOUND_PRODUCT_ID = "NOT_FOUND_PRODUCT_ID";
        public const string NOT_FOUND_STEP_ID = "NOT_FOUND_STEP_ID";
        public const string DUPLICATED_WIP_INFO = "DUPLICATED_WIP_INFO";
        public const string NOT_DEFINED_WIP_STATE = "NOT_DEFINED_WIP_STATE";
        public const string NOT_EXIST_STEP_ROUTE = "NOT_EXIST_STEP_ROUTE";
        public const string NOT_FOUND_EQP_ID = "NOT_FOUND_EQP_ID";
        /// <summary>
        /// ProductType이 PART일때 MERGELOT을 사용할지 유무 
        /// </summary>
        public const string USE_PART_MERGELOT = "USE_PART_MERGELOT";
        /// <summary>
        /// FW 전개시 ProductRoute에 따라 제품 분기를 사용하는 경우
        /// </summary>
        public const string FW_PART_CHANGE = "FW_PART_CHANGE";
        public const string TOOL_ID = "TOOL_ID";
        /// <summary>
        /// EQP_ARRANGE의 TACT TIME, PROC_TIME이 입력되어 있지 않은 경우
        /// </summary>
        public const string IN0030 = "IN0030";
        /// <summary>
        /// PRODUCT 의 PROPERTY 값 / SETUP INFO 에 사용되는 PRORPERTY
        /// </summary>
        public const string PROPERTY = "PROPERTY";
        /// <summary>
        /// WIP PEG 판단에 사용되는 PRODUCT
        /// </summary>
        public const string PRODUCT = "PRODUCT";
        public const string MIN_SETUP_PROPERTY = "MIN_SETUP_PROPERTY";
        /// <summary>
        /// EXECUTION_CONFIG_OPTION에서 Factory Start Time을 정의하여 사용. 
        /// </summary>
        public const string DEFAULT_FACTORY_TIME = "DEFAULT_FACTORY_TIME";
        /// <summary>
        /// EXECUTION_CONFIG_OPTION에서 Shift Name을 정의하여 사용
        /// </summary>
        public const string DEFAULT_SHIFT_NAMES = "DEFAULT_SHIFT_NAMES";
        /// <summary>
        /// EXECUTION_CONFIG_OPTION에 Factory Start Time이나 Shift Name이 정의되어 있지 않은 경우
        /// </summary>
        public const string IN0031 = "IN0031";
        public const int DayValue2 = 24;
        /// <summary>
        /// PEG_CONDITION에 데이터가 존재하지 않음. 
        /// </summary>
        public const string IN0032 = "IN0032";
        public const string IN0033 = "IN0033";
        /// <summary>
        /// EQP_UTILIZATION 기준정보가 올바르지 않은 경우
        /// </summary>
        public const string IN0034 = "IN0034";
        /// <summary>
        /// 설비 생산능력 기본값 (기본값 100) 
        /// </summary>
        public const string DEFAULT_UTILIZATION = "DEFAULT_UTILIZATION";
        /// <summary>
        /// 설비 작업능률 기본값 (기본값 100) 
        /// </summary>
        public const string DEFAULT_EFFICIENCY = "DEFAULT_EFFICIENCY";
        /// <summary>
        /// 주/야 교체 기준 시간으로 계획시간 및 수량 관련 분할 처리 기능
        /// </summary>
        public const string APPLY_SHIFT_TIME = "APPLY_SHIFT_TIME";
        /// <summary>
        /// (1 :소수점 이전 계획에 올림처리. 0 : 소수점 그대로 적용, -1 : 소수점 내림처리)
        /// </summary>
        public const string DECIMAL_POINT = "DECIMAL_POINT";
        /// <summary>
        /// 포워드패깅 사용여부
        /// </summary>
        public const string USE_FORWARDPEG = "USE_FORWARDPEG";
        /// <summary>
        /// 툴 사용여부
        /// </summary>
        public const string USE_TOOL = "USE_TOOL";
    }
    /// <summary>
    /// ErrorSeverity Enumerations
    /// </summary>
    public enum ErrorSeverity
    {
        INFO,
        WARNING,
        CRITICAL,
    }
    /// <summary>
    /// 확정 계획 형태
    /// </summary>
    public enum FirmType
    {
        [Mozart.Mapping.MapValueAttribute("DELAY")]
        DELAY = 0,
        [Mozart.Mapping.MapValueAttribute("NORMAL")]
        NORMAL = 1,
        [Mozart.Mapping.MapValueAttribute("SPLIT")]
        SPLIT = 2,
    }
    /// <summary>
    /// ProductChangeType Enumerations
    /// </summary>
    public enum ProductChangeType
    {
        [Mozart.Mapping.MapValueAttribute("WAIT")]
        WAIT = 0,
        [Mozart.Mapping.MapValueAttribute("IN")]
        IN = 1,
        /// <summary>
        /// OUT
        /// </summary>
        OUT = 2,
    }
    /// <summary>
    /// ProductType Enumerations
    /// </summary>
    public enum ProductType
    {
        [Mozart.Mapping.MapValueAttribute("PART")]
        PART = 1,
        [Mozart.Mapping.MapValueAttribute("FG")]
        FG = 2,
    }
    /// <summary>
    /// SplitType Enumerations
    /// </summary>
    public enum SplitType
    {
        [Mozart.Mapping.MapValueAttribute("QTY")]
        QTY = 1,
        [Mozart.Mapping.MapValueAttribute("CNT")]
        CNT = 2,
        [Mozart.Mapping.MapValueAttribute("PARTIAL_QTY")]
        PARTIAL_QTY = 3,
    }
    /// <summary>
    /// StepType Enumerations
    /// </summary>
    public enum StepType
    {
        [Mozart.Mapping.MapValueAttribute("IN")]
        IN = 1,
        [Mozart.Mapping.MapValueAttribute("OUT")]
        OUT = 2,
    }
    /// <summary>
    /// TimeOptionType Enumerations
    /// </summary>
    public enum TimeOptionType
    {
        /// <summary>
        /// Day
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("D")]
        D = 0,
        /// <summary>
        /// Hour
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("H")]
        H = 1,
        /// <summary>
        /// Minute
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("M")]
        M = 2,
        /// <summary>
        /// Second
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("S")]
        S = 3,
    }
    /// <summary>
    /// CRITERIA를 사용하는 Weight Factor
    /// </summary>
    public enum UseCriteriaWeightFactor
    {
        /// <summary>
        /// FIFO
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("FIFO")]
        FIFO = 0,
        /// <summary>
        /// DUE_DATE
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("DUE_DATE")]
        DUE_DATE = 1,
        /// <summary>
        /// DUE_LPST
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("DUE_LPST")]
        DUE_LPST = 2,
        /// <summary>
        /// LIFO
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("LIFO")]
        LIFO = 3,
        /// <summary>
        /// SPT
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("SPT")]
        SPT = 4,
        /// <summary>
        /// LPT
        /// </summary>
        [Mozart.Mapping.MapValueAttribute("LPT")]
        LPT = 5,
    }
}
