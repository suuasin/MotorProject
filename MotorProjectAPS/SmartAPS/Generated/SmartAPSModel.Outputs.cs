/*------------------------------------------------------------------------------------------------------------------------------------------------------------
 <auto-generated>
     This code was generated by a mozart.

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;

namespace SmartAPS.Outputs
{
    
    /// <summary>
    /// 
    /// Keys: VERSION_NO, MAT_ID, MAT_TYPE, PRODUCT_ID, STEP_ID, LOT_ID, MATERIAL_HISTORY_ID
    /// </summary>
    [Table(Name="MATERIAL_HISTORY")]
    public partial class MATERIAL_HISTORY : EntityObject
    {
        /// <summary>
        /// 결과에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 사용된 자재 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string MAT_ID { get; set; }

        /// <summary>
        /// 사용된 자재 종류 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string MAT_TYPE { get; set; }

        /// <summary>
        /// 자재가 사용된 제품 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 자재가 사용된 공정 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=4)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 자재가 사용된 LOT입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=5)]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 사용 전 자재 수량입니다.
        /// </summary>
        [Column()]
        public double QTY { get; set; }

        /// <summary>
        /// 사용 된 자재 수량 입니다.
        /// </summary>
        [Column()]
        public double USE_QTY { get; set; }

        /// <summary>
        /// 사용 된 날짜 입니다.
        /// </summary>
        [Column()]
        public System.DateTime USE_DATE { get; set; }

        /// <summary>
        /// 사용된 자재 종류 입니다. (MAT : 기존 자재, PLAN : 자재 계획 자재)
        /// </summary>
        [Column()]
        public string USE_TYPE { get; set; }

        /// <summary>
        /// Material History ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=6)]
        public string MATERIAL_HISTORY_ID { get; set; }

        /// <summary>
        /// 공급업체
        /// </summary>
        [Column()]
        public string SUPPLIER { get; set; }

        /// <summary>
        /// PlanWip인지 FixWip인지 구분
        /// </summary>
        [Column()]
        public string MAT_DIV { get; set; }

        public MATERIAL_HISTORY ShallowCopy()
        {
			var x = (MATERIAL_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: UNLOADED_LOTLOG_ID
    /// </summary>
    [Table(Name="UNLOADED_LOTLOG")]
    public partial class UNLOADED_LOTLOG : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// LOT_ID 입니다. 
        /// </summary>
        [Column()]
        public string LOT_ID { get; set; }

        /// <summary>
        /// LOT이 마지막으로 위치 했던 공정 입니다.
        /// </summary>
        [Column()]
        public string LAST_STEP_ID { get; set; }

        /// <summary>
        /// 제품 ID 입니다.
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// Lot Size 입니다.
        /// </summary>
        [Column()]
        public double UNIT_QTY { get; set; }

        /// <summary>
        /// Unloaded Lotlog ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string UNLOADED_LOTLOG_ID { get; set; }

        public UNLOADED_LOTLOG ShallowCopy()
        {
			var x = (UNLOADED_LOTLOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, FROM_LOT_ID, TO_LOT_ID, PRODUCT_ROUTE_LOG_ID
    /// </summary>
    [Table(Name="PRODUCT_ROUTE_LOG")]
    public partial class PRODUCT_ROUTE_LOG : EntityObject
    {
        /// <summary>
        /// 결과에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 제품 변경 전의 LOT_ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string FROM_LOT_ID { get; set; }

        /// <summary>
        /// 제품 변경 후의 LOT_ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string TO_LOT_ID { get; set; }

        /// <summary>
        /// 제품 변경 전 제품 ID
        /// </summary>
        [Column()]
        public string FROM_PRODUCT_ID { get; set; }

        /// <summary>
        /// 제품 변경 후 제품 ID
        /// </summary>
        [Column()]
        public string TO_PRODUCT_ID { get; set; }

        /// <summary>
        /// 제품 변경이 발생하는 공정 ID
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 제품 변경 전 Unit 수량
        /// </summary>
        [Column()]
        public double FROM_UNIT_QTY { get; set; }

        /// <summary>
        /// 제품 변경 후 Unit 수량
        /// </summary>
        [Column()]
        public double TO_UNIT_QTY { get; set; }

        /// <summary>
        /// 제품 변경 전 LOT의 제품 변경 대기 시작 시간
        /// </summary>
        [Column()]
        public System.DateTime PREP_CMPL_TIME { get; set; }

        /// <summary>
        /// 제품 변경 된 시간
        /// </summary>
        [Column()]
        public System.DateTime CMPL_TIME { get; set; }

        /// <summary>
        /// 제품 변경 Type
        /// </summary>
        [Column()]
        public string ROUTE_TYPE { get; set; }

        /// <summary>
        /// Merge Wiplog ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string PRODUCT_ROUTE_LOG_ID { get; set; }

        public PRODUCT_ROUTE_LOG ShallowCopy()
        {
			var x = (PRODUCT_ROUTE_LOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="ANALYSIS_PSI")]
    public partial class ANALYSIS_PSI : EntityObject
    {
        [Column()]
        public string ANALYSIS_PSI_ID { get; set; }

        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string CUSTOMER_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        [Column()]
        public string PRODUCT_NAME { get; set; }

        [Column()]
        public string ITEM { get; set; }

        [Column()]
        public double QTY { get; set; }

        [Column()]
        public System.Nullable<double> RTF_RATE { get; set; }

        [Column()]
        public string PSI_DATE { get; set; }

        public ANALYSIS_PSI ShallowCopy()
        {
			var x = (ANALYSIS_PSI) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: UNKIT_REMAIN_WIPLOG_ID
    /// </summary>
    [Table(Name="UNKIT_REMAIN_WIPLOG")]
    public partial class UNKIT_REMAIN_WIPLOG : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// LOT ID 입니다.
        /// </summary>
        [Column()]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 제품 변경 이전의 Product ID
        /// </summary>
        [Column()]
        public string FROM_PRODUCT_ID { get; set; }

        /// <summary>
        /// 제품 변경이 되어야 할 Product ID
        /// </summary>
        [Column()]
        public string TO_PRODUCT_ID { get; set; }

        /// <summary>
        /// 제품 변경이 진행되는 Step ID
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// LOT 이 조립 대기하기 시작한 시점입니다. MERGER 에 투입된 시각
        /// </summary>
        [Column()]
        public System.DateTime PREP_CMPL_TIME { get; set; }

        /// <summary>
        /// 분단위로 대기한 총시간, = END_TIME – WAIT_START
        /// </summary>
        [Column()]
        public double WAITING_TIME { get; set; }

        /// <summary>
        /// Lot에 포함된 Original Unit 수량 (Merger 에 들어온 시점)
        /// </summary>
        [Column()]
        public float ORG_QTY { get; set; }

        /// <summary>
        /// 부분적으로 조립된 경우 현재 남은 수량
        /// </summary>
        [Column()]
        public float REMAIN_QTY { get; set; }

        /// <summary>
        /// 조립이 된 횟수 (반제품 분할 수량)
        /// </summary>
        [Column()]
        public int ASSEMBLY_CNT { get; set; }

        /// <summary>
        /// Unkit Remain Wiplog ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string UNKIT_REMAIN_WIPLOG_ID { get; set; }

        public UNKIT_REMAIN_WIPLOG ShallowCopy()
        {
			var x = (UNKIT_REMAIN_WIPLOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, PRODUCT_ID, PROCESS_ID, STEP_ID, TARGET_DATE, STEP_WIP_ID
    /// </summary>
    [Table(Name="STEP_WIP")]
    public partial class STEP_WIP : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 재공이 위치한 라인 ID 입니다.
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// Process ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 공정 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// StepWip을 기록하는 날짜
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=4)]
        public System.DateTime TARGET_DATE { get; set; }

        /// <summary>
        /// 가공중인 재공 수량
        /// </summary>
        [Column()]
        public float RUN_LOT_QTY { get; set; }

        /// <summary>
        /// 대기중인 재공 수량
        /// </summary>
        [Column()]
        public float WAIT_LOT_QTY { get; set; }

        /// <summary>
        /// 가공중인 재공 LOT 수량
        /// </summary>
        [Column()]
        public float RUN_UNIT_QTY { get; set; }

        /// <summary>
        /// 대기중인 재공 LOT 수량
        /// </summary>
        [Column()]
        public float WAIT_UNIT_QTY { get; set; }

        /// <summary>
        /// Step Wip ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=5)]
        public string STEP_WIP_ID { get; set; }

        [Column()]
        public string DEMAND_ID { get; set; }

        public STEP_WIP ShallowCopy()
        {
			var x = (STEP_WIP) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, BATCH_ID, PRODUCT_ID, INPUT_PLAN_ID
    /// </summary>
    [Table(Name="INPUT_PLAN")]
    public partial class INPUT_PLAN : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 임의로 부여한 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string BATCH_ID { get; set; }

        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 투입이 되어야 하는 일자입니다. 
        /// </summary>
        [Column()]
        public System.DateTime PLAN_DATE { get; set; }

        /// <summary>
        /// 투입 수량입니다. 
        /// </summary>
        [Column()]
        public double PLAN_QTY { get; set; }

        /// <summary>
        /// Input Plan ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string INPUT_PLAN_ID { get; set; }

        public INPUT_PLAN ShallowCopy()
        {
			var x = (INPUT_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: RELEASE_HISTORY_ID
    /// </summary>
    [Table(Name="RELEASE_HISTORY")]
    public partial class RELEASE_HISTORY : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// Lot 을 생성할 때 소진한 INPUT_PLAN 의 BATCH_ID 입니다. 
        /// </summary>
        [Column()]
        public string BATCH_ID { get; set; }

        /// <summary>
        /// LOT_ID 입니다. 
        /// </summary>
        [Column()]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// Lot 이 실제로 공장에 투입된 시각입니다. 
        /// </summary>
        [Column()]
        public System.DateTime RELEASE_DATE { get; set; }

        /// <summary>
        /// 투입 공정 ID 입니다. 
        /// </summary>
        [Column()]
        public string INPUT_STEP_ID { get; set; }

        /// <summary>
        /// LOT 을 구성하는 Unit 의 수량입니다. 
        /// </summary>
        [Column()]
        public int QTY { get; set; }

        /// <summary>
        /// Release History ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string RELEASE_HISTORY_ID { get; set; }

        [Column()]
        public string MO_PRODUCT_ID { get; set; }

        [Column()]
        public string MO_DEMAND_ID { get; set; }

        public RELEASE_HISTORY ShallowCopy()
        {
			var x = (RELEASE_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="RUN_HISTORY")]
    public partial class RUN_HISTORY : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string INPUT_VER { get; set; }

        [Column()]
        public System.DateTime ENG_START_TIME { get; set; }

        [Column()]
        public System.DateTime ENG_END_TIME { get; set; }

        [Column()]
        public System.DateTime SIM_START_TIME { get; set; }

        [Column()]
        public string FACTORY_START_TIME { get; set; }

        [Column()]
        public string STATE { get; set; }

        [Column()]
        public char DATA_COLLECTION_BY_FST { get; set; }

        [Column()]
        public int PERIOD { get; set; }

        public RUN_HISTORY ShallowCopy()
        {
			var x = (RUN_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, EQP_ID, LOT_ID, STEP_ID, EQP_STATE_CODE
    /// </summary>
    [Table(Name="EQP_PLAN")]
    public partial class EQP_PLAN : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 장비가 위치한 라인 ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 장비에서 작업한 LOT ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 작업대상 LOT 의 PRODUCT ID
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 작업대상 LOT 의 PROCESS ID
        /// </summary>
        [Column()]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 작업대상 LOT 의 작업 공정 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// null, IN, OUT (null : 일반 공정, IN : 최초 라인의 투입공정, Out : 제품의 생산 Out 공정)
        /// </summary>
        [Column()]
        public string STEP_TYPE { get; set; }

        /// <summary>
        /// 작업대상 LOT 의 가공 수량(통상 해당 LOT 의 현재 UNIT 수량임)
        /// </summary>
        [Column()]
        public float PROCESS_QTY { get; set; }

        /// <summary>
        /// 작업대상 LOT 이 해당 공정에 대기 시작한 시점(해당 공정에 도착한 시각으로 판단)
        /// </summary>
        [Column()]
        public System.DateTime STEP_IN_TIME { get; set; }

        /// <summary>
        /// 공정 작업 시작 시점
        /// </summary>
        [Column()]
        public System.DateTime EQP_START_TIME { get; set; }

        /// <summary>
        /// 공정 작업 완료 시점
        /// </summary>
        [Column()]
        public System.DateTime EQP_END_TIME { get; set; }

        /// <summary>
        /// 장비 상태 (BUSY, SETUP, PM, IDLE...)
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=4)]
        public string EQP_STATE_CODE { get; set; }

        [Column()]
        public System.DateTime TARGET_DATE { get; set; }

        /// <summary>
        /// 작업물과 연결된 Demand의 ID
        /// </summary>
        [Column()]
        public string DEMAND_ID { get; set; }

        /// <summary>
        /// 작업물과 연결된 Demand의 MO_DUE_DATE
        /// </summary>
        [Column()]
        public System.DateTime DUE_DATE { get; set; }

        /// <summary>
        /// 작업물과 연결된 EQP의 AUTOMATION 정보
        /// </summary>
        [Column()]
        public string AUTOMATION { get; set; }

        /// <summary>
        /// 작업물과 연결된 Demand의 LPST
        /// </summary>
        [Column()]
        public string EQP_PLAN_ID { get; set; }

        [Column()]
        public string TOOL_ID { get; set; }

        /// <summary>
        /// Input 정보로 부터 구한 proc time
        /// </summary>
        [Column()]
        public double INPUT_PROC_TIME { get; set; }

        /// <summary>
        /// Input 정보로 부터 구한 tact time
        /// </summary>
        [Column()]
        public double INPUT_TACT_TIME { get; set; }

        /// <summary>
        /// 생산능력
        /// </summary>
        [Column()]
        public double UTILIZATION { get; set; }

        /// <summary>
        /// 적용효율
        /// </summary>
        [Column()]
        public double EFFICIENCY { get; set; }

        /// <summary>
        /// 생산능력, 적용효율이 반영된 proc time. InputProcTime*(100/Utilization)*(100/Efficiency) 
        /// </summary>
        [Column()]
        public double APPLY_PROC_TIME { get; set; }

        /// <summary>
        /// 생산능력, 적용효율이 반영된 tact time. InputTactTime*(100/Utilization)*(100/Efficiency) 
        /// </summary>
        [Column()]
        public double APPLY_TACT_TIME { get; set; }

        public EQP_PLAN ShallowCopy()
        {
			var x = (EQP_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: ERROR_LOG_ID
    /// </summary>
    [Table(Name="ERROR_LOG")]
    public partial class ERROR_LOG : EntityObject
    {
        /// <summary>
        /// ERROR 키값으로 사용되는 코드입니다. (Prefix: IN = Input, PE = Pegging, SI = Simulation)
        /// </summary>
        [Column()]
        public string ERR_CODE { get; set; }

        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// ERROR 의 정도 (INFO : OUTPUT 에 영향을 미치지는 못하지만 엔진수행 중 로깅이 필요한 항목, WARNING : OUTPUT 에 일부 영향을 미치지만 치명적인 오류는 아닌 항목, CRITICAL : OUTPUT 에 미치는 영향도가 너무 커서 반드시 기준정보나 로직의 정합성 검토가 필요한 항목)
        /// </summary>
        [Column()]
        public string SEVERITY { get; set; }

        /// <summary>
        /// 오류 그룹 – 사용자 지정가능(기준정보, SIMULATION, PEGGIN 등의 분류 등 사용자 정의형의 ERROR GROUP 입니다. 
        /// </summary>
        [Column()]
        public string CATEGORY { get; set; }

        /// <summary>
        /// 오류의 상세한 원인
        /// </summary>
        [Column()]
        public string REASON { get; set; }

        /// <summary>
        /// 대상 오류발생 항목에 대한 서술형 정보
        /// </summary>
        [Column()]
        public string ITEM { get; set; }

        /// <summary>
        /// 오류 대상 LOT 에 대한 제품정보
        /// </summary>
        [Column()]
        public string DEMAND_ID { get; set; }

        /// <summary>
        /// 오류 대상 LOT 의 오류 발생 공정정보
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 오류 대상 공정 정보
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 오류 대상 장비 정보
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 오류 대상 LOT 정보
        /// </summary>
        [Column()]
        public string LOT_ID { get; set; }

        /// <summary>
        /// ERROR 발생시각, PEGGING 오류의 경우 PLAN START TIME 으로 동일하며, SCHEDULE 오류는 SIMULATION CLOCK 기준 시각이 기록됩니다.
        /// </summary>
        [Column()]
        public System.DateTime LOG_TIME { get; set; }

        /// <summary>
        /// Error Log ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string ERROR_LOG_ID { get; set; }

        public ERROR_LOG ShallowCopy()
        {
			var x = (ERROR_LOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, LOT_ID, STEP_ID, MO_DEMAND_ID, PEG_HISTORY_ID
    /// </summary>
    [Table(Name="PEG_HISTORY")]
    public partial class PEG_HISTORY : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 재공(lot) 이 위치한 라인의 정보입니다.
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 재공 식별 ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 재공의 현재 Step 정보입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 재공의 현재 Product ID 입니다.
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 재공 Product 의 속성값.
        /// </summary>
        [Column()]
        public string ITEM_DETAIL { get; set; }

        /// <summary>
        /// 재공에 포함된 Unit 수량입니다.
        /// </summary>
        [Column()]
        public double UNIT_QTY { get; set; }

        /// <summary>
        /// 재공 수량 중 Demand 에 Pegging 된 수량입니다. PEG_QTY < LOT_QTY
        /// </summary>
        [Column()]
        public double PEG_QTY { get; set; }

        /// <summary>
        /// 재공의 상태(초기 상태를 의미함) -> Wip 정보의 State 와 동일한 값을 가집니다.
        /// </summary>
        [Column()]
        public string STATE { get; set; }

        /// <summary>
        /// 재공이 상태에 따라 IN인지 OUT인지 확인(STATE가 WAIT/HOLD면 IN, RUN이면 OUT) 
        /// </summary>
        [Column()]
        public string IN_OUT { get; set; }

        /// <summary>
        /// Demand 에 대한 식별 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string MO_DEMAND_ID { get; set; }

        /// <summary>
        /// Demand 의 PRODUCT ID 입니다.
        /// </summary>
        [Column()]
        public string MO_PRODUCT_ID { get; set; }

        /// <summary>
        /// DEMAND 의 납기일입니다.
        /// </summary>
        [Column()]
        public System.DateTime MO_DUE_DATE { get; set; }

        /// <summary>
        /// Peg History ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=4)]
        public string PEG_HISTORY_ID { get; set; }

        public PEG_HISTORY ShallowCopy()
        {
			var x = (PEG_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, EQP_ID, TARGET_DATE
    /// </summary>
    [Table(Name="LOAD_STAT")]
    public partial class LOAD_STAT : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 장비가 위치한 라인 ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 장비의 Load Stat을 기록하는 날짜
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string TARGET_DATE { get; set; }

        /// <summary>
        /// 해당일에 Setup 시간 점유비율 (1일 중 2.4시간인 경우 0.1 로 표시됨)
        /// </summary>
        [Column()]
        public float SETUP { get; set; }

        /// <summary>
        /// 해당일에 Processing 시간 점유비율 
        /// </summary>
        [Column()]
        public float BUSY { get; set; }

        /// <summary>
        /// 해당일에 Idlerun 시간 점유비율 (Inline 유형의 장비에서만 집계됨, 투입이 가능한 시점에 투입이 안되는 경우 Idlerun으로 판별)
        /// </summary>
        [Column()]
        public float IDLERUN { get; set; }

        /// <summary>
        /// 해당일에 장비 Idle 시간 점유비율
        /// </summary>
        [Column()]
        public float IDLE { get; set; }

        /// <summary>
        /// 해당일에 장비 PM 시간 점유비율
        /// </summary>
        [Column()]
        public float PM { get; set; }

        /// <summary>
        /// 해당일에 장비 Down 시간 점유비율 (초기 Down 후 장비 Up 시뮬레이션을 하는 경우에만 집계됨)
        /// </summary>
        [Column()]
        public float DOWN { get; set; }

        /// <summary>
        /// 해당일에 장비 Break 시간 점유비율
        /// </summary>
        [Column()]
        public float BREAK { get; set; }

        /// <summary>
        /// Load Stat ID
        /// </summary>
        [Column()]
        public string LOAD_STAT_ID { get; set; }

        public LOAD_STAT ShallowCopy()
        {
			var x = (LOAD_STAT) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, EQP_ID, TARGET_DATE
    /// </summary>
    [Table(Name="LOAD_HISTORY")]
    public partial class LOAD_HISTORY : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 장비가 위치한 라인 ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 장비의 Load History 를 기록하는 Date 정보
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string TARGET_DATE { get; set; }

        /// <summary>
        /// Loading 결과 문자열 압축 데이터, 하기 2, 3의 데이터를 모두 이어 붙여 전체 정보를 재구성 할 수 있습니다. 
        /// </summary>
        [Column()]
        public string INFO_GZIP { get; set; }

        /// <summary>
        /// Loading 결과 문자열 압축 데이터
        /// </summary>
        [Column()]
        public string INFO_GZIP_2 { get; set; }

        /// <summary>
        /// Loading 결과 문자열 압축 데이터
        /// </summary>
        [Column()]
        public string INFO_GZIP_3 { get; set; }

        /// <summary>
        /// LoadHistory ID
        /// </summary>
        [Column()]
        public string LOAD_HISTORY_ID { get; set; }

        public LOAD_HISTORY ShallowCopy()
        {
			var x = (LOAD_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, PRODUCT_ID, STEP_ID, MO_DEMAND_ID, STEP_TARGET_ID
    /// </summary>
    [Table(Name="STEP_TARGET")]
    public partial class STEP_TARGET : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 재공의 현재 Product ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 재공의 현재 Step 정보입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 공정(STEP_ID) 의 투입 목표수량 입니다. TARGET_DATE 에 투입 필요한 수량입니다. 
        /// </summary>
        [Column()]
        public double IN_QTY { get; set; }

        /// <summary>
        /// 공정(STEP_ID) 의 생산 목표수량 입니다. TARGET_DATE 에 생산(OUT) 필요한 수량입니다. 
        /// </summary>
        [Column()]
        public double OUT_QTY { get; set; }

        [Column()]
        public string IN_OUT { get; set; }

        /// <summary>
        /// 목표시간 입니다.
        /// </summary>
        [Column()]
        public System.DateTime TARGET_DATE { get; set; }

        /// <summary>
        /// DEMAND 에 대한 식별 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string MO_DEMAND_ID { get; set; }

        /// <summary>
        /// DEMAND 의 PRODUCT ID 입니다. 
        /// </summary>
        [Column()]
        public string MO_PRODUCT_ID { get; set; }

        /// <summary>
        /// DEMAND 의 납기일입니다.
        /// </summary>
        [Column()]
        public System.DateTime MO_DUE_DATE { get; set; }

        /// <summary>
        /// Step Target ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=4)]
        public string STEP_TARGET_ID { get; set; }

        public STEP_TARGET ShallowCopy()
        {
			var x = (STEP_TARGET) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="WIP_HIS")]
    public partial class WIP_HIS : EntityObject
    {
        [Column()]
        public string WIP_HIS_ID { get; set; }

        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string LOT_ID { get; set; }

        [Column()]
        public string LINE_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        [Column()]
        public string PROCESS_ID { get; set; }

        [Column()]
        public string STEP_ID { get; set; }

        [Column()]
        public double UNIT_QTY { get; set; }

        [Column()]
        public string EQP_ID { get; set; }

        [Column()]
        public System.DateTime LINE_IN_TIME { get; set; }

        [Column()]
        public System.DateTime STEP_ARRIVE_TIME { get; set; }

        [Column()]
        public string STATE { get; set; }

        [Column()]
        public System.DateTime STATE_TIME { get; set; }

        [Column()]
        public double OUT_QTY { get; set; }

        [Column()]
        public string DEMAND_ID { get; set; }

        public WIP_HIS ShallowCopy()
        {
			var x = (WIP_HIS) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="STEP_MOVE")]
    public partial class STEP_MOVE : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string LINE_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        [Column()]
        public string PROCESS_ID { get; set; }

        [Column()]
        public string STEP_ID { get; set; }

        [Column()]
        public string EQP_ID { get; set; }

        [Column()]
        public System.DateTime PLAN_DATE { get; set; }

        [Column()]
        public float IN_QTY { get; set; }

        [Column()]
        public float OUT_QTY { get; set; }

        [Column()]
        public string DEMAND_ID { get; set; }

        public STEP_MOVE ShallowCopy()
        {
			var x = (STEP_MOVE) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="TOOL_SEIZE_LOG")]
    public partial class TOOL_SEIZE_LOG : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string TOOL_ID { get; set; }

        [Column()]
        public string EQP_ID { get; set; }

        [Column()]
        public System.DateTime SEIZE_TIME { get; set; }

        [Column()]
        public System.DateTime RELEASE_TIME { get; set; }

        [Column()]
        public string TOOL_LIST { get; set; }

        [Column()]
        public int AVAILABLES { get; set; }

        [Column()]
        public int CAPACITY { get; set; }

        public TOOL_SEIZE_LOG ShallowCopy()
        {
			var x = (TOOL_SEIZE_LOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="PRESET_INFO_HIS")]
    public partial class PRESET_INFO_HIS : EntityObject
    {
        /// <summary>
        /// VERSION_NO
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// PRESET ID​
        /// </summary>
        [Column()]
        public string PRESET_ID { get; set; }

        /// <summary>
        /// 우선순위 요소 ID  Project 의 Weights 에 Factor 가 구현되어 있는 경우만 Valid 하게 동작함​
        /// </summary>
        [Column()]
        public string FACTOR_ID { get; set; }

        /// <summary>
        /// LOTTYPE,STEPTYPE (LOTTYPE:모든 Lot 별로 factor 값 계산, STEPTYPE:동일제품의 동일 공정(Step)의 경우 Dispatching 시 최초 1회만 값 계산)
        /// </summary>
        [Column()]
        public string FACTOR_TYPE { get; set; }

        /// <summary>
        /// FACTOR 의 가중합을 계산할 때 사용될 가중치​, 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE = 'WeightSum' 인 경우에 동작
        /// </summary>
        [Column()]
        public float FACTOR_WEIGHT { get; set; }

        /// <summary>
        /// 사용한 FACTOR의 속성값
        /// </summary>
        [Column()]
        public string FACTOR_DETAIL { get; set; }

        /// <summary>
        /// ASC,DESC (점수 정렬 방식, WeightSorted 에만 적용)
        /// </summary>
        [Column()]
        public string ORDER_TYPE { get; set; }

        /// <summary>
        /// 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE= 'WeightSorted'인 경우에 동작​, PRESET 내의 FACTOR 중 대상 FACTOR 의 소팅 우선순위, 오름차순으로 소팅 됨​
        /// </summary>
        [Column()]
        public int SEQUENCE { get; set; }

        /// <summary>
        /// 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE= 'WeightSorted'인 경우에 동작, ​FACTOR 계산에 사용되는 PARAMETER 값
        /// </summary>
        [Column()]
        public string CRITERIA { get; set; }

        /// <summary>
        /// 설명
        /// </summary>
        [Column()]
        public string DESCRIPTION { get; set; }

        public PRESET_INFO_HIS ShallowCopy()
        {
			var x = (PRESET_INFO_HIS) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="INIT_WIP_LOG")]
    public partial class INIT_WIP_LOG : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string LOT_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        [Column()]
        public string ORG_STEP_ID { get; set; }

        [Column()]
        public string REV_STEP_ID { get; set; }

        [Column()]
        public string ORG_STATUS { get; set; }

        [Column()]
        public string REV_STATUS { get; set; }

        [Column()]
        public System.DateTime AVAILABLE_TIME { get; set; }

        [Column()]
        public string CATEGORY { get; set; }

        public INIT_WIP_LOG ShallowCopy()
        {
			var x = (INIT_WIP_LOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: EQP_DISPATCH_LOG_ID
    /// </summary>
    [Table(Name="EQP_DISPATCH_LOG")]
    public partial class EQP_DISPATCH_LOG : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column()]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 장비 ID
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        [Column()]
        public string DISPATCHING_TIME { get; set; }

        [Column()]
        public string PRESET_ID { get; set; }

        [Column()]
        public int INIT_WIP_CNT { get; set; }

        [Column()]
        public int FILTERED_WIP_CNT { get; set; }

        [Column()]
        public int SELECTED_WIP_CNT { get; set; }

        [Column()]
        public string SELECTED_WIP { get; set; }

        [Column()]
        public string FILTERED_WIP_LOG { get; set; }

        [Column()]
        public string DISPATCH_WIP_LOG { get; set; }

        /// <summary>
        /// Eqp Dispatch Log ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string EQP_DISPATCH_LOG_ID { get; set; }

        public EQP_DISPATCH_LOG ShallowCopy()
        {
			var x = (EQP_DISPATCH_LOG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="DEMAND_HIS")]
    public partial class DEMAND_HIS : EntityObject
    {
        [Column()]
        public string DEMAND_HIS_ID { get; set; }

        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string DEMAND_VER { get; set; }

        [Column()]
        public string DEMAND_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        [Column()]
        public string LINE_ID { get; set; }

        [Column()]
        public string CUSTOMER_ID { get; set; }

        [Column()]
        public System.DateTime DUE_DATE { get; set; }

        [Column()]
        public double DEMAND_QTY { get; set; }

        [Column()]
        public float PRIORITY { get; set; }

        public DEMAND_HIS ShallowCopy()
        {
			var x = (DEMAND_HIS) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: VERSION_NO, LOT_ID, UNPEG_HISTORY_ID
    /// </summary>
    [Table(Name="UNPEG_HISTORY")]
    public partial class UNPEG_HISTORY : EntityObject
    {
        /// <summary>
        /// 결과 계획에 대한 VERSION 문자열입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string VERSION_NO { get; set; }

        /// <summary>
        /// 재공(lot) 이 위치한 라인의 정보입니다.
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 재공 식별 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 재공의 현재 Step 정보입니다. 
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 재공의 현재 Product ID 입니다. 
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 재공에 포함된 Unit 수량입니다. 
        /// </summary>
        [Column()]
        public double UNIT_QTY { get; set; }

        /// <summary>
        /// 재공의 상태(초기 상태를 의미함) -> Wip 정보의 State 와 동일한 값입니다. 
        /// </summary>
        [Column()]
        public string STATE { get; set; }

        /// <summary>
        /// Lot 의 Pegging 안된 잔여 수량입니다. 항상 UNPEG_QTY < LOT_QTY
        /// </summary>
        [Column()]
        public double UNPEG_QTY { get; set; }

        /// <summary>
        /// UNPEG 이 된 사유의 분류입니다. 예를 들어 EXCESS(DEMAND 보다 재공이 많은 경우), WIP(재공의 이슈로 Pegging 안되는 경우), TARGET (TARGET 이 충분하지 않거나 없는 경우)
        /// </summary>
        [Column()]
        public string UNPEG_CATEGORY { get; set; }

        /// <summary>
        /// UNPEG의 자세한 사유입니다. 코드화하여 처리할 수 있습니다.
        /// </summary>
        [Column()]
        public string UNPEG_REASON { get; set; }

        /// <summary>
        /// Unpeg History ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string UNPEG_HISTORY_ID { get; set; }

        public UNPEG_HISTORY ShallowCopy()
        {
			var x = (UNPEG_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="APS_STATUS_MASTER")]
    public partial class APS_STATUS_MASTER : EntityObject
    {
        [Column()]
        public string APS_CODE { get; set; }

        [Column()]
        public string APS_VALUE { get; set; }

        public APS_STATUS_MASTER ShallowCopy()
        {
			var x = (APS_STATUS_MASTER) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="APS_LOG_HISTORY")]
    public partial class APS_LOG_HISTORY : EntityObject
    {
        [Column()]
        public string LOG_ID { get; set; }

        [Column()]
        public System.DateTime LOG_DATETIME { get; set; }

        [Column()]
        public string LOG_TEXT { get; set; }

        public APS_LOG_HISTORY ShallowCopy()
        {
			var x = (APS_LOG_HISTORY) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
}
