<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mozart.Task.Execution</name>
    </assembly>
    <members>
        <member name="T:Mozart.Task.Execution.FEModuleExtensionAttribute">
            <summary>
            모듈확장 특성 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.ModuleName">
            <summary>
            모듈확장이 추가될 수 있는 모듈 형식의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Name">
            <summary>
            모듈확장의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Description">
            <summary>
            모듈확장에 대한 간단한 설명을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Detail">
            <summary>
            모듈확장에 대한 자세한 설명을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Author">
            <summary>
            모듈확장의 제작자를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Icon">
            <summary>
            모듈확장의 아이콘의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.TreeIcon">
            <summary>
            Mozart Explorer에서 표시될 모듈확장의 아이콘의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionAttribute.Order">
            <summary>
            Mozart Explorer에서 모듈확장이 표시될 순서를 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FEModuleExtensionAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            지정된 정보를 사용하여 새로운 모듈확장 특성을 생성합니다.
            </summary>
            <param name="moduleName">모듈확장이 추가될 수 있는 모듈 형식의 이름입니다.</param>
            <param name="name">모듈확장의 이름입니다.</param>
            <param name="description">모듈확장에 대한 간단한 설명입니다.</param>
            <param name="detail">모듈확장에 대한 자세한 설명입니다.</param>
            <param name="author">모듈확장의 제작자입니다.</param>
            <param name="icon">모듈확장의 아이콘의 이름입니다.</param>
            <param name="treeIcon">Mozart Explorer에서 표시될 모듈확장의 아이콘의 이름입니다.</param>
            <param name="order">Mozart Explorer에서 모듈확장이 표시될 순서입니다.</param>
        </member>
        <member name="T:Mozart.Task.Execution.FEModuleExtensionComponentAttribute">
            <summary>
            모듈확장에 포함된 컴포넌트의 특성 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionComponentAttribute.ModuleExtensionName">
            <summary>
            컴포넌트가 포함된 모듈확장의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionComponentAttribute.Name">
            <summary>
            컴포넌트의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEModuleExtensionComponentAttribute.Order">
            <summary>
            Mozart Explorer에서 컴포넌트가 표시될 순서를 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FEModuleExtensionComponentAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            지정된 정보를 사용하여 새로운 모듈확장에 포함된 컴포넌트의 특성을 생성합니다.
            </summary>
            <param name="moduleExtensionName">컴포넌트가 포함된 모듈확장의 이름입니다.</param>
            <param name="name">컴포넌트의 이름입니다.</param>
            <param name="order">Mozart Explorer에서 컴포넌트가 표시될 순서입니다.</param>
        </member>
        <member name="T:Mozart.Task.Execution.FEMyMethodAttribute">
            <summary>
            클래스가 My Method 함수를 정의한 클래스임을 나타냅니다. 
            </summary>
            <summary>
            The class that represents the class that defines <em>My Method</em> methods.  
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FEMyMethodAttribute.#ctor">
            <summary>
            새로운 FEMyMethodAttribute를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>FEMyMethodAttribute</em> class. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FEMyMethodAttribute.Extract(System.Reflection.Assembly)">
            <summary>
            어셈블리에서 FEMyMethodAttribute 속성이 포함된 모든 형식의 목록을 반환합니다.
            </summary>
            <param name="assembly">추출 대상 어셈블리입니다.</param>
            <returns>FEMyMethodAttribute 속성이 포함된 모든 형식의 목록입니다.</returns>
            <summary>
            Returns the list of all types including the property of FEMyMethodAttribute, from the specified assembly.
            </summary>
            <param name="assembly">The assembly to get the list of types and FEMyMethodAttribute properties.</param>
            <returns>Returns the list of all types including the property of FEMyMethodAttribute, from the specified assembly.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.MyComponentAttribute">
            <summary>
            클래스가 사용자 정의 컴포넌트로 정의되었음을 나타냅니다.
            </summary>
            <summary>
            Specifies that the class is defined as a custom component.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.MyComponentAttribute.Root">
            <summary>
            컴포넌트가 포함된 모듈의 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the name of the module(Simulation,Pegging,CBS,etc..) which the specified custom component is attached to. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.MyComponentAttribute.Name">
            <summary>
            컴포넌트의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets or sets the string containing the name of the specified custom component. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.MyComponentAttribute.Order">
            <summary>
            컴포넌트의 순서를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the sort order of the specified custom component when the custom component is within the same FECategory with other custom components. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.MyComponentAttribute.#ctor(System.String)">
            <summary>
            주어진 이름을 사용하여 새로운 MyComponentAttribute를 생성합니다.
            </summary>
            <param name="name">컴포넌트의 이름입니다.</param>
            <summary>
            Initializes a new instance of <em>MyComponentAttribute</em> with the specified string containing the name of this instance. 
            </summary>
            <param name="name">The string containing name of the specified custom component.</param>
        </member>
        <member name="T:Mozart.Task.Execution.MyDefaultAttribute">
            <summary>
            클래스가 사용자 정의 Predefined Definition을 구현한 클래스임을 나타냅니다.
            </summary>
            <summary>
            Sepcifies that this class defines the custom <em>Predefined Definition</em>. 
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.StringCompressor">
            <summary>
            문자열을 압축 또는 압축 해제하는 기능을 제공하는 클래스입니다.
            </summary>
            <summary>
            The class that provides the functionality to compress or decompress string. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.StringCompressor.Compress(System.String,System.Boolean)">
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The specified string to compress.</param>
            <param name="insertLineBreaks">문자열 표현에서 76자마다 줄 바꿈을 삽입할지 여부입니다.</param>
            <returns>압축된 문자열입니다.</returns>
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The specified string to compress.</param>
            <param name="insertLineBreaks">Determines whether to add new line after every 76 characters in th string expression.</param>
            <returns>Returns the compressed string.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.StringCompressor.Decompress(System.String)">
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns>압축 해제된 문자열입니다.</returns>
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The string containing the compressed text to decompress.</param>
            <returns>Returns the decompressed string of the specified compressed string.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.DerivedHelper">
            <summary>
            사용자가 정의한 형식의 IEntityObject를 기록하는 IEntityWriter를 관리하기 위한 확장 메소드 클래스입니다.
            </summary>
            <summary>
            The extension methods class to manage <em>IEntityWriter</em>, which writes the <em>IEntityObject</em> of the custom type.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.Add2``1(Mozart.DataActions.IEntityWriter,``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
            'On before add item' 함수를 호출하고, 주어진 IEntityObject를 IEntityWriter에 추가합니다.
            </summary>
            <typeparam name="T">주어진 IEntityObject 개체의 형식입니다.</typeparam>
            <param name="writer">주어진 IEntityObject 개체를 추가할 IEntityWriter입니다.</param>
            <param name="row">IEntityWriter에 추가할 IEntityObject 개체입니다.</param>
            <param name="context">IEntityObject 추가 작업에서 사용되는 컨텍스트 개체입니다.</param>
            <summary>
            Calls the 'On before add item' method, and adds the specified <em>IEntityObject</em> to <em>IEntityWriter</em>. 
            </summary>
            <typeparam name="T">The type of <em>IEntityObject</em> object.</typeparam>
            <param name="writer"><em>IEntityWriter</em> to add the specifed <em>IEntityObject</em>.</param>
            <param name="row">The specified <em>IEntityWriter</em> to add to <em>IEntityWriter</em>.</param>
            <param name="context">The context object used during <em>IEntityObject</em> add operation. </param>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.AddBuffer2``1(Mozart.DataActions.IBufferedEntityWriter,``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
            'On before add item' 함수를 호출하고, 주어진 개체를 IBufferedEntityWriter의 Buffer에 추가합니다.
            </summary>
            <typeparam name="T">주어진 IEntityObject 개체의 형식입니다.</typeparam>
            <param name="writer">주어진 IEntityObject 개체를 추가할 IBufferedEntityWriter입니다.</param>
            <param name="row">IBufferedEntityWrited의 Buffer에 추가할 IEntityObject 개체입니다.</param>
            <param name="context">IEntityObject 추가 작업에서 사용되는 컨텍스트 개체입니다.</param>
            <summary>
            Calls the 'On before add item' method, and adds the specified object to the buffer of the <em>IBufferedEntityWriter</em>. 
            </summary>
            <typeparam name="T">The type of <em>IEntityObject</em> object.</typeparam>
            <param name="writer"><em>IBufferedEntityWriter</em> to add the specifed <em>IEntityObject</em>.</param>
            <param name="row">The specified <em>IEntityObject</em> to add to the buffer of <em>IBufferedEntityWriter</em>.</param>
            <param name="context">The context object used during <em>IEntityObject</em> add operation.</param>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.Add2``1(Mozart.DataActions.IEntityWriter{``0},``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
            주어진 IEntityObject를 IEntityWriter에 추가합니다.
            </summary>
            <typeparam name="T">주어진 IEntityObject 개채의 형식입니다.</typeparam>
            <param name="writer">주어진 IEntityObject 개체를 추가할 IEntityWriter입니다.</param>
            <param name="row">IEntityWriter에 추가할 IEntityObject 개체입니다.</param>
            <param name="context">IEntityObject 추가 작업에서 사용되는 컨텍스트 개체입니다.</param>
            <summary>
            Adds the specified <em>IEntityObject</em> to <em>IEntityWriter</em>. 
            </summary>
            <typeparam name="T">The type of <em>IEntityObject</em> object.</typeparam>
            <param name="writer"><em>IEntityWriter</em> to add the specifed <em>IEntityObject</em>.</param>
            <param name="row">The specified <em>IEntityObject</em> to add to <em>IEntityWriter</em>.</param>
            <param name="context">The context object used during <em>IEntityObject</em> add operation. </param>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.AddBuffer2``1(Mozart.DataActions.IBufferedEntityWriter{``0},``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
            주어진 개체를 IBufferedEntityWriter의 Buffer에 추가합니다.
            </summary>
            <typeparam name="T">주어진 IEntityObject 개채의 형식입니다.</typeparam>
            <param name="writer">주어진 IEntityObject 개체를 추가할 IBufferedEntityWriter입니다.</param>
            <param name="row">IBufferedEntityWrited의 Buffer에 추가할 IEntityObject 개체입니다.</param>
            <param name="context">IEntityObject 추가 작업에서 사용되는 컨텍스트 개체입니다.</param>
            <summary>
            Adds the specified object to the buffer of the <em>IBufferedEntityWriter</em>. 
            </summary>
            <typeparam name="T">The type of <em>IEntityObject</em> object.</typeparam>
            <param name="writer"><em>IBufferedEntityWriter</em> to add the specifed <em>IEntityObject</em>.</param>
            <param name="row">The specified <em>IEntityObject</em> to add to the buffer of <em>IBufferedEntityWriter</em>.</param>
            <param name="context">The context object used during <em>IEntityObject</em> add operation.</param>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.GetTable``1">
            <summary>
            주어진 IEntityObject 형식의 자료를 기록하는 IEntityWriter를 반환합니다.
            만약 주어진 IEntityObject 형식을 상속받은 형식의 자료를 기록하는 IEntityWriter가 존재한다면 해당 IEntityWriter를 반환합니다.
            </summary>
            <typeparam name="SB">IEntityObject 개체의 형식입니다.</typeparam>
            <returns>주어진 IEntityObject 형식의 자료를 기록하는 IEntityWriter입니다.</returns>
            <summary>
            Returns <em>IEntityWriter</em> that writes the data of the specified <em>IEntityObject</em> type.
            If there is an <em>IEntityWriter</em> that writes the data that inherits the specified <em>IEntityObject</em> type, then returns that <em>IEntityWriter</em>.  
            </summary>
            <typeparam name="SB">The type of the <em>IEntityObject</em> object.</typeparam>
            <returns>Returns the <em>IEntityWriter</em> that writes the specified <em>IEntityObject</em> type.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.GetBuffered``1">
            <summary>
            주어진 IEntityObject 형식의 자료를 기록하는 IBufferedEntityWriter를 반환합니다.
            만약 주어진 IEntityObject 형식을 상속받은 형식의 자료를 기록하는 IBufferedEntityWrite가 존재한다면 해당 IBufferedEntityWriter를 반환합니다.
            </summary>
            <typeparam name="SB">IEntityObject 개체의 형식입니다.</typeparam>
            <returns>주어진 IEntityObject 형식의 자료를 기록하는 IBufferedEntityWriter입니다.</returns>
            <summary>
            Returns <em>IBufferedEntityWriter</em> that writes the data of the specified <em>IEntityObject</em> type.
            If there is an <em>IBufferedEntityWriter</em> that writes the data that inherits the specified <em>IEntityObject</em> type, then returns that <em>IBufferedEntityWriter</em>.  
            </summary>
            <typeparam name="SB">The type of the <em>IEntityObject</em> object.</typeparam>
            <returns>Returns the <em>IBufferedEntityWriter</em> that writes the specified <em>IEntityObject</em> type.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.CallBeforeAddHandler``1(``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
            'On before add item' 함수를 호출합니다.
            </summary>
            <typeparam name="SB">IEntityObject 개체의 형식입니다.</typeparam>
            <param name="ph">IEntityObject 개체입니다.</param>
            <param name="ctx">함수 호출 작업에 사용되는 컨텍스트 개체입니다.</param>
            <summary>
            Calls 'On before add item' method. 
            </summary>
            <typeparam name="SB">The type of the <em>IEntityObject</em> object.</typeparam>
            <param name="ph">The specified <em>IEntityObject</em> object.</param>
            <param name="ctx">The context object used during 'On before add item' call operation.</param>
        </member>
        <member name="M:Mozart.Task.Execution.DerivedHelper.CallAfterLoadHandler``1(``0,System.Object)">
            <summary>
            "On after load item" 함수를 호출합니다.
            </summary>
            <typeparam name="SB">IEntityObject 개체의 형식입니다.</typeparam>
            <param name="ph">IEntityObject 개체입니다.</param>
            <param name="my">IEntityObject 개체로부터 생성된 My Object 형식의 개체입니다.</param>
            <returns>주어진 IEntityObject를 InputMart의 EntityTable에 추가할지 여부입니다.</returns>
            <summary>
            Calls 'On after load item' method.
            </summary>
            <typeparam name="SB">The type of the <em>IEntityObject</em> object.</typeparam>
            <param name="ph">The specified <em>IEntityObject</em> object.</param>
            <param name="my"><em>My Object</em> type object created from <em>IEntityObject</em> object.</param>
            <returns><em>true</em> to add the specified <em>IEntityObject</em> to <em>EntityTable</em> of <em>Inputmart.</em>; otherwise, false.</returns>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyExecMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyInputDir">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyOutputDir">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyCommand">
            <summary> 
            Required parameter that specifies the name of the command (executable) 
            to be ran.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyArguments">
            <summary> 
            Optional parameter that specifies the parameters to be passed to the
            executed command.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyWaitForProcess">
            <summary> 
            Optional parameter (value should be 'true' or 'false') that specifies 
            whether the job should wait for the execution of the native process to 
            complete before it completes.
            
            <para>Defaults to <see langword="true" />.</para>  
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyBufferedStreams">
            <summary> 
            Optional parameter (value should be 'true' or 'false') that specifies 
            whether the spawned process's stdout and stderr streams should be 
            consumed and write to logger at onece .  
            
            <para>Defaults to <see langword="false" />.</para>  
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyConsumeStreams">
            <summary> 
            Optional parameter (value should be 'true' or 'false') that specifies 
            whether the spawned process's stdout and stderr streams should be 
            consumed.  If the process creates output, it is possible that it might
            'hang' if the streams are not consumed.
            
            <para>Defaults to <see langword="false" />.</para>  
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.PropertyWorkingDirectory">
            <summary> 
            Optional parameter that specifies the workling directory to be used by 
            the executed command.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Framework.ExternalExecution.log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="T:Mozart.Task.Execution.Framework.ExternalExecution.StreamConsumer">
            <summary> 
            Consumes data from the given input stream until EOF and prints the data to stdout
            </summary>
            <author>cooste</author>
            <author>James House</author>
        </member>
        <member name="M:Mozart.Task.Execution.Framework.ExternalExecution.StreamConsumer.#ctor(Mozart.Task.Execution.Framework.ExternalExecution,System.IO.StreamReader,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mozart.Task.Execution.Framework.ExternalExecution.StreamConsumer"/> class.
            </summary>
            <param name="enclosingInstance">The enclosing instance.</param>
            <param name="inputStream">The input stream.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Framework.ExternalExecution.StreamConsumer.Run">
            <summary> 
            Runs this object as a separate thread, printing the contents of the input stream
            supplied during instantiation, to either Console. or stderr
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ExportWithKeyAttribute.ContractKey">
            <remarks>Specifies service key if <see cref="P:Mozart.Task.Execution.ExportAttribute.ContractName"/> is not specified.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ExportAllAttribute.ContractKey">
            <remarks>Specifies service key if <see cref="P:Mozart.Task.Execution.ExportAllAttribute.ContractName"/> is not specified.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ExportAllAttribute.ContractName">
            <remarks>If specified has more priority over <see cref="P:Mozart.Task.Execution.ExportAllAttribute.ContractKey"/>.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ExportAsDecoratorAttribute.ContractName">
            <remarks>If specified has more priority over <see cref="P:Mozart.Task.Execution.ExportAsDecoratorAttribute.ContractKey"/>.</remarks>
        </member>
        <member name="T:Mozart.Task.Execution.CreationPolicyAttribute">
            <summary>
            You may use this attribute to specify CreationPolicy for <see cref="T:DryIoc.MefAttributedModel.IFactory`1"/> Create method.
            Or in place of <see cref="T:Mozart.Task.Execution.PartCreationPolicyAttribute"/> for exported classes.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.FEActionAttribute">
            <summary>
            함수가 FEAction으로 정의되었음을 나타냅니다. 
            함수에는 반드시 public 키워드와 virtual 키워드가 포함되어 있어야 하고, 
            </summary>
            <summary>
            <para>Specifies that the method is declared as FEAction when this attribute is used.</para>
            <para>The method must be declared as public virtual keyword,to be defined as FEAction.</para>   
            </summary>
            <example>
            This sample illustrates how to declare a method using FEAction attribute, with return type. 
            <code>
            //Attribute format : FEAction("Method name to expose in Mozart Explorer, Mandatory = true/false - Determines whether the logics for the method must be implemented or not when this FEAction is included to the FEComponent.)
            [FEAction("GetProcessTime", Mandatory = true)] 
            public virtual ProcTimeInfo GetProcessTime(AoEquipment aepq, IHandlingBatch hb)
            {
              // If method is not void type, return value should be specified. 
              return new ProcTimeInfo(); 
            }
            </code>
            </example>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.Name">
            <summary>
            FEAction의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the specified FEAction. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.Order">
            <summary>
            동일 FEComponent 하위에서 FEAction의 순서를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the sort order of the specified FEAction when this FEAction is within the same FEComponent group with other FEActions. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.Mandatory">
            <summary>
            FEAction의 필수 구현 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Determines whether the specifeid method of the FEAction must have logics implemented or not, when this FEAction is included to custom FEComponent and exposed in Mozart Explorer. 
            </summary>
            <remarks>
            Set true, an indicator will appear on the name of the FEAction through Mozart Explorer, indicating that logic implementation is mandatory for this FEAction.
            </remarks>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.Description">
            <summary>
            FEAction의 설명을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the description for the specified FEAction. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.DependentType">
            <summary>
            FEAction간 종속 관계를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the dependencies among other FEAction of the specified FEAction.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FEActionAttribute.DependentTo">
            <summary>
            종속된 FEAction의 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the name of FEActoion dependent to the specified FEAction. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FEActionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            주어진 이름과 순서를 사용하여 새로운 FEActionAttribute를 생성합니다.
            </summary>
            <param name="name"></param>
            <param name="order"></param>
            <summary>
            Initializes a new instance of <em>FEActionAttribute</em> class with specified string containing name of the FEAction, and an signed integer that indicates the position in the sort order when this FEAction is within the same FEComponent group with other FEActions. 
            </summary>
            <param name="name">The string containing the name of the specified FEAction.</param>
            <param name="order">The signed integer that indicates the sort order position of the specified FEAction.</param>
        </member>
        <member name="M:Mozart.Task.Execution.FEActionAttribute.#ctor">
            <summary>
            새로운 FEActionAttribute를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>FEActionAttribute</em> class.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.FeatureAttachToAttribute">
            <summary>
            함수가 Predefined Definition으로 정의되었음을 나타냅니다. 
            함수는 반드시 타겟 FEAction과 동일한 반환 형식을 가져야 하고, 
            ref bool 형식의 매개 변수가 가장 마지막에 포함되어 있어야 합니다.
            또한 반환 형식이 void가 아닌 경우 환 형식의 매개 변수가 ref bool 형식의 매개 변수 이전에 포함되어 있아야 합니다.
            </summary>
            <summary>
            <para>Specifies that the method defined is declared as <em>Predefined Definition</em> when this attribute is used.</para>
            <para><em>Predefines Definition</em> is the default logic implementation of the specified FEAction.</para>
            <para>The predefined definition must have the exact same return type as the target FEAction. </para>
            <para>ref bool parameter which determines whether not to execute the sibling FEAction of the specified FEAction, should be included as the last parameter of the method declaration.</para>
            <para>Unless the method is declared using void keyword, the return type of the specified method should be included as its parameter and positioned in front of ref bool parameter.</para>
            </summary>
            <example>
            This sample illustrates how to declare a predefined definition using <em>FeatureAttributeToAttribute</em> attribute.
            But first, an FEAction should be declared in order to map the predefined definition to the specified FEAction. 
            <code>
            // FEAction declaration. 
            // ref bool and return type parameter is auto generated when this FEAction is included through Mozart Explorer. 
            // Other specified parameters should be included manually. 
            [FEAction("GetProcessTime", Mandatory = true)] 
            public virtual Mozart.SeePlan.DataModel.ProcTimeInfo GetProcessTime(Mozart.SeePlan.Simulation.AoEquipment aepq, Mozart.SeePlan.Simulation.IHandlingBatch hb)
            {
              // If method is not void type, return value should be specified. 
              return new ProcTimeInfo(); 
            }
            
            //Predefined definition declaration of the <em>GetProcessTime</em> FEAction. 
            // Attribute Format : [FeatureAttachTo("Name of the FEComponent in which FEAction is attached to/Name of the FEAction to attach, Root="Name of the module(Simulation,Pegging,CBS,etc..), Bind = true/false - true to bind the predefined definition to Mozart Explorer once the specified FEAction is generated.; otherwise false to bind the method manually.)]
            // ref bool, return type parameter and other parameters should be included manually.  
            [FeatureAttachTo("CustomComponent/GetProcessTime", Root="Simulation", Bind = true)] 
            public ProcTimeInfo GET_PROCESS_TIME_DEF(Mozart.SeePlan.Simulation.AoEquipment aepq, Mozart.SeePlan.Simulation.IHandlingBatch hb, Mozart.SeePlan.DataModel.ProcTimeInfo, ref bool handled)
            {
                //Logic implementation ...
                
                if(...)
                {
                    //Logic implementation...
                    // True, to not execute the sibling FEAction of this FEAction. 
                    handled = true
                }
               
                return new ProcTimeInfo(); 
            }
            </code>
            </example>
        </member>
        <member name="P:Mozart.Task.Execution.FeatureAttachToAttribute.Root">
            <summary>
            이 Predefined Definition이 속한 모듈의 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the string containing the name of the module in which the specified predefined definition is to be attached to. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FeatureAttachToAttribute.Target">
            <summary>
            이 Predefined Definition이 속한 FEAction의 경로를 가져오거나 설정합니다. 
            FEAction의 경로는 'FECategory'/'FEComponent'/'FEAction'으로 구성됩니다.
            </summary>
            <summary>
            Gets or sets the directory of the FEAction which the specified <em>Predefined Definition</em> is attached to. 
            The full path of the FEAction directory is 'FECategory/'FEComponent'/'FEAction'.  
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FeatureAttachToAttribute.Bind">
            <summary>
            기본 바인딩 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the boolean value to determine whether the specified <em>Predefined Definition</em> to bind to the target FEAction by default.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.FeatureAttachToAttribute.Lock">
            <summary>
            사용자가 바인딩 여부를 변경할 수 있는지 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the boolean value to determine whether the user can modify the binding of the specified <em>Predefined Definition</em>.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.FeatureAttachToAttribute.#ctor(System.String)">
            <summary>
            주어진 FEAction의 경로를 사용하여 새로운 FeatureAttachToAttribute를 생성합니다.
            </summary>
            <param name="target">FEAction의 경로입니다.</param>
            <summary>
            Initializes a new instance of the <em>FeatureAttachToAttribute</em> class with the string containing the full path of the FEAction, in which this predefined definition is attached to.
            </summary>
            <param name="target">The full path of the FEAction which the specified predefined definition is attachted to.</param>
        </member>
        <member name="M:Mozart.Task.Execution.FeatureAttachToAttribute.#ctor(System.String,System.String)">
            <summary>
            주어진 FEAction의 경로와 모듈의 이름을 사용하여 새로운 FeatureAttacthToAttribute를 생성합니다.
            </summary>
            <param name="target"></param>
            <param name="root"></param>
            <summary>
            Initializes a new instance of the <em>FeatureAttachToAttribute</em> class with the string containing the full path of the FEAction which the predefined definition is attached to, and the name of the module(Simulation,Pegging,CBS,etc..) which the FEComponent/FEAction is bond to.
            </summary>
            <param name="target">The full path of the FEAction which the specified predefined definition is attachted to.</param>
            <param name="root">The string containing the name of the module(Simulation,Pegging,CBS,etc..) which the specified FEComponent/FEAction is bond to.</param>
        </member>
        <member name="M:Mozart.Task.Execution.FeatureAttachToAttribute.SplitTarget">
            <summary>
            FEAction의 경로를 슬래시 구분자(/)로 분리한 문자열의 배열을 반환합니다.
            </summary>
            <returns></returns>
            <summary>
            Splits the string of FEAction path into substrings treating slash punctuation ('/') as delimiters.
            </summary>
            <returns>Returns an array whose elements contain the substrings from this instance that are delimited by slash punctuation.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.FeatureAttachToAttribute.Validate">
            <summary>
            FEAction의 경로가 빈 문자열인지 여부를 판별합니다. FEAction의 경로가 빈 문자열인 경우 ArgumentNullException을 던집니다.
            </summary>
            <summary>
            <para>Determines whether the path of the FEAction which this predefined definition is attachted to, is empty.</para>
            <para>This method throws <em>ArgumentNullException</em> when the specified <em>target</em> is empty.</para>
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.ModelKeys">
            <summary>
            refer to Mozart.Task.Model.ModelKeys
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.ExecutionModule">
            <summary>This is the unit module class executed from Model Task.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ExecutionModule.Name">
            <summary>Execution Module name.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ExecutionModule.Execute(Mozart.Task.Execution.ModelContext)">
            <summary>Run Execution Module.</summary>
            <param name="context">Model context to run module.</param>
        </member>
        <member name="P:Mozart.Task.Execution.ExecutionModule.Priority">
            <summary>Execution priority of Execution Module.</summary>
        </member>
        <member name="T:Mozart.Task.Execution.IModuleExtension">
            <summary>
            모듈확장 인터페이스입니다.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.IModulePackage">
            <summary>
            패키지를 나타내는 클래스입니다.
            </summary>
            <summary>
            The class that represents the <em>ModulePackage</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.IModulePackage.Name">
            <summary>
            패키지의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the package. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.IModulePackage.GetVModelTemplate">
            <summary>
            패키지에 정의된 모델 정보를 반환합니다.
            </summary>
            <returns>패키지에 정의된 모델 정보입니다.</returns>
            <summary>
            Returns the model data defined in the <em>ModulePackage</em>.
            </summary>
            <returns>The model data defined in the specified package.</returns>
        </member>
        <member name="P:Mozart.Task.Execution.IModulePackage.InputNamespace">
            <summary>
            모듈의 Input DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Input DataItem class of the module.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.IModulePackage.OutputNamespace">
            <summary>
            모듈의 OUtput DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Output DataItem class of the module.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.IModulePackage.GetBaseType(System.String)">
            <summary>
            지정된 기본 모듈 구성 클래스의 이름에 해당하는 실제 구현된 형식을 반환합니다. 
            기본 모듈 구성 클래스는 InputMart, OutputMart, InputPersist 등을 의미합니다.
            </summary>
            <param name="base">기본 모듈 구성 클래스의 이름입니다.</param>
            <returns>기본 모듈 구성 클래스의 실제 구현 형식입니다.</returns>
            <summary>
            Returns the actual implementation type of the specified name of the base module component class. 
            Base module component class in here means, InputMart, OutputMart, InputPersist and etc. 
            </summary>
            <param name="base">The string containing the name of the base module component class.</param>
            <returns>The actual implementation type of the specified name of the base module component class.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.IModulePackage.GetModelObject(System.String)">
            <summary>
             지정된 DataObject와 연관 관계가 있는 ModelObject 형식을 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <returns>DataObject와 연관 관계가 있는 ModelObject 형식입니다.</returns>
            <summary>
             Returns the <em>ModelObject</em> type associated with the specified <em>DataObject</em>.
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <returns>The <em>ModelObject</em> type associated with the specified <em>DataObject</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.IModulePackage.IsDataObject(System.String,System.Boolean)">
            <summary>
            주어진 DataObject와 연관된 ModelObject가 존재하는지 여부를 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <param name="input">Input DataObject인지 여부입니다.</param>
            <returns>연관된 ModelObject가 존재하는지 여부입니다.</returns>
            <summary>
            Returns whether if a <em>ModelObject</em> associated with the specified <em>DataObject</em> exists. 
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <param name="input">The boolean value to determine whether this <em>DataObject</em> is an input data object or not.</param>
            <returns><em>true</em> if <em>ModelObject</em> associated with the specifed <em>DataObject</em> exists; otherwise, <em>false</em>.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.IDefSourceProvider">
            <summary>
            함수 구현 내용을 제공하는 인터페이스입니다.
            </summary>
            <summary>
            The interface that provides the logic implements of the method. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.IDefSourceProvider.GetComment(System.String)">
            <summary>
            주어진 이름의 함수 구현 내용을 반환합니다.
            </summary>
            <param name="key">함수의 이름입니다.</param>
            <returns>함수의 구현 내용입니다.</returns>
            <summary>
            Returns the logic implement contents of the specified method. 
            </summary>
            <param name="key">The string containing the name of the specified method of which to obtain the logic implementation contents.</param>
            <returns>Returns the logic implement contents of the specified method.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.ModuleExtension">
            <summary>
            모듈확장 클래스입니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtension.#ctor">
            <summary>
            새로운 모듈 확장을 생성합니다.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.ModuleExtensionManager">
            <summary>
            모듈확장 관리자 클래스입니다. 
            모듈의 유형에 따라 추가 가능한 모듈확장과 모듈별 활성화된 모듈확장 정보를 관리합니다.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionManager.ExtensionModuleSeparator">
            <summary>
            프로젝트에 저장되는 활성(Enabled) 모듈확장 정보의 모듈 구분자입니다.
            </summary>
            <example>
            Module1/Extension1|Extension2;Module2/Extension1|Extension3;Module3/Extesion4|Extension5
            </example>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionManager.ExtensionNameSeparator">
            <summary>
            프로젝트에 저장되는 활성(Enabled) 모듈확장 정보의 모듈 이름과 활성 모듈확장 이름 구분자입니다.
            </summary>
            <example>
            Module1/Extension1|Extension2;Module2/Extension1|Extension3;Module3/Extesion4|Extension5
            </example>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionManager.ExtensionValueSeparator">
            <summary>
            프로젝트에 저장되는 활성(Enabled) 모듈확장 정보의 모듈확장 이름 구분자입니다.
            </summary>
            <example>
            Module1/Extension1|Extension2;Module2/Extension1|Extension3;Module3/Extesion4|Extension5
            </example>
        </member>
        <member name="E:Mozart.Task.Execution.ModuleExtensionManager.ReferenceAdded">
            <summary>
            참조가 추가되었을 때 발생하는 이벤트입니다.
            </summary>
        </member>
        <member name="E:Mozart.Task.Execution.ModuleExtensionManager.ReferenceRemoved">
            <summary>
            참조가 제거되었을 때 발생하는 이벤트입니다.
            </summary>
        </member>
        <member name="E:Mozart.Task.Execution.ModuleExtensionManager.CollectionChanged">
            <summary>
            모듈확장의 활성화 여부가 변경되거나 모듈이 추가 또는 제거되었을 때 발생하는 이벤트입니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.#ctor">
            <summary>
            새로운 모듈확장 관리자를 생성합니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.Add(System.String)">
            <summary>
            지정된 경로의 파일을 분석하여 사용 가능한 모듈확장 등록합니다.
            </summary>
            <param name="path">분석할 파일의 경로입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.Add(System.String,System.String)">
            <summary>
            지정된 이름의 참조를 분석하여 사용 가능한 모듈확장을 등록합니다. 
            만약 지정된 참조가 로드되어 있지 않다면 대안 파일을 분석합니다.
            </summary>
            <param name="referenceName">분석할 참조의 이름입니다.</param>
            <param name="path">분석할 대안 파일의 경로입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.AddReference(System.String)">
            <summary>
            지정된 경로의 파일을 분석하여 사용 가능한 모듈확장 등록합니다. 
            </summary>
            <param name="path">분석할 파일의 경로입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.Add(System.String,System.Type)">
            <summary>
            지정된 이름의 참조에 포함된 모듈확장을 등록합니다.
            </summary>
            <param name="referenceName">대상 참조 이름입니다.</param>
            <param name="extensionType">모듈확장의 형식입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.GetModuleExtension(System.String)">
            <summary>
            지정된 이름의 모듈확장을 반환합니다.
            </summary>
            <param name="extensionName">대상 모듈확장 이름입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.GetModuleExtensions(System.String,System.String)">
            <summary>
            지정된 모듈에 추가할 수 있는 모듈확장의 목록을 반환합니다. 
            만약 참조 필터가 존재한다면 해당 참조에 포함된 모듈확장의 목록만 반환합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <param name="referenceNameFilter">필터 대상 참조 이름입니다.</param>
            <returns>모듈에 추가할 수 있는 모듈확장의 목록입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.EnableModuleExtension(System.String,System.String)">
            <summary>
            지정된 모듈에서 지정된 모듈확장을 활성화합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <param name="extensionName">대상 모듈확장의 이름입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.DisableModuleExtension(System.String,System.String)">
            <summary>
            지정된 모듈에서 지정된 모듈확장을 비활성화합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <param name="extensionName">대상 모듈확장의 이름입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.GetEnabledModuleExtensions(System.String)">
            <summary>
            지정된 모듈의 활성화된 모든 모듈확장의 이름 목록을 반환합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <returns>활성화된 모든 모듈확장의 이름 목록입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.GetExtensionName(System.Type)">
            <summary>
            지정된 모듈확장의 이름을 반환합니다.
            </summary>
            <param name="extensionType">대상 모듈확장입니다.</param>
            <returns>모듈확장의 이름입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.RenameModule(System.String,System.String)">
            <summary>
            지정된 모듈의 이름를 변경합니다.
            </summary>
            <param name="oldModuleName">변경 전 모듈 이름입니다.</param>
            <param name="newModuleName">변경 후 모듈 이름입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.RemoveModule(System.String)">
            <summary>
            지정된 모듈의 활성화된 모듈확장 정보를 제거합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.RemoveReference(System.String)">
            <summary>
            지정된 참조를 제거합니다.
            </summary>
            <param name="referenceName">대상 참조의 이름입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.GetReferences">
            <summary>
            모듈확장 관리자에 등록된 모든 참조의 이름 목록을 반환합니다.
            </summary>
            <returns>모듈확장 관리자에 등록된 모든 참조의 이름 목록입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.ToString">
            <summary>
            모듈별 활성화된 모듈확장 정보에 해당하는 문자열 표현으로 변환합니다.
            </summary>
            <returns>모듈별 활성화된 모듈확장 정보에 해당하는 문자열 표현입니다.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo">
            <summary>
            모듈확장 정보 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.ReferenceName">
            <summary>
            모듈확장이 정의된 참조의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.ModuleName">
            <summary>
            모듈확장이 추가될 수 있는 모듈의 형식 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.Name">
            <summary>
            모듈확장의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.Type">
            <summary>
            모듈확장의 형식을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.IconPath">
            <summary>
            모듈확장이 활성화되었을 때 Mozart Explorer에 표시될 아이콘의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.Order">
            <summary>
            모듈확장이 활성화되었을 때 Mozart Explorer에서 표시될 순서를 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionManager.ExtensionInfo.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Type)">
            <summary>
            지정된 정보를 사용하여 새로운 모듈확장 정보를 생성합니다.
            </summary>
            <param name="referenceName">모듈확장이 정의된 참조의 이름입니다.</param>
            <param name="moduleName">모듈확장이 추가될 수 있는 모듈의 형식 이름입니다.</param>
            <param name="name">모듈확장의 이름입니다.</param>
            <param name="iconPath">모듈확장이 활성화되었을 때 Mozart Explorer에 표시될 아이콘의 이름입니다.</param>
            <param name="order">모듈확장이 활성화되었을 때 Mozart Explorer에서 표시될 순서입니다.</param>
            <param name="type">모듈확장의 형식입니다.</param>
        </member>
        <member name="T:Mozart.Task.Execution.ModuleExtensionEventArgs">
            <summary>
            모듈확장 변경 이벤트 데이터 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionEventArgs.ModuleName">
            <summary>
            대상 모듈의 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionEventArgs.ExtensionName">
            <summary>
            대상 모듈확장의 이름을 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModuleExtensionEventArgs.ChangeType">
            <summary>
            모듈확장 변경 유형입니다.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionEventArgs.#ctor(System.String,Mozart.Task.Execution.ModuleExtensionChangeType)">
            <summary>
            지정된 정보를 사용하여 새로운 모듈확장 변경 이벤트 데이터를 생성합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <param name="changeType">모듈확장 변경 유형입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModuleExtensionEventArgs.#ctor(System.String,System.String,Mozart.Task.Execution.ModuleExtensionChangeType)">
            <summary>
            지정된 정보를 사용하여 새로운 모듈확장 변경 이벤트 데이터를 생성합니다.
            </summary>
            <param name="moduleName">대상 모듈의 이름입니다.</param>
            <param name="extensionName">대상 모듈확장의 이름입니다.</param>
            <param name="changeType">모듈확장 변경 유형입니다.</param>
        </member>
        <member name="T:Mozart.Task.Execution.ModuleExtensionChangeType">
            <summary>
            모듈확장 변경 유형입니다.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionChangeType.EnableModuleExtension">
            <summary>
            모듈확장을 활성화합니다.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionChangeType.DisableModuleExtension">
            <summary>
            모듈확장을 비활성화합니다.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionChangeType.RenameModule">
            <summary>
            모듈의 이름을 변경합니다.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.ModuleExtensionChangeType.RemoveModule">
            <summary>
            모듈을 제거합니다.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.SitePackage">
            <summary>
            기존 모듈을 그대로 사용하는 패키지를 나타내는 클래스입니다.
            </summary>
            <summary>
            Represents the package that uses existing modules as they are.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.BinPath">
            <summary>
            VFE 파일이 저장된 위치를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the directory information where the vfe file is stored. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.Name">
            <summary>
            패키지의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets or sets the name of the <em>SitePackage</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.Namespace">
            <summary>
            패키지의 기본 네임스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets or sets the default namespaces of the <em>SitePackage</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.UseModulePackage">
            <summary>
            모듈 패키지 기반을 이용하여 만들어지 패키지인지 여부.
            </summary>
            <summary>
            Gets or sets the default namespaces of the <em>SitePackage</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.BaseLibrary">
            <summary>
            패키지의 기본 라이브러리를 가져옵니다.
            </summary>
            <summary>
            Gets or sets the base libraries of the <em>SitePackage</em>. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.AllContents">
            <summary>
            패키지에 등록된 모든 컨텐츠 정보의 목록을 반환합니다.
            </summary>
            <returns>컨텐츠 정보의 목록입니다.</returns>
            <summary>
            Returns the list of all the contents registered to the <em>SitePackage</em>. 
            </summary>
            <returns>The list of the contents in the package.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetContent(System.String)">
            <summary>
            지정된 키에 해당하는 컨텐츠 정보를 반환합니다.
            </summary>
            <param name="key">컨텐츠 정보의 키입니다.</param>
            <returns>컨텐츠 정보입니다.</returns>
            <summary>
            Returns the content information of the specified key.
            </summary>
            <param name="key">The key to search the specified content.</param>
            <returns>The content information of the specified key.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetContents(System.String)">
            <summary>
            패키지에 등록된 지정된 컨텐츠 유형의 컨텐츠 정보 목록을 반환합니다.
            </summary>
            <param name="contentType">컨텐츠 유형입니다.</param>
            <returns>컨텐츠 정보의 목록입니다.</returns>
            <summary>
            Returns the list of specified content type of contents registered in the <em>SitePackage</em>.
            </summary>
            <param name="contentType">The type of the content.</param>
            <returns>The list of the specified contents.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetComment(System.String)">
            <summary>
            주어진 이름의 함수 구현 내용을 반환합니다.
            </summary>
            <param name="key">함수의 이름입니다.</param>
            <returns>함수의 구현 내용입니다.</returns>
            <summary>
            Returns the logic implement contents of the method with the specified name.
            </summary>
            <param name="key">The name of the method.</param>
            <returns>The logic implement contents of the specified method.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.#ctor">
            <summary>
            새로운 SitePackage를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the class <em>SitePackage</em>. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.SupportedMyMethods">
            <summary>
            정의된 모든 My Methods 정의 클래스의 목록을 가져옵니다.
            </summary>
            <returns></returns>
            <summary>
            Returns the list of classes defined in <em>MyMethods</em>. 
            </summary>
            <returns>List of classes defined in <em>MyMethods</em></returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.SupportedBaseTypes(System.Collections.Generic.ICollection{System.String})">
            <summary>
            지정된 모듈에서 사용되는 모든 FEBaseClass 형식의 목록을 반환합니다.
            </summary>
            <param name="modules">모듈 이름의 목록입니다.</param>
            <returns>지정된 모듈에서 사용되는 모든 FEBaseClass 속성을 갖는 형식의 목록입니다.</returns>
            <summary>
            Returns the list of all FEBaseClass types used from the specified module. 
            </summary>
            <param name="modules">The list of the module names.</param>
            <returns>The list of all <em>FEBaseClass</em> types used from the specified module.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.SupportedPredefines(System.String,System.String)">
            <summary>
            지정된 루트 항목에서 사용되는 모든 미리 정의된 함수의 목록을 반환합니다.
            </summary>
            <param name="module">루트 항목가 포함된 모듈의 이름입니다.</param>
            <param name="root">루트 항목의 이름입니다.</param>
            <returns>루트 항목에서 사용되는 모든 미리 정의된 함수의 목록입니다.</returns>
            <summary>
            Returns the list of predefined methods used from the specified root. 
            </summary>
            <param name="module">The name of the module with root information included.</param>
            <param name="root">The string containing the name of the root.</param>
            <returns>The list of predefined definition methods used from the specified root.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.SupportsModule(System.String)">
            <summary>
            지정된 모듈이 패키지에서 사용되는지 여부를 반환합니다.
            </summary>
            <param name="name">모듈의 이름입니다.</param>
            <returns>모듈이 패키지에서 사용되는지 여부입니다.</returns>
            <summary>
            Determines whether the specified module is used from the <em>SitePackage</em>.
            </summary>
            <param name="name">The string containing the name of the specified module.</param>
            <returns><em>true</em> if the specified module is used from the packakge; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetUsedModules">
            <summary>
            패키지에서 사용되는 모든 모듈의 배열을 반환합니다.
            </summary>
            <returns>패키지에서 사용되는 모든 모듈의 배열입니다.</returns>
            <summary>
            Returns the array of all the modules used from the <em>SitePackage</em>. 
            </summary>
            <returns>Array of all the modules used from the <em>SitePackage</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetDynamicModules">
            <summary>
            패키지에서 사용되는 메인 모듈을 제외한 모듈의 목록을 반환합니다.
            </summary>
            <returns>패키지에서 사용되는 메인 모듈을 제외한 모듈의 목록입니다.</returns>
            <summary>
            Gets the list of the modules except the main modules, used from <em>SitePackage</em>.
            </summary>
            <returns>List of the modules except the main modules, used from <em>SitePackage</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetActionComponents(System.String)">
            <summary>
            패키지에서 지정된 모듈에 정의된 사용자 정의 컴포넌트 클래스의 목록을 반환합니다.
            </summary>
            <param name="root">모듈의 이름입니다.</param>
            <returns>사용자 정의 컴포넌트 클래스의 목록입니다.</returns>
            <summary>
            Gets the list of the custom components from the specified module of the <em>SitePackage</em>.
            </summary>
            <param name="root">The name of the module.</param>
            <returns>The list of the custom components of the specified module.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetDefaultDefinitions">
            <summary>
            사용자 정의 Predefined Definition이 정의된 모든 클래스의 목록을 반환합니다.
            </summary>
            <returns>사용자 정의 Predefined Definition이 정의된 모든 클래스의 목록입니다.</returns>
            <summary>
            Returns the list of all the classes declared as custom <em>Predefined Definition</em> in the <em>SitePackage</em>. 
            </summary>
            <returns>The list of all the classes declared as custom <em>Predefined Definition</em></returns>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.InputNamespace">
            <summary>
            모듈의 Input DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Input DataItem class of the module.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.OutputNamespace">
            <summary>
            모듈의 OUtput DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Output DataItem class of the module.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetBaseType(System.String)">
            <summary>
            지정된 기본 모듈 구성 클래스의 이름에 해당하는 실제 구현된 형식을 반환합니다. 
            기본 모듈 구성 클래스는 InputMart, OutputMart, InputPersist 등을 의미합니다.
            </summary>
            <param name="base">기본 모듈 구성 클래스의 이름입니다.</param>
            <returns>기본 모듈 구성 클래스의 실제 구현 형식입니다.</returns>
            <summary>
            Returns the actual implementation type of the specified name of the base module component class. 
            Base module component class in here means, InputMart, OutputMart, InputPersist and etc. 
            </summary>
            <param name="base">The string containing the name of the base module component class.</param>
            <returns>The actual implementation type of the specified name of the base module component class.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetModelObject(System.String)">
            <summary>
             지정된 DataObject와 연관 관계가 있는 ModelObject 형식을 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <returns>DataObject와 연관 관계가 있는 ModelObject 형식입니다.</returns>
            <summary>
             Returns the <em>ModelObject</em> type associated with the specified <em>DataObject</em>.
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <returns>The <em>ModelObject</em> type associated with the specified <em>DataObject</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.GetVModelTemplate">
            <summary>
            패키지에 정의된 모델 정보를 반환합니다.
            </summary>
            <returns>패키지에 정의된 모델 정보입니다.</returns>
            <summary>
            Returns the model information defined in this <em>SitePackage</em>.
            </summary>
            <returns>The model information defined in this specified <em>SitePackage</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.SitePackage.IsDataObject(System.String,System.Boolean)">
            <summary>
            주어진 DataObject와 연관된 ModelObject가 존재하는지 여부를 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <param name="input">Input DataObject인지 여부입니다.</param>
            <returns>연관된 ModelObject가 존재하는지 여부입니다.</returns>
            <summary>
            Returns whether if a <em>ModelObject</em> associated with the specified <em>DataObject</em> exists. 
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <param name="input">The boolean value to determine whether this <em>DataObject</em> is an input data object or not.</param>
            <returns><em>true</em> if <em>ModelObject</em> associated with the specifed <em>DataObject</em> exists; otherwise, <em>false</em>.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.SitePackage.ContentInfo">
            <summary>
            패키지에 정의된 컨텐츠 정보 클래스입니다.
            </summary>
             <summary>
            The class that specifies the contents information of the <em>SitePackage</em>.
             </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.ContentInfo.ContentType">
            <summary>
            컨텐츠의 유형을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the <em>Content</em> type. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.ContentInfo.Module">
            <summary>
            컨텐츠의 모듈 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the name of the module of the <em>Content</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.ContentInfo.Name">
            <summary>
            컨텐츠의 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the name of the <em>Content</em>. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.SitePackage.ContentInfo.Content">
            <summary>
            컨텐츠 내용을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the contents of <em>Content</em>.
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.ModelTask">
            <summary>The class that controls all tasks from the beginning to the end of actual Planning for Task-based framework.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.Context">
            <summary>The ModelCotext the includes the task informatin that Task will actually perform.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.TaskContext">
            <summary>The Context information properties that required to perform Task.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.HasErrors">
            <summary>
            	<para>has error during model execution</para>
            	<para>The property to check whether error has occured during Task operation.</para>
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.Exception">
            <summary>
            	<para>Exception during model execution</para>
            	<para>The Exception during Model Task operation.</para>
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.Status">
            <summary>
            	<para>The execution status of the model task.</para>
            </summary>
            <value>
            	<para>The status is returned as TaskStatus Enum type.</para>
            	<para>TaskStatus = {Idle, Running, Finished, Error}</para>
            </value>
        </member>
        <member name="P:Mozart.Task.Execution.ModelTask.Result">
            <summary>Task result.</summary>
            <value>ModelContext.Result is set after all modules of ModelTask are executed. Therefore, if there are no configured results, the value is NULL.</value>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Init(Mozart.Task.Framework.ITaskExecutionContext)">
            <summary>Initializes ModelTask.</summary>
            <param name="context">TThe Context that is used during Task operation.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Run">
            <summary>Run ModelTask.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Pause">
            <summary>Pause Task.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Reset">
            <summary>Reset ModelTask configuration to its inital state.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Step">
            <summary>Run the tasks in ModelTask by each phase at a time.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Stop">
            <summary>Stop ModelTask.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelTask.Command(System.String[])">
            <summary>
            사용되지 않는 함수입니다.
            </summary>
            <param name="args"></param>
            <returns></returns>
            <summary>
            This method is not in use anymore.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.Task.Execution.IModelCommand">
            <summary>
             Addin Command Interface
            </summary>
        </member>
        <member name="T:Mozart.Task.Execution.IModelExecutor">
            <summary>
            	<para>Model Execution Engine Interface</para>
            	<para>The Interface to be implemented through execution module to run Mozart Task. </para>
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.IModelExecutor.Initialize(Mozart.Task.Execution.ModelContext)">
            <summary>Initializes to run module</summary>
            <param name="context">Model Context used during module execution.</param>
        </member>
        <member name="M:Mozart.Task.Execution.IModelExecutor.Execute(Mozart.Task.Execution.ModelContext)">
            <summary>Run module</summary>
            <param name="context">Model Context used to run module execution.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Task.Execution.IModelLog.MonitorInfo(System.String)">
            <summary>
            지정된 모니터링 객체에 메세지 출력
            </summary>
            <param name="msg">메세지</param>
        </member>
        <member name="M:Mozart.Task.Execution.IModelLog.MonitorInfo(System.String,System.Object[])">
            <summary>
            지정된 모니터링 객체에 메세지, 참조 데이터 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="args">참조 데이터</param>
        </member>
        <member name="M:Mozart.Task.Execution.IModelLog.MonitorInfo(System.String,System.Boolean)">
            <summary>
            지정된 모니터링 객체에 메세지 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="withLog"></param>
        </member>
        <member name="M:Mozart.Task.Execution.IModelLog.MonitorInfo(System.String,System.Boolean,System.Object[])">
            <summary>
            지정된 모니터링 객체에 메세지, 참조 데이터 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="args">참조 데이터</param>
            <param name="withLog"></param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register(System.Type,DryIoc.Factory,System.String)">
            <summary>
            Registers service <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The service type to register</param>
            <param name="factory"><see cref="T:DryIoc.Factory"/> details object.</param>
            <param name="named">Optional name of the service.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register``1(DryIoc.Factory,System.String)">
            <summary>
            Registers service of <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="factory"><see cref="T:DryIoc.Factory"/> details object.</param>
            <param name="named">Optional name of the service.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register(System.Type,System.Type,System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup)">
            <summary>
            Registers service <paramref name="serviceType"/> with corresponding <paramref name="implementationType"/>.
            </summary>
            <param name="serviceType">The service type to register.</param>
            <param name="implementationType">Implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="getConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register(System.Type,System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup)">
            <summary>
            Registers service of <paramref name="implementationType"/>. ServiceType will be the same as <paramref name="implementationType"/>.
            </summary>
            <param name="implementationType">Implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register``2(System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup)">
            <summary>
            Registers service of <typeparamref name="TService"/> type implemented by <typeparamref name="TImplementation"/> type.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Register``1(System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup)">
            <summary>
            Registers implementation type <typeparamref name="TImplementation"/> with itself as service type.
            </summary>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.RegisterAll(System.Type,System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Func{System.Type,System.Boolean})">
            <summary>
            Registers single registration for all implemented public interfaces and base classes.
            </summary>
            <param name="implementationType">Service implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
            <param name="types">Optional condition to include selected types only. Default value is <see cref="F:DryIoc.Registrator.RegisterAllDefaultTypes"/></param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.RegisterAll``1(System.String,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup)">
            <summary>
            Registers single registration for all implemented public interfaces and base classes.
            </summary>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional registration name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.RegisterDelegate``1(System.Func{DryIoc.IResolver,``0},System.String,DryIoc.IReuse,DryIoc.FactorySetup)">
            <summary>
            Registers a factory delegate for creating an instance of <typeparamref name="TService"/>.
            Delegate can use <see cref="T:DryIoc.IResolver"/> parameter to resolve any required dependencies, e.g.:
            <code>RegisterDelegate&lt;ICar&gt;(r => new Car(r.Resolve&lt;IEngine&gt;()))</code>
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="lambda">The delegate used to create a instance of <typeparamref name="TService"/>.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.RegisterInstance``1(``0,System.String,DryIoc.FactorySetup)">
            <summary>
            Registers a pre-created service instance of <typeparamref name="TService"/> 
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="instance">The pre-created instance of <typeparamref name="TService"/>.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service name.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.RegisterGlobal``1(``0)">
            <summary>
            Registers a pre-created service instance of <typeparamref name="TService"/> to global
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="instance">The pre-created instance of <typeparamref name="TService"/>.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.IsRegistered(System.Type,System.String)">
            <summary>
            Returns true if <paramref name="serviceType"/> is registered in container or its open generic definition is registered in container.
            </summary>
            <param name="serviceType">The type of the registered service.</param>
            <param name="named">Optional service name</param>
            <returns>True if <paramref name="serviceType"/> is registered, false - otherwise.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.IsRegistered``1(System.String)">
            <summary>
            Returns true if <typeparamref name="TService"/> type is registered in container or its open generic definition is registered in container.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="named">Optional service name</param>
            <returns>True if <typeparamref name="TService"/> name="serviceType"/> is registered, false - otherwise.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Resolve(System.Type,System.Boolean)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="force"></param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Resolve``1(System.Boolean)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Resolve(System.Type,System.String)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="serviceName">Service name.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Resolve``1(System.String)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="serviceName">Service name.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ServiceLocator.Compose(System.Object,System.Func{System.Reflection.MemberInfo,System.String})">
            <summary>
            For given instance resolves and sets non-initialized (null) properties from container.
            It does not throw if property is not resolved, so you might need to check property value afterwards.
            </summary>
            <param name="instance">Service instance with properties to resolve and initialize.</param>
            <param name="getServiceName">Optional function to find service name, otherwise service name will be null.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.BeginSetup(Mozart.Task.Execution.ModelTask)">
            <summary>Setup 처리 직전 모델 수행시 필요한 정보를 생성하거나 업데이트가 필요한 경우 이를 처리하는 로직을 구현하는 FEAction 입니다</summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.SetupVersion(Mozart.Task.Execution.ModelTask,System.String,System.DateTime)">
            <summary>
            Setup 수행 시점에 호출되며, Plan Version을 사용자 정의 방식으로 설정할 수 있습니다.
            </summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
            <param name="name">모델 Name 입니다.</param>
            <param name="runTime">Task 실행 시작시각입니다.</param>
            <returns>버전정보 입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.SetupPeriod(Mozart.Task.Execution.ModelTask,System.DateTime@,System.Single@)">
            <summary>
             Setup수행 시점에 호출되며, Plan 기간을 사용자 정의 방식으로 설정할 수 있습니다.
            </summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
            <param name="startTime">설정된 Plan 시작시각입니다.
            모델의 Argument 에서 "start-time" keyword 로 정의하여 모델실행시 입력받습니다.</param>
            <param name="period">설정된 Plan 기간입니다.
            모델의 Argument 에서 "period" keyword 로 정의하여 모델실행시 입력받습니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.SetupLog(Mozart.Task.Execution.ModelTask,Mozart.Task.Execution.VersionInfo,System.DateTime)">
            <summary>
            Setup 에 대한 Log 를 사용자 정의 방식으로 구현할 수 있습니다.
            Setup 시 설정된 Plan 시작시각, 기간, Version 정보를 Log로 기록합니다. 
            기본적인 내용을 구현이 되어있으며, 사용자 정의시 이를 재정의할 수 있습니다. 
            </summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
            <param name="pver">확정된 버전 정보입니다.</param>
            <param name="logTime">로그 기록 시각입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.SetupQueryArgs(Mozart.Task.Execution.ModelTask,Mozart.Task.Execution.ModelContext)">
            <summary>
            Input, Output Schema 와 연결된 Query 에서 사용되는 Argument 를 설정합니다. 
            </summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
            <param name="context">전체 Task 수행 Context 입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.EndSetup(Mozart.Task.Execution.ModelTask)">
            <summary>
            Setup 이 끝난 직후 호출 되며, 정상적인 Setup 처리 로직 외에 추가적인 
            설정이 필요한 경우 본 FEAction 을 통해 구현합니다.실행대사 Task 의 실행
            전에 수행되어야 할 로직을 처리합니다. 
            </summary>
            <param name="task">실행대상 TASK 객체입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.OnInitialize(Mozart.Task.Execution.ModelContext)">
            <summary>
            Task 수행 전 초기화를 처리하기 위한 FEAction입니다.
            </summary>
            <param name="context">모델 실행을 위한 Context 객체입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.Run(Mozart.Task.Execution.ModelContext)">
            <summary>
            Task 수행의 진입점이 되는 Main 함수입니다. 
            본 함수는 모델에 포함된 모든 실행모듈을 실행시키도록 구현이 되어있습니다. 
            본 함수를 구현하는 경우 구현된 내용이 실행되며, 모델상에 추가된 실행모듈은 
            실행되지 않습니다. 
            </summary>
            <param name="context">모델 실행을 위한 Context 객체입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.CanExecuteModule(Mozart.Task.Execution.ExecutionModule,Mozart.Task.Execution.ModelContext)">
            <summary>현재 실행모듈의 실행 여부를 결정하기 위한 FEAction 입니다. 이후의 실행모듈의 실행 여부에는 영향을 미치지 않습니다.</summary>
            <param name="module">현재 실행모듈입니다.</param>
            <param name="context">모델 실행을 위한 Context 객첵입니다.</param>
            <returns>현재 실행모듈을 실행하고자 할 때는 <strong>true</strong>
            그렇지 않은 경우 <strong>false</strong>입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.IsContinueExecution(Mozart.Task.Execution.ExecutionModule,Mozart.Task.Execution.ModelContext)">
            <summary>
            현재 실행모듈과 이후의 실행모듈의 실행여부를 결정합니다. 
            현재 실행모듈이 시작되기 전에 호출됩니다. 
            </summary>
            <param name="next">현재 실행 모듈 객체입니다.</param>
            <param name="context">모델 실행을 위한 Context 객첵입니다.</param>
            <returns>현재 실행모듈과 이후의 실행모듈을 계속해서 실행하고자 할때는 <strong>true</strong>
            그렇지 않은 경우 <strong>false</strong>입니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.OnBeginModule(Mozart.Task.Execution.IModelExecutor,Mozart.Task.Execution.ModelContext)">
            <summary>
            실행 모듈별 초기화를 처리하기 위한 FEAction 입니다. 
            </summary>
            <param name="me">실행 Module 입니다.</param>
            <param name="context">모델 실행을 위한 Context 객첵입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.OnEndModule(Mozart.Task.Execution.IModelExecutor,Mozart.Task.Execution.ModelContext)">
            <summary>
            실행 모듈별 종료 처리 시점에 추가 로직을 처리하기 위한 FEAction 입니다.
            </summary>
            <param name="me">실행 Module 입니다.</param>
            <param name="context">모델 실행을 위한 Context 객첵입니다.</param>
            <returns>실행모듈의 결과입니다. 결과의 형태는 사용자 정의형으로 설정할 수 있습니다.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.OnDone(Mozart.Task.Execution.ModelContext)">
            <summary>
            Task 수행 후 후처리를 처리하기 위한 FEAction입니다.
            </summary>
            <param name="context">모델 실행을 위한 Context 객체입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.Shutdown(Mozart.Task.Execution.ModelTask)">
            <summary>
            Task 의 모든 실행모듈 실행이 종료되고 가장 마지막에 호출되는 FEAction 입니다.
            </summary>
            <param name="task">실행대상 Task 입니다.</param>
        </member>
        <member name="M:Mozart.Task.Execution.TaskControl.ProgressReport(Mozart.Task.Execution.ModelContext,System.String)">
            <summary>Model 의 실행 단계별 시작/종료시점에 호출되는 함수입니다.</summary>
            <param name="context">실행 모델의 Model Context 입니다.</param>
            <param name="stage">
            	<para>호출되는 시점의 단계를 나타내는 문자열입니다. 문자열은 아래와 같은 유형이 있습니다 .</para>
            	<list type="number">
            		<item>PreDownload_Start : Preloading 대상 DB 읽기 시작</item>
            		<item>PreDownload_End : Preloading 대상 DB 읽기 끝</item>
            		<item>PreLoading_Start : Preloading 대상 Data 로딩 시작</item>
            		<item>PreLoading_End : Preloading 대상 Data 로딩 시작</item>
            		<item>AutoDownload_Start : DB 읽기 시작</item>
            		<item>AutoDownload_End : DB 읽기 끝</item>
            		<item>DataLoading_Start : Data 로딩 시작</item>
            		<item>DataLoading_End : Data 로딩 끝</item>
            		<item>{모듈(Pegging/Simulation/Custom) 이름} Module_Start : Module 실행 시작</item>
            		<item>{모듈(Pegging/Simulation/Custom) 이름} Module_End : Module 실행 끝</item>
            		<item>SaveOutput_Start : Data 기록 시작</item>
            		<item>SaveOutput_End : Data 기록 끝</item>
            		<item>CommitOutput_Start : DB 쓰기 시작</item>
            		<item>CommitOutput_End : DB 쓰기 끝</item>
            		<item>SaveMonitoringOutput_Start : Monitoring Table Data 기록 시작</item>
            		<item>SaveMonitoringOutput_End : Monitoring Table Data 기록 끝</item>
            		<item>CommitMonitoringOutput_Start : Monitoring Table DB 쓰기 시작</item>
            		<item>CommitMonitoringOutput_End : Monitoring Table DB 쓰기 끝</item>
            	</list>
            </param>
            <remarks>단계별로 Log를 남기거나 필요한 로직을 처리하는 데 사용합니다.</remarks>
        </member>
        <member name="T:Mozart.Task.Execution.ModulePackage">
            <summary>
            새로운 모듈을 정의하는 패키지를 나타내는 클래스입니다.
            </summary>
            <summary>
            <em>ModulePackage</em> class represents the pacakge that defines a new module. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModulePackage.Name">
            <summary>
            패키지의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the <em>ModulePackage</em>.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.#ctor">
            <summary>
            새로운 ModulePackage를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the class <em>ModulePacakge</em>.
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.GetComment(System.String)">
            <summary>
            주어진 이름의 함수 구현 내용을 반환합니다.
            </summary>
            <param name="key">함수의 이름입니다.</param>
            <returns>함수의 구현 내용입니다.</returns>
            <summary>
            Returns the logic implement contents of the method with the specified name.
            </summary>
            <param name="key">The name of the method.</param>
            <returns>The logic implement contents of the specified method.</returns>
        </member>
        <member name="P:Mozart.Task.Execution.ModulePackage.InputNamespace">
            <summary>
            모듈의 Input DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Input DataItem class of the module. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModulePackage.OutputNamespace">
            <summary>
            모듈의 OUtput DataItem 클래스를 정의하는 네임 스페이스를 가져옵니다.
            </summary>
            <summary>
            Gets the namespace that defines the Output DataItem class of the module. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.GetBaseType(System.String)">
            <summary>
            지정된 기본 모듈 구성 클래스의 이름에 해당하는 실제 구현된 형식을 반환합니다.
            </summary>
            <param name="base">기본 모듈 구성 클래스의 이름입니다.</param>
            <returns>기본 모듈 구성 클래스의 실제 구현 형식입니다.</returns>
            <summary>
            Returns the actual implementation type of the specified name of the base module component class. 
            </summary>
            <param name="base">The string containing the name of the base module component class.</param>
            <returns>The actual implementation type of the specified name of the base module component class.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.GetModelObject(System.String)">
            <summary>
            지정된 DataObject와 연관 관계가 있는 ModelObject 형식을 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <returns>DataObject와 연관 관계가 있는 ModelObject 형식입니다.</returns>
            <summary>
             Returns the <em>ModelObject</em> type associated with the specified <em>DataObject</em>.
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <returns>The <em>ModelObject</em> type associated with the specified <em>DataObject</em>.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.GetVModelTemplate">
            <summary>
            패키지에 정의된 모델 정보를 가져옵니다.
            </summary>
            <returns>패키지에 정의된 모델 정보입니다.</returns>
             <summary>
            Returns the model data defined in the package.
             </summary>
             <returns>The model data defined in the specified package.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModulePackage.IsDataObject(System.String,System.Boolean)">
            <summary>
            주어진 DataObject와 연관된 ModelObject가 존재하는지 여부를 반환합니다.
            </summary>
            <param name="dataObject">DataObject의 이름입니다.</param>
            <param name="input">Input DataObject인지 여부입니다.</param>
            <returns>연관된 ModelObject가 존재하는지 여부입니다.</returns>
            <summary>
            Returns whether if a <em>ModelObject</em> associated with the specified <em>DataObject</em> exists. 
            </summary>
            <param name="dataObject">The name of the specified <em>DataObject</em>.</param>
            <param name="input">The boolean value to determine whether this <em>DataObject</em> is an input data object or not.</param>
            <returns><em>true</em> if <em>ModelObject</em> associated with the specifed <em>DataObject</em> exists; otherwise, <em>false</em>.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.Performance.Statistics">
            <summary>
            Statistics on a series of data samples of type double.
            </summary>
        </member>
        <member name="F:Mozart.Task.Execution.Performance.Statistics.DefaultConfidenceLevel">
            <summary>
            Default confidence level (.95 or 95%)
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.SampleCount">
            <summary>
            collected sample count
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.Min">
            <summary>
             collected minimum value
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.Max">
            <summary>
            collected maximum value
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.Mean">
            <summary>
            Gets the mean of the statistics, or 0 if no samples have been added
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.Variance">
            <summary>
            Gets the variance
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.StdDeviation">
            <summary>
            Gets the standard deviation of the samples
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.Confidence">
            <summary>
            gets confidence by default confidence level
            </summary>
            <returns>confidence</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.Confidence(System.Double)">
            <summary>
            gets confidence by given cofidence level
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.Reset">
            <summary>
            reset statistics
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.Add(System.Double)">
            <summary>
            add sample value
            </summary>
            <param name="value">sample</param>
        </member>
        <member name="P:Mozart.Task.Execution.Performance.Statistics.MeanConfidence">
            <summary>
            Gets the mean confidence interval of the statistics, or 0 if no samples have been added
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.Confidence(System.Double,System.Double,System.Double)">
            <summary>
            Gets the confidence interval half-width for level (e.g., .95)
            </summary>
            <param name="stdDev">standard deviation</param>
            <param name="df">degree of freedom</param>
            <param name="level">confidence level</param>
            <returns>confidence interval half-width</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.InvertT(System.Double,System.Double)">
            <summary>
               COMPUTE pth QUANTILE OF THE t DISTRIBUTION
            This function computes the upper pth quantile of the t dis-
            tribution (the value of t for which the area under the curve
            from t to +infinity is equal to p). It is a transliteration
            of the 'STUDTP' function given in Appendix C of "Principles
            of Discrete Event Simulation", G. S. Fishman, Wiley, 1978.
            </summary>
            <param name="p"> significance value</param>
            <param name="df">degrees of freedom</param>
            <returns>t-value</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Performance.Statistics.InvertZ(System.Double)">
             <summary>
             Calculate z-value given p level for standard Normal Distribution.
             From K. Pawlikowski (www.cosc.canterbury.ac.nz)
            
             This function computes the pth upper quantile of the stand-
             ard normal distribution (i.e., the value of z for which the
             are under the curve from z to +infinity is equal to p).  'Z'
             is a transliteration of the 'STDZ' function in Appendix C of
             "Principles of Discrete Event Simulation", G. S. Fishman,
             Wiley, 1978.   The  approximation used initially appeared in
             in  "Approximations for Digital Computers", C. Hastings, Jr.,
             Princeton U. Press, 1955.
             </summary>
             <param name="p">significance value</param>
             <returns>z-value</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.DerivedPersistHelper.CallAfterLoadHandler``1(System.Object,System.Object,System.Boolean)">
            <summary>
            A->B->C 상속관계, A/B/C 프로젝트는 RegisterAction, RegisterLoad,Load 함수등록 
            Handler (OnAfterLoad event) 를 등록하여 다음과 같은 상황에서 순차적으로
            호출되도록 구현되어짐
            1. OnAction에서 사용자에 의해 함수가 호출되면 checkBase = false 
              . A(OnAction) -> B(OnAfterLoad) -> C(OnafterLoad)        ///   
            2. OnAfterLoad : checkBase = true;
                A -> B -> C 순으로 OnAfterload 호출
            </summary>
            <typeparam name="SB"></typeparam>
            <param name="sb"></param>
            <param name="my"></param>
            <param name="checkBase"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.DerivedPersistHelper.CallBeforeAddHandler``1(``0,Mozart.Task.Execution.Persists.RowContext)">
            <summary>
              var writer = DerivedOutputHelper.GetTable&lt;BOP&gt; ()
              var row = writer.NewRow ();
              작업.
              DerivedOutputHelper.CallBeforeAddHandler&lt;BOP&gt;(row, context);
              writer.Add (... )
              
            </summary>
            <typeparam name="SB"></typeparam>
            <param name="row"></param>
            <param name="context"></param>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.InputPersisterBase.RegisterLoad``1(System.String,System.Func{``0,System.Object})">
            <summary>
             Func&lt;object, Func&lt;object&gt;, object&gt;
             first parameter : Schema Object
             second parameter : Inherited Input data Object type
             return value : Inherited input data object
            </summary>
            <param name="key"></param>
            <param name="baseLoader"></param>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.InputPersisterBase.RegisterAction(System.String,System.Action{Mozart.Task.Execution.Persists.IPersistContext})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="baseAction"></param>
        </member>
        <member name="P:Mozart.Task.Execution.Persists.RowContext.Item(System.String)">
            <summary>This is the property to refer to the value of the user specified varaibles stored in ModelContext.</summary>
            <param name="key">The key strings for the saved variable values.</param>
            <example>
            If user defined ModelContext variable is using "RunCondition" as the Key, the variable can be referred as below.
            <code title="Example" description="" lang="CS">
            string condValue = ModelContext.Current["RunCondition"] ;</code></example>
        </member>
        <member name="P:Mozart.Task.Execution.Persists.RowContext.Keys">
            <summary>The set of Key strings of the data user registered to ModelContext.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.RowContext.Set(System.String,System.Object)">
            <summary>Configure user defined variable to ModelContext.</summary>
            <param name="key">The key string of the variable to be configured.</param>
            <param name="value">
            The value of the configured variable.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.RowContext.Remove(System.String)">
            <summary>Remove the variables from the selected key.</summary>
            <param name="key">The target key string to remove the variable.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.RowContext.Get``1(System.String,``0)">
            <summary>This is the property to refer to the user defined variable in ModelContext.</summary>
            <typeparam name="TValue">The data type of the configured value.</typeparam>
            <param name="key">The Key string of the variable.</param>
            <param name="defaultValue">The default value of the variable.</param>
            <returns>Return the variable value. If there is no value set for the Key, value in defaultValue is returned.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Persists.RowContext.Pop``1(System.String,``0)">
            <summary>Return the user defined variable to ModelContext.</summary>
            <param name="key">The Key string of the variable.</param>
            <param name="defaultValue">The default value of the variable.</param>
            <typeparam name="TValue">The data type of the configured value.</typeparam>
            <returns>Return the cofigured value.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.Logger">
            <summary>The Main Log class to write execution logs.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.Logger.Handler">
            <summary>
            The current Model Log in use. 
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.StartHandler(Mozart.Task.Execution.IModelLog)">
            <summary>
            Starts input ModelLog.
            </summary>
            <param name="handler">Target ModelLog.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.EndHandler">
            <summary>
            End the current ModelLog in use.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Logger.Monitor">
            <summary>
            현재 설정된 IModelLog의 모니터 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the monitor object of the currently set <em>IModelLog</em>.
            </summary> 
        </member>
        <member name="M:Mozart.Task.Execution.Logger.ShouldLog(Mozart.Logging.LogLevel)">
            <summary>
            Determines whether to write a specific LogLevel.
            </summary>
            <param name="eventType">LogLevel type.</param>
            <returns>If logs should be left, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Log(Mozart.Logging.LogLevel,System.Object)">
            <summary>
            Writes Log.
            </summary>
            <param name="eventType">LogLevel type.There are Debug, Fatal, Warn.</param>
            <param name="message">The log message to write.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Log(Mozart.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Writes Log.
            </summary>
            <param name="eventType">LogLevel type.There are Debug, Fatal, Warn.</param>
            <param name="message">The log message to write.</param>
            <param name="e">Exception information that has occured.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Debug(System.String)">
            <summary>Writes logs of Debug Level.</summary>
            <overloads> Ouputs designated strings.</overloads>
            <param name="msg">Log message string.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Debug(System.String,System.Exception)">
            <summary>Writes logs of Debug Level.</summary>
            <overloads>Ouputs designated message with Exception logs. </overloads>
            <param name="msg">Log message string.</param>
            <param name="e">Target Exception logs to write.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Debug(System.String,System.Object[])">
            <summary>Writes logs of Debug Level.</summary>
            <overloads>Can write logs in a formatted string.</overloads>
            <param name="msg"> Log message string including variables.</param>
            <param name="args">Variables included to the message.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Fatal(System.String)">
            <summary>Writes logs for critical errors.</summary>
            <overloads>Writes only designates strings.</overloads>
            <param name="msg">Error message string.</param>
            <remarks>The logs are left as "FATAL : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Fatal(System.String,System.Exception)">
            <summary>Writes logs for critical errors.</summary>
            <overloads>Writes designated message with Exception logs.</overloads>
            <param name="msg">Error message string.</param>
            <param name="t">Target Exception to write.</param>
            <remarks>The logs are left as "FATAL : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Fatal(System.String,System.Object[])">
            <summary>Writes logs for critical errors.</summary>
            <overloads>Can write logs in a formatted string.</overloads>
            <param name="msg">Error message string including variables.</param>
            <param name="args">Variable Argument included in the message.</param>
            <remarks>The logs are left as "FATAL : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Error(System.String)">
            <summary>Writes Error logs.</summary>
            <overloads>Outputs designated strings.</overloads>
            <param name="msg">Log message string.</param>
            <remarks>The logs are left as "ERROR : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Error(System.String,System.Exception)">
            <summary>Writes Error logs.</summary>
            <overloads>Writes designated message with Exception logs.</overloads>
            <param name="msg">Error message string.</param>
            <param name="t">Target Exception to write.</param>
            <remarks>The logs are left as "ERROR : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Error(System.String,System.Exception,System.Boolean)">
            <summary>Writes Error logs.</summary>
            <overloads>Writes Error logs with Exception logs and cofigures whether to trigger Exception.</overloads>
            <param name="msg">Error message string.</param>
            <param name="e">Target Exception to write.</param>
            <param name="throwEx">The decision to trigger Exception event after leaving error logs. If true, Excpetion occurs after leaving logs. If false, Exception does not occur.</param>
            <remarks>The logs are left as "ERROR : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Error(System.String,System.Object[])">
            <summary>Writes Error logs.</summary>
            <overloads>Write formatted Error message logs.</overloads>
            <param name="msg">Error message string including variables.</param>
            <param name="args">Variable Argument included in the message.</param>
            <remarks>The logs are left as "ERROR : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Warn(System.String)">
            <summary>Writes Warning message logs.</summary>
            <overloads>Writes designated messages only.</overloads>
            <param name="msg">Warning message string.</param>
            <remarks>The logs are left as "WARN : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Warn(System.String,System.Exception)">
            <summary>Writes Warning message logs.</summary>
            <overloads>Writes warning message with Exception logs.</overloads>
            <param name="msg">Warning message string.</param>
            <param name="ex">Target Exception to write.</param>
            <remarks>The logs are left as "WARN : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Warn(System.String,System.Object[])">
            <summary>Writes Warning message logs.</summary>
            <overloads>Write formatted Warning message logs.</overloads>
            <param name="msg">Warning message string including variables.</param>
            <param name="args">Variable Argument included in the message.</param>
            <remarks>The logs are left as "WARN : " with keywords.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Info(System.String)">
            <summary>Writes simple information logs.</summary>
            <overloads>Writes designated messages only.</overloads>
            <param name="msg">Information message string.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.Info(System.String,System.Object[])">
            <overloads>Write logs in a formatted string.<br/></overloads>
            <summary>Writes simple information logs.</summary>
            <param name="msg">Information message string including variables.</param>
            <param name="args">Variable Argument included in the message.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.MonitorInfo(System.String)">
            <summary>Writes message to default logs.</summary>
            <overloads>Writes designated messages only.</overloads>
            <param name="msg">Information message.</param>
        </member>
        <member name="M:Mozart.Task.Execution.Logger.MonitorInfo(System.String,System.Object[])">
            <summary>Writes message to default logs.</summary>
            <overloads>Write formatted message string and leave as logs.</overloads>
            <param name="msg">Message string including variables.</param>
            <param name="args">Variable Argument included in the message.</param>
        </member>
        <member name="T:Mozart.Task.Execution.ModelContext">
            <summary>
            	<para>The main context used during the entire model execution cycle.</para>
            </summary>
            <remarks>Information such as Arguments and execution module to run Model, exception handling event are saved and provided from this Context.</remarks>
            <example>
            	<para></para>
            	<para></para>
            </example>
        </member>
        <member name="E:Mozart.Task.Execution.ModelContext.StartUp">
            <summary>
            Input Persist 작업이 완료된 뒤 호출되는 메서드입니다.
            </summary>
            <summary>
            Called after the operation of <em>Input Persist</em> phase is completed. Any custom event to execute afer Input Persist operation, can be defined.
            </summary>
        </member>
        <member name="E:Mozart.Task.Execution.ModelContext.ShutDown">
            <summary>
            DB Upload 작업 이후 호출되는 메서드입니다. 엔진 실행 중 Exception이 발생한 경우에도 호출됩니다.
            </summary>
            <summary>
            Called after the operation of <em>DB Upload phase</em> is completed. This event is also called when excpetion is thrown during engine run.  
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.NullMonitor">
            <summary>
            아무 작업도 수행하지 않는 모니터를 가져옵니다.
            </summary>
            <summary>
            Gets a monitor object that does not perform any action.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Current">
            <summary>This is the Static property to refer to the current created ModelContext.</summary>
            <remarks>This is used to refer to ModelContext at a random period from the user developed module. </remarks>
            <example>
            	<code title="Example" description="To check the VersionNo of the ModelContext property at a random point from the user developed module, ModelContext.Current can be used as shown in the example below." lang="CS">
            string version = ModelContext.Current.VersionNo</code>
            </example>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.CurrentModule">
            <summary>This is the property to refer to the Module object currently running.</summary>
            <remarks>There could be multiple Mozart.Task.Execution.ExecutionModule executed in sequential order when one Model is running.
            By using this property, the information of the current Module can be referred at random point while Model is running.</remarks>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetMonitor(System.String)">
            <summary>
            지정된 키를 갖는 IProgressMonitor를 반환합니다. 
            >>>>>>>>의도한대로 구현된 것인지 확인 필요
            </summary>
            <param name="key">IProgressMonitor의 키입니다.</param>
            <returns>지정된 키를 갖는 IProgressMonitor입니다.</returns>
            <summary>
            Returns the <em>IProgressMonitor</em> of the specified key.  
            </summary>
            <param name="key">The string containing the key of the <em>IProgressMonitor</em> to search.</param>
            <returns>The <em>IProgressMonitor</em> of the specified key.</returns>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.StopInvoked">
            <summary>
            사용자가 모델 실행을 중지시켰는지 여부를 가져옵니다.
            </summary>
            <summary>
            Checks whether the model execution was suspended due to user intervention.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.TaskContext">
            <summary>Context to perform Task.</summary>
            <remarks>This is the Context used during the entire cycle of the task performed from Mozart. This is included to Argument when ModelContext is created.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Arguments">
            <summary>This is the property to refer to the Arguments that run the Model.</summary>
            <remarks>Both user defined Arguments and pre-defined Arguments from the system can be referred.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Inputs">
            <summary>This is the property to refer to the Input Data of the Model</summary>
            <remarks>Refers to the information such as schema of the Model Input Data, DataAction at the point Model is executed.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Outputs">
            <summary>This is the property to refer to the Output Data of the Model.</summary>
            <remarks>Refers to the information such as schema of the Model Output Data, DataAction at the point Model is executed.</remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.ErrorLister">
            <summary>This property is used to save an refer to the Error information that occured during Model execution.</summary>
            <remarks>
            <para>The error information that could be referred from this property is the internal error occured from Pegging and Simulation library.
            This is not an execption and does not terminate the Model. In addition user can add error information through IErrorInfoList.Write function.</para>
            </remarks>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.StartTime">
            <summary>
            Simulation start time.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.EndTime">
            <summary>The property of Simulation end time..</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Result">
            <summary>Model execution result.</summary>
            <remarks>If Dependent Trigger is configured and used, this function can be used to use and deliver the result data of the previous trigger to the following trigger of the model.
            The data type IDictionary&lt;string, object&gt; can be used. </remarks>
            <value>If user does not specify the vaule, the result is NULL.</value>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.QueryArgs">
            <summary>This is the set of Arguments used from the query of Input/Output Data Action.</summary>
            <remarks>These are the variables used in the query from DataAction and the prefix '$' is used. </remarks>
            <example>
            $ARG_1 is bool type variable, and @GROUP1, @GROUP2 are variable defined through QueryArgument, the following script can be used.
            <code title="Example" description="" lang="SQL">
            SELECT a.* 
            FROM TEST_TBL a
            WHERE 
            #if ($ARG_1)
              a.T_GROUP = @GROUP1
            #else
              a.T_GROUP = @GROUP2
            #end</code></example>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.DbDownloadOnly">
            <summary>
            DB Download 작업만 수행할지 여부를 가져옵니다. true인 경우 모델 실행과 DB Upload 작업은 수행되지 않습니다.
            </summary>
            <summary>
            <para>Gets the boolean value to determine whether to operate <em>DB Download</em> only. </para>
            <para>If true, model engine execution and DP Upload action will not perform.</para>
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.DbUploadOnly">
            <summary>
            DB Upload 작업만 수행할지 여부를 가져옵니다. true인 경우 DB Download작업과 모델 실행 작업은 수행되지 않습니다.
            </summary>
            <summary>
            <para>Gets the boolean value to determine whether to operate <em>DB Upload</em> only. </para>
            <para>If true, DB Download and model engine execution action will not perform.</para>
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.ModelDirectory">
            <summary>
            실행 중인 모델 파일이 위치한 폴더 경로를 가져옵니다.
            </summary>
            <summary>
            Gets the directory information of the current executing model file. 
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Item(System.String)">
            <summary>This is the property to refer to the value of the user specified varaibles stored in ModelContext.</summary>
            <param name="key">The key strings for the saved variable values.</param>
            <example>
            If user defined ModelContext variable is using "RunCondition" as the Key, the variable can be referred as below.
            <code title="Example" description="" lang="CS">
            string condValue = ModelContext.Current["RunCondition"] ;</code></example>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Keys">
            <summary>The set of Key strings of the data user registered to ModelContext.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.Set(System.String,System.Object)">
            <summary>Configure user defined variable to ModelContext.</summary>
            <param name="key">The key string of the variable to be configured.</param>
            <param name="value">
            The value of the configured variable.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.Remove(System.String)">
            <summary>Remove the variables from the selected key.</summary>
            <param name="key">The target key string to remove the variable.</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.Get``1(System.String,``0)">
            <summary>This is the property to refer to the user defined variable in ModelContext.</summary>
            <typeparam name="TValue">The data type of the configured value.</typeparam>
            <param name="key">The Key string of the variable.</param>
            <param name="defaultValue">The default value of the variable.</param>
            <returns>Return the variable value. If there is no value set for the Key, value in defaultValue is returned.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.Pop``1(System.String,``0)">
            <summary>Return the user defined variable to ModelContext.</summary>
            <param name="key">The Key string of the variable.</param>
            <param name="defaultValue">The default value of the variable.</param>
            <typeparam name="TValue">The data type of the configured value.</typeparam>
            <returns>Return the cofigured value.</returns>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Version">
            <summary>This is the execution Model version information property.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.VersionNo">
            <summary>Version Number property.</summary>
            <value>The VersionNo string of ModelContext.Version property.</value>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.VModelName">
            <summary>Model name</summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.HasErrors">
            <summary>This is the property to refer to the Excpetion occurance during Model execution.</summary>
            <value>If LastException property is Null, return true, or else, return false.</value>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.LastException">
            <summary>The information of the last occured Exception during Model execution. </summary>
            <value>If Excpetion does not occur, NULL is maitained.</value>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.SetException(System.Exception)">
            <summary>
            발생한 Exception을 컨텍스트에 저장하고, 사용자가 실행을 중단시켜 발생한 Exception이 아닌 경우 로그를 기록합니다.
            </summary>
            <param name="ex">발생한 Exception입니다.</param>
            <summary>
            Stores the thrown exception to the context, and writes the exception message log unless the model engine is stopped due to user intervention.
            </summary>
            <param name="ex">The exception thrown during model engine run.</param>
        </member>
        <member name="P:Mozart.Task.Execution.ModelContext.Log">
            <summary> This is property of the object for managing logs from Model.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetLog(System.String)">
            <summary>Returns the Logger that is the Key of the designated Argument.</summary>
            <remarks>If there is a Logger correspondent to the input Key, return the Logger, if not, Logger is created and returned.
            In case the corresponding Logger is used to leave logs, a log file based on the Key is generated and logs are stored in the generated file.</remarks>
            <returns>지정된 Argument 를 Key 로하는 Logger 입니다.</returns>
            <returns>The <em>Logger</em> having the specified argument as the key.</returns>
            <example>
            This is an example to write logs to the log file "TestLog".
            <code title="Example" description="" lang="CS">
            var log = ModelContext.Current.GetLog("TestLog");
            log.Info("This is TEST Log."); 
            log.Info("Logs will be written to the new file.") ;</code></example>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetExecutionModule(System.String)">
            <summary>Return a specific module registered in Model.</summary>
            <param name="moduleKey">The key string of the module to be returned.</param>
            <returns>Return the target Mozart.Task.Execution.ExecutionModule object.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetOrderedExecutionModules">
            <summary>Sort the module included in Model in execution order and return the list.</summary>
            <returns>Return the sorted list of execution module(Mozart.Task.Execution.ExecutionModule).</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetLogDirectory(Mozart.Task.Framework.ITaskExecutionContext)">
            <summary>Return the Directory where the log file is generated.</summary>
            <param name="tctx">TaskContext object to execute Model.</param>
            <returns>Return the path where log file is generated as string type..</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.GetLogLevel">
            <summary>Return LogLevel information.</summary>
            <returns>Return LogLevel information.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelContext.SetupLog(Mozart.Task.Framework.ITaskExecutionContext,Mozart.Task.Execution.VersionInfo,System.DateTime)">
            <summary>Configures the master data to write logs.</summary>
            <param name="tctx">TaskContext object to execute Model.</param>
            <param name="version">The version information of the Model.</param>
            <param name="logTime">The time log is written.</param>
        </member>
        <member name="T:Mozart.Task.Execution.ModelLog">
            <summary>
            시뮬레이션이 진행되는 동안 발생되는 Log 생성 및 진행상항을 모니터링 한다.
            디버깅에 도움을 줄수 Debug 메시지 기록
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.SetMonitor(Mozart.Common.IProgressMonitor)">
            <summary>
            모니터링 객체 지정
            </summary>
            <param name="value">모니터링 객체</param>
        </member>
        <member name="P:Mozart.Task.Execution.ModelLog.Level">
            <summary>
            소스 스위치와 이벤트 형식 필터에 의해 필터링되는 추적 메시지의 수준을 지정합니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.ModelLog.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.ShouldLog(Mozart.Logging.LogLevel)">
            <summary>
            지정한 TraceEventType을 로깅할수 있는지를 체크 합니다.
            </summary>
            <param name="eventType">TraceEventType</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.MonitorInfo(System.String)">
            <summary>
            지정된 모니터링 객체에 메세지 출력
            </summary>
            <param name="msg">메세지</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.MonitorInfo(System.String,System.Object[])">
            <summary>
            지정된 모니터링 객체에 메세지, 참조 데이터 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="args">참조 데이터</param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.MonitorInfo(System.String,System.Boolean)">
            <summary>
            지정된 모니터링 객체에 메세지 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="withLog"></param>
        </member>
        <member name="M:Mozart.Task.Execution.ModelLog.MonitorInfo(System.String,System.Boolean,System.Object[])">
            <summary>
            지정된 모니터링 객체에 메세지, 참조 데이터 출력
            </summary>
            <param name="msg">메세지</param>
            <param name="args">참조 데이터</param>
            <param name="withLog"></param>
        </member>
        <member name="T:Mozart.Task.Execution.VersionInfo">
            <summary>
            Task Execution Version Information .(TaskName, VersionNo, Execution time, Decscription)
            </summary>
        </member>
        <member name="M:Mozart.Task.Execution.VersionInfo.#ctor(System.String,System.DateTime)">
            <summary>Constructor.</summary>
            <overloads>The version name is set automatically.</overloads>
            <param name="name">Model Name.</param>
            <param name="runTime">The Task execution start time.</param>
        </member>
        <member name="M:Mozart.Task.Execution.VersionInfo.#ctor(System.String,System.DateTime,System.String)">
            <summary>Constructor.</summary>
            <overloads>This is used when version number is designated as string type and created.</overloads>
            <param name="name">Model Name.</param>
            <param name="runTime">The Task execution start time.</param>
            <param name="versionNo">Version number string.</param>
        </member>
        <member name="P:Mozart.Task.Execution.VersionInfo.Name">
            <summary>Model name</summary>
        </member>
        <member name="P:Mozart.Task.Execution.VersionInfo.VersionNo">
            <summary>Version number string.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.VersionInfo.RunTime">
            <summary>Task execution start time.</summary>
        </member>
        <member name="P:Mozart.Task.Execution.VersionInfo.Description">
            <summary>Description of the object.</summary>
        </member>
        <member name="M:Mozart.Task.Execution.VersionInfo.MakeVersionNo(System.String,System.DateTime)">
            <summary>Generate a designated type of version number.</summary>
            <param name="name">The name used to create version name.</param>
            <param name="runTime">Time Stamp used to create version name.</param>
            <returns>Return [name]-[runTime] format string.</returns>
        </member>
        <member name="M:Mozart.Task.Execution.VersionInfo.ToString">
            <summary>Return version number of the object.</summary>
            <returns>Return the result of MakeVerisionNo function.</returns>
        </member>
        <member name="T:Mozart.Task.Execution.Strings">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.EXCEPTION_ARG_NULL">
            <summary>
              {0}: Invalid parameter {1} passed to method: null과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.EXCEPTION_CANNOT_FOUND_ASSEMBLY">
            <summary>
              can&apos;t found assembly : &apos;{0}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.EXCEPTION_CANNOT_FOUND_EXECUTION_MODULE">
            <summary>
              cannot found execution module for {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.EXCEPTION_CONFIG_TABLE_NOT_FOUND">
            <summary>
              ConfigParameters mapping table &apos;{0}&apos;not found.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.Task.Execution.Strings.EXCEPTION_PROPERTY_IS_NOT_FOUND">
            <summary>
              Property &apos;{0}&apos; not found for class &apos;{1}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:DryIoc.Container">
            <summary>
            IoC Container. Documentation is available at https://bitbucket.org/dadhi/dryioc.
            TODO:
            - finish: Unregister.
            - add: Resolution condition to Factory.Setup
            - change: Add Container.FactoryCompiler and optional compiler to dynamic Assembly in .NET 4
            - change: Minimize Expression use by wrapping helper expression constructs into methods.
            - change: FactoryDelegate to have single ResolutionState parameter with Scopes and Registry available from it.
            - change: Simplify Reuse by switching from Expression to direct Scope use.
            - add: CreateContainerWithWipedCache.
            - finish: CreateChildContainer and CreateScopedContainer.
            - add: Auto-select constructor with all resolvable parameters.
            - add: Rule to resolve mocks of unregistered services.
            - add: Mono support.
            + add: Performance increase by using user provided delegate for resolution root. Modify DelegateFactory to support that.
            + add: metadata to Resolve method.
            </summary>
        </member>
        <member name="M:DryIoc.Registrator.Register(DryIoc.IRegistrator,System.Type,DryIoc.Factory,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers service <paramref name="serviceType"/>.
            </summary>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="serviceType">The service type to register</param>
            <param name="factory"><see cref="T:DryIoc.Factory"/> details object.</param>
            <param name="named">Optional service key (name). Could be of any type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.Register``1(DryIoc.IRegistrator,DryIoc.Factory,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers service of <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="factory"><see cref="T:DryIoc.Factory"/> details object.</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.Register(DryIoc.IRegistrator,System.Type,System.Type,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers service <paramref name="serviceType"/> with corresponding <paramref name="implementationType"/>.
            </summary>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="serviceType">The service type to register.</param>
            <param name="implementationType">Implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.Register(DryIoc.IRegistrator,System.Type,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers service of <paramref name="implementationType"/>. ServiceType will be the same as <paramref name="implementationType"/>.
            </summary>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="implementationType">Implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.Register``2(DryIoc.IRegistrator,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers service of <typeparamref name="TService"/> type implemented by <typeparamref name="TImplementation"/> type.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.Register``1(DryIoc.IRegistrator,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers implementation type <typeparamref name="TImplementation"/> with itself as service type.
            </summary>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.RegisterAll(DryIoc.IRegistrator,System.Type,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Func{System.Type,System.Boolean},System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers single registration for all implemented public interfaces and base classes.
            </summary>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="implementationType">Service implementation type. Concrete and open-generic class are supported.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="types">Optional condition to include selected types only. Default value is <see cref="F:DryIoc.Registrator.RegisterAllDefaultTypes"/></param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.RegisterAll``1(DryIoc.IRegistrator,DryIoc.IReuse,DryIoc.GetConstructor,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers single registration for all implemented public interfaces and base classes.
            </summary>
            <typeparam name="TImplementation">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="withConstructor">Optional strategy to select constructor when multiple available.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.RegisterDelegate``1(DryIoc.IRegistrator,System.Func{DryIoc.IResolver,``0},DryIoc.IReuse,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers a factory delegate for creating an instance of <typeparamref name="TService"/>.
            Delegate can use <see cref="T:DryIoc.IResolver"/> parameter to resolve any required dependencies, e.g.:
            <code>RegisterDelegate&lt;ICar&gt;(r => new Car(r.Resolve&lt;IEngine&gt;()))</code>
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="factoryDelegate">The delegate used to create a instance of <typeparamref name="TService"/>.</param>
            <param name="reuse">Optional <see cref="T:DryIoc.IReuse"/> implementation, e.g. <see cref="F:DryIoc.Reuse.Singleton"/>. Default value means no reuse, aka Transient.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.RegisterInstance``1(DryIoc.IRegistrator,``0,DryIoc.FactorySetup,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>
            Registers a pre-created service instance of <typeparamref name="TService"/> 
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="registrator">Any <see cref="T:DryIoc.IRegistrator"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="instance">The pre-created instance of <typeparamref name="TService"/>.</param>
            <param name="setup">Optional factory setup, by default is (<see cref="T:DryIoc.ServiceSetup"/>)</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="ifAlreadyRegistered">Optional policy to deal with case when service with such type and name is already registered.</param>
        </member>
        <member name="M:DryIoc.Registrator.IsRegistered(DryIoc.IRegistrator,System.Type,System.Object,DryIoc.FactoryType,System.Func{DryIoc.Factory,System.Boolean})">
            <summary>
            Returns true if <paramref name="serviceType"/> is registered in container or its open generic definition is registered in container.
            </summary>
            <param name="registrator">Usually <see cref="T:DryIoc.Container"/> to explore or any other <see cref="T:DryIoc.IRegistrator"/> implementation.</param>
            <param name="serviceType">The type of the registered service.</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="factoryType">Optional factory type to lookup, <see cref="F:DryIoc.FactoryType.Service"/> by default.</param>
            <param name="condition">Optional condition to specify what registered factory do you expect.</param>
            <returns>True if <paramref name="serviceType"/> is registered, false - otherwise.</returns>
        </member>
        <member name="M:DryIoc.Registrator.IsRegistered``1(DryIoc.IRegistrator,System.Object,DryIoc.FactoryType,System.Func{DryIoc.Factory,System.Boolean})">
            <summary>
            Returns true if <typeparamref name="TService"/> type is registered in container or its open generic definition is registered in container.
            </summary>
            <typeparam name="TService">The type of service.</typeparam>
            <param name="registrator">Usually <see cref="T:DryIoc.Container"/> to explore or any other <see cref="T:DryIoc.IRegistrator"/> implementation.</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="factoryType">Optional factory type to lookup, <see cref="F:DryIoc.FactoryType.Service"/> by default.</param>
            <param name="condition">Optional condition to specify what registered factory do you expect.</param>
            <returns>True if <typeparamref name="TService"/> name="serviceType"/> is registered, false - otherwise.</returns>
        </member>
        <member name="M:DryIoc.Registrator.Unregister(DryIoc.IRegistrator,System.Type,System.Object,DryIoc.FactoryType,System.Func{DryIoc.Factory,System.Boolean})">
            <summary> Removes specified registration from container.</summary>
            <param name="registrator">Usually <see cref="T:DryIoc.Container"/> to explore or any other <see cref="T:DryIoc.IRegistrator"/> implementation.</param>
            <param name="serviceType">Type of service to remove.</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="factoryType">Optional factory type to lookup, <see cref="F:DryIoc.FactoryType.Service"/> by default.</param>
            <param name="condition">Optional condition for Factory to be removed.</param>
        </member>
        <member name="M:DryIoc.Registrator.Unregister``1(DryIoc.IRegistrator,System.Object,DryIoc.FactoryType,System.Func{DryIoc.Factory,System.Boolean})">
            <summary> Removes specified registration from container.</summary>
            <typeparam name="TService">The type of service to remove.</typeparam>
            <param name="registrator">Usually <see cref="T:DryIoc.Container"/> to explore or any other <see cref="T:DryIoc.IRegistrator"/> implementation.</param>
            <param name="named">Optional service key (name). Could be of any of type with overridden <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/>.</param>
            <param name="factoryType">Optional factory type to lookup, <see cref="F:DryIoc.FactoryType.Service"/> by default.</param>
            <param name="condition">Optional condition for Factory to be removed.</param>
        </member>
        <member name="M:DryIoc.Resolver.Resolve(DryIoc.IResolver,System.Type,DryIoc.IfUnresolved)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="resolver">Any <see cref="T:DryIoc.IResolver"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="ifUnresolved">Optional, say to how to handle unresolved service case.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DryIoc.Resolver.Resolve``1(DryIoc.IResolver,DryIoc.IfUnresolved)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="resolver">Any <see cref="T:DryIoc.IResolver"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="ifUnresolved">Optional, say to how to handle unresolved service case.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DryIoc.Resolver.Resolve(DryIoc.IResolver,System.Type,System.Object,DryIoc.IfUnresolved)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <param name="serviceType">The type of the requested service.</param>
            <param name="resolver">Any <see cref="T:DryIoc.IResolver"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="serviceKey">Service key (any type with <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/> defined).</param>
            <param name="ifUnresolved">Optional, say to how to handle unresolved service case.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DryIoc.Resolver.Resolve``1(DryIoc.IResolver,System.Object,DryIoc.IfUnresolved)">
            <summary>
            Returns an instance of statically known <typepsaramref name="TService"/> type.
            </summary>
            <typeparam name="TService">The type of the requested service.</typeparam>
            <param name="resolver">Any <see cref="T:DryIoc.IResolver"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="serviceKey">Service key (any type with <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/> defined).</param>
            <param name="ifUnresolved">Optional, say to how to handle unresolved service case.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:DryIoc.Resolver.ResolvePropertiesAndFields(DryIoc.IResolver,System.Object,System.Func{System.Reflection.MemberInfo,System.Object})">
            <summary>
            For given instance resolves and sets non-initialized (null) properties from container.
            It does not throw if property is not resolved, so you might need to check property value afterwards.
            </summary>
            <param name="resolver">Any <see cref="T:DryIoc.IResolver"/> implementation, e.g. <see cref="T:DryIoc.Container"/>.</param>
            <param name="instance">Service instance with properties to resolve and initialize.</param>
            <param name="getServiceKey">Optional function to get service key, if not specified service key will be null.</param>
        </member>
        <member name="M:DryIoc.TypeTools.GetImplementedTypes(System.Type,DryIoc.TypeTools.IncludeItself)">
            <summary>
            Returns all type interfaces and base types except object.
            </summary>
        </member>
        <member name="T:DryIoc.HashTree`2">
            <summary>
            Immutable kind of http://en.wikipedia.org/wiki/AVL_tree where actual node key is hash code of <typeparamref name="K"/>.
            </summary>
        </member>
        <member name="M:DryIoc.HashTree`2.Enumerate">
            <remarks>
            Depth-first in-order traversal as described in http://en.wikipedia.org/wiki/Tree_traversal
            The only difference is using fixed size array instead of stack for speed-up (~20% faster than stack).
            </remarks>
        </member>
        <member name="M:DryIoc.HashTree`2.RemoveOrUpdate(`0,DryIoc.ShouldUpdate{`1})">
            <remarks>
            Based on Eric Lippert's http://blogs.msdn.com/b/ericlippert/archive/2008/01/21/immutability-in-c-part-nine-academic-plus-my-avl-tree-implementation.aspx
            </remarks>
        </member>
        <member name="T:DryIoc.MefAttributedModel.AttributedModel">
            <summary>
            Implements MEF Attributed Programming Model. Documentation is available at https://bitbucket.org/dadhi/dryioc/wiki/MefAttributedModel.
            TODO:
            - add: Support for DryIoc Reuse, currently only Transient and Singleton is supported. Maybe add ReuseAttribute.
            - add: ImportAttribute.ContractType and AllowDefault support.
            </summary>
        </member>
    </members>
</doc>
