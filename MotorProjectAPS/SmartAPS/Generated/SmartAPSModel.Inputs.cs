/*------------------------------------------------------------------------------------------------------------------------------------------------------------
 <auto-generated>
     This code was generated by a mozart.

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using System.ComponentModel;

namespace SmartAPS.Inputs
{
    
    /// <summary>
    /// 
    /// Keys: LINE_ID, EQP_ID
    /// </summary>
    [Table(Name="EQUIPMENT")]
    public partial class EQUIPMENT : EntityObject
    {
        /// <summary>
        /// 공장의 고유 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비 고유 ID​
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 장비의 모델명, 제조사에서 부여한 고유 모델명 등의 정보
        /// </summary>
        [Column()]
        public string EQP_MODEL { get; set; }

        /// <summary>
        /// 내부 관리 그룹
        /// </summary>
        [Column()]
        public string EQP_GROUP { get; set; }

        private string _SIM_TYPE = "Table";
        /// <summary>
        /// TABLE,INLINE,LOTBATCH,BATCHINLINE,CHAMBER
        /// </summary>
        [Column()]
        [DefaultValue("Table")]
        public string SIM_TYPE
        {
            get
            {
                return this._SIM_TYPE;
            }
            set
            {
                _SIM_TYPE = value;
            }
        }
        /// <summary>
        /// DISPATCHING_TYPE 이 WeightPreset 을 사용하는 경우 PRESET_ID (PRESET_ID@PRESET_INFO)​
        /// </summary>
        [Column()]
        public string PRESET_ID { get; set; }

        private string _DISPATCHER_TYPE = "Fifo";
        /// <summary>
        /// Fifo,WeightSum,WeightSorted
        /// </summary>
        [Column()]
        [DefaultValue("Fifo")]
        public string DISPATCHER_TYPE
        {
            get
            {
                return this._DISPATCHER_TYPE;
            }
            set
            {
                _DISPATCHER_TYPE = value;
            }
        }
        private string _EQP_STATE = "IDLE";
        /// <summary>
        /// DOWN,PM,BUSY,IDLE,SETUP,IDLERUN,WAIT_SETUP
        /// </summary>
        [Column()]
        [DefaultValue("IDLE")]
        public string EQP_STATE
        {
            get
            {
                return this._EQP_STATE;
            }
            set
            {
                _EQP_STATE = value;
            }
        }
        /// <summary>
        /// 상태 중 DOWN, PM 인 경우 상세 코드에 따라 UP TIME 정보를 모델링 하기 위한 세부 상태 코드가 있다면 이를 반영 (FACTORY_BREAK, PM_PLANd의 STATE_CODE와 연결)
        /// </summary>
        [Column()]
        public string EQP_STATE_CODE { get; set; }

        /// <summary>
        /// EQP_STATE 로 변경된 시각 정보
        /// </summary>
        [Column()]
        public System.DateTime STATE_CHANGE_TIME { get; set; }

        private string _AUTOMATION = "AUTO";
        /// <summary>
        /// AUTO : 자동화 장비 (장비 Down시 진행하던 Lot까지 진행 후 신규 투입만 막는다.), MANUAL : 수동 장비 (장비 Down 시 작업 하던 Lot도 중단 된다.)
        /// </summary>
        [Column()]
        [DefaultValue("AUTO")]
        public string AUTOMATION
        {
            get
            {
                return this._AUTOMATION;
            }
            set
            {
                _AUTOMATION = value;
            }
        }
        public EQUIPMENT ShallowCopy()
        {
			var x = (EQUIPMENT) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: LINE_ID
    /// </summary>
    [Table(Name="LINE_INFO")]
    public partial class LINE_INFO : EntityObject
    {
        /// <summary>
        /// 공장에 고유 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 공장 명칭​
        /// </summary>
        [Column()]
        public string LINE_NAME { get; set; }

        private string _LINE_TYPE = "INHOUSE";
        /// <summary>
        /// INHOUSE, OUTSOURCING
        /// </summary>
        [Column()]
        [DefaultValue("INHOUSE")]
        public string LINE_TYPE
        {
            get
            {
                return this._LINE_TYPE;
            }
            set
            {
                _LINE_TYPE = value;
            }
        }
        public LINE_INFO ShallowCopy()
        {
			var x = (LINE_INFO) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, PRODUCT_TYPE
    /// </summary>
    [Table(Name="PRODUCT")]
    public partial class PRODUCT : EntityObject
    {
        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        private string _PRODUCT_TYPE = "FG";
        /// <summary>
        /// PART, FG (PART : 중간 부품 (투입부터 중간 조립품까지 모두 PART)​, FG : 최종생산품(생산출하품)​)
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        [DefaultValue("FG")]
        public string PRODUCT_TYPE
        {
            get
            {
                return this._PRODUCT_TYPE;
            }
            set
            {
                _PRODUCT_TYPE = value;
            }
        }
        /// <summary>
        /// 제품 명
        /// </summary>
        [Column()]
        public string PRODUCT_NAME { get; set; }

        /// <summary>
        /// 제품 생산을 위한 ROUTE 를 정의한 PROCESS_ID@PROCESS, PROCESS_ID@​
        /// </summary>
        [Column()]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 제품이 Lot으로 구성되는 크기
        /// </summary>
        [Column()]
        public int LOT_SIZE { get; set; }

        /// <summary>
        /// 제품속성에 대한 이름 정의
        /// </summary>
        [Column()]
        public string PROPERTY_NAME { get; set; }

        /// <summary>
        /// 제품속성에 대한 값 정의
        /// </summary>
        [Column()]
        public string PROPERTY_VALUE { get; set; }

        public PRODUCT ShallowCopy()
        {
			var x = (PRODUCT) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: PROCESS_ID
    /// </summary>
    [Table(Name="PROCESS")]
    public partial class PROCESS : EntityObject
    {
        /// <summary>
        /// 프로세스 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 프로세스 명
        /// </summary>
        [Column()]
        public string PROCESS_NAME { get; set; }

        /// <summary>
        /// 프로세스에 대한 설명
        /// </summary>
        [Column()]
        public string DESCRIPTION { get; set; }

        public PROCESS ShallowCopy()
        {
			var x = (PROCESS) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: FROM_PRODUCT_ID, STEP_ID, TO_PRODUCT_ID
    /// </summary>
    [Table(Name="PRODUCT_ROUTE")]
    public partial class PRODUCT_ROUTE : EntityObject
    {
        /// <summary>
        /// 변경 전 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string FROM_PRODUCT_ID { get; set; }

        /// <summary>
        /// 변경이 발생하는 공정 ID​
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 변경 후 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string TO_PRODUCT_ID { get; set; }

        /// <summary>
        /// 변경 전 제품의 투입 수량
        /// </summary>
        [Column()]
        public double IN_QTY { get; set; }

        /// <summary>
        /// 변경 후 제품의 생산 수량
        /// </summary>
        [Column()]
        public double OUT_QTY { get; set; }

        /// <summary>
        /// BOM, CHANGE
        /// </summary>
        [Column()]
        public string ROUTE_TYPE { get; set; }

        /// <summary>
        /// WAIT,IN,OUT (제품 코드가 바뀌는 시점 정의 (WAIT : 대기 시점에 PART 변경, IN : 공정 시작 시점에 PART 변경, OUT : 공정 종료 시점에 PART 변경))
        /// </summary>
        [Column()]
        public string CHANGE_TYPE { get; set; }

        /// <summary>
        /// 만일 ALTERNATIVE 관계의 제품 구조가 있는 경우 제품의 우선순위를 정의할 수 있음 ​(ASC ORDER)
        /// </summary>
        [Column()]
        public int PRIORITY { get; set; }

        public PRODUCT_ROUTE ShallowCopy()
        {
			var x = (PRODUCT_ROUTE) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: STD_STEP_ID
    /// </summary>
    [Table(Name="STD_STEP_INFO")]
    public partial class STD_STEP_INFO : EntityObject
    {
        /// <summary>
        /// 표준공정에 대한 ID 입니다.​
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string STD_STEP_ID { get; set; }

        /// <summary>
        /// 표준공정 명
        /// </summary>
        [Column()]
        public string STD_STEP_NAME { get; set; }

        /// <summary>
        /// 표준공정에 대한 TAT 입니다. STEP_TAT 가 설정되지 않은 경우 이 값을 공정의 TAT 로 사용합니다. ​(MIN)
        /// </summary>
        [Column()]
        public double STEP_TAT { get; set; }

        private double _STEP_YIELD = 1D;
        /// <summary>
        /// 표준공정의 수율 입니다. 0~1 의 실수로 설정됩니다. 이상 수치가 입력되는 경우 수율은 1 로 고정됩니다. ​
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "1")]
        public double STEP_YIELD
        {
            get
            {
                return this._STEP_YIELD;
            }
            set
            {
                _STEP_YIELD = value;
            }
        }
        /// <summary>
        /// 표준공정의 Setup Time 입니다. SETUP_OPTION을 USE_STEP_SETUP로 설정했을 경우 이 값을 사용합니다. (MIN)
        /// </summary>
        [Column()]
        public double STEP_SETUP { get; set; }

        /// <summary>
        /// 연계된 STEP_ROUTE 의 STEP 이 BUCKETING 대상 공정인 경우 공정의 CAPACITY 를 설정할 수 있습니다. ​
        /// </summary>
        [Column()]
        public double BUCKET_CAPACITY​ { get; set; }

        /// <summary>
        /// 공정 이동 시간 (MIN), 값이 0일 경우 SeePlan Config의 Default Transfer Time 사용
        /// </summary>
        [Column()]
        public double TRANSFER_TIME { get; set; }

        private string _UNIT = "MIN";
        /// <summary>
        /// 표준공정에서 사용하는 시간단위 {SEC, MIN, HOUR, DAY} 입니다.
        /// </summary>
        [Column()]
        [DefaultValue("MIN")]
        public string UNIT
        {
            get
            {
                return this._UNIT;
            }
            set
            {
                _UNIT = value;
            }
        }
        /// <summary>
        /// 표준 공정 순서
        /// </summary>
        [Column()]
        public double STEP_SEQ { get; set; }

        public STD_STEP_INFO ShallowCopy()
        {
			var x = (STD_STEP_INFO) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PROCESS_ID, STEP_ID, STEP_SEQ
    /// </summary>
    [Table(Name="STEP_ROUTE")]
    public partial class STEP_ROUTE : EntityObject
    {
        /// <summary>
        /// 프로세스 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 공정 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 공정 순서​
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public int STEP_SEQ { get; set; }

        /// <summary>
        /// 표준공정 ID (STD_STEP_ID@STD_STEP_INFO)​
        /// </summary>
        [Column()]
        public string STD_STEP_ID { get; set; }

        /// <summary>
        /// null, IN, OUT (null : 일반 공정, IN : 최초 라인의 투입공정, Out : 제품의 생산 Out 공정)
        /// </summary>
        [Column()]
        public string STEP_TYPE { get; set; }

        private string _PROCESS_TYPE = "PROCESSING";
        /// <summary>
        /// DUMMY,BUCKETING,PROCESSING (DUMMY : 공정을 SKIP 처리, BUCKETING : 공정을 BUCKETING 처리, PROCESSING = null : 기본 처리)
        /// </summary>
        [Column()]
        [DefaultValue("PROCESSING")]
        public string PROCESS_TYPE
        {
            get
            {
                return this._PROCESS_TYPE;
            }
            set
            {
                _PROCESS_TYPE = value;
            }
        }
        /// <summary>
        /// 공정이 IN STOCK 과 연결된 공정인 경우 IN STOCK 의 ID 설정 (STOCK_ID@STOCK_INFO)​
        /// </summary>
        [Column()]
        public string IN_STOCK { get; set; }

        /// <summary>
        /// 공정이 OUT STOCK 과 연결된 공정인 경우 OUT STOCK 의 ID 설정 (STOCK_ID@STOCK_INFO)​
        /// </summary>
        [Column()]
        public string OUT_STOCK { get; set; }

        /// <summary>
        /// LOT을 분할하여 진행(LOT SPLIT / 동시가공)
        /// </summary>
        [Column()]
        public bool IS_SAME_PROC { get; set; }

        public STEP_ROUTE ShallowCopy()
        {
			var x = (STEP_ROUTE) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: DEMAND_VER, DEMAND_ID
    /// </summary>
    [Table(Name="DEMAND")]
    public partial class DEMAND : EntityObject
    {
        /// <summary>
        /// 계획시스템이나 시나리오 PLAN 을 만들기 위해 계획의 VERSION 을 가져가는 경우 사용할 수 있음​
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string DEMAND_VER { get; set; }

        /// <summary>
        /// DEMAND 별 ID ​
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string DEMAND_ID { get; set; }

        /// <summary>
        /// 제품 ID (PRODUCT_ID@PRODUCT)​
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// DEMAND의 LINE ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 고객 ID
        /// </summary>
        [Column()]
        public string CUSTOMER_ID { get; set; }

        /// <summary>
        /// 납기요청일
        /// </summary>
        [Column()]
        public System.DateTime DUE_DATE { get; set; }

        /// <summary>
        /// 생산 요청 수량 (단위: UNIT )​
        /// </summary>
        [Column()]
        public double DEMAND_QTY { get; set; }

        /// <summary>
        /// 납기 우선 순위
        /// </summary>
        [Column()]
        public float PRIORITY { get; set; }

        public DEMAND ShallowCopy()
        {
			var x = (DEMAND) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: LOT_ID
    /// </summary>
    [Table(Name="WIP")]
    public partial class WIP : EntityObject
    {
        /// <summary>
        /// LOT 의 고유 ID​
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string LOT_ID { get; set; }

        /// <summary>
        /// LOT 이 위치한 라인의 ID​
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// PRODUCT ID​
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 제품 생산 공정 Route ID​
        /// </summary>
        [Column()]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 현재 공정
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// LOT 을 구성하고 있는 생산 UNIT 의 수량​
        /// </summary>
        [Column()]
        public double UNIT_QTY { get; set; }

        /// <summary>
        /// 현재 가공중인 경우 장비 ID, 장비에서 가공중인 경우에만 데이터
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 현재 공장에 투입된 시각
        /// </summary>
        [Column()]
        public System.DateTime LINE_IN_TIME { get; set; }

        /// <summary>
        /// 현재 공정에 도착한 시각
        /// </summary>
        [Column()]
        public System.DateTime STEP_IN_TIME { get; set; }

        /// <summary>
        /// HOLD,WAIT,RUN
        /// </summary>
        [Column()]
        public string STATE { get; set; }

        /// <summary>
        /// LOT 이 최종 상태 변경된 시각
        /// </summary>
        [Column()]
        public System.DateTime STATE_CHANGE_TIME { get; set; }

        /// <summary>
        /// LOT의 실적 수량 (입력 시 STATE_TIME = 현재 시간 - 실적 수량 시간)
        /// </summary>
        [Column()]
        public double OUT_QTY { get; set; }

        /// <summary>
        /// DEMAND의 ID (USE_HARD_PEGGING Option true 시 사용)
        /// </summary>
        [Column()]
        public string DEMAND_ID { get; set; }

        /// <summary>
        /// 컬럼이 예약 재공인 경우 예약 정보 유효 시간
        /// </summary>
        [Column()]
        public System.DateTime PREP_EFF_END_TIME { get; set; }

        public WIP ShallowCopy()
        {
			var x = (WIP) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, STEP_ID
    /// </summary>
    [Table(Name="STEP_TAT")]
    public partial class STEP_TAT : EntityObject
    {
        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 공정 ID
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 대기 TAT 입니다. (단위 = MIN)​
        /// </summary>
        [Column()]
        public double WAIT_TAT { get; set; }

        /// <summary>
        /// PROCESSING TAT 입니다. (단위 = MIN), FORWARD BUCKETING 시에 사용됩니다. ​
        /// </summary>
        [Column()]
        public double RUN_TAT { get; set; }

        /// <summary>
        /// WAIT_TAT + RUN_TAT​, 공정의 TOTAL TAT 정보로서 BACKWARD TARGET 생성시에 사용됩니다. ​
        /// </summary>
        [Column()]
        public double TOTAL_TAT { get; set; }

        private string _UNIT = "MIN";
        /// <summary>
        /// TAT의 시간단위 {SEC, MIN, HOUR, DAY}
        /// </summary>
        [Column()]
        [DefaultValue("MIN")]
        public string UNIT
        {
            get
            {
                return this._UNIT;
            }
            set
            {
                _UNIT = value;
            }
        }
        public STEP_TAT ShallowCopy()
        {
			var x = (STEP_TAT) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, STEP_ID
    /// </summary>
    [Table(Name="STEP_YIELD")]
    public partial class STEP_YIELD : EntityObject
    {
        /// <summary>
        /// 제품 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 공정 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        private double _YIELD_VALUE = 1D;
        /// <summary>
        /// 공정 수율입니다. 0~1 의 실수로 설정됩니다.
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "1")]
        public double YIELD_VALUE
        {
            get
            {
                return this._YIELD_VALUE;
            }
            set
            {
                _YIELD_VALUE = value;
            }
        }
        public STEP_YIELD ShallowCopy()
        {
			var x = (STEP_YIELD) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, PROCESS_ID, STEP_ID, EQP_ID
    /// </summary>
    [Table(Name="EQP_ARRANGE")]
    public partial class EQP_ARRANGE : EntityObject
    {
        /// <summary>
        /// 제품 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 생산 ROUTE ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string PROCESS_ID { get; set; }

        /// <summary>
        /// 공정 ID 입니다. 
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 장비 ID 입니다. (EQP_ID@EQUIPMENT)
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=3)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// UNIT 당 생산 간격입니다. 단위=SEC 
        /// </summary>
        [Column()]
        public float TACT_TIME { get; set; }

        /// <summary>
        /// UNIT 당 생산 시간입니다. TABLE, LOTBATCH 타입의 장비에서는 TACT_TIME 과 PROC_TIME 이 동일합니다. 
        /// </summary>
        [Column()]
        public float PROC_TIME { get; set; }

        /// <summary>
        /// 대상 정보의 유효 시작시각
        /// </summary>
        [Column()]
        public string EFF_START_DATE { get; set; }

        /// <summary>
        /// 대상 정보의 유효 완료시각
        /// </summary>
        [Column()]
        public string EFF_END_DATE { get; set; }

        /// <summary>
        /// 생산능력
        /// </summary>
        [Column()]
        public double UTILIZATION { get; set; }

        /// <summary>
        /// 적용효율
        /// </summary>
        [Column()]
        public double EFFICIENCY { get; set; }

        public EQP_ARRANGE ShallowCopy()
        {
			var x = (EQP_ARRANGE) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRESET_ID, FACTOR_ID
    /// </summary>
    [Table(Name="PRESET_INFO")]
    public partial class PRESET_INFO : EntityObject
    {
        /// <summary>
        /// PRESET ID​
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRESET_ID { get; set; }

        /// <summary>
        /// 우선순위 요소 ID  Project 의 Weights 에 Factor 가 구현되어 있는 경우만 Valid 하게 동작함​
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string FACTOR_ID { get; set; }

        /// <summary>
        /// 우선순위 설정 범위
        /// </summary>
        [Column()]
        public string FACTOR_DETAIL { get; set; }

        /// <summary>
        /// LOTTYPE,STEPTYPE (LOTTYPE:모든 Lot 별로 factor 값 계산, STEPTYPE:동일제품의 동일 공정(Step)의 경우 Dispatching 시 최초 1회만 값 계산)
        /// </summary>
        [Column()]
        public string FACTOR_TYPE { get; set; }

        /// <summary>
        /// FACTOR 의 가중합을 계산할 때 사용될 가중치​, 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE = 'WeightSum' 인 경우에 동작
        /// </summary>
        [Column()]
        public float FACTOR_WEIGHT { get; set; }

        /// <summary>
        /// ASC,DESC (점수 정렬 방식, WeightSorted 에만 적용)
        /// </summary>
        [Column()]
        public string ORDER_TYPE { get; set; }

        /// <summary>
        /// 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE= 'WeightSorted'인 경우에 동작​, PRESET 내의 FACTOR 중 대상 FACTOR 의 소팅 우선순위, 오름차순으로 소팅 됨​
        /// </summary>
        [Column()]
        public int SEQUENCE { get; set; }

        /// <summary>
        /// 장비의 PRESE_ID 가 설정되어 있고, DISPATCHER_TYPE= 'WeightSorted'인 경우에 동작, ​FACTOR 계산에 사용되는 PARAMETER 값
        /// </summary>
        [Column()]
        public string CRITERIA { get; set; }

        /// <summary>
        /// 설명
        /// </summary>
        [Column()]
        public string DESCRIPTION { get; set; }

        public PRESET_INFO ShallowCopy()
        {
			var x = (PRESET_INFO) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Key: OPTION_ID
    /// </summary>
    [Table(Name="EXECUTION_OPTION_CONFIG")]
    public partial class EXECUTION_OPTION_CONFIG : EntityObject
    {
        /// <summary>
        /// 옵션의 ID 입니다. 옵션에 대한 참조는 SmartAPS 실행 옵션을 참조합니다. 
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string OPTION_ID { get; set; }

        /// <summary>
        /// 옵션 ID 의 설정 값입니다. 설정 값은 모두 문자열로 설정합니다. 
        /// </summary>
        [Column()]
        public object OPTION_VALUE { get; set; }

        public EXECUTION_OPTION_CONFIG ShallowCopy()
        {
			var x = (EXECUTION_OPTION_CONFIG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="PM_PLAN")]
    public partial class PM_PLAN : EntityObject
    {
        /// <summary>
        /// 장비 Down 상태 코드 (EQUIPMENT Table의 EQP_STATE_CODE와 연결)
        /// </summary>
        [Column()]
        public string EQP_STATE_CODE { get; set; }

        /// <summary>
        /// 공장의 고유 ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비 고유 ID​
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        /// <summary>
        /// PM 시작 시간
        /// </summary>
        [Column()]
        public System.DateTime START_TIME { get; set; }

        /// <summary>
        /// PM 기간 (SEC)
        /// </summary>
        [Column()]
        public double PERIOD { get; set; }

        public PM_PLAN ShallowCopy()
        {
			var x = (PM_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="FACTORY_BREAK")]
    public partial class FACTORY_BREAK : EntityObject
    {
        /// <summary>
        /// 공장의 고유 ID
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// Break 시작 시간
        /// </summary>
        [Column()]
        public System.DateTime START_TIME { get; set; }

        /// <summary>
        /// Break 기간 (SEC)
        /// </summary>
        [Column()]
        public double PERIOD { get; set; }

        private string _PERIOD_UNIT = "SEC";
        /// <summary>
        /// Break 기간의 단위 UNIT {SEC, MIN, HOUR, DAY}
        /// </summary>
        [Column()]
        [DefaultValue("SEC")]
        public string PERIOD_UNIT
        {
            get
            {
                return this._PERIOD_UNIT;
            }
            set
            {
                _PERIOD_UNIT = value;
            }
        }
        private string _REPEAT_CYCLE = "NONE";
        /// <summary>
        /// 반복 주기 {NONE/DAY/WEEK/MONTH/YEAR}
        /// </summary>
        [Column()]
        [DefaultValue("NONE")]
        public string REPEAT_CYCLE
        {
            get
            {
                return this._REPEAT_CYCLE;
            }
            set
            {
                _REPEAT_CYCLE = value;
            }
        }
        /// <summary>
        /// 장비 Down 상태 코드 (EQUIPMENT Table의 EQP_STATE_CODE와 연결)
        /// </summary>
        [Column()]
        public string STATE_CODE { get; set; }

        private bool _IS_APPLY = true;
        /// <summary>
        /// FACTORY_BREKA 적용여부
        /// </summary>
        [Column()]
        [DefaultValue(typeof(bool), "True")]
        public bool IS_APPLY
        {
            get
            {
                return this._IS_APPLY;
            }
            set
            {
                _IS_APPLY = value;
            }
        }
        public FACTORY_BREAK ShallowCopy()
        {
			var x = (FACTORY_BREAK) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: EQP_ID, ITEM
    /// </summary>
    [Table(Name="SETUP_INFO")]
    public partial class SETUP_INFO : EntityObject
    {
        /// <summary>
        /// 설비 ID
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 변경 항목 {PRODUCT_ID, STEP_ID, PROPERTY}
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string ITEM { get; set; }

        /// <summary>
        /// 변경 항목 중 속성값 
        /// </summary>
        [Column()]
        public string ITEM_DETAIL { get; set; }

        /// <summary>
        /// SETUP 소요 시간
        /// </summary>
        [Column()]
        public double SETUP_TIME { get; set; }

        /// <summary>
        /// 시간 단위 {HOUR/MINUTE/SECOND}, Default :SECOND
        /// </summary>
        [Column()]
        public string TIME_UNIT { get; set; }

        /// <summary>
        /// 우선 순위
        /// </summary>
        [Column()]
        public int PRIORITY { get; set; }

        public SETUP_INFO ShallowCopy()
        {
			var x = (SETUP_INFO) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="FIRM_PLAN")]
    public partial class FIRM_PLAN : EntityObject
    {
        /// <summary>
        /// LOT 의 고유 ID​
        /// </summary>
        [Column()]
        public string LOT_ID { get; set; }

        /// <summary>
        /// 확정된 공정
        /// </summary>
        [Column()]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 확정된 장비
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        /// <summary>
        /// 확정된 생산 시작 시간
        /// </summary>
        [Column()]
        public System.DateTime START_TIME { get; set; }

        /// <summary>
        /// 확정된 생산 종료 시간
        /// </summary>
        [Column()]
        public System.DateTime END_TIME { get; set; }

        private string _FIRM_TYPE = "NORMAL";
        /// <summary>
        /// {DELAY/NORMAL/SPLIT} DELAY : 확정계획이 있으면 재공 투입을 진행하고 지연된 시간만큼 지연 후 확정계획 진행 / NORMAL : 확정계획이 있으면 로딩을 막고, 확정계획을 정시에 진행 / SPLIT : 확정계획이 있어도 로딩을 하고 로딩된 계획을 확정 계획에 맞춰 SPLIT 하여 진행
        /// </summary>
        [Column()]
        [DefaultValue("NORMAL")]
        public string FIRM_TYPE
        {
            get
            {
                return this._FIRM_TYPE;
            }
            set
            {
                _FIRM_TYPE = value;
            }
        }
        public FIRM_PLAN ShallowCopy()
        {
			var x = (FIRM_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="REPLENISH_PLAN")]
    public partial class REPLENISH_PLAN : EntityObject
    {
        /// <summary>
        /// 자재 ID 입니다.
        /// </summary>
        [Column()]
        public string MAT_ID { get; set; }

        /// <summary>
        /// 자재 종류 입니다.
        /// </summary>
        [Column()]
        public string MAT_TYPE { get; set; }

        private double _MAT_QTY = 0D;
        /// <summary>
        /// 자재 충전 수량 입니다.
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "0")]
        public double MAT_QTY
        {
            get
            {
                return this._MAT_QTY;
            }
            set
            {
                _MAT_QTY = value;
            }
        }
        /// <summary>
        /// 자재 충전 일자 입니다.
        /// </summary>
        [Column()]
        public System.DateTime REPLENISH_DATE { get; set; }

        /// <summary>
        /// 공급업체
        /// </summary>
        [Column()]
        public string SUPPLIER { get; set; }

        /// <summary>
        /// PlanWip인지 FixWip인지 구분
        /// </summary>
        [Column()]
        public string MAT_DIV { get; set; }

        [Column()]
        public string UNIT { get; set; }

        public REPLENISH_PLAN ShallowCopy()
        {
			var x = (REPLENISH_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: MAT_ID, MAT_TYPE
    /// </summary>
    [Table(Name="MATERIAL")]
    public partial class MATERIAL : EntityObject
    {
        /// <summary>
        /// 자재 ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string MAT_ID { get; set; }

        /// <summary>
        /// 자재 종류 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string MAT_TYPE { get; set; }

        private double _MAT_QTY = 0D;
        /// <summary>
        /// 자재 수량 입니다.
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "0")]
        public double MAT_QTY
        {
            get
            {
                return this._MAT_QTY;
            }
            set
            {
                _MAT_QTY = value;
            }
        }
        private string _IS_INFINITY = "N";
        /// <summary>
        /// 자재의 수량 제약이 없는지 여부입니다. (Y/N)
        /// </summary>
        [Column()]
        [DefaultValue("N")]
        public string IS_INFINITY
        {
            get
            {
                return this._IS_INFINITY;
            }
            set
            {
                _IS_INFINITY = value;
            }
        }
        public MATERIAL ShallowCopy()
        {
			var x = (MATERIAL) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, STEP_ID, MAT_TYPE
    /// </summary>
    [Table(Name="MATERIAL_BOM")]
    public partial class MATERIAL_BOM : EntityObject
    {
        /// <summary>
        /// 자재가 필요한 제품의 ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 자재가 필요한 공정의 ID 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        /// <summary>
        /// 자재 종류 입니다.
        /// </summary>
        [Column(IsPrimaryKey=true, PrimaryKeyOrder=2)]
        public string MAT_TYPE { get; set; }

        /// <summary>
        /// UNIT당 필요한 자재 수량입니다.
        /// </summary>
        [Column()]
        public double COMP_QTY { get; set; }

        [Column()]
        public string UNIT { get; set; }

        public MATERIAL_BOM ShallowCopy()
        {
			var x = (MATERIAL_BOM) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="OUT_ACT")]
    public partial class OUT_ACT : EntityObject
    {
        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 입고 수량
        /// </summary>
        [Column()]
        public double ACT_QTY { get; set; }

        /// <summary>
        /// 입고 일자
        /// </summary>
        [Column()]
        public System.DateTime OUT_DATE { get; set; }

        public OUT_ACT ShallowCopy()
        {
			var x = (OUT_ACT) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="IN_PLAN")]
    public partial class IN_PLAN : EntityObject
    {
        /// <summary>
        /// DEMAND_ID(있을 경우 입력)
        /// </summary>
        [Column()]
        public string DEMAND_ID { get; set; }

        /// <summary>
        /// 제품 ID
        /// </summary>
        [Column()]
        public string PRODUCT_ID { get; set; }

        /// <summary>
        /// 투입이 되어야 하는 일자
        /// </summary>
        [Column()]
        public System.DateTime PLAN_DATE { get; set; }

        /// <summary>
        /// 투입 수량
        /// </summary>
        [Column()]
        public int PLAN_QTY { get; set; }

        public IN_PLAN ShallowCopy()
        {
			var x = (IN_PLAN) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: PRODUCT_ID, STEP_ID
    /// </summary>
    [Table(Name="SPLIT_INFO")]
    public partial class SPLIT_INFO : EntityObject
    {
        [Column(IsPrimaryKey=true)]
        public string PRODUCT_ID { get; set; }

        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string STEP_ID { get; set; }

        [Column()]
        public string CRITERIA { get; set; }

        [Column()]
        public int VALUE { get; set; }

        [Column()]
        public string MERGE_STEP_ID { get; set; }

        public SPLIT_INFO ShallowCopy()
        {
			var x = (SPLIT_INFO) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="PLAN_REPORT_TARGET")]
    public partial class PLAN_REPORT_TARGET : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column()]
        public string ITEM_KEY { get; set; }

        [Column()]
        public string ITEM_NAME { get; set; }

        [Column()]
        public string CATEGORY { get; set; }

        [Column()]
        public string WEIGHT { get; set; }

        [Column()]
        public string DESCRIPTION { get; set; }

        [Column()]
        public string TARGET { get; set; }

        [Column()]
        public string UPDATE_TIME { get; set; }

        public PLAN_REPORT_TARGET ShallowCopy()
        {
			var x = (PLAN_REPORT_TARGET) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    /// <summary>
    /// 
    /// Keys: CODE_GROUP, CODE_NAME
    /// </summary>
    [Table(Name="CONFIG")]
    public partial class CONFIG : EntityObject
    {
        [Column()]
        public string VERSION_NO { get; set; }

        [Column(IsPrimaryKey=true)]
        public string CODE_GROUP { get; set; }

        [Column(IsPrimaryKey=true, PrimaryKeyOrder=1)]
        public string CODE_NAME { get; set; }

        [Column()]
        public string CODE_VALUE { get; set; }

        [Column()]
        public string DESCRIPTION { get; set; }

        [Column()]
        public string UPDATA_TIME { get; set; }

        public CONFIG ShallowCopy()
        {
			var x = (CONFIG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="TOOL")]
    public partial class TOOL : EntityObject
    {
        [Column()]
        public string LINE_ID { get; set; }

        [Column()]
        public string TOOL_ID { get; set; }

        [Column()]
        public string STEP_ID { get; set; }

        [Column()]
        public string EQP_ID { get; set; }

        public TOOL ShallowCopy()
        {
			var x = (TOOL) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="TOOL_ARRANGE")]
    public partial class TOOL_ARRANGE : EntityObject
    {
        [Column()]
        public string LINE_ID { get; set; }

        [Column()]
        public string TOOL_ID { get; set; }

        [Column()]
        public string STEP_ID { get; set; }

        [Column()]
        public string PRODUCT_ID { get; set; }

        public TOOL_ARRANGE ShallowCopy()
        {
			var x = (TOOL_ARRANGE) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="PEG_CONDITION")]
    public partial class PEG_CONDITION : EntityObject
    {
        [Column()]
        public string STEP_ID { get; set; }

        [Column()]
        public string ITEM { get; set; }

        [Column()]
        public string ITEM_DETAIL { get; set; }

        public PEG_CONDITION ShallowCopy()
        {
			var x = (PEG_CONDITION) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="VALIDATION_BOP")]
    public partial class VALIDATION_BOP : EntityObject
    {
        [Column()]
        public string PROCESS___PROCESS_ID { get; set; }

        [Column()]
        public string PRODUCT___PRODUCT_ID__PROCESS_ID { get; set; }

        [Column()]
        public string EQP_ARRANGE___PRODUCT_ID__PROCESS_ID { get; set; }

        [Column()]
        public string EQP_ARRANGE___PROCESS_ID__STEP_ID { get; set; }

        [Column()]
        public string STEP_ROUTE___PROCESS_ID__STEP_ID { get; set; }

        [Column()]
        public string STD_STEP_INFO___STD_STEP_ID { get; set; }

        [Column()]
        public string EQP_ARRANGE___EQP_ID { get; set; }

        [Column()]
        public string EQUIPMENT___EQP_ID { get; set; }

        [Column()]
        public string DEMAND___PRODUCT_ID { get; set; }

        public VALIDATION_BOP ShallowCopy()
        {
			var x = (VALIDATION_BOP) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="EQP_UTILIZATION")]
    public partial class EQP_UTILIZATION : EntityObject
    {
        /// <summary>
        /// 라인명
        /// </summary>
        [Column()]
        public string LINE_ID { get; set; }

        /// <summary>
        /// 장비명
        /// </summary>
        [Column()]
        public string EQP_ID { get; set; }

        private double _UTILIZATION = 100D;
        /// <summary>
        /// 생산능력
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "100")]
        public double UTILIZATION
        {
            get
            {
                return this._UTILIZATION;
            }
            set
            {
                _UTILIZATION = value;
            }
        }
        private double _EFFICIENCY = 100D;
        /// <summary>
        /// 적용효율
        /// </summary>
        [Column()]
        [DefaultValue(typeof(double), "100")]
        public double EFFICIENCY
        {
            get
            {
                return this._EFFICIENCY;
            }
            set
            {
                _EFFICIENCY = value;
            }
        }
        [Column()]
        public System.DateTime START_TIME { get; set; }

        [Column()]
        public System.DateTime END_TIME { get; set; }

        public EQP_UTILIZATION ShallowCopy()
        {
			var x = (EQP_UTILIZATION) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="SHIFT_TIME_CONFIG")]
    public partial class SHIFT_TIME_CONFIG : EntityObject
    {
        /// <summary>
        /// 생산 근무 시작시간
        /// </summary>
        [Column()]
        public string SHIFT_START_TIME { get; set; }

        /// <summary>
        /// 분할 근무 시작시간
        /// </summary>
        [Column()]
        public string SPLIT_START_TIME { get; set; }

        /// <summary>
        /// 생산 근무 종료시간
        /// </summary>
        [Column()]
        public string SHIFT_END_TIME { get; set; }

        /// <summary>
        /// 분할 근무 종료시간
        /// </summary>
        [Column()]
        public string SPLIT_END_TIME { get; set; }

        /// <summary>
        /// 비고
        /// </summary>
        [Column()]
        public string SHIFT_NAME { get; set; }

        public SHIFT_TIME_CONFIG ShallowCopy()
        {
			var x = (SHIFT_TIME_CONFIG) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [Table(Name="MAT_SUPPLIER")]
    public partial class MAT_SUPPLIER : EntityObject
    {
        [Column()]
        public string SUPPLIER { get; set; }

        [Column()]
        public string MAT_ID { get; set; }

        [Column()]
        public string CAPA { get; set; }

        [Column()]
        public int PRIORITY { get; set; }

        public MAT_SUPPLIER ShallowCopy()
        {
			var x = (MAT_SUPPLIER) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
}
