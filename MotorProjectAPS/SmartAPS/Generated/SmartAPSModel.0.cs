/*------------------------------------------------------------------------------------------------------------------------------------------------------------
 <auto-generated>
     This code was generated by a mozart.

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using System.ComponentModel;
using Mozart.Task.Execution.Persists;
using SmartAPS.Inputs;
using Mozart.DataActions;
using SmartAPS.Outputs;

namespace SmartAPS
{
    
    /// <summary>
    /// Mozart task execution parameters class
    /// </summary>
    public partial class GlobalParameters : Parameters
    {
        private string _company = "MOTORFACT";
        public virtual string company
        {
            get
            {
                return this._company;
            }
            set
            {
                _company = value;
            }
        }
        private bool _data_collection_by_fst = false;
        /// <summary>
        /// FST(SeePlanConfig의 FACTORY_START_TIME) 사용 여부
        /// </summary>
        [System.ComponentModel.DisplayNameAttribute("data-collection-by-fst")]
        public virtual bool data_collection_by_fst
        {
            get
            {
                return this._data_collection_by_fst;
            }
            set
            {
                _data_collection_by_fst = value;
            }
        }
        private bool _is_anomaly = false;
        [System.ComponentModel.DisplayNameAttribute("is-anomaly")]
        public virtual bool is_anomaly
        {
            get
            {
                return this._is_anomaly;
            }
            set
            {
                _is_anomaly = value;
            }
        }
        private int _period = 365;
        public virtual int period
        {
            get
            {
                return this._period;
            }
            set
            {
                _period = value;
            }
        }
        private string _site = "MT";
        public virtual string site
        {
            get
            {
                return this._site;
            }
            set
            {
                _site = value;
            }
        }
        private System.DateTime _start_time = ((System.DateTime)(System.Convert.ChangeType("03/13/2023 00:00:00", typeof(System.DateTime), System.Globalization.CultureInfo.InvariantCulture)));
        [System.ComponentModel.DisplayNameAttribute("start-time")]
        public virtual System.DateTime start_time
        {
            get
            {
                return this._start_time;
            }
            set
            {
                _start_time = value;
            }
        }
        private string _system = "APS";
        public virtual string system
        {
            get
            {
                return this._system;
            }
            set
            {
                _system = value;
            }
        }
        private bool _use_shift = false;
        [System.ComponentModel.DisplayNameAttribute("use-shift")]
        public virtual bool use_shift
        {
            get
            {
                return this._use_shift;
            }
            set
            {
                _use_shift = value;
            }
        }
        public static GlobalParameters Instance { get { return InputMart.Instance.GlobalParameters; }}
    }
    /// <summary>
    /// Mozart task execution parameters class
    /// </summary>
    public partial class ConfigParameters : Parameters
    {
    }
    /// <summary>
    /// Input data context class
    /// </summary>
    public partial class InputMart : InputRepository
    {
        public static InputMart Instance { get { return (InputMart)ServiceLocator.Resolve<InputRepository> (); }}
        public EntityTable<EQUIPMENT> EQUIPMENT
        {
            get
            {
                return this.GetTable<EQUIPMENT>();
            }
        }
        public EntityTable<LINE_INFO> LINE_INFO
        {
            get
            {
                return this.GetTable<LINE_INFO>();
            }
        }
        public EntityTable<PRODUCT> PRODUCT
        {
            get
            {
                return this.GetTable<PRODUCT>();
            }
        }
        private EntityView<PRODUCT> _PRODUCTView;
        /// <summary>
        /// Key: PRODUCT_ID
        /// </summary>
        public EntityView<PRODUCT> PRODUCTView
        {
            get
            {
                if ((this._PRODUCTView == null))
                {
                    this._PRODUCTView = this.CreateView<PRODUCT>(this.PRODUCT, null, "PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PRODUCTView;
            }
        }
        public EntityTable<PROCESS> PROCESS
        {
            get
            {
                return this.GetTable<PROCESS>();
            }
        }
        public EntityTable<PRODUCT_ROUTE> PRODUCT_ROUTE
        {
            get
            {
                return this.GetTable<PRODUCT_ROUTE>();
            }
        }
        private EntityView<PRODUCT_ROUTE> _PRODUCT_ROUTEViewFromProductID;
        /// <summary>
        /// Key: FROM_PRODUCT_ID
        /// </summary>
        public EntityView<PRODUCT_ROUTE> PRODUCT_ROUTEViewFromProductID
        {
            get
            {
                if ((this._PRODUCT_ROUTEViewFromProductID == null))
                {
                    this._PRODUCT_ROUTEViewFromProductID = this.CreateView<PRODUCT_ROUTE>(this.PRODUCT_ROUTE, null, "FROM_PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PRODUCT_ROUTEViewFromProductID;
            }
        }
        private EntityView<PRODUCT_ROUTE> _PRODUCT_ROUTEViewToProductID;
        /// <summary>
        /// Key: TO_PRODUCT_ID
        /// </summary>
        public EntityView<PRODUCT_ROUTE> PRODUCT_ROUTEViewToProductID
        {
            get
            {
                if ((this._PRODUCT_ROUTEViewToProductID == null))
                {
                    this._PRODUCT_ROUTEViewToProductID = this.CreateView<PRODUCT_ROUTE>(this.PRODUCT_ROUTE, null, "TO_PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PRODUCT_ROUTEViewToProductID;
            }
        }
        public EntityTable<STD_STEP_INFO> STD_STEP_INFO
        {
            get
            {
                return this.GetTable<STD_STEP_INFO>();
            }
        }
        public EntityTable<STEP_ROUTE> STEP_ROUTE
        {
            get
            {
                return this.GetTable<STEP_ROUTE>();
            }
        }
        private EntityView<STEP_ROUTE> _STEP_ROUTEView;
        /// <summary>
        /// Key: PROCESS_ID
        /// </summary>
        public EntityView<STEP_ROUTE> STEP_ROUTEView
        {
            get
            {
                if ((this._STEP_ROUTEView == null))
                {
                    this._STEP_ROUTEView = this.CreateView<STEP_ROUTE>(this.STEP_ROUTE, null, "PROCESS_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._STEP_ROUTEView;
            }
        }
        public EntityTable<DEMAND> DEMAND
        {
            get
            {
                return this.GetTable<DEMAND>();
            }
        }
        private EntityView<DEMAND> _DEMANDView;
        /// <summary>
        /// Key: PRODUCT_ID
        /// </summary>
        public EntityView<DEMAND> DEMANDView
        {
            get
            {
                if ((this._DEMANDView == null))
                {
                    this._DEMANDView = this.CreateView<DEMAND>(this.DEMAND, null, "PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._DEMANDView;
            }
        }
        private EntityView<DEMAND> _DEMANDViewById;
        /// <summary>
        /// Keys: DEMAND_ID, PRODUCT_ID
        /// </summary>
        public EntityView<DEMAND> DEMANDViewById
        {
            get
            {
                if ((this._DEMANDViewById == null))
                {
                    this._DEMANDViewById = this.CreateView<DEMAND>(this.DEMAND, null, "DEMAND_ID,PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._DEMANDViewById;
            }
        }
        private EntityView<DEMAND> _DEMANDIDView;
        /// <summary>
        /// Key: DEMAND_ID
        /// </summary>
        public EntityView<DEMAND> DEMANDIDView
        {
            get
            {
                if ((this._DEMANDIDView == null))
                {
                    this._DEMANDIDView = this.CreateView<DEMAND>(this.DEMAND, null, "DEMAND_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._DEMANDIDView;
            }
        }
        public EntityTable<WIP> WIP
        {
            get
            {
                return this.GetTable<WIP>();
            }
        }
        public EntityTable<STEP_TAT> STEP_TAT
        {
            get
            {
                return this.GetTable<STEP_TAT>();
            }
        }
        private EntityView<STEP_TAT> _STEP_TATView;
        /// <summary>
        /// Keys: PRODUCT_ID, STEP_ID
        /// </summary>
        public EntityView<STEP_TAT> STEP_TATView
        {
            get
            {
                if ((this._STEP_TATView == null))
                {
                    this._STEP_TATView = this.CreateView<STEP_TAT>(this.STEP_TAT, null, "PRODUCT_ID,STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._STEP_TATView;
            }
        }
        public EntityTable<STEP_YIELD> STEP_YIELD
        {
            get
            {
                return this.GetTable<STEP_YIELD>();
            }
        }
        private EntityView<STEP_YIELD> _STEP_YIELDView;
        /// <summary>
        /// Keys: PRODUCT_ID, STEP_ID
        /// </summary>
        public EntityView<STEP_YIELD> STEP_YIELDView
        {
            get
            {
                if ((this._STEP_YIELDView == null))
                {
                    this._STEP_YIELDView = this.CreateView<STEP_YIELD>(this.STEP_YIELD, null, "PRODUCT_ID,STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._STEP_YIELDView;
            }
        }
        public EntityTable<EQP_ARRANGE> EQP_ARRANGE
        {
            get
            {
                return this.GetTable<EQP_ARRANGE>();
            }
        }
        private EntityView<EQP_ARRANGE> _EQP_ARRANGEStepView;
        /// <summary>
        /// Keys: PRODUCT_ID, PROCESS_ID, STEP_ID
        /// </summary>
        public EntityView<EQP_ARRANGE> EQP_ARRANGEStepView
        {
            get
            {
                if ((this._EQP_ARRANGEStepView == null))
                {
                    this._EQP_ARRANGEStepView = this.CreateView<EQP_ARRANGE>(this.EQP_ARRANGE, null, "PRODUCT_ID,PROCESS_ID,STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_ARRANGEStepView;
            }
        }
        private EntityView<EQP_ARRANGE> _EQP_ARRANGEEqpView;
        /// <summary>
        /// Key: EQP_ID
        /// </summary>
        public EntityView<EQP_ARRANGE> EQP_ARRANGEEqpView
        {
            get
            {
                if ((this._EQP_ARRANGEEqpView == null))
                {
                    this._EQP_ARRANGEEqpView = this.CreateView<EQP_ARRANGE>(this.EQP_ARRANGE, null, "EQP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_ARRANGEEqpView;
            }
        }
        private EntityView<EQP_ARRANGE> _EQP_ARRANGETimeView;
        /// <summary>
        /// Keys: PRODUCT_ID, PROCESS_ID, STEP_ID, EQP_ID
        /// </summary>
        public EntityView<EQP_ARRANGE> EQP_ARRANGETimeView
        {
            get
            {
                if ((this._EQP_ARRANGETimeView == null))
                {
                    this._EQP_ARRANGETimeView = this.CreateView<EQP_ARRANGE>(this.EQP_ARRANGE, null, "PRODUCT_ID,PROCESS_ID,STEP_ID,EQP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_ARRANGETimeView;
            }
        }
        private EntityView<EQP_ARRANGE> _EQP_ARRANGELineView;
        /// <summary>
        /// Keys: PRODUCT_ID, PROCESS_ID, STEP_ID, LINE_ID
        /// </summary>
        public EntityView<EQP_ARRANGE> EQP_ARRANGELineView
        {
            get
            {
                if ((this._EQP_ARRANGELineView == null))
                {
                    this._EQP_ARRANGELineView = this.CreateView<EQP_ARRANGE>(this.EQP_ARRANGE, null, "PRODUCT_ID,PROCESS_ID,STEP_ID,LINE_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_ARRANGELineView;
            }
        }
        private EntityView<EQP_ARRANGE> _EQP_ARRANGEProdStep;
        /// <summary>
        /// Keys: PRODUCT_ID, STEP_ID
        /// </summary>
        public EntityView<EQP_ARRANGE> EQP_ARRANGEProdStep
        {
            get
            {
                if ((this._EQP_ARRANGEProdStep == null))
                {
                    this._EQP_ARRANGEProdStep = this.CreateView<EQP_ARRANGE>(this.EQP_ARRANGE, null, "PRODUCT_ID,STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_ARRANGEProdStep;
            }
        }
        public EntityTable<PRESET_INFO> PRESET_INFO
        {
            get
            {
                return this.GetTable<PRESET_INFO>();
            }
        }
        private EntityView<PRESET_INFO> _PRESET_INFOFactorView;
        /// <summary>
        /// Key: FACTOR_ID
        /// </summary>
        public EntityView<PRESET_INFO> PRESET_INFOFactorView
        {
            get
            {
                if ((this._PRESET_INFOFactorView == null))
                {
                    this._PRESET_INFOFactorView = this.CreateView<PRESET_INFO>(this.PRESET_INFO, null, "FACTOR_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PRESET_INFOFactorView;
            }
        }
        public EntityTable<EXECUTION_OPTION_CONFIG> EXECUTION_OPTION_CONFIG
        {
            get
            {
                return this.GetTable<EXECUTION_OPTION_CONFIG>();
            }
        }
        private EntityView<EXECUTION_OPTION_CONFIG> _EXECUTION_OPTION_CONFIGView;
        /// <summary>
        /// Key: OPTION_ID
        /// </summary>
        public EntityView<EXECUTION_OPTION_CONFIG> EXECUTION_OPTION_CONFIGView
        {
            get
            {
                if ((this._EXECUTION_OPTION_CONFIGView == null))
                {
                    this._EXECUTION_OPTION_CONFIGView = this.CreateView<EXECUTION_OPTION_CONFIG>(this.EXECUTION_OPTION_CONFIG, null, "OPTION_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EXECUTION_OPTION_CONFIGView;
            }
        }
        public EntityTable<PM_PLAN> PM_PLAN
        {
            get
            {
                return this.GetTable<PM_PLAN>();
            }
        }
        private EntityView<PM_PLAN> _PM_PLANView;
        /// <summary>
        /// Key: EQP_STATE_CODE
        /// </summary>
        public EntityView<PM_PLAN> PM_PLANView
        {
            get
            {
                if ((this._PM_PLANView == null))
                {
                    this._PM_PLANView = this.CreateView<PM_PLAN>(this.PM_PLAN, null, "EQP_STATE_CODE", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PM_PLANView;
            }
        }
        public EntityTable<FACTORY_BREAK> FACTORY_BREAK
        {
            get
            {
                return this.GetTable<FACTORY_BREAK>();
            }
        }
        private EntityView<FACTORY_BREAK> _FACTORY_BREAKView;
        /// <summary>
        /// Key: STATE_CODE
        /// </summary>
        public EntityView<FACTORY_BREAK> FACTORY_BREAKView
        {
            get
            {
                if ((this._FACTORY_BREAKView == null))
                {
                    this._FACTORY_BREAKView = this.CreateView<FACTORY_BREAK>(this.FACTORY_BREAK, null, "STATE_CODE", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._FACTORY_BREAKView;
            }
        }
        public EntityTable<SETUP_INFO> SETUP_INFO
        {
            get
            {
                return this.GetTable<SETUP_INFO>();
            }
        }
        private EntityView<SETUP_INFO> _SETUP_INFOView;
        /// <summary>
        /// Key: EQP_ID
        /// </summary>
        public EntityView<SETUP_INFO> SETUP_INFOView
        {
            get
            {
                if ((this._SETUP_INFOView == null))
                {
                    this._SETUP_INFOView = this.CreateView<SETUP_INFO>(this.SETUP_INFO, null, "EQP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SETUP_INFOView;
            }
        }
        private EntityView<SETUP_INFO> _SETUP_INFOTimeView;
        /// <summary>
        /// Keys: EQP_ID, ITEM
        /// </summary>
        public EntityView<SETUP_INFO> SETUP_INFOTimeView
        {
            get
            {
                if ((this._SETUP_INFOTimeView == null))
                {
                    this._SETUP_INFOTimeView = this.CreateView<SETUP_INFO>(this.SETUP_INFO, null, "EQP_ID,ITEM", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SETUP_INFOTimeView;
            }
        }
        public EntityTable<FIRM_PLAN> FIRM_PLAN
        {
            get
            {
                return this.GetTable<FIRM_PLAN>();
            }
        }
        public EntityTable<REPLENISH_PLAN> REPLENISH_PLAN
        {
            get
            {
                return this.GetTable<REPLENISH_PLAN>();
            }
        }
        private EntityView<REPLENISH_PLAN> _REPLENISH_PLANView;
        /// <summary>
        /// Keys: MAT_ID, REPLENISH_DATE
        /// </summary>
        public EntityView<REPLENISH_PLAN> REPLENISH_PLANView
        {
            get
            {
                if ((this._REPLENISH_PLANView == null))
                {
                    this._REPLENISH_PLANView = this.CreateView<REPLENISH_PLAN>(this.REPLENISH_PLAN, null, "MAT_ID,REPLENISH_DATE", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._REPLENISH_PLANView;
            }
        }
        public EntityTable<MATERIAL> MATERIAL
        {
            get
            {
                return this.GetTable<MATERIAL>();
            }
        }
        public EntityTable<MATERIAL_BOM> MATERIAL_BOM
        {
            get
            {
                return this.GetTable<MATERIAL_BOM>();
            }
        }
        public EntityTable<OUT_ACT> OUT_ACT
        {
            get
            {
                return this.GetTable<OUT_ACT>();
            }
        }
        public EntityTable<IN_PLAN> IN_PLAN
        {
            get
            {
                return this.GetTable<IN_PLAN>();
            }
        }
        public EntityTable<SPLIT_INFO> SPLIT_INFO
        {
            get
            {
                return this.GetTable<SPLIT_INFO>();
            }
        }
        private EntityView<SPLIT_INFO> _SPLIT_INFOView;
        /// <summary>
        /// Keys: PRODUCT_ID, STEP_ID
        /// </summary>
        public EntityView<SPLIT_INFO> SPLIT_INFOView
        {
            get
            {
                if ((this._SPLIT_INFOView == null))
                {
                    this._SPLIT_INFOView = this.CreateView<SPLIT_INFO>(this.SPLIT_INFO, null, "PRODUCT_ID,STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._SPLIT_INFOView;
            }
        }
        public EntityTable<PLAN_REPORT_TARGET> PLAN_REPORT_TARGET
        {
            get
            {
                return this.GetTable<PLAN_REPORT_TARGET>();
            }
        }
        public EntityTable<CONFIG> CONFIG
        {
            get
            {
                return this.GetTable<CONFIG>();
            }
        }
        public EntityTable<TOOL> TOOL
        {
            get
            {
                return this.GetTable<TOOL>();
            }
        }
        public EntityTable<TOOL_ARRANGE> TOOL_ARRANGE
        {
            get
            {
                return this.GetTable<TOOL_ARRANGE>();
            }
        }
        private EntityView<TOOL_ARRANGE> _TOOL_ARRANGEView;
        /// <summary>
        /// Keys: LINE_ID, STEP_ID, PRODUCT_ID
        /// </summary>
        public EntityView<TOOL_ARRANGE> TOOL_ARRANGEView
        {
            get
            {
                if ((this._TOOL_ARRANGEView == null))
                {
                    this._TOOL_ARRANGEView = this.CreateView<TOOL_ARRANGE>(this.TOOL_ARRANGE, null, "LINE_ID,STEP_ID,PRODUCT_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._TOOL_ARRANGEView;
            }
        }
        public EntityTable<PEG_CONDITION> PEG_CONDITION
        {
            get
            {
                return this.GetTable<PEG_CONDITION>();
            }
        }
        private EntityView<PEG_CONDITION> _PEG_CONDITIONView;
        /// <summary>
        /// Key: STEP_ID
        /// </summary>
        public EntityView<PEG_CONDITION> PEG_CONDITIONView
        {
            get
            {
                if ((this._PEG_CONDITIONView == null))
                {
                    this._PEG_CONDITIONView = this.CreateView<PEG_CONDITION>(this.PEG_CONDITION, null, "STEP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._PEG_CONDITIONView;
            }
        }
        public EntityTable<VALIDATION_BOP> VALIDATION_BOP
        {
            get
            {
                return this.GetTable<VALIDATION_BOP>();
            }
        }
        public EntityTable<EQP_UTILIZATION> EQP_UTILIZATION
        {
            get
            {
                return this.GetTable<EQP_UTILIZATION>();
            }
        }
        private EntityView<EQP_UTILIZATION> _EQP_UTILIZATIONView;
        /// <summary>
        /// Keys: LINE_ID, EQP_ID
        /// </summary>
        public EntityView<EQP_UTILIZATION> EQP_UTILIZATIONView
        {
            get
            {
                if ((this._EQP_UTILIZATIONView == null))
                {
                    this._EQP_UTILIZATIONView = this.CreateView<EQP_UTILIZATION>(this.EQP_UTILIZATION, null, "LINE_ID,EQP_ID", Mozart.Data.Entity.IndexType.Hashtable);
                }
                return this._EQP_UTILIZATIONView;
            }
        }
        public EntityTable<SHIFT_TIME_CONFIG> SHIFT_TIME_CONFIG
        {
            get
            {
                return this.GetTable<SHIFT_TIME_CONFIG>();
            }
        }
        protected override void ClearMyModel()
        {
            base.ClearMyModel();
            this.DisposeIfNeeds(this._PRODUCTView);
            this._PRODUCTView = null;
            this.DisposeIfNeeds(this._PRODUCT_ROUTEViewFromProductID);
            this._PRODUCT_ROUTEViewFromProductID = null;
            this.DisposeIfNeeds(this._PRODUCT_ROUTEViewToProductID);
            this._PRODUCT_ROUTEViewToProductID = null;
            this.DisposeIfNeeds(this._STEP_ROUTEView);
            this._STEP_ROUTEView = null;
            this.DisposeIfNeeds(this._DEMANDView);
            this._DEMANDView = null;
            this.DisposeIfNeeds(this._DEMANDViewById);
            this._DEMANDViewById = null;
            this.DisposeIfNeeds(this._DEMANDIDView);
            this._DEMANDIDView = null;
            this.DisposeIfNeeds(this._STEP_TATView);
            this._STEP_TATView = null;
            this.DisposeIfNeeds(this._STEP_YIELDView);
            this._STEP_YIELDView = null;
            this.DisposeIfNeeds(this._EQP_ARRANGEStepView);
            this._EQP_ARRANGEStepView = null;
            this.DisposeIfNeeds(this._EQP_ARRANGEEqpView);
            this._EQP_ARRANGEEqpView = null;
            this.DisposeIfNeeds(this._EQP_ARRANGETimeView);
            this._EQP_ARRANGETimeView = null;
            this.DisposeIfNeeds(this._EQP_ARRANGELineView);
            this._EQP_ARRANGELineView = null;
            this.DisposeIfNeeds(this._EQP_ARRANGEProdStep);
            this._EQP_ARRANGEProdStep = null;
            this.DisposeIfNeeds(this._PRESET_INFOFactorView);
            this._PRESET_INFOFactorView = null;
            this.DisposeIfNeeds(this._EXECUTION_OPTION_CONFIGView);
            this._EXECUTION_OPTION_CONFIGView = null;
            this.DisposeIfNeeds(this._PM_PLANView);
            this._PM_PLANView = null;
            this.DisposeIfNeeds(this._FACTORY_BREAKView);
            this._FACTORY_BREAKView = null;
            this.DisposeIfNeeds(this._SETUP_INFOView);
            this._SETUP_INFOView = null;
            this.DisposeIfNeeds(this._SETUP_INFOTimeView);
            this._SETUP_INFOTimeView = null;
            this.DisposeIfNeeds(this._REPLENISH_PLANView);
            this._REPLENISH_PLANView = null;
            this.DisposeIfNeeds(this._SPLIT_INFOView);
            this._SPLIT_INFOView = null;
            this.DisposeIfNeeds(this._TOOL_ARRANGEView);
            this._TOOL_ARRANGEView = null;
            this.DisposeIfNeeds(this._PEG_CONDITIONView);
            this._PEG_CONDITIONView = null;
            this.DisposeIfNeeds(this._EQP_UTILIZATIONView);
            this._EQP_UTILIZATIONView = null;
        }
        /// <summary>
        /// Global Pararamters
        /// </summary>
        public GlobalParameters GlobalParameters
        {
            get
            {
                return ((GlobalParameters)(this.GlobalParametersCore));
            }
        }
        public ConfigParameters GetConfigParameters(string key)
        {
            return this.GetParameters<ConfigParameters>(key);
        }
    }
    /// <summary>
    /// Input data context class
    /// </summary>
    public partial class TempMart : TempRepository
    {
        public static TempMart Instance { get { return (TempMart)ServiceLocator.Resolve<TempRepository> (); }}
    }
    /// <summary>
    /// Output data context class
    /// </summary>
    public partial class OutputMart : OutputRepository
    {
        public static OutputMart Instance { get { return (OutputMart)ServiceLocator.Resolve<OutputRepository> (); }}
        public IEntityWriter<MATERIAL_HISTORY> MATERIAL_HISTORY
        {
            get
            {
                return this.GetTable<MATERIAL_HISTORY>();
            }
        }
        public IEntityWriter<UNLOADED_LOTLOG> UNLOADED_LOTLOG
        {
            get
            {
                return this.GetTable<UNLOADED_LOTLOG>();
            }
        }
        public IEntityWriter<PRODUCT_ROUTE_LOG> PRODUCT_ROUTE_LOG
        {
            get
            {
                return this.GetTable<PRODUCT_ROUTE_LOG>();
            }
        }
        public IEntityWriter<ANALYSIS_PSI> ANALYSIS_PSI
        {
            get
            {
                return this.GetTable<ANALYSIS_PSI>();
            }
        }
        public IEntityWriter<UNKIT_REMAIN_WIPLOG> UNKIT_REMAIN_WIPLOG
        {
            get
            {
                return this.GetTable<UNKIT_REMAIN_WIPLOG>();
            }
        }
        public IEntityWriter<STEP_WIP> STEP_WIP
        {
            get
            {
                return this.GetTable<STEP_WIP>();
            }
        }
        public IEntityWriter<INPUT_PLAN> INPUT_PLAN
        {
            get
            {
                return this.GetTable<INPUT_PLAN>();
            }
        }
        public IEntityWriter<RELEASE_HISTORY> RELEASE_HISTORY
        {
            get
            {
                return this.GetTable<RELEASE_HISTORY>();
            }
        }
        public IEntityWriter<RUN_HISTORY> RUN_HISTORY
        {
            get
            {
                return this.GetTable<RUN_HISTORY>();
            }
        }
        public IBufferedEntityWriter<EQP_PLAN> EQP_PLAN
        {
            get
            {
                return this.GetBuffered<EQP_PLAN>();
            }
        }
        public IEntityWriter<ERROR_LOG> ERROR_LOG
        {
            get
            {
                return this.GetTable<ERROR_LOG>();
            }
        }
        public IEntityWriter<PEG_HISTORY> PEG_HISTORY
        {
            get
            {
                return this.GetTable<PEG_HISTORY>();
            }
        }
        public IEntityWriter<LOAD_STAT> LOAD_STAT
        {
            get
            {
                return this.GetTable<LOAD_STAT>();
            }
        }
        public IEntityWriter<LOAD_HISTORY> LOAD_HISTORY
        {
            get
            {
                return this.GetTable<LOAD_HISTORY>();
            }
        }
        public IEntityWriter<STEP_TARGET> STEP_TARGET
        {
            get
            {
                return this.GetTable<STEP_TARGET>();
            }
        }
        public IEntityWriter<WIP_HIS> WIP_HIS
        {
            get
            {
                return this.GetTable<WIP_HIS>();
            }
        }
        public IEntityWriter<STEP_MOVE> STEP_MOVE
        {
            get
            {
                return this.GetTable<STEP_MOVE>();
            }
        }
        public IEntityWriter<TOOL_SEIZE_LOG> TOOL_SEIZE_LOG
        {
            get
            {
                return this.GetTable<TOOL_SEIZE_LOG>();
            }
        }
        public IEntityWriter<PRESET_INFO_HIS> PRESET_INFO_HIS
        {
            get
            {
                return this.GetTable<PRESET_INFO_HIS>();
            }
        }
        public IEntityWriter<INIT_WIP_LOG> INIT_WIP_LOG
        {
            get
            {
                return this.GetTable<INIT_WIP_LOG>();
            }
        }
        public IEntityWriter<EQP_DISPATCH_LOG> EQP_DISPATCH_LOG
        {
            get
            {
                return this.GetTable<EQP_DISPATCH_LOG>();
            }
        }
        public IEntityWriter<DEMAND_HIS> DEMAND_HIS
        {
            get
            {
                return this.GetTable<DEMAND_HIS>();
            }
        }
        public IEntityWriter<UNPEG_HISTORY> UNPEG_HISTORY
        {
            get
            {
                return this.GetTable<UNPEG_HISTORY>();
            }
        }
        public IEntityWriter<APS_STATUS_MASTER> APS_STATUS_MASTER
        {
            get
            {
                return this.GetTable<APS_STATUS_MASTER>();
            }
        }
        public IEntityWriter<APS_LOG_HISTORY> APS_LOG_HISTORY
        {
            get
            {
                return this.GetTable<APS_LOG_HISTORY>();
            }
        }
    }
}
