<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mozart.SeePlan</name>
    </assembly>
    <members>
        <member name="T:Mozart.SeePlan.Cbsim.AllocationContext">
            <summary>
            작업물 할당 로직에서 사용되는 컨텍스트 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Allocator">
            <summary>
            현재 실행 중인 Allocator를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Batch">
            <summary>
            현재 할당 대상 작업물을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Bucket">
            <summary>
            현재 할당 대상 Bucket을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.CurrentBundleInfo">
            <summary>
            현재 작업물 할당을 위해 사용할 번들 작업 정보를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.CurrentAllocableBatchList">
            <summary>
            현재 할당 가능한 작업물 목록을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.SetupStartTime">
            <summary>
            셋업 시작 시간으로 설정된 시간을 가져옵니다.
            Solver/Control/NeedTobeSetup Action 실행 후 설정됩니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.SetupEndTime">
            <summary>
            셋업 완료 시간으로 설정된 시간을 가져옵니다.
            Solver/Control/NeedTobeSetup Action 실행 후 설정됩니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.SetupTime">
            <summary>
            Setup Duration
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Usage">
            <summary>
            TactTime 정보
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.FlowTime">
            <summary>
            TactTime 정보
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.BucketAllocableQty">
            <summary>
            Bucket의 현재 시간부터 다음 NonWorkingTime 시작 시간 또는 Bucket 종료 시간까지 할당 가능한 단순 계산 수량을 가져옵니다. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.AdjuestedAllocableQty">
            <summary>
            사용자가 조정한 할당 가능 수량을 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.#ctor(Mozart.SeePlan.Cbsim.CbsAllocator,Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket)">
            
            <summary>
            지정된 항목들을 사용하여 새로운 작업물 할당 로직에서 사용되는 컨텍스트를 생성합니다.
            </summary>
            <param name="allocator">현재 실행 중인 Allocator입니다.</param>
            <param name="batch">현재 할당 대상 작업물입니다.</param>
            <param name="bucket"> 현재 할당 대상 Bucket입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Item(System.Object)">
            <summary>
            The property value of a specific Key in Dispatch context. 
            </summary>
            <param name="key">Property key string.</param>
            <returns>Returns the property value of the key.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.AllocationContext.Keys">
            <summary>
            The property value of a specific Key in Dispatch context.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.Set(System.Object,System.Object)">
            <summary>
            Saves property value to a specific key.
            </summary>
            <param name="key">Property key string.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.Remove(System.Object)">
            <summary>
            Removes property value from a specific key.
            </summary>
            <param name="key">Property key string to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.Get``1(System.Object,``0)">
            <summary>
            Return the property value of a sepcific key as target data type. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.GetOrAdd``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Return the property value of a specific key as target data type or create one if value does not exist.
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="creator">The function to crate property value when it does not exist.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.AllocationContext.Pop``1(System.Object,``0)">
            <summary>
            Return th property value of a specific key as target data type and delete it from Context. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.BatchSplitOption">
            <summary>
            작업물 분할 방식을 나타냅니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.BatchSplitOption.KeepAndDelay">
            <summary>
            작업물을 분할하지 않고, 작업 시간을 지연시킵니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.BatchSplitOption.Split">
            <summary>
            작업물을 분할합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.Reset">
            <summary>
            Initializes the Context confivuration value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAllocateContext.ModelContext">
            <summary>
            Simulation Model Context.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAllocateContext.Item(System.Object)">
            <summary>
            The property value of a specific Key in Dispatch context. 
            </summary>
            <param name="key">Property key string.</param>
            <returns>Returns the property value of the key.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAllocateContext.Keys">
            <summary>
            The property value of a specific Key in Dispatch context.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.Set(System.Object,System.Object)">
            <summary>
            Saves property value to a specific key.
            </summary>
            <param name="key">Property key string.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.Remove(System.Object)">
            <summary>
            Removes property value from a specific key.
            </summary>
            <param name="key">Property key string to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.Get``1(System.Object,``0)">
            <summary>
            Return the property value of a sepcific key as target data type. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.GetOrAdd``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Return the property value of a specific key as target data type or create one if value does not exist.
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="creator">The function to crate property value when it does not exist.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocateContext.Pop``1(System.Object,``0)">
            <summary>
            Return th property value of a specific key as target data type and delete it from Context. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAllocator.AllocCount">
            <summary>
            Alloc 호출 횟수
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.AddBatch(Mozart.SeePlan.Cbsim.ICbsBatch,System.Boolean)">
            <summary>
            주어진 작업물을 CbsAllocator와 CbsBucketStep에 추가합니다.
            </summary>
            <param name="batch">추가할 작업물입니다.</param>
            <param name="sort">작업물 추가 후 작업물 목록 정렬 여부입니다. 작업물 목록을 정렬하지 않는 경우 작업물은 목록의 가장 마지막에 추가됩니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.RemoveBatch(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            지정된 작업물을 CbsAllocator과 CbsBucketStep로부터 제거할 대상으로 등록합니다.
            </summary>
            <param name="batch">제거 대상으로 등록할 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.AddBatchInAllocator(Mozart.SeePlan.Cbsim.ICbsBatch,System.Boolean)">
            <summary>
            주어진 작업물을 CbsAllocator에 추가합니다.
            </summary>
            <param name="batch">추가할 작업물입니다.</param>
            <param name="sort">작업물 추가 후 작업물 목록 정렬 여부입니다. 작업물 목록을 정렬하지 않는 경우 작업물은 목록의 가장 마지막에 추가됩니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.RemoveBatchInAllocator(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            주어진 작업물을 CbsAllocator에 제거합니다.
            </summary>
            <param name="batch">추가할 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.RemoveBatches">
            <summary>
            제거 대상으로 등록된 작업물들을 CbsAllocator와 CbsBucketStep에서 제거합니다.
            </summary>
            <returns>작업물이 제거된 경우 true이고, 그 외의 경우 false입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.Regroup(Mozart.SeePlan.Cbsim.CbsBatchGroup)">
            <summary>
            BatchGroup에 속한 개별 Batch들의 Group을 재구성합니다.
            </summary>
            <param name="batchGroup">대상 BatchGroup입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.Reserve(Mozart.SeePlan.Cbsim.CbsBucket,Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,System.TimeSpan)">
            <summary>
            Bucket에 Batch(Group)를 예약합니다. 
            다음 Period에 최우선적으로 할당되며 하나의 배치(그룹)만 예약 가능합니다.
            </summary>
            <param name="bucket"></param>
            <param name="batch"></param>
            <param name="qty"></param>
            <param name="remainSetupTime"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAllocator.DoSetup(Mozart.SeePlan.Cbsim.CbsBucket,Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,System.DateTime,System.DateTime)">
            <summary>
            Bucket에 SetupTime을 반영합니다.
            </summary>
            <param name="bucket">대상 Bucket 입니다.</param>
            <param name="batch">대상 Batch 입니다.</param>
            <param name="qty">할당 가능 수량입니다.</param>
            <param name="setupEndTime">Setup 완료 시간입니다.</param>
            <returns>Batch 할당 가능 여부를 반환합니다. true인 경우 현재 bucket에 batch를 할당할 수 있습니다. false인 경우 현재 bucket에 batch를 할당할 수 없기 때문에 예약됩니다.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAgent.Id">
            <summary>
            Agent ID. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAgent.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAgent.ThreadGroup">
            <summary>
            Thread job group key
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsAgentManager">
            <summary>
            The class that manages the model that provied Job Change decision making.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAgentManager.Agents">
            <summary>
            Registered CbsAgent list.
            CbsAgent is required for each equipment group that needs Job Change decision making.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.GetAgent(System.String)">
            <summary>
            CbsAgentManager에 등록된 CbsAgent를 찾아 반환합니다. 
            </summary>
            <param name="id">검색 대상 id 입니다.</param>
            <returns>검색된 CbsAgent 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.Add(System.String)">
            <summary>
            Register CbsAgent.
            Create and return CbsStockGroup through input ID.
            </summary>
            <param name="id">CbsAgent ID string.</param>
            <returns>Return registered CbsAgent.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.Add(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            Register input CbsAgent.
            </summary>
            <param name="agent">Target CbsAgent to be included.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.Remove(System.String)">
            <summary>
            Remove CbsAgent matching the input ID.
            </summary>
            <param name="id">ID of the CbsAgent to delete.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.Find(System.Predicate{Mozart.SeePlan.Cbsim.CbsAgent})">
            <summary>
            Search and return registered CbsAgent through input keyword. 
            </summary>
            <param name="match">Target CbsAgent to search.</param>
            <returns>Return matching result CbsAgent object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.AddBatch(Mozart.SeePlan.Cbsim.CbsBatch)">
            <summary>
            작업물을 CbsAgentManager에 등록합니다.
            </summary>
            <param name="batch">등록 대상 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentManager.RemoveBatch(Mozart.SeePlan.Cbsim.CbsBatch)">
            <summary>
            CbsAgentManager에 등록된 작업물을 제거합니다.
            </summary>
            <param name="batch">제거 대상 작업물입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Comparer">
            <summary>
            BatchGroupIn Comparer
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Key">
            <summary>
            Batch Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.GroupKey">
            <summary>
            Grouping Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Plan">
            <summary>Original plan information </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.DueDate">
            <summary>Get plan due date.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Sample">
            <summary>
            The first entity to form Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.CurrentStep">
            <summary>
            The current CbsStep of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.CurrentStepID">
            <summary>
            ID of the current CbsStep
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Qty">
            <summary>
            The quantity of CbsBatch included in CbsBatchGroup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.CurrentQty">
            <summary>
            The current quantity of CbsBatch included in Group.
            Allocation내에서만 의미있는 값 
            GetAllowedDateForPrecedence 에서 설정한 선행가능 구간내의 수량의 합
            Default 는 BucketRolling주기의 EndTime
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Count">
            <summary>
            The quantity of entity unit composing Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.IsStarted">
            <summary>
            Determines whether to start processing the first entity. 
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.IsFinished">
            <summary>
            Determines whether all process is completed for the entity.
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.LastPlan">
            <summary>
            Latest loading information
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.LastStepTime">
            <summary>
            The latest out time of previsous step
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.ReleaseTime">
            <summary>
            Batch release time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.WeightInfo">
            <summary>
            The Weight Factor information of the entity for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.InGroupKey">
            <summary>
            작업물이 포함된 그룹의 키입니다. 
            작업물이 그룹에 추가되면 해당 그룹의 키가 설정됩니다.
            작업물이 그룹에서 제거되면 null로 설정됩니다.
            작업물이 그룹에 포함되지 않은 경우 null입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Context">
            <summary>
            작업물 할당 로직에서 사용되는 컨텍스트를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.#ctor(System.String)">
            <summary>
            Conatructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.ToString">
            <summary>
            The display name of Lot Group.
            </summary>
            <returns>Returns display name of Lot Group. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.MoveFirst(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the first CbsStep. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return first CbsStep information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.MoveNext(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the next CbsStep. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>List of entities set to the next CbsStep. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.Apply(System.Action{Mozart.SeePlan.Cbsim.CbsBatch,Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            This is used to implement a specified logic for all entities in Batch. 
            </summary>
            <param name="action">The logic delegate to be applied to entity unit. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.Add(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Add entity unit to Group.
            </summary>
            <param name="cb">Target entity to add. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.AddRange(System.Collections.Generic.IList{Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            Add entity list to Group.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.Remove(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Remove entity from entities composing Group.
            </summary>
            <param name="hb">Target entity to remove. </param>
            <param name="isAllocate"></param>
            <returns>If entity is properly removed, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.InitializePreset(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            
            </summary>
            <param name="samples"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.DeepCopy">
            <summary>
            Replicate LotGroup and create. 
            </summary>
            <returns>Return Lot Group clone.</returns>
            <remarks>The Contents of the replicated Lot Group does not interlock with the original Contents. They work as separate lists.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchGroup.GetEnumerator">
            <summary>
            The section of IEnumerable where member is implemented. 
            Return list of entity unit composing Batch. 
            </summary>
            <returns>Return list of entity unit.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Contents">
            <summary>
            An entity may contain other entities. 
            For example, the entity Bus may contain the entities of type Passenger. 
            There are objects that allow you to work with the entity contents
            </summary>
            <value>Returns the list of entities.</value>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.HasContents">
            <summary>This checks if there are any existing entity units that could be formed to Batch type.</summary>
            <value>If entities could be formed more than a single unit, return <strong><em>true</em></strong>, or else, return <strong><em>false</em></strong>.</value>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.First">
            <summary>The first entity from the entities to be formed as Batch.</summary>
            <value>Returns the first entity where Index is 0.</value>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatchGroup.Last">
            <summary>The last entity from the entities to be formed as Batch.</summary>
            <value>Returns the last entity where Index is Count -1.</value>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsBundleInfo">
            <summary> 
            번들 작업 수행 정보 클래스입니다. 
            번들 작업에 포함된 작업물은 모두 동시에 작업을 시작하고 완료합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBundleInfo.Qty">
            <summary>
            번들 구성 수량을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBundleInfo.ProcessTime">
            <summary>
            번들 작업 시간을 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBundleInfo.#ctor(System.Double,System.TimeSpan)">
            <summary>
            지정된 수량과 시간을 사용해서 새로운 번들 작업 수행 정보를 생성합니다.
            </summary>
            <param name="qty">번들 구성 수량입니다.</param>
            <param name="processTime">번들 작업 시간입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsDateTimeInterval">
            <summary>
            CBS 모듈에서 사용되는 시간 구간 정보 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsDateTimeInterval.BatchSplitOption">
            <summary>
            작업물 분할 방식을 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsDateTimeInterval.#ctor(System.DateTime,System.DateTime,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            지정된 구간 시작 시간과 끝 시간 및 작업물 분할 방식을 사용해서 새로운 시간 구간 정보를 생성합니다.
            </summary>
            <param name="startTime">구간 시작 시간입니다.</param>
            <param name="endTime">구간 끝 시간입니다.</param>
            <param name="option">작업물 분리 방식입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsDateTimeInterval.#ctor(System.DateTime,System.TimeSpan,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            지정된 구간 시작 시간과 구간의 길이 및 작업물 분할 방식을 사용해서 새로운 시간 구간 정보를 생성합니다.
            </summary>
            <param name="startTime">구간 시작 시간입니다.</param>
            <param name="duration">구간의 길이입니다.</param>
            <param name="option">작업물 분할 방식입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.Constraints.Cbs2thResourceConstraint.#ctor">
             <summary>
            Constructor.
             </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.Constraints.Cbs2thResourceConstraint.#ctor(System.Object,System.Int32)">
            <summary>
            Constructor. Enabled property is set as true.
            </summary>
            <param name="key">Bucket Key.</param>
            <param name="capacity">Capacity amount</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsWeightEvaluator.Target">
            <summary>
            Target equipment object to perform Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsWeightEvaluator.Solver">
            <summary>
            The root Simulation Model(Factory) object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsWeightEvaluator.Log">
            <summary>
            Model Logger.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsWeightEvaluator.FactorList">
            <summary>
            The list of functions used by Weight based Dispatcher to calculate Factor value. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Key">
            <summary>
            Batch Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Plan">
            <summary>Original plan information </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Qty">
            <summary>Get/Set plan quantity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.DueDate">
            <summary>Get plan due date.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.IsStarted">
            <summary>
            Determines whether to start the first Step for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.IsFinished">
            <summary>
            Checks if all Steps are completed for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Count">
            <summary>
            The number of entities to form a Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.ReleaseTime">
            <summary>
            The release time of entity to the factory.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.LastStepTime">
            <summary>
            The latest out time of previsous step
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.CurrentQty">
            <summary>
            Temporary qty for current stage calcuration
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.CurrentStepID">
            <summary>
            The current step id of the batch
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.CurrentStep">
            <summary>
            The current Step of the batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.LastPlan">
            <summary>
            latest loading information
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Sample">
            <summary>
            The Sample Lot of the Lot composing HandlingBatch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.WeightInfo">
            <summary>
            The Weight Factor information of the entity for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.InGroupKey">
            <summary>
            작업물이 포함된 그룹의 키입니다. 
            작업물이 그룹에 추가되면 해당 그룹의 키가 설정됩니다.
            작업물이 그룹에서 제거되면 null로 설정됩니다.
            작업물이 그룹에 포함되지 않은 경우 null입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsBatch.Context">
            <summary>
            작업물 할당 로직에서 사용되는 컨텍스트를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsBatch.MoveFirst(System.DateTime)">
             <summary>
            Set the current CbsStep of the entity as the first CbsStep.          
             </summary>
             <param name="now">Current time of Simulation.</param>
             <returns>설정된 첫공정 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsBatch.MoveNext(System.DateTime)">
            <summary>
            Set the current CbsStep of the entity as the next CbsStep. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>다음공정 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsBatch.Apply(System.Action{Mozart.SeePlan.Cbsim.CbsBatch,Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            This is used to apply logics for a particular entity included in Batch. 
            </summary>
            <param name="action">This is the logic delegate to be applied to unit entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsAgentRunControl">
            <summary>
            	<para>[FEComponent] CbsAgent/CbsAgentControl</para>
            	<para>This is the set of Event hanling functions that are triggered at the point CbsAgent decision making occurs.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsAgentRunControl.Instance">
            <summary>
            JobChangeEvent Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentRunControl.OnStartAgent(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            	<para>[FEAction] CbsAgent/CbsAgentControl</para>
            	<para>This FEAction is called before the first Processing of CbsAgent starts. </para>
            </summary>
            <param name="agent">Target CbsAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentRunControl.OnBeforeRun(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            	<para>[FEAction] CbsAgent/CbsAgentControl</para>
            	<para>This FEAction is called before Processing starts from each CbsAgent. </para>
            </summary>
            <param name="agent">Target CbsAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentRunControl.OnRun(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            	<para>[FEAction] CbsAgent/CbsAgentControl</para>
            	<para>This FEAction is called right after Profile calculation. </para>
            </summary>
            <param name="agent">The target CbsAgent object to calculate logic. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentRunControl.OnAfterRun(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            	<para>[FEAction] CbsAgent/CbsAgentControl</para>
            	<para>This FEAction is called after Processing ends from each CbsAgent.</para>
            </summary>
            <param name="agent">Target CbsAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.GetBatchGroupKey(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Get the grouping key of Cbs batch
            </summary>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.GetGroupInPreset(Mozart.SeePlan.Cbsim.CbsBatchGroup,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            BatchGroup 내의 Batch를 정렬하기 위한 WeightPreset 객체를 반환합니다. 
            반환값이 null이 아닌 경우 해당 WeightPreset을 사용해서 Batch를 정렬합니다. 
            반환값이 null인 경우 사용자 정의 로직을 사용해서 Batch를 정렬합니다.
            </summary>
            <param name="batchGroup">대상 BatchGroup입니다.</param>
            <param name="samples">대상 BatchGroup에 포함될 Batch 중 일부입니다. WeightPreset을 선택할 때 참고할 수 있습니다.</param>
            <returns>BatchGroup에서 사용할 WeightPreset입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.GetGroupInSelectionType(Mozart.SeePlan.Cbsim.CbsBatchGroup,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            BatchGroup 내의 Batch를 정렬하기 위해 Batch 별 점수 계산 후 정렬 방식을 반환합니다.
            </summary>
            <param name="batchGroup">대상 BatchGroup입니다.</param>
            <param name="samples"></param>
            <returns>Batch 정렬 방식입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.OnBatchEndStep(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch가 현재 공정을 마치고 다음 공정으로 이동하기 직전에 사용자 로직을 구현할 수 있는 위치입니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.IsProcessMoveNext(Mozart.SeePlan.Cbsim.CbsBucketStep,Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch를 다음 공정으로 이동할지 여부를 반환합니다. 
            사용자 정의 로직에 의해 Batch를 현재 공정에 여러번 할당해야 하는 경우를 처리할 수 있습니다.
            </summary>
            <param name="group">대상 공정입니다.</param>
            <param name="batch">대상 작업물입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.GetNextStep(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsLoadInfo,Mozart.SeePlan.Cbsim.CbsStep)">
            <summary>
            Batch의 다음 공정을 반환합니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
            <param name="loadInfo">대상 작업물의 마지막 작업 정보입니다.</param>
            <param name="cstep">대상 작업물의 현재 공정입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.IsBatchFinished(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch의 모든 공정이 완료됐는지 여부를 반환합니다. 
            사용자 정의 조건에 의해 마지막 공정까지 수행하지 않은 작업물도 중간에 완료시킬 수 있습니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.GetBucketStepKey(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch의 공정이 변경된 뒤 Batch가 속할 BucketStep의 Key를 반환합니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
            <returns>BucketStep의 Key입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.OnBatchNextStep(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch의 다음 공정이 설정된 뒤 사용자 로직을 구현할 수 있는 위치입니다. 
            다음 공정이 설정되지 않은 경우(null로 설정된 경우)에는 호출되지 않습니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.OnBatchFinished(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            Batch의 모든 공정이 완료된 경우 사용자 정의 로직을 구현할 수 있는 위치입니다.
            </summary>
            <param name="batch">대상 작업물입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatchControl.OnBatchRemoved(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            사용자가 CbsAllocator와 CbsBucketStep의 제거 대상으로 등록한 작업물이 실제로 제거되었을 때 사용자 정의 로직을 구현할 수 있는 위치입니다.
            </summary>
            <param name="batch">제거된 작업물입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketControl.Instance">
            <summary>CbsControl Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsAgentInitControl.OnInitializedAgent(Mozart.SeePlan.Cbsim.CbsAgent)">
            <summary>
            	<para>[FEAction] CbsAgent/Init</para>
            	<para>This FEAction is called after the initialization of CbsAgent. </para>
            </summary>
            <param name="agent">Target CbsAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsLine.AddBatch(Mozart.SeePlan.Cbsim.ICbsBatch)">
            <summary>
            지정된 작업물에 맞는 CbsBucketStep을 찾고, 지정된 작업물을 할당 대상으로 등록합니다.
            지정된 작업물에 맞는 CbsBucketStep은 Solver/Batch/GetBucketStepKey Action의 반환값을 키로 갖는 CbsBucketStep입니다. 
            만약 지정된 작업물에 맞는 CbsBucketStep의 MoveNextImmediatly 속성이 True이고, 찾은 CbsBucketStep이 CbsAllocator에서 현재 처리 중인 CbsBucketStep인 경우 CbsAllocator에도 할당 대상으로 등록합니다.
            지정된 작업물을 CbsBucketStep에 추가한 경우 True를 반환하고, 그 외의 경우 false를 반환합니다.
            </summary>
            <param name="batch">추가할 작업물입니다.</param>
            <returns>지정된 작업물을 CbsBucketStep에 추가했는지 여부입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsConstraintManager">
            <summary>
            Bucketing 에서 사용할 Bucket 를 등록하고 관리하는 객체입니다. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsConstraintManager.bucketConstraints">
            <summary>
            This is the Bucket information of constraints of product and product group. 
            The information is extracted from Buckets at Bucketing execution and composes Caches. 
            Default Key is the Key for Constraints group and the value is BucketConstrainSet.
            BucketConstrainSet could be composed with multiple IOboConstraints.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsConstraintManager.caches">
            <summary>
            The Bucket constraint list for a specific product.This is the cached contents, Buckets being the source. 
            Key is to show the Constraint group and value is Constraint Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintManager.UseCache">
            <summary>
            false인 경우 GetConstraintSetKey Action을 호출하지 않습니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintManager.RollingHours">
            <summary>
            This is the Rolling cycle during Bucketing. The configuration could be changed through the property of BucketInit Control. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.InitWorkingTime(System.DateTime)">
            <summary>
            This is the Rolling cycle during Bucketing. The configuration could be changed through the property of BucketInit Control. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintManager.Enabled">
            <summary>
            Determines whether to perform Bucketing. If value is <strong>true</strong>, Bucketing is performed, or else, 
            Bucketing is not performed when value is <strong>false</strong>.Default value is set as true. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.IsBoundary(System.DateTime)">
            <summary>
            Checks if input time is correspondent to BucketRolling cycle. 
            </summary>
            <param name="now">Target time.</param>
            <returns>If input time is correspondent to Rolling cycle, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintManager.ConstraintSets">
            <summary>
            Returns the entire list of registered Constraint Bucket.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.GetConstraintSetKey(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            Returns the Constraint group Key to be applied to the target entity.
            </summary>
            <param name="batch">Target entity object</param>
            <param name="bucket">Target bucket</param>
            <returns>Returns the Constraint key of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.GetConstraintSet(System.Object)">
            <summary>
            Returns the Constraint Bucket list correspondent to Constraint group key. 
            </summary>
            <param name="constraintSetKey">Constraint group key.</param>
            <returns>Returns Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.AddConstraint(System.Object,Mozart.SeePlan.Cbsim.ICbsConstraint)">
            <summary>
            Add Caontraint Bucket to Constraint Group correspondent to key group.
            </summary>
            <param name="constraintSetKey">Constraint group key.</param>
            <param name="constraint">Target Constraint bucket to be included. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.AddConstraintSet(System.Object,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint})">
            <summary>
            Add ConstraintSet.
            </summary>
            <param name="constraintSetKey">ConstraintSet Key.</param>
            <param name="constraints">Target Constraint list.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.ResetCache">
            <summary>
            Initializes cache information.
            Cache initialization can be done depending on the possibility cache information can be changed. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.ResetConstraintSets">
            <summary>
            Initializes Bucket Constraint information.
            Bucket Constraint initialization can be done depending on the possibility Constraint information can be changed. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.GetConstraints(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket,System.DateTime)">
            <summary>
            Returns the Constraint Bucket list of the target entity. 
            </summary>
            <param name="batch">Target entity object</param>
            <param name="bucket">Target bucket</param>
            <param name="now">Current time of Simulation</param>
            <returns>Returns the Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.AddMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint})">
            <summary> 
            Add output to target entity that requires Constraint Bucket applied. 
            </summary>
            <param name="batch">Target entity</param>
            <param name="qty">Target qty to loading.</param>
            <param name="now">Current time of Simulation</param>
            <param name="bucket">Target bucket</param>
            <param name="e">Target constraints</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.CanMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double@,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint}@)">
            <summary>
            Determines and returns whether Bucketing could be performed for the entity that will be applied with constraints. 
            </summary>
            <param name="batch">Target entity</param>
            <param name="qty">Target qty.</param>
            <param name="now">Current time of Simulation</param>
            <param name="bucket">bucket</param>
            <param name="releaseTime"></param>
            <param name="endTime"></param>
            <param name="e">Constraints to be applied</param>
            <returns>If Bucketing is possible, return <strong>true</strong>, 
            or else, return <strong>false</strong>. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.Rolling(System.DateTime,System.TimeSpan)">
            <summary>
            Process Rolling to all Buckets under the management of Bucket Manager. 
            At Rolling, the output of Bucket is initialized and able to perform additional Bucketing on the next Rolling cycle. 
            </summary>
            <param name="now">Rolling time.</param>
            <param name="horizon"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsConstraintManager.Compensate(System.DateTime,System.Double)">
            <summary>
            During initial Bucket configuration, when start time is different from Bucket Rolling, 
            the passed time should be handled that outputs already came out. For example if Rolling is performed for 8 hours starting from 06:00, 
            Simulation start time is 08:00, portion = 1/4(0.25) could be set to consider 1/4 Bucket Move has already occured.  
            </summary>
            <param name="now">Compensate handling time.</param>
            <param name="portion">Output handling portion.</param>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsConstraintSet">
            <summary>
            This is where Set to handle constraints per product(Step) processed throguh Bucket other than production Capacity is defined. 
            </summary>
            <remarks>
            	<para>
            		<em>[EX]</em> Some products cannot be produced more than 1,000 per day and in case other products in the same product group can be produced 5,000 per day, the product group and production constraints can be gathered and these constraints could be reflected during Bucketing. </para>
            
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintSet.Key">
            <summary>
            ConstraintSet Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintSet.Constraints">
            <summary>
            Return the entire constraint list as Dictionary type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConstraintSet.AllConstraints">
            <summary>
            Returns the entire constraint list.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsCapacityConstraint">
            <summary>
            Capacity constraint class of Bucket.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.CreateDummy(System.Object)">
            <summary>
            Creates Dummy Bucket.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.#ctor">
             <summary>
            Constructor.
             </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.#ctor(System.Object,System.Double)">
            <summary>
            Constructor. Enabled property is set as true.
            </summary>
            <param name="key">Bucket Key.</param>
            <param name="capacity">Capacity amount</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.CumulatedQty">
            <summary>
            The accumulated production of the previous time within Bucket Rolling section.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.PreviousQty">
            <summary>
            The production qunatity of the previous time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.MoveQty">
            <summary>
            The production qunatity of the current time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.RemainQty">
            <summary>
            The remaining quantity that could be produced from Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.Key">
            <summary>
            Bucket Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.Enabled">
            <summary>
            Decision to set Capacity for Bucket. If false, Capacity is not consdiered. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.SlotCount">
            <summary>
            The quantities that could be processed simulataneously.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.CapaQty">
            <summary>
            Capacity of Bucket. The maximum quantities for Bucketing. 
            It also means the total quantities that could be processed during Rolling Hour. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.Data">
            <summary>
            Data object to sotre Context of Bucket. User can define this object.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.AddMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            Add actual output quantity when processing target entity from Bucket.
            </summary>
            <param name="batch">Target entity.</param>
            <param name="qty">Target quantity </param>
            <param name="bucket">Target bucket</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.AddMove(System.Double)">
            <summary>
            Add actual output quantity to input quantity of Bucket. 
            </summary>
            <param name="qty">Actual output quantity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.CanMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double@,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@)">
            <summary>
            Determines whether additional work could be performed from Bucket considering Capacity and Slant
            </summary>
            <param name="batch">Target entity object</param>
            <param name="qty">Target quantity</param>
            <param name="now"></param>
            <param name="bucket">Target bucket</param>
            <param name="releaseTime"></param>
            <param name="endTime"></param>
            <returns>If additional Bucketing can be performed, return, <strong>true</strong>
            , or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.CanMove(System.DateTime,System.Double@)">
            <summary>
            Determines whether additional work could be performed from Bucket considering Capacity and Slant 
            </summary>        
            <returns>If additional Bucketing can be performed, return, <strong>true</strong>
            , or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.Rolling(System.DateTime,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Perform Bucket Rolling.
            </summary>
            <param name="now">Current time.</param>
            <param name="horizon"></param>
            <param name="atBoundary">Checks whether Rolling start time is equal to Rolling cycle.</param>
            <param name="atDayChanged">Checks if Rolling start time is change of day period.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.Compensate(System.DateTime,System.Double)">
            <summary>
            Add actual output of Bucket as portion. 
            </summary>
            <param name="now">Current time.</param>
            <param name="portion">Actual output portion.
            If Capacity is 1000, portion is 0.2, logic to add 200 actual output is formed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsCapacityConstraint.IsValidSlotCount">
            <summary>
            Checks if Slot quantity is valid.
            </summary>
            <returns>If SlotCount is larger than 0 and smaller than int.MaxValue, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.CbsDummyConstraint">
            <summary>
            This the Dummy constraint class that has no Capacity allocated. 
            This is used to proceed Step considering TAT without Capacity constraints. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsDummyConstraint.Instance">
            <summary>
            Refers to the default Dummybucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsDummyConstraint.Key">
            <summary>
            Bucket Key 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsDummyConstraint.Enabled">
            <summary>
            Determines whether to consider Capacity. The value is always set as false. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsDummyConstraint.SlotCount">
            <summary>
            The constraint for using Bucket simultaneously. It is set as int.MaxValue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsDummyConstraint.CapaQty">
            <summary>
            The Capacity of Bucket. It is set as int.MaxValue.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsDummyConstraint.CanMove(System.DateTime,System.Double@)">
            <summary>
            Determines if Bucket is available for input.
            </summary>
            <returns>Returns if entity could be processed. It is always <strong>true</strong>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.ICbsConstraint">
            <summary>
            Interface of Bucket Constraint
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsConstraint.Key">
            <summary>
            Bucket Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsConstraint.Enabled">
            <summary>
            Determines whether to configure Capacity or not. If false, Capacity is not considered.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraint.AddMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            Add actual ouput quantities to target entity when processed in Bucket.
            </summary>
            <param name="batch">Target entity.</param>
            <param name="qty">Actual quantities.</param>
            <param name="bucket"> target loading bucket</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraint.AddMove(System.Double)">
            <summary>
            Add actual output quantities as much as the input quantities through Bucket.
            </summary>
            <param name="qty">Actual outpu quantities.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraint.CanMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double@,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@)">
            <summary>
            Determines whether to add work considering Bucket's Capacity and Slant.
            </summary>
            <param name="batch">Target entity object</param>
            <param name="now">The current simulation time.</param>
            <param name="qty">Target qty to loading.</param>
            <param name="bucket">target loading bucket</param>
            <param name="releaseTime"></param>
            <param name="endTime"></param>
            <returns>If additional Bucketing is possible, return <strong>true</strong>, 
            or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraint.Rolling(System.DateTime,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Perform Bucket Rolling.
            </summary>
            <param name="now">Current time.</param>
            <param name="horizon"></param>
            <param name="atBoundary">Checks whether Rolling time is correspondent to Rolling cycle.</param>
            <param name="atDayChanged">Checks whether Rolling time is the change of day point.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraint.Compensate(System.DateTime,System.Double)">
            <summary>
            Add actual output of Bucket as portion. 
            </summary>
            <param name="now">Current time.</param>
            <param name="portion">Actual output portion.
            If Capacity is 1000, portion is 0.2, logic to add 200 actual output is formed.</param>
        </member>
        <member name="T:Mozart.SeePlan.Cbsim.ICbsConstraintManager">
            <summary>
            The Interface to manange Constraint.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsConstraintManager.Enabled">
            <summary>
            Determine whether to perform Bucketing or not. If value is set as <strong>true</strong>, Bucketing is performed.
            If value is set as <strong>false</strong>, Bucketing is not performed. The default value is true. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.ICbsConstraintManager.ConstraintSets">
            <summary>
            Return the entire list of registered Constraint.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.AddConstraint(System.Object,Mozart.SeePlan.Cbsim.ICbsConstraint)">
            <summary>
            Add Constraint Bucket to Constraint group in the key group.
            </summary>
            <param name="constraintSetKey">Constraint group Key.</param>
            <param name="constraint">Target Constraint bucket to be added. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.AddConstraintSet(System.Object,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint})">
            <summary>
            Add ConstraintSet.
            </summary>
            <param name="constraintSetKey">ConstraintSet Key.</param>
            <param name="constraints">List of Constraint correspondent to key.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.GetConstraintSet(System.Object)">
            <summary>
            Return Constraint Bucket list of the Constraint group Key.
            </summary>
            <param name="constraintSetKey">Constraint group Key..</param>
            <returns>Return Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.GetConstraintSetKey(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            Return the Constraint group Key to be applied to target entity. 
            </summary>
            <param name="batch">Target entity object</param>
            <param name="bucket">Target bucket</param>
            <returns>Return the Constraint key of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.ResetCache">
            <summary>
            Initialize cache information. 
            This function is used when cache needs to be initialized when cache information can be changed at a certain point. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.ResetConstraintSets">
            <summary>
            Initialize Bucket Constraint information.
            This function is used when constraint needs to be initialized when constraint information can be changed at a certain point. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.GetConstraints(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket,System.DateTime)">
            <summary>
            Returns the Constraint list of the target entity. 
            </summary>
            <param name="batch">Target entity object</param>
            <param name="now">Current time of Simulation</param>
            <param name="bucket">Target bucket</param>
            <returns>Return Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.AddMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint})">
            <summary>
            Add actual output to Constraint that is required to applied to the entity. 
            </summary>
            <param name="batch">Target entity.</param>
            <param name="qty">Target qty.</param>
            <param name="bucket">Target bucket</param>
            <param name="now">Current time of Simulation</param>
            <param name="e">Target constraints</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.CanMove(Mozart.SeePlan.Cbsim.ICbsBatch,System.Double@,System.DateTime,Mozart.SeePlan.Cbsim.CbsBucket,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint}@)">
            <summary>
            Determine whether Bucketing is possible for the entity when constraint applied to the entity is considered. 
            </summary>
            <param name="batch">Target entity.</param>
            <param name="qty">Target qty.</param>
            <param name="now">Current time of Simulation</param>
            <param name="bucket">Target bucket</param>
            <param name="releaseTime"></param>
            <param name="endTime"></param>
            <param name="e">Constraints to be applied</param>
            <returns>When Bucketing is possible at determination, return <strong>true</strong>, 
            or else, return <strong>false</strong>. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.Rolling(System.DateTime,System.TimeSpan)">
            <summary>
            Process Rolling for all Bucket under Bucket Manager management.
            The output of Bucket is initialized during Rolling in order to perform additional Bucketing during next Rolling cycle. 
            </summary>
            <param name="now">Rolling time.</param>
            <param name="horizon">Rolling horizon.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.IsBoundary(System.DateTime)">
            <summary>
            Determine whether the entered time is relevant to BucketRolling cycle.
            </summary>
            <param name="now">Target time. .</param>
            <returns>If the time is correspondent to Rolling cycle, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.ICbsConstraintManager.Compensate(System.DateTime,System.Double)">
            <summary>
            During initial Bucket configuration, when start time is different from Bucket Rolling, 
            the passed time should be handled that outputs already came out. For example if Rolling is performed for 8 hours starting from 06:00, 
            Simulation start time is 08:00, portion = 1/4(0.25) could be set to consider 1/4 Bucket Move has already occured.  
            </summary>
            <param name="now">Compensate handling time.</param>
            <param name="portion">Output handling portion.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsControl.Instance">
            <summary>CbsControl Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetBucketCycleTime(System.DateTime,Mozart.Simulation.Engine.Time)">
            <summary>
            Set next rolling time. 
            </summary>
            <param name="now"></param>
            <param name="defaultCycleTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetNextWorkingStartTime(System.DateTime,Mozart.Simulation.Engine.Time)">
            <summary>
            현재 시간 이후의 다음 Bucket 시작 시간을 반환합니다.
            </summary>
            <param name="now">현재 시간입니다.</param>
            <param name="horizon">Bucket 롤링 주기입니다.</param>
            <returns>다음 Bucket 시작 시간입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.CompareBucketStep(Mozart.SeePlan.Cbsim.CbsBucketStep,Mozart.SeePlan.Cbsim.CbsBucketStep)">
            <summary>
            BucketStep compare method. More prioritized BucketStep is allocated first. 
            </summary>
            <param name="x">target BucketStep x</param>
            <param name="y">target BucketStep y</param>
            <returns>if x is greater than y the value is positive(1), 
            x equals y then the value is zero, 
            x is less than y the value is negative(-1)
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.BeforeAllocation(Mozart.SeePlan.Cbsim.CbsAllocator)">
            <summary>
            
            </summary>
            <param name="allocator"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetLoadableBatches(Mozart.SeePlan.Cbsim.CbsAllocator,Mozart.SeePlan.Cbsim.CbsBucket,Mozart.SeePlan.Cbsim.CbsBatchGroup,System.DateTime)">
            <summary>
            <para><strong>[FEAction] Cbs/Control</strong></para>
            <para>이번 작업에 할당 가능한 작업물 목록을 반환합니다.</para>
            </summary>
            <param name="allocator">현재 실행 중인 CbsAllocator입니다.</param>
            <param name="bucket">할당 대상 Bucket입니다.</param>
            <param name="batchGroup">할당 대상 작업물입니다.</param>
            <param name="nowDt">현재 Bucket의 시작 시간입니다.</param>
            <returns>이번 작업에 할당 가능한 작업물 목록입니다. Action을 구현하지 않은 경우 작업물에 포함된 모든 개별 작업물의 목록입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetBundleInfo(Mozart.SeePlan.Cbsim.CbsAllocator,Mozart.SeePlan.Cbsim.CbsBucket,Mozart.SeePlan.Cbsim.ICbsBatch,System.DateTime)">
            <summary>
            <para><strong>[FEAction] Cbs/Control</strong></para>
            <para>이번 작업에 사용할 번들 작업 정보를 반환합니다.</para>
            </summary>
            <param name="allocator">현재 실행 중인 CbsAllocator입니다.</param>
            <param name="bucket">할당 대상 Bucket입니다.</param>
            <param name="batch">할당 대상 작업물입니다.</param>
            <param name="nowDt">현재 Bucket의 시작 시간입니다.</param>
            <returns>이번 작업에 사용할 번들 작업 정보입니다. 번들 작업을 수행하지 않는 경우 <see langword="null"/>입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetConstraintSetKey(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            	<para>
            		<strong>[FEAction] Cbs/Control</strong>
            	</para>
            	<para>Returns the Capacity Constraint Bucket Key of the product unit.</para>
            </summary>
            <param name="batch">Target entity.</param>
            <param name="bucket">Target bucket</param>
            <remarks>In case F/W is performed by Bucketing in a specific Step and 
            in case the Capacity of the Resource pool of the corresponding Step is considered, Move Bucket is used.
            In addition, in case Bucketing constraint should be applied to each product of the corresponding Step, this function is used to use 
            Capacity Bucket for each product. For example, if product 1 and product 2 in Step "A" could be produced 1,000 and 1,5000 respectively per day, 
            these could be created as Bucket for each product and could be used. </remarks>
            <returns>Returns ConstraintSetKey.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetConstraints(Mozart.SeePlan.Cbsim.CbsConstraintManager,Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket,System.DateTime)">
            <summary>
            	<para>
            		<strong>[FEAction] Cbs/Control</strong>
            	</para>
            	<para>Creates and returns the Capacity Constraint Bucket list of the target entity.</para>
            </summary>
            <param name="cm">Target Constraint Manager.</param>
            <param name="batch">Target entity. </param>
            <param name="bucket">Target bucket.</param>
            <param name="now">The current time of Simulation.</param>
            <returns>Returns the production Bucket Capacity list of the current Step of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.ConstraintRolling(Mozart.SeePlan.Cbsim.CbsCapacityConstraint,System.DateTime,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            	<para>
            		<strong>[FEAction] Cbs/Control</strong>
            	</para>
            	<para> This FEAction is called at Bucket Constraint Rolling of individual constraint and updates constraint information.</para>
            </summary>
            <param name="cc">Target constraint for Rolling.</param>
            <param name="now">Rolling time.</param>
            <param name="horizon">Rolling horizon.</param>
            <param name="atBoundary">Checks if Rolling time is part of Bucket Rolling Hour. If Bucket RollingHour is configured by user, return <em><strong>true</strong></em>, or else, return <em><strong>false</strong></em>.</param>
            <param name="atDayChanged">Determines whether day is changed. If it is change of day period, return <strong><em>true</em></strong> or else, return <em><strong>false</strong></em></param>
            <remarks>Rolling performed as individual constraint.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.AddConstraintMove(Mozart.SeePlan.Cbsim.CbsCapacityConstraint,Mozart.SeePlan.Cbsim.ICbsBatch,System.Double,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            	<para>
            		<strong>[FEAction] Cbs/Control</strong>
            	</para>
            	<para>This FEAction is to increase Move counts when entities are processed in Bucket.</para>
            </summary>
            <param name="cb">Target Constraint object</param>
            <param name="batch">Target entity object</param>
            <param name="qty">Target quantity</param>
            <param name="bucket">Target bucket</param>
            <remarks>Move counts are upgraded by each entity </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.WriteCheckConstraintLog(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Cbsim.ICbsConstraint},Mozart.SeePlan.Cbsim.ICbsBatch,System.DateTime,Mozart.SeePlan.Cbsim.ICbsConstraint)">
            <summary>
            	<para>
            		<strong>[FEAction] Cbs/Control</strong>
            	</para>
            	<para>This is the Action to write th Constraint Bucket Check results. This is called after distinguishing Conatraint Bucket requirement satisfactory.</para>
            </summary>
            <param name="allConstraints">The entire constraint information that should be applied to the target entity.</param>
            <param name="batch">Target entity object</param>
            <param name="now">Current time</param>
            <param name="violate">The contraint information that entity did not satisfy.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.GetNextBatchAllocableTime(Mozart.SeePlan.Cbsim.CbsBucket,Mozart.SeePlan.Cbsim.CbsBatch,System.DateTime,System.DateTime,System.Double,System.Double,Mozart.Simulation.Engine.Time)">
            <summary>
            Batch의 작업 완료 시간을 반환합니다.
            </summary>
            <param name="bucket">대상 Bucket입니다.</param>
            <param name="batch">대상 Batch입니다.</param>
            <param name="startTime">Batch 작업 시작 시간입니다.</param>
            <param name="nextBucketAllocableTime">Batch 할당 후 Bucket의 다음 작업물 투입 가능 시간입니다.</param>
            <param name="qty">할당 수량입니다.</param>
            <param name="usage">Usage입니다.</param>
            <param name="flowTime">Flow Time입니다.</param>
            <returns>Batch의 작업 완료 시간입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.ReserveBatchDuringAllocation(Mozart.SeePlan.Cbsim.ICbsBatch,Mozart.SeePlan.Cbsim.CbsBucket)">
            <summary>
            개별 작업물(CbsBatch)의 예약(Reservation)이 완료된 뒤 호출됩니다.
            </summary>
            <param name="batch">예약된 작업물</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsControl.InterceptOnExit(Mozart.SeePlan.Cbsim.CbsBucketStep,Mozart.SeePlan.Cbsim.CbsBatch)">
            <summary>
            개별 작업물(CbsBatch)의 할당(Allocation)이 완료된 뒤 사용자 정의 로직을 실행하고, 
            해당 개별 작업물로부터 파생되어 다음 공정(CbsBucketStep)으로 이동(MoveNext)할 
            개별 작업물의 목록을 반환합니다.
            </summary>
            <param name="group">개별 작업물의 현재 공정입니다.</param>
            <param name="batch">할당을 마친 개별 작업물입니다.</param>
            <returns>할당을 마친 개별 작업물로부터 파생되어 다음 공정으로 이동할 작업물의 목록입니다.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Route">
            <summary>
            The CbsStep route of the entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.LotID">
            <summary>
            ID of entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Steps">
            <summary>
            The CbsStep collection composing entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Plans">
            <summary>
            The job list of the entity from inital CbsStep to current CbsStep. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.IsStarted">
            <summary>
            Determines whether to start processing the first entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.IsFinished">
            <summary>
            Determines whether all processing is completed for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.CurrentStep">
            <summary>
            The current CbsStep of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.ReleaseTime">
            <summary>
            The release time of entity. .
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.MoveFirst(System.DateTime)">
             <summary>
            Set the current CbsStep of the entity as the first CbsStep.          
             </summary>
             <param name="now">Current time of Simulation.</param>
             <returns>설정된 첫공정 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.MoveNext(System.DateTime)">
            <summary>
            Set the current CbsStep of the entity as the next CbsStep. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>다음공정 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.GetFirstStep">
            <summary>
            Return the first CbsStep of the Route. 
            </summary>
            <returns>Return the first CbsStep..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.GetNextStep(Mozart.SeePlan.Cbsim.CbsStep)">
            <summary>
            Return the next CbsStep of the entity.
            </summary>
            <param name="current">Current CbsStep.</param>
            <returns>Return the next CbsStep of the current CbsStep..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.GetNextStep(Mozart.SeePlan.Cbsim.CbsStep,System.DateTime)">
            <summary>
            Return the next CbsStep based on the target job information.
            </summary>
            <param name="cstep">Current CbsStep.</param>
            <param name="now">Current time of Simulation</param>
            <returns>Return the next CbsStep of the current CbsStep..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.Process(System.DateTime,System.DateTime,Mozart.SeePlan.Cbsim.CbsResource,System.Double,System.Double)">
            <summary>
            process the work of current CbsStep.
            </summary>
            <param name="startTime">Start time.</param>
            <param name="endTime">End time.</param>
            <param name="eqp">The equipment performing the job.</param>
            <param name="qty">Target qty</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.StepChange(System.DateTime)">
            <summary>
            Set the current CbsStep of the entity to the next CbsStep to be moved. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return the list of entity unit set to the next CbsStep. </returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Key">
            <summary>
            Batch Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Plan">
            <summary>Original plan information </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Qty">
            <summary>Get/Set plan quantity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.DueDate">
            <summary>Get plan due date.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Priority">
            <summary>
            The priority of the corresponding batch. This is used to compare the sequence among other batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.LastStepTime">
            <summary>
            The latest out time of previsous step
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.CurrentQty">
            <summary>
            Temporary qty for current stage calcuration
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.InitialStep">
            <summary>
            Returns the lots' initial Step information. 
            </summary>
            <returns>Return the initial Step information.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.WeightInfo">
            <summary>
            The Weight Factor information of the entity for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.InGroupKey">
            <summary>
            작업물이 포함된 그룹의 키입니다. 
            작업물이 그룹에 추가되면 해당 그룹의 키가 설정됩니다.
            작업물이 그룹에서 제거되면 null로 설정됩니다.
            작업물이 그룹에 포함되지 않은 경우 null입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBatch.Context">
            <summary>
            작업물 할당 로직에서 사용되는 컨텍스트를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBatch.Mozart#SeePlan#Cbsim#ICbsBatch#Apply(System.Action{Mozart.SeePlan.Cbsim.CbsBatch,Mozart.SeePlan.Cbsim.ICbsBatch})">
            <summary>
            This is used to apply logics for a particular entity included in Batch. 
            </summary>
            <param name="action">This is the logic delegate to be applied to unit entity.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsInitiator.Instance">
            <summary>CbsInitiator Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.InitializeConstraints(Mozart.SeePlan.Cbsim.CbsConstraintManager)">
            <summary>
            	<para>[FEAction] Cbs/Control</para>
            	<para>Initializes Constraint manager</para>
            	<para>Constraints of Bucket can be included during initialization.</para>
            </summary>
            <param name="cm">Constraint manager object.</param>
            <remarks>
            	If <em>CapacityBucket</em>, <em>Constraint Bucket</em> is not registered to <em>CbsConstraintManager</em>, Rolling is not performed in a cycle.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.OnCompensate(Mozart.SeePlan.Cbsim.CbsConstraintManager,System.DateTime,System.Double)">
            <summary>
            	<para></para>
            	<para>[FEAction] Cbs/Control</para>
            	<para> This is the FEAction used to develop logic to balance the passed time when the start time configured through initial Bucket is different from Bucket Rolling cycle. </para>
            	<para>This FEAction is to develop logic to correct the initial value, such as considering the passed time to be handled as if actual ouput has already came out.</para>
            </summary>
            <param name="cm">Constraint management object.</param>
            <param name="now">Current time.</param>
            <param name="portion">Correction rate.</param>
            <remarks>
            If Bucket Rolling Hour is 8 hours, and the current time is 3 hours elapsed from Bucket, 
            <paramref name="portion"/> is 3/8 and Volume Capcity of Bucket should be deducted as much as <paramref name="portion"/> to start Simulation. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.GetResourceList">
            <summary>
            	<para>[FEAction] Solver/Init</para>
            	<para>The FEAction to return list of Resource required to create and initialize bucket. </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.GetPlanList">
            <summary>
            	<para>[FEAction] Solver/Init</para>
            	<para>The FEAction to return list of plans. </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.GetWeightPresets(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>
            		<strong>[FEAction]Factory/FactoryInit</strong>
            	</para>
            	<para>Return entire list of WeightPreset to create and initialize equipment. </para>
            </summary>
            <param name="solver">Root AoFactory object. </param>
            <remarks>
            This is only required for Dispatcher based on Preset. 
            It is used to bind Method used by each Factor during WeightManager initializaiton.
            </remarks>
            <returns>Returns WeightPreset list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsInitiator.InitializePlan(Mozart.SeePlan.Cbsim.CbsPlan)">
            <summary>
            지정된 CbsPlan을 초기화합니다.
            </summary>
            <param name="plan">대상 CbsPlan입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.Priority">
            <summary>
             Sort priority
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.Preset">
            <summary>
            Weight Preset used by allocation. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.Batches">
            <summary>
            Batch list assign these buckets
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.MoveNextImmediately">
            <summary>
             the flag move immediately to the next step
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.SortMNIAddingBatch">
            <summary>
            MoveNextImmediately 이 true 일 때  BatchList에 Add할 때 Sort 여부 설정
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.BucketFirstSelection">
            <summary>
            choose a bucket first, and allocation batches
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.GroupAddingBatch">
            <summary>
            Enable grouping cbs batch
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.ExcessCapacityUse">
            <summary>
            Resource 별 다음 Rolling 주기의 Capacity를 이번 Bucket에서 미리 차감할 수 있는지 여부입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.AllowZeroSetupTime">
            <summary>
            시작 시간과 종료 시간이 동일한 셋업이 발생할 수 있는지 여부를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.ApplySetupReserve">
            <summary>
            Setup 으로 인해 이번 Rolling 주기의 Bucket Capacity가 모두 차감되는 경우
            Setup 및 BatchGroup을 예약하여 진행할지를 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucketStep.ReserveBatchGroup">
            <summary>
            Capa 초과로 인한 재공 예약 시 예약할 단위
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsBucketStep.batchGroups">
            <summary>
             Cbs Batch group
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucketStep.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucketStep.ClearBatches">
            <summary>
            등록된 모든 작업물을 제거합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsResource.Line">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsResource.Name">
            <summary>
            The id of resource
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsResource.Group">
            <summary>
            The Original name of resource
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsResource.step">
            <summary>
            The bucket step name
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsResource.capacity">
            <summary>
            The capacity of (virtual-)resource
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsResource.TimeUnit">
            <summary>
            The time per a capacity unit
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsResource.ShiftType">
            <summary>
            Work Shift application type. Total number of rotation.
            EX)Two shifts 2, Three shifts 3.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsResource.calendar">
            <summary>
            Basic Capacity information of Resource. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsResource.Initialize(Mozart.SeePlan.TimeLibrary.DateTimeInterval)">
            <summary>Time Horizon 내에서 적용될 EventCalendar 생성합니다.</summary>
            <param name="horizon">장비의 계획 수행 시간구간 정보입니다.</param>
            <summary>Generate EventCalendar to be applied within Time Horizon.</summary>
            <param name="horizon">The time section information of equipment plan execution.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsSolver.Module">
            <summary>
            Simulator object
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsSolver.Context">
            <summary>
            Model Context. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsSolver.Logger">
            <summary>
            Default Logger of Model. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsSolver.Weights">
            <summary>
            The object to manage Weight Factor information used during Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsEvents.Instance">
            <summary>OboEvents Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnBeginInitialize(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at beginning of Cbs solver. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="solver">Solver object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnEndInitialize(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the end of Cbs solver. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="solver">Solver object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnStart(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at beginning of Cbs solver. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="solver">Solver object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnBeginLineAllocation(Mozart.SeePlan.Cbsim.CbsLine)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the beginning of line allocation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="line">Line instance</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnEndLineAllocation(Mozart.SeePlan.Cbsim.CbsLine)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the end of line allocation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="line">Line instance</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnBeginRolling(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the beginning of rolling. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="solver">Solver object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnEndRolling(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the end of rolling. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="solver">Solver object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsEvents.OnDone(Mozart.SeePlan.Cbsim.CbsSolver)">
            <summary>
            	<para>[FEAction] Solver/Events</para>
            	<para>This FEAction is called at the end of Cbs Solver. Logics to write Output or analysis tasks can be done through here.</para>
            </summary>
            <param name="solver">Solver object. </param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsLoadInfo.Usage">
            <summary>
            Batch의 할당 수량 1의 Resource Capa 부하
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsLoadInfo.StepID">
            <summary>
            작업공정 ID 입니다.
            </summary>
            <summary>
            Step ID.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsLoadInfo.IsStarted">
            <summary>작업을 시작했는지 여부입니다. <strong>true</strong> 인 경우 시작한 상태입니다.</summary>
            <summary>Determines whether process has started or not. If <strong>true</strong> is returned, processing is started.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsLoadInfo.IsEnded">
            <summary>작업을 완료했는지 여부입니다. <strong>true</strong> 인 경우 완료한 상태입니다.</summary>
            <summary>Determines whether process has completed or not. If <strong>true</strong> is returned, processing is completed.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.Line">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.Qty">
            <summary>Get/Set plan quantity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.DueDate">
            <summary>Get/Set plan due date.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.Route">
            <summary>
            Get/Set  plan route (process)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.BatchList">
            <summary>Get or set unit duration plan list for product.</summary>
            <remarks>The unit duration can be day, week, etc.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsPlan.Priority">
            <summary>
            The priority of the corresponding batch. This is used to compare the sequence among other paln.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsPlan.#ctor(System.Double,System.DateTime)">
            <summary>
            Constructor.
            </summary>
            <param name="qty">Demand quantity.</param>
            <param name="duedate">Demand due date.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsPlan.AddBatch(Mozart.SeePlan.Cbsim.CbsBatch)">
            <summary>Add unit duration Demand information to Plan.</summary>
            <param name="batch">Target batch entity to add.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Priority">
            <summary>
             Sort priority
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Capacity">
            <summary>
            The capacity of (virtual-)resource
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Usage">
            <summary>
             The temporary variable for capacity usage in the current step
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.TimeUnit">
            <summary>
            The time per a capacity unit
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Remain">
            <summary>
             Remain Capacity
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Loadables">
            <summary>
            Loadable Plan list
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Cbsim.CbsBucket.currentTime">
            <summary>
             Current Bucket time
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.CurrentTime">
            <summary>
            장비의 Batch 로딩가능한 시간
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.LastCheckedNWTime">
            <summary>
            마지막 CurrentTime 정보. ?
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Batches">
            <summary>
             for a bucket first selection mode
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.StartTime">
            <summary>
            current horizon start time
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.EndTime">
            <summary>
             current horizon end time
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.Calendar">
            <summary>
            current horizon work calendar
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.ApplyIdleTimeCapacity">
            <summary>
            Idle이 발생한 경우 해당 Capa를 차감할지 여부를 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsBucket.CurrentNonWorkingTime">
            <summary>
            현재 처리 중인 NonWorkingTime 정보를 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucket.#ctor(Mozart.SeePlan.Cbsim.CbsBucketStep,Mozart.SeePlan.Cbsim.CbsResource)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="target"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucket.UseTo(System.DateTime)">
            <summary>
            Bucket에 Batch를 로딩가능한 시간 설정
            Idle이 존재하는 경우 해당 Capa 차감. ( 단, Idle시 Capa 차감 Option 혹은 장비의 Capa Type이 Quantity인 경우 반영하지 않음)
            PM 이 존재하는 경우 해당 Capa 차감 ( 단, Idle시 Capa 차감 Option 혹은 장비의 Capa Type이 Quantity인 경우 반영하지 않음)
            </summary>
            <param name="toTime"></param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucket.CalculateNextWorkingTime(System.DateTime,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            
            </summary>
            <param name="at"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsBucket.Allocate(Mozart.SeePlan.Cbsim.CbsBatch,System.DateTime,System.DateTime,System.Double,System.Double,System.Boolean)">
            <summary>
            지정된 시간에 시작하고, 완료되는 작업을 할당합니다.
            </summary>
            <param name="batch">할당 대상 작업물입니다.</param>
            <param name="startTime">작업 시작 시간입니다.</param>
            <param name="endTime">작업 완료 시간입니다.</param>
            <param name="qty">할당 수량입니다.</param>
            <param name="usage">할당 수량 1이 Bucket 수량에 대해 차지하는 비율입니다.</param>
            <returns></returns>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsModule.Current">
            <summary>Get the currently activated Planner.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsModule.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsModule.Initialize(Mozart.Task.Execution.ModelContext)">
            <summary>
            Perform initialization to execute planner.
            </summary>
            <param name="context">Model execution context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsModule.Execute(Mozart.Task.Execution.ModelContext)">
            <summary>Executes order-by-order forward engine.</summary>
            <param name="context">Model execution context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsStep.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Cbsim.CbsStep.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="id">Step id 문자열 입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="id">Step ID string.</param>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsStep.DefaultCapacityUsage">
            <summary>
             The unit of capacity consumption. ex) Tact , QtyUnit
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.BucketCycleTimeMinutes">
            <summary>
             The Cbs planning rolling horizon
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.MinimumAllocationQuantity">
            <summary>
             The Cbs minimum allocation quantity
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.MaxBatchPlanListCount">
            <summary>
            Lot PlanList가 가지고 있을 최대 길이입니다.
            </summary>
            <summary>
            The maximum length of OboBatch PlanList.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.ClassifyByLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.EnableThreadedLineAllocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.EnableThreadedAgentRun">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.UseOnlyInteger">
            <summary>
            정수로만 Allocate 하도록 할 때  True 로 셋팅
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Cbsim.CbsConfiguration.Instance">
            <summary>
            CbsConfiguration 에 대한 static 접근자입니다.
            </summary>
            <summary>
            Static accessor of SeePlanConfiguration
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetNextNonWorkingTimeSection(System.DateTime,System.Boolean,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            대상 시간 기준 다음 NonWorkingTime 구간 객체를 반환합니다. 
            대상 시간이 NonWorkingTime 구간 내에 포함된 경우 해당 구간 객체를 반환합니다. 
            대상 시간 이후 NonWorkingTime 구간이 존재하지 않는 경우 null을 반환합니다.
            </summary>
            <param name="at">대상 시간입니다.</param>
            <param name="inPeriod">검색 대상을 현재 Period 내로 제한할지 여부입니다.</param>
            <param name="option">검색 대상 NonWorkingTime 구간의 작업물 분할 방식입니다.</param>
            <returns>대상 시간 기준 다음 NonWorkingTime 구간 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetNextNonWorkingTimeSections(System.DateTime)">
            <summary>
            핸재 Period에 관계없이 대상 시간 이후의 모든 NonWorkingTime 구간 객체를 반환합니다. 
            대상 시간이 포함된 NonWorkingTime 구간 객체는 포함되지 않습니다.
            </summary>
            <param name="at">대상 시간입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetNonWorkingTimeSections(System.DateTime,System.DateTime)">
            <summary>
            시작과 끝 시간이 모두 대상 기간에 포함되는 모든 NonWorkingTime 구간 객체를 반환합니다. 
            </summary>
            <param name="start">대상 기간의 시작 시간입니다.</param>
            <param name="end">대상 기간의 끝 시간입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetNextNonWorkingTime(System.DateTime,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            현재 Period 내에서 대상 시간 기준 다음 NonWorkingTime 구간 시작 시간을 반환합니다. 
            대상 시간이 NonWorkingTime 구간 내에 포함된 경우 현재 시간을 반환합니다.
            현재 Period 내에서 대상 시간 이후 더이상 NonWorkingTime 구간이 존재하지 않는 경우 EndTime을 반환합니다.
            </summary>
            <param name="at">대상 시간입니다.</param>
            <param name="option">검색 대상 작업물 분할 방식입니다.</param>
            <returns>다음 NonWorkingTime 구간 시작 시간입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetNextWorkingTime(System.DateTime,Mozart.SeePlan.Cbsim.BatchSplitOption)">
            <summary>
            현재 Period 내에서 대상 시간 기준 다음 WorkingTime 시작 시간을 반환합니다.
            대상 시간이 WorkingTime에 포함된 경우 현재 시간을 반환합니다.
            현재 Period 내에서 대상 시간 이후 더이상 WorkingTime이 존재하지 않는 경우 EndTime을 반환합니다.
            </summary>
            <param name="at">대상 시간입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriod.GetLastNonWorkingTimeSection(System.DateTime)">
            <summary>
            현재 Period에 관계없이 대상 시간 이전에 종료된 NonWorkingTime 구간 객체를 반환합니다. 
            대상 시간이 포함된 NonWorkingTime 객체는 포함되지 않습니다.
            </summary>
            <param name="at">대상 시간입니다.</param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.SectionType">
            <summary>
            작업 또는 유휴 기간에 대한 유형을 지정합니다.
            </summary>
            <summary>
            Specifies the type of job or valid period. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.SectionType.RESOURCE">
            <summary>
            자원 가용 일정(ResourceCalendar)에 의해 정의된 유휴 기간을 나타냅니다. 
            아직 관련 로직이 구현되지 않았습니다.
            </summary> 
            <summary>
            Specifies the valid time defined in <em>ResourceCalendar</em>.
            This type is currently not in use. 
            </summary> 
        </member>
        <member name="F:Mozart.SeePlan.SectionType.USER">
            <summary>
            사용자 정의 유휴 기간을 나타냅니다.
            </summary>
            <summary>
            Specifies the valid period defined by user. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.SectionType.USE">
            <summary>
            자원 사용 기간을 나타냅니다.
            </summary>
            <summary>
            Specifies the period how long the resource can be used. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.CbsPeriodSection">
            <summary>
            작업 또는 유휴 기간의 시작시간, 종료시간을 관리하는 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.CbsPeriodSection.StartTime">
            <summary>
            작업 또는 유휴 기간의 시작 시간을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.CbsPeriodSection.EndTime">
            <summary>
            작업 또는 유휴 기간의 종료 시간을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.CbsPeriodSection.Duration">
            <summary>
            작업 또는 유휴 기간의 시간 간격을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.CbsPeriodSection.IsEmpty">
            <summary>
            작업 또는 유휴 기간의 시간 간격이 0보다 큰지 여부를 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.CbsPeriodSection.Interval">
            <summary>
            원본 기간 정보를 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.#ctor(System.DateTime,System.DateTime)">
            <summary>
            주어진 시작 시간과 종료 시간을 사용하여 새로운 사용자 정의 유휴 기간을 생성합니다.
            </summary>
            <param name="startTime">유휴 기간의 시작 시간입니다.</param>
            <param name="endTime">유휴 기간의 종료 시간입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.#ctor(System.DateTime,System.DateTime,Mozart.SeePlan.SectionType)">
            <summary>
            주어진 시작 시간과 종료 시간을 사용하여 새로운 작업 또는 유휴 기간을 생성합니다.
            </summary>
            <param name="startTime">작업 또는 유휴 기간의 시작 시간입니다.</param>
            <param name="endTime">작업 또는 유휴 기간의 종료 시간입니다.</param>
            <param name="sectionType">작업 또는 유휴 기간에 대한 유형입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.#ctor(Mozart.SeePlan.TimeLibrary.DateTimeInterval)">
            <summary>
            지정된 기간 정보를 사용하여 새로운 유휴 기간을 생성합니다.
            </summary>
            <param name="interval">유휴 기간 정보입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.#ctor(Mozart.SeePlan.TimeLibrary.DateTimeInterval,Mozart.SeePlan.SectionType)">
            <summary>
            지정된 기간 정보를 사용하여 새로운 작업 또는 유휴 기간을 생성합니다.
            </summary>
            <param name="interval">작업 또는 유휴 기간 정보입니다.</param>
            <param name="sectionType">작업 또는 유휴 기간에 대한 유형입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.Overlaps(Mozart.SeePlan.CbsPeriodSection)">
            <summary>
            현재 기간과 주어진 기간이 중첩되는지 여부를 반환합니다.
            </summary>
            <param name="p">비교 대상 작업 또는 유휴 기간입니다.</param>
            <returns>True인 경우 두 기간이 중첩되는 구간이 존재합니다. False인 경우 두 기간이 중첩되지 않습니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.Overlaps(System.DateTime,System.DateTime)">
            <summary>
            현재 기간과 주어진 기간이 중첩되는지 여부를 반환합니다.
            </summary>
            <param name="start">비교 대상 기간의 시작 시간입니다.</param>
            <param name="end">비교 대상 기간의 종료 시간입니다.</param>
            <returns>True인 경우 두 기간이 중첩되는 구간이 존재합니다. False인 경우 두 기간이 중첩되지 않습니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.Contains(System.DateTime)">
            <summary>
            주어진 시간이 현재 기간에 포함되는지 여부를 반환합니다.
            </summary>
            <param name="at">비교 대상 시간입니다.</param>
            <returns>True인 경우 주어진 시간이 현재 기간에 포함됩니다. False인 경우 주어진 시간이 현재 기간에 포함되지 않습니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.Equals(System.Object)">
            <summary>
            현재 기간과 주어진 기간이 일치하는지 여부를 반환합니다.
            </summary>
            <param name="obj">비교 대상 기간입니다.</param>
            <returns>True인 경우 두 기간이 일치합니다. False인 경우 주어진 개체가 기간 유형이 아니거나 두 기간이 일치하지 않습니다..</returns>
        </member>
        <member name="M:Mozart.SeePlan.CbsPeriodSection.GetHashCode">
            <summary>
            이 기간 인스턴스에 대한 해시 코드를 반환합니다.
            </summary>
            <returns>32비트 부호 있는 정수 해시 코드입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.FactoryTimeInfo">
            <summary>
            This is the shift information class of the factory.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.Default">
            <summary>
            Default shift information. If other Factory Time information is used for dates and holidays, 
            this determines whether the dates are the default shift information. 
            </summary>
            <remarks>Default value is fales</remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.Name">
            <summary>
            Name of the shift information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.StartOffset">
            <summary>
            Configure and refer the time gap between 00:00 and factory start time(refers the date change of the start time). 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.ShiftNames">
            <summary>
            Configure and refer the shift name array.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.ShiftHours">
            <summary>
            Configure and refer each shift time schedule. 
            </summary>
            <remarks>Default time is 00:00</remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryTimeInfo.StartOfWeek">
            <summary>
            Configure and refer the start day of the week. 
            </summary>
            <remarks>Default value is "Monday"</remarks>
        </member>
        <member name="M:Mozart.SeePlan.FactoryTimeInfo.#ctor">
            <summary xml:lang="ko-kr">
                <para>공장 시간 설정 정보를 생성합니다.</para>
                <para>일 공장 시작 시간의 기본값은 오전 6시 정각입니다.</para>
                <para>주 공장 시작일의 기본값은 월요일입니다.</para>
                <para>한 Shift 기간은 0 시간입니다.</para>
            </summary>
            <summary>
                <para>Initializes a new instance of the <em>FactoryTimeInfo</em> class.</para>
                <para>The default value of the factory time is 06:00AM.</para>
                <para>The default value of first day of the factory week is Monday.</para>
                <para>The default value of the shift hour is 0 hour.</para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.TimeSpanExtensions">
            <summary xml:lang="ko-kr">
            TimeSpan 데이터에 대한 확장 클래스입니다.
            </summary>
            <summary>
            Extended class for TimeSpan data.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.TimeSpanExtensions.Divide(System.TimeSpan,System.Double)">
            <summary xml:lang="ko-kr">
            시간구간 데이터를 특정 값으로 나눕니다.
            </summary>
            <param name="ts">분할대상 시간구간 데이터입니다.</param>
            <param name="scalar">시간구간을 나누는 값입니다.</param>
            <returns>분할된 시간구간 데이터를 반환합니다.</returns>
            <summary>
            Divide time section data with specific value.
            </summary>
            <param name="ts">Target time section to seperate.</param>
            <param name="scalar">Value to divide time section.</param>
            <returns>Return divided time section.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ForwardPeggingFailReason">
            <summary>
            포워드 페깅에 실패한 사유입니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ForwardPeggingFailReason.NO_TARGET">
            <summary>
            포워드 페깅 가능한 타겟이 존재하지 않습니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ForwardPeggingFailReason.EXCCESS">
            <summary>
            포워드 페깅 가능한 타겟은 존재하지만 모든 수량이 이미 다른 작업물에 포워드 페깅되었습니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ForwardPeggingFailReason.FILTERED">
            <summary>
            포워드 페깅 가능한 타겟이 사용자 로직에 의해 모두 필터링되었습니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.BestPredicate`1">
            <summary>
            조건에 맞는 최선의 항목을 찾는 대리자입니다.
            </summary>
            <typeparam name="T">항목의 형식입니다.</typeparam>
            <param name="best">현재 조건을 만족하는 최선의 항목입니다.</param>
            <param name="node">비교 대항 항목입니다.</param>
            <returns>최선의 항목을 찾는 작업이 완료되었는지 여부입니다.</returns>
            <summary>
            Represents the method that defines a set of criteria and to determine whether the specified items are the best to satisfy the criteria. 
            </summary>
            <typeparam name="T">The type of the items. c</typeparam>
            <param name="best">The best item that meets the current criteria.</param>
            <param name="node">The item to compare.</param>
            <returns><em><strong>true</strong></em> if <em>node</em> is the best item to meet the criteria defined within the method represented by this delegate; otherwise <em><strong>false</strong></em>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.BomSameSupport`1">
            <summary>
            LinkedList 구조로 BOM(Bill of Material) 구성 요소의 하위 BOM 구성 요소를 관리하는 기능을 제공하는 클래스입니다.
            </summary>
            <typeparam name="T">BOM 구성 요소 형식입니다.</typeparam>
            <summary>
            A class that provides the functionality to manage the child BOM components of a Bill of Material (BOM) component in a LinkedList structure. 
            </summary>
            <typeparam name="T">The type of BOM components.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSameSupport`1.SameNext">
            <summary>
            다음 하위 BOM 구성 요소을 가져옵니다.
            </summary>
            <summary>
            Gets the next child BOM component.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSameSupport`1.SameHead">
            <summary>
            모든 하위 BOM 구성 요소 중 첫 번째 것을 가져옵니다.
            </summary>
            <summary>
            Gets the first child BOM component from the specified BOM linked list.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSameSupport`1.HasSame">
            <summary>
            하위 BOM 구성 요소가 존재하는지 여부를 가져옵니다.
            </summary>
            <summary>
            Gets the boolean value to determine whether the specified BOM linked list has child BOM components or not. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSameSupport`1.MatchSame(System.Predicate{`0},System.Boolean)">
            <summary>
            모든 하위 BOM 구성 요소 중 주어진 조건을 처음으로 만족하는 하위 BOM 구성 요소를 반환합니다.
            </summary>
            <param name="predicate">하위 BOM 구성 요소를 찾는 조건입니다.</param>
            <param name="exactly">
            <para>반드시 조건을 만족하는 하위 BOM 구성 요소를 반환해야 하는지 여부입니다.</para>
            <para>True인 경우 조건을 만족하는 하위 BOM 구성 요소가 없으면 null을 반환합니다.</para>
            <para>False인 경우 조건을 만족하는 하위 BOM 구성 요소가 없으면 첫 번째 하위 BOM 구성 요소를 반환합니다.</para>
            </param>
            <returns>조건을 처음으로 만족하는 하위 BOM 구성 요소입니다.</returns>
            <summary>
            Returns the child BOM component that meets the criteria first,defined whithin the method represented by the <em>Predicate&lt;T&gt;</em> delegate, from the linked list child BOM components.
            </summary>
            <param name="predicate">The delegate that represents the method that defines a set of criteria and determines whether the specified child BOM component meets those criteria. </param>
            <param name="exactly">
            <para>Checks whether to return the child BOM component must absolutley meet the criteria defined whthin the method represented by the <em>Predicate&lt;T&gt;</em> delegate.</para>
            <para><em>True</em> if any of the sepcified child BOM components must absolutley meet the criteria. If no child BOM components satifies the criteria, <strong>null</strong> is returned. </para>
            <para>Otherwise, <em>false</em>. In this case, if there is no matching chlid BOM components to the criteria, the first child BOM component whithin the specified BOM linked list<see cref="P:Mozart.SeePlan.DataModel.BomSameSupport`1.SameHead"/> is reuturned.  </para>
            </param>
            <returns>Returns the chid BOM component that meets the specified criteria first.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSameSupport`1.AddSame(`0)">
            <summary>
            하위 BOM 구성 요소를 추가합니다.
            </summary>
            <param name="node">추가할 하위 BOM 구성 요소입니다.</param>
            <summary>
            Adds a child BOM component to the LinkedList. 
            </summary>
            <param name="node">The specified child BOM component to add to the BOM linked list.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSameSupport`1.RemoveSame(`0)">
            <summary>
            Removes a child BOM component from the LinkedList. 
            </summary>
            <param name="node">The specified child BOM component to remove from the BOM linked list.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSameSupport`1.AllSame">
            <summary>
            모든 하위 BOM 구성 요소를 반환합니다.
            </summary>
            <returns>모든 하위 BOM 구성 요소입니다.</returns>
            <summary>
            Returns all child BOM components. 
            </summary>
            <returns>Returns all child BOM components.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.BomSupport`1">
            <summary>
            LinkedList 구조로 구성된 BOM(Bill of Material) 구조의 노드를 나타내는 클래스입니다.
            </summary>
            <typeparam name="T">BOM 구성 요소 형식입니다.</typeparam>
            <summary>
            The class that represents the nodes of Bill of Material(BOM). BOM is in a LinkedList structure.
            </summary>
            <typeparam name="T">The type of BOM components.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.HasPrevs">
            <summary>
            이전 BOM 구성 요소가 존재하는지 여부를 가져옵니다.
            </summary>
            <summary>
            Gets the boolean value to determine whether the specified instance has a previous BOM component or not.   
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.PrevCount">
            <summary>
            이전 BOM 구성 요소의 수를 가져옵니다.
            </summary>
            
            <summary>
            Gets the number of previous BOM component
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.Prevs">
            <summary>
            이전 BOM 구성 요소의 목록을 가져옵니다.
            </summary>
            <summary>
            Gets the array of previous BOM components.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.HasNexts">
            <summary>
            다음 BOM 구성 요소가 존재하는지 여부를 가져옵니다.
            </summary>
            <summary>
            Gets the boolean value to determine whether the specified instance has a next BOM component or not. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.NextCount">
            <summary>
            다음 BOM 구성 요소의 수를 가져옵니다.
            </summary>
            <summary>
            Gets the number of next BOM components. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.BomSupport`1.Nexts">
            <summary>
            다음 BOM 구성 요소의 목록을 가져옵니다.
            </summary>
            <summary>
            Gets the array of next BOM components. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.AddPrev(`0)">
            <summary>
            이전 BOM 구성 요소를 추가합니다.
            </summary>
            <param name="node">추가할 이전 BOM 구성 요소입니다.</param>
            <summary>
            Adds a BOM component to the BOM component Array&lt;T&gt;(Array of previous BOM components).  
            </summary>
            <param name="node">The BOM component to add to the array of the specified instance.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.AddPrevs(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            여러 개의 이전 BOM 구성 요소를 추가합니다.
            </summary>
            <param name="nodes">이전 BOM 구성 요소의 목록입니다.</param>
            <summary>
            Adds multiple BOM components to the BOM component Array&lt;T&gt;(Array of previous BOM components).
            </summary>
            <param name="nodes">The list of previous BOM components to add to the array of the specified instance.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.GetFirst(Mozart.SeePlan.DataModel.BestPredicate{`0})">
            <summary>
            현 BOM 구성 요소로부터 기준으로 주어진 조건을 만족하는 최선의 이전 BOM 구성 요소를 찾는 작업을 되풀이해서 Head BOM 구성 요소를 찾아 반환합니다.
            </summary>
            <param name="selector">최선의 이전 BOM 구성 요소를 찾는 메서드입니다.</param>
            <returns>주어진 조건을 만족하는 첫 번째 BOM 구성 요소입니다.</returns>
            <summary>
            Finds and Returns the best head BOM component node by repeating the task to locate the previous BOM component nodes that meets the criteria the best, 
            defined within the method represented by <em>BestPredicate</em>, 
            starting from the specified BOM component node.
            </summary>
            <param name="selector">The delegate that represents the method that defines a set of criteria and determines whether the specified previous BOM component node is best or not.</param>
            <returns>Returns the head BOM component node that meets the criteria the best, defined within the method represented by <em>selector</em> delegate. </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.GetPrev(Mozart.SeePlan.DataModel.BestPredicate{`0})">
            <summary>
            주어진 조건을 만족하는 최선의 이전 BOM 구성 요소를 반환합니다.
            </summary>
            <param name="selector">
                <para>최선의 이전 BOM 구성 요소를 찾는 메서드입니다. </para>
                <para>메서드가 null인 경우 첫 번째 이전 BOM 구성 요소를 반환합니다.</para>
            </param>
            <returns>주어진 조건을 만족하는 최선의 이전 BOM 구성 요소입니다.</returns>
            <summary>
            Returns the previous BOM component node that meets the criteria best, defined within the methods represented by <em>BestPredicate&lt;T&gt;</em> delegate.  
            </summary>
            <param name="selector">
                <para>The delegate that represents the method that defines a set of criteria and determines whether the specified prev BOM node is the best or not.  </para>
                <para>If the delegate is null, the head of the BOM component list is returned.</para>
            </param>
            <returns>Returns the previous BOM node that meets the criteria the best, defined within the method represented by <em>selector</em> delegate.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.AddNext(`0)">
            <summary>
            다음 BOM 구성 요소를 추가합니다.
            </summary>
            <param name="node">추가할 다음 BOM 구성 요소입니다.</param>
            <summary>
            Adds a BOM component to the BOM component Array&lt;T&gt;(Array of next BOM components). 
            </summary>
            <param name="node">The BOM component to add to the array of the specified instance</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.AddNexts(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            여러 개의 다음 BOM 구성 요소를 추가합니다.
            </summary>
            <param name="nodes">다음 BOM 구성 요소의 목록입니다.</param>
            <summary>
            Adds multiple BOM components to the BOM component Array&lt;T&gt;(Array of next BOM components).
            </summary>
            <param name="nodes">The list of next BOM components to add to the array of the specified instance.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.GetLast(Mozart.SeePlan.DataModel.BestPredicate{`0})">
            <summary>
            현 BOM 구성 요소로부터 기준으로 주어진 조건을 만족하는 최선의 다음 BOM 구성 요소를 찾는 작업을 되풀이해서 마지막 BOM 구성 요소를 찾아 반환합니다.
            </summary>
            <param name="selector">최선의 다음 BOM 구성 요소를 찾는 메서드입니다.</param>
            <returns>주어진 조건을 만족하는 마지막 BOM 구성 요소입니다.</returns>
            <summary>
            Finds and Returns the best last BOM component node by repeating the task to locate the previous BOM component nodes that meets the criteria the best, 
            defined within the method represented by <em>BestPredicate</em>, 
            starting from the specified BOM component node.
            </summary>
            <param name="selector">The delegate that represents the method that defines a set of criteria and determines whether the specified previous BOM component node is best or not.</param>
            <returns>Returns the last BOM component node that meets the criteria the best, defined within the method represented by <em>selector</em> delegate. </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.BomSupport`1.GetNext(Mozart.SeePlan.DataModel.BestPredicate{`0})">
            <summary>
            주어진 조건을 만족하는 최선의 다음 BOM 구성 요소를 반환합니다.
            </summary>
            <param name="selector">
                <para>최선의 다음 BOM 구성 요소를 찾는 메서드입니다. </para>
                <para>메서드가 null인 경우 첫 번째 다음 BOM 구성 요소를 반환합니다.</para>
            </param>
            <returns>주어진 조건을 만족하는 최선의 다음 BOM 구성 요소입니다.</returns>
            <summary>
            Returns the next BOM component node that meets the criteria best, defined within the methods represented by <em>BestPredicate&lt;T&gt;</em> delegate.  
            </summary>
            <param name="selector">
                <para>The delegate that represents the method that defines a set of criteria and determines whether the specified next BOM node is the best or not.  </para>
                <para>If the delegate is null, the head of the BOM component list is returned.</para>
            </param>
            <returns>Returns the next BOM node that meets the criteria the best, defined within the method represented by <em>selector</em> delegate.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.IWeightComparer`1">
            <summary>
            우선순위 비교자 인터페이스입니다.
            </summary>
            <summary>
            Exposes a method that compares the priorities of two weight factors.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.IWeightComparer`1.PreEvaluation">
            <summary>
            비교자가 정렬을 시작하기 전에 작업물의 요소 별 점수를 미리 계산해야 하는지 여부입니다.
            </summary>
            <summary>
            Determines whether to calculate the factor weight score of the entity(wafer,lot,batch) in advance, before the comaprer starts sorting. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ForwardPegInfo">
            <summary>Foward Schedule 진행시 Lot/Step 단위의 Fowward Pegging 정보를 저장하기 위한 클래스입니다.</summary>
            <summary>This is the class to save Forward Pegging information in Lot/Step unit during Forward Schedule.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ForwardPegInfo.StepTarget">
            <summary>Pegging 대상 StepTarget 속성입니다.</summary>
            <summary>Property of StepTarget for Pegging.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ForwardPegInfo.Qty">
            <summary>Pegging 수량 속성입니다.</summary>
            <summary>Pegging quantity property.</summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ForwardPegInfo.#ctor(Mozart.SeePlan.DataModel.StepTarget,System.Double)">
            <summary>생성자입니다.</summary>
            <param name="stepTarget">Step 별 일자별 목표수량 정보입니다.</param>
            <param name="qty">Pegging 수량입니다. Pegging 된 결과 수량입니다.</param>
            <summary>Constructor</summary>
            <param name="stepTarget">The information of objective quantities per day and Step.</param>
            <param name="qty">Pegging quantity. Quantities of pegged results.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ForwardPegInfo.Commit">
            <summary>Pegging 결과를 StepTarget 에 반영합니다.</summary>
            <remarks>Commit 이전에는 StepTarget.AvalableQty 만 차감이 된 상태이며, Commit 이후에는 StepTarget.CurrentQty 에 Pegging 수량이 차감되어 반영됩니다.</remarks>
            <summary>Reflects Pegging result to StepTarget.</summary>
            <remarks>Only the quantities of StepTarget.AvalableQty is deducted before Commit. After Commit, the Pegged quantities of StepTarget.CurrentQty is deducted.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ForwardPegInfo.Rollback">
            <summary>StepTarget 속성에 Pegging 한 결과를 Rollback 합니다.</summary>
            <remarks>Commit 이전에 Pegging 결과를 Rollback 합니다. Rollback 실행시 StepTarget.AvaliableQty 에 Qty 수량을 더해주어 Pegging 시 차감된 정보를 원상복구합니다.</remarks>
            <summary>Rollback the Pegging results in StepTarget property.</summary>
            <remarks>Rollbacks the Pegging results to the point before Commit occured. When Rollback is performed, Qty is added to StepTarget.AvaliableQty and all deducted data from Pegging is restored.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PeggingInfo">
            <summary>
            Forward Pegging 정보를 담고 있는 Class 입니다.
            </summary>
            <summary>
            The class containing the <em>Forward Pegging</em> data. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeggingInfo.Plan">
            <summary>
            해당 StepPlan 정보입니다.
            </summary>
            <summary>
            Gets the <em>StepPlan</em> of this instance.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeggingInfo.Step">
            <summary>
            The <em>Step</em> data 
            </summary>
            <summary>
            Gets the <em>Step</em> of this instance. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeggingInfo.Key">
            <summary>
            Pegging 결과를 찾은 Key 값입니다.
            </summary>
            <summary>
            Gets the key to search the pegging result. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeggingInfo.PeggedQty">
            <summary>
            Gets the pegged quantities. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeggingInfo.#ctor(Mozart.SeePlan.DataModel.StepPlan,System.Double)">
            <summary>
            생성자입니다.
            </summary>
            <param name="plan">대상 StepPlan 값입니다.</param>
            <param name="peggedQty">Pegging 된 수량입니다.</param>
            <summary>
            Initializes a new instance of the <em>PeggingInfo</em> class with the specifed <em>StePlan</em> that represents the target of the foward pegging, and the pegged demand quantities.  
            </summary>
            <param name="plan">The specified <em>StepPlan</em>.</param>
            <param name="peggedQty">The pegged demand quantities from forward pegging.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.StepPlan">
            <summary>
            Step별 생산목표를 저장하는 클래스입니다.
            </summary>
            <summary>
            This is the class to save production target per Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlan.Step">
            <summary>StepPlan의 대상 Step 입니다.</summary>
            <summary>Target Step of StepPlan</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlan.Key">
            <summary>
            StepPlan의 StepPlanKey입니다.
            </summary>
            <summary>
            StepPlanKey of StepPlan. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlan.StepTargetList">
            <summary>
            StepPlan에 속한 StepTarget의 리스트입니다.
            </summary>
            <summary>
            StepTarget list belonging to StepPlan. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlan.#ctor(Mozart.SeePlan.DataModel.Step,System.Object)">
            <summary>
            생성자입니다.
            </summary>
            <param name="step">StepPlan의 Step입니다.</param>
            <param name="key">StepPlan의 StepPlanKey입니다.</param>
            <summary>
            Constructor 
            </summary>
            <param name="step">Step of StepPlan.</param>
            <param name="key">StepPlanKey of StepPlan.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlan.Add(Mozart.SeePlan.DataModel.StepTarget)">
            <summary>
            StepPlan에 StepTarget을 추가합니다.
            </summary>
            <param name="target">StepPlan 에 추가할 StepTarget 객체입니다.</param>
            <summary>
            Add StepTarget to StepPlan
            </summary>
            <param name="target">StepTarget object to add to StepPlan.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.StepPlanManager">
            <summary>
            Forward Pegging 을 위한 Step 별 Target 정보 관리 클래스입니다.
            Backward Pegging 수행시점에 생성됩니다.
            </summary>
            <summary>
            The class to manage Target information per Step for Forward Pegging. 
            This is created at the point Backward Pegging is performed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlanManager.Current">
            <summary>
            ServiceLocator에 등록된 StepPlanManager를 반환합니다.
            </summary>
            <summary>
            Returns the SteplPlanManager registered in ServiceLocator.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Mozart.SeePlan.DataModel.StepPlanManager.WaitPlans" -->
        <member name="P:Mozart.SeePlan.DataModel.StepPlanManager.CurrentLot">
            <summary>
            현재 PrePegging 처리 중인 작업물을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlanManager.RunPlans">
            <summary>
            StepPlanManager에 등록된 Run 상태의 StepPlan입니다.
            </summary>
            <value>DoubleDictionary의 Key 정보는 아래와 같습니다<br/>
            Step : Step 정보입니다.<br/>
            object : StepPlanKey 입니다.</value>
            <summary>
            StepPlan of Run state registered in StepPlanManager. .
            </summary>
            	<para>The Key information in DoubleDictionary is as follows. <br/>
            Step : Step information.<br/>
            object : StepPlanKey.</para>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepPlanManager.SortStepTargets">
            <summary>
            ForwardPegging을 수행할 때 StepTarget 목록을 정렬할지 여부를 가져오거나 설정합니다. 기본값은 true 입니다.
            </summary>
            <summary>
            <para>Gets or sets a value that specifies whether to sort the <em>StepTarget</em>s in the list when running <em>ForwardPegging</em>.</para>
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Initializes a new instance of the class <em>StepPlanManager</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.AddStepTarget(Mozart.SeePlan.DataModel.StepTarget)">
            <summary>
            StepTarget의 StepPlanKey, Step, 상태(Run 또는 Wait)에 해당하는 StepPlan을 찾아 StepTarget을 추가합니다.
            </summary>
            <param name="target">대상 StepTarget 입니다.</param>
            <summary>
            Include StepPlanKey of StepTarget, Step and StepPlan with Run or Wait state to StepTarget.
            </summary>
            <param name="target">Target StepTarget.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.Initialize">
            <summary>
            StepPlanManager를 초기화합니다. Entity>ForwardPeg>InitStepPlanManager Action이 실행됩니다.
            </summary>
            <summary>
            Initializes StepPlanManager. Executes Entity>ForwardPeg>InitStepPlanManager Action
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.Pegging(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean)">
            <summary>
            Forward Pegging을 실행합니다. 
            대상 작업물의 StepPlanKey, Step, 상태(Run 또는 Wait)에 해당하는 StepPlan을 찾고 
            StepPlan에 속한 StepTarget에서 가용 수량을 차감합니다.
            </summary>
            <param name="hb">Target entity.</param>
            <param name="isRun">작업물의 상태(Run 또는 Wait)입니다.</param>
            <summary>
            Runs Forward Pegging.  
            Searches for target entities StepPlanKey, Step, SetPlan of Run/Wait state
            and deducts the available quantities from StepTarget belonging to StepPlan. 
            </summary>
            <param name="hb">Target entity.</param>
            <param name="isRun">Entity state (Run or Wait)</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.ConfirmPegging(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean)">
            <summary>Forward Pegging 결과를 확정합니다.</summary>
            <param name="hb">Target entity.</param>
            <param name="clearForwardPegInfo">Forward Pegging 확정 후 Forward Pegging 정보를 제거여부 입니다.</param>
            <remarks>StepTarget의 잔여 수량을 차감합니다. clearForwardPegInfo = true 인 경우 LoadInfo의 PegInfoList의 요소를 모두 제거합니다.</remarks>
            <summary>Confirms Forward Pegging result.</summary>
            <param name="hb">Target entity.</param>
            <param name="clearForwardPegInfo">This determines whether to delete Forward Pegging information after confirming Forward Pegging.</param>
            <remarks>This deducts the remaining quantites of StepTarget. If clearForwardPegInfo = ture, all elements of PegInfoList in LoadInfo will be deleted.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.RollbackPegging(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Forward Pegging 결과를 취소합니다.
            StepTarget의 가용 수량이 복구됩니다.
            LoadInfo의 PegInfoList의 요소를 모두 제거합니다.
            사용자가 Entity>Route>PrePegging에서 실행한 작업은 복구되지 않습니다.
            </summary>
            <param name="hb">Target entity.</param>
            <summary>
            Cancels Foward Pegging result. 
            Restores StepTarget's available quantities. 
            Deletes all elements of PegInfoList of LoadInfo.
            The task Entity>Route>PrePegging executed by user does not recover. 
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.ClearForwardPegInfo(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>대상 작업물의 LoadInfo.PegInfoList의 요소를 모두 제거합니다.</summary>
            <param name="hb">Target entity.</param>
            <summary>Deletes all elements of LoadInfo.PegInfoList of target entity..</summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepPlanManager.GetStepPlan(Mozart.SeePlan.DataModel.Step,System.Object,System.Boolean)">
            <summary>
            주어진 조건에 맞는 StepPlan을 반환합니다. 조건에 맞는 StepPlan이 존재하지 않으면 null을 반환합니다.
            </summary>
            <param name="step">대상 Step입니다.</param>
            <param name="key">대상 StepPlanKey입니다.</param>
            <param name="isRun">대상 상태(Run 또는 Wait)입니다.</param>
            <returns>조건에 맞는 StepPlan입니다.</returns>
            <summary>
            Returns SetPlan meeting the given requirements. Null is retured if there is no matching condition.
            </summary>
            <param name="step">Target Step</param>
            <param name="key">Target StepPlanKey.</param>
            <param name="isRun">Target state (Run or Wait)</param>
            <returns>Returns the StepPlan satisfying the confitions.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.StepTarget">
            <summary>
            생산목표를 저장하는 클래스입니다. 
            Demand 관리 단위에 따라 Key 를 정의합니다.
            </summary>
            <summary>
            This is the class to save production target.
            The key is defined according Demand management unit.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.Key">
            <summary>StepTarget 의 StepPlanKey 입니다.</summary>
            <summary>StepPlanKey of StepTarget</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.Step">
            <summary>StepTarget 의 대상 Step 입니다.</summary>
            <summary>Step of StepTarget.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.AvailableQty">
            <summary>
            StepTarget의 가용 수량입니다.
            가용 수량은 Forward Pegging이 가능한 수량을 의미합니다.
            Pre Pegging 실행 시 가용 수량이 차감됩니다.
            </summary>
            <summary>
            Available quantity of StepTarget
            Available quantity in here means the available quantity for Forward Pegging.
            The quantity is deducted when Pre Pegging is executed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.CurrentQty">
            <summary>
            StepPlan의 잔여 수량압니다.
            Forward Pegging의 결과가 확정되면 잔여 수량이 차감됩니다.
            </summary>
            <summary>
            Available quantity of StepPlan.
            The quantity is deducted when Forward Pegging is confirmed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.DueDate">
            <summary>StepTarget의 DueDate 입니다.</summary>
            <summary>DueDate of StepTarget.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepTarget.IsRun">
            <summary>
            StepTarget의 상태(Run 또는 Wait)입니다.
            </summary>
            <summary>
            StepTarget state (Run or Wait)
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepTarget.#ctor(System.Object,Mozart.SeePlan.DataModel.Step,System.Double,System.DateTime,System.Boolean)">
            <summary>
            생성자입니다.
            </summary>
            <param name="key">StepPlanKey입니다.</param>
            <param name="step">Step입니다.</param>
            <param name="qty">가용/잔여 수량입니다.</param>
            <param name="dueDate">DueDate입니다.</param>
            <param name="isRun">상태(Run 또는 Wait)입니다.</param>
            <summary>
            Initializes a new instance of the <em>StepTarget</em> class with the key value of the step plan, specified step, target quantities, due date from the step to meet due date of the production and a value that indicates whether the WIP in the step is RNU state or not. 
            </summary>
            <param name="key">StepPlanKey.</param>
            <param name="step">The step information.</param>
            <param name="qty">Available/Remaining quantities.</param>
            <param name="dueDate">DueDate</param>
            <param name="isRun">State (Run or Wait).</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepTarget.Peg(Mozart.SeePlan.Simulation.ILot,System.Double)">
            <summary>
            작업물의 CurrentPlan에 Forward Pegging 정보를 기록합니다.
            </summary>
            <param name="lot">Target entity.</param>
            <param name="qty">Forward Pegging 된 수량입니다.</param>
            <returns></returns>
            <summary>
            Writes the Forward Pegging information to CurrentPlan of lot.
            </summary>
            <param name="lot">Target lot.</param>
            <param name="qty">Quantity that is Forward Pegged.</param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.WeightValue">
            <summary>
            WeightFactor에 대한 작업물의 점수를 나타내는 클래스입니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.WeightValue.Zero">
            <summary>
            값이 0인 점수를 나타냅니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.WeightValue.MinValue">
            <summary>
            점수가 계산되지 않았음을 나타냅니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.Factor">
            <summary>
            점수 계산 대상 WeightFactor를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.RawValue">
            <summary>
            WeightFactor의 가중치가 반영되지 않은 점수를 가져옵니다. 
            만약 Factor 속성이 설정되지 않은 상태 또는 가중치가 반영되지 않은 점수를 유추할 수 없는 상태인 경우 0을 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.Value">
            <summary>
            WeightFactor의 가중치가 반영된 점수를 가져옵니다. 
            만약 Factor 속성이 설정되지 않은 상태인 경우 0을 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.Description">
            <summary>
            점수를 얻게된 사유를 가져오거나 설정합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.IsMinValue">
            <summary>
            점수가 계산되지 않았는지 여부를 가져옵니다. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.IsZero">
            <summary>
            점수의 값이 0인지 여부를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightValue.Tag">
            <summary>
            Gets or sets user defined information.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightValue.#ctor(System.Double,System.String)">
            <summary>
            주어진 가중치가 반영된 점수와 사유를 사용하여 새로운 WeightValue를 생성합니다.
            </summary>
            <param name="value">점수의 값입니다.</param>
            <param name="description">점수를 얻게된 사유입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightValue.#ctor(Mozart.SeePlan.DataModel.WeightFactor,System.Double,System.String)">
            <summary>
            주어진 WeightFactor와 가중치가 반영되지 않은 점수 및 사유를 사용하여 새로운 WeightValue를 생성합니다.
            </summary>
            <param name="factor">점수 계산 대상 WeightFactor입니다.</param>
            <param name="rawValue">가중치가 반영되지 않은 점수입니다.</param>
            <param name="description">점수를 얻게된 사유입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.IDataGroup`1">
            <summary>
            키로 요소를 관리하는 컬렉션을 나타내는 인터페이스입니다.
            </summary>
            <typeparam name="T">요소의 형식입니다.</typeparam>
            <summary>
            Provides the collections to manage elements by key values. 
            </summary>
            <typeparam name="T">The type of the element in the collection. </typeparam>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.IDataGroup`1.Name">
            <summary>
            컬렉션의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the collection. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.IDataGroup`1.Find(System.Object[])">
            <summary>
            지정된 키를 갖는 요소의 목록을 반환합니다.
            </summary>
            <param name="keys">키의 배열입니다.</param>
            <returns>지정된 키를 갖는 요소의 목록입니다.</returns>
            <summary>
            Returns the list of elements in the collection by the values speicified in the object array. 
            </summary>
            <param name="keys">The array of the key values. </param>
            <returns>The list of elements that matches the key values specified.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.IDataGroup`1.UniqueValues">
            <summary>
            고유의 키를 갖는 요소의 목록을 반환합니다.
            </summary>
            <returns>고유한 키를 갖는 요소의 목록입니다.</returns>
            <summary>
            Returns the list of elements in the collection of the specified unique key values.
            </summary>
            <returns>The list of elements of the specified unique key values.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.IDataGroup`1.Find(`0)">
            <summary>
            지정된 요소와 동일한 키를 갖는 요소의 목록을 반환합니다.
            </summary>
            <param name="entity">검색할 키를 갖고 있는 요소입니다.</param>
            <returns>지정된 요소와 동일한 키를 갖는 요소의 목록입니다.</returns>
            <summary>
            Returns the list of elements in the collection that matches the key value of the specified element. 
            </summary>
            <param name="entity">The element that has the key value to seek.</param>
            <returns>The list of elements that matches the key value of the specified element.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.SeeplanConfiguration">
            <summary>
            Seeplan 라이브러리의 Configuration 데이터 저장 클래스입니다.
            </summary>
            <summary>
            This is a save class to save Configuration data of SeePlan Libarary.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.SeeplanConfiguration.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.EnableThreadedWeightEvaluation">
            <summary>
            다중 스레드를 사용해서 동시에 여러 작업물의 Factor 점수를 계산할지 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the boolean value to determine whether to use multi-threading to calculate factor weight scores for multiple entities simultaneously.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.EnableThreadedWorkAgentRun">
            <summary>
            다중 스레드를 사용해서 동시에 여러 JobChangeAgent를 실행할지 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the boolean value to determine whether to use multi-threading to use multiple <em>JobChangeAgent</em> simultaneously. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.LotUnitSize">
            <summary>
            작업물 lot 을 구성하는 기본 Unit size 입니다.
            </summary>
            <summary>
            Default Unit size comprising lot. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Mozart.SeePlan.DataModel.SeeplanConfiguration.SetupTimeMiniutes" -->
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.TransferTimeMinutes">
            <summary>
            기본 공정간 이동 시간입니다. (분단위 데이터입니다.)
            </summary>
            <summary>
            Default movement time among factories. (minutes)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.StepTatMinutes">
            <summary>
            기본 Step TAT 입니다. (분단위 데이터입니다.)
            </summary>
            <summary>
            Default Step TAT. (minutes)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.MaxLotPlanListCount">
            <summary>
            Lot PlanList가 가지고 있을 최대 길이입니다.
            </summary>
            <summary>
            The maximum length of Lot PlanList.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.BucketCycleTimeMinutes">
            <summary>
            기본 Bucket Cycle 시간입니다. (분단위 데이터입니다.)
            </summary>
            <summary>
            Default Bucket Cycle time (minutes)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.MaxPeggingCount">
            <summary>
            최대 Pegging 횟수입니다.
            </summary>
            <summary>
            Maximum Pegging count. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.SeeplanConfiguration.Instance">
            <summary>
            SeePlanConfiguration 에 대한 static 접근자입니다.
            </summary>
            <summary>
            Static accessor of SeePlanConfiguration
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Part">
            <summary>제조업의 부품 같은 작업을 그룹화한 모델, 단위작업(Step)를 가지고 있고 단위작업, 단위작업의 Route를 유지관리하는 클래스입니다.</summary>
            <summary>This the class to manange and maintain route of unit work, unit work with Step, model groups of parts used in manufacture industry.</summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.Part._parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.Part._id">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.Part._steps">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>Part</em> class.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.#ctor(System.String)">
            <summary>
            생성자입니다. 
            </summary>
            <overloads>부품 ID 를 지정하여 생성합니다.</overloads>
            <param name="id">부품 ID 입니다.</param>
            <summary>
            Initializes a new instance of <em>Part</em> class with the specified string containging PartID. 
            </summary>
            <overloads>Designate and create Part ID.</overloads>
            <param name="id">Part ID variable.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.#ctor(Mozart.SeePlan.DataModel.Route,System.String)">
            <summary>
            생성자입니다.
            </summary>
            <overloads>부품 ID 와 기본 Route 정보를 이용하여 부품 정보를 생성합니다.</overloads>
            <param name="route">부품의 기본 Route 입니다.</param>
            <param name="id">부품 ID 입니다.</param>
            <summary>
            Initializes a new instance of <em>Part</em> class with specified route information of the part within <em>Route</em>, and with the specified string containing PartID. 
            </summary>
            <overloads>Generate Part information using the default Route information and Part ID</overloads>
            <param name="route">Default Route of the Part.</param>
            <param name="id">Part ID variable.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.Route">
            <summary>
            부품 가공을 위한 Route(Process) 입니다.
            </summary>
            <summary>
            Route(Process) to process Parts. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.RouteID">
            <summary>
            Route(Process)에 대한 key 문자열입니다.
            </summary>
            <summary>
            Key string of Route(Process). 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.ActivityID">
            <summary>
            부품 id 입니다. 
            </summary>
            <summary>
            Part ID  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.Steps">
            <summary>
            부품생산 flow 의 모든 step 을 반환합니다.
            </summary>
            <summary>
            Returns all Steps of Part production flow. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.IsLeafActivity">
            <summary>
            제품 구조상 현재 부품의 후속 부품이 있는지 여부입니다.        
            </summary>
            <summary>
            Determines if there are followed part of the current part considering the product assembly structure.        
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Part.IsLastActivity">
            <summary>
            대상 부품이 마지막 부품인지 여부입니다.
            </summary>
            <summary>
            Determines whether it is the last part of the product. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetLeafSteps">
            <summary>
            등록된 Step(공정) 중 마지막 공정의 enumerable 입니다.
            </summary>
            <returns>마지막 Step 컬렉션입니다.</returns>
            <summary>
            The enumeralbe of the last Step of the registered Step. 
            </summary>
            <returns>Collection of last Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetPrevSteps">
            <summary>
            직전 선행공정 리스트를 반환합니다.
            </summary>
            <returns>선행공정 컬렉션입니다.</returns>
            <summary>
            Returns the nearest preceding Steps. 
            </summary>
            <returns>Collection of preceding Steps.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetRoutPrevSteps">
            <summary>
            Rout 타입의 선행 공정의 목록을 반환합니다.
            </summary>
            <returns>Rout 타입의 선행 공정의 목록입니다.</returns>
            <summary>
            Returns the list of the preceding Steps of Rout type.
            </summary>
            <returns>The list of preceding Steps of the Rout type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetDefaultPrevStep">
            <summary>
            이전 공정을 반환합니다.
            </summary>
            <returns>이전 공정입니다.</returns>
            <summary>
            Returns the previous Step.
            </summary>
            <returns>Previous Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetDefaultNextStep">
            <summary>
            다음 공정을 반환합니다.
            </summary>
            <returns>다음 공정입니다.</returns>
            <summary>
            Returns the next Step.
            </summary>
            <returns>Next Step</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetNextSteps">
            <summary>
            후행 공정의 목록을 반환합니다.
            </summary>
            <returns>후행 공정의 목록입니다.</returns>
            <summary>
            Returns the list of following Steps.
            </summary>
            <returns>The list of following Steps.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetFirstSteps">
            <summary>
            부품내의 Leaf Step(선행 공정이 없는 공정) 목록을 반환합니다.
            </summary>
            <returns>부품내의 Leaf Step 목록입니다.</returns>
            <summary>
            Returns the list of Leaf Step(Steps with no preceding Step) within the part. 
            </summary>
            <returns>The list of Leaf Steps within the part.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Part.GetTranferTime(Mozart.SeePlan.DataModel.Step)">
            <summary>
            toTask 까지의 이동시간을 반환합니다.
            </summary>
            <param name="toStep">이동 대상 Step 입니다.</param>
            <returns>이동시간간격입니다.</returns>
            <summary>
            Returnes the movement time to toTask.
            </summary>
            <param name="toStep">Target moving Step.</param>
            <returns>Returns the elapsed movement time.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PartCollection">
            <summary>
            Activity 형식의 강력한 형식 ICollection을 모델링합니다.
            </summary>
            <summary>
            Models a strongly-typed ICollection of Activity type. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.#ctor(Mozart.SeePlan.DataModel.Route)">
            <summary>
            주어진 Route를 소유자로 하는 새로운 PartCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <summary>
            Initializes a new instance of the <em>PartCollection</em> class with the specified <em>Route</em> as the owner. 
            </summary>
            <param name="owner">The owner of the object to be created.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.#ctor(Mozart.SeePlan.DataModel.Route,System.Collections.Generic.IEnumerable{Mozart.SeePlan.DataModel.Part})">
            <summary>
            주어진 Route를 소유자로 하고, 지정된 컬렉션에서 복사한 Part를 포함하는 새로운 PartCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="values">요소가 새 목록에 복사되는 컬렉션입니다.</param>
            <summary>
            Initializes a new instance of the <em>PartCollection</em> class with the specified <em>Route</em> as the owner, containing <em>Part</em> copied from the specified <em>Part</em> collections. 
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="values">The collection of <em>Part</em> elements to copy to <em>PartCollection</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.#ctor(Mozart.SeePlan.DataModel.Route,System.Int32)">
            <summary>
            주어진 Route를 소유자로 하고, 비어 있는 상태에서 지정한 초기 용량을 가지는 새로운 PartCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="capacity">새 목록에 처음 저장할 수 있는 Part의 수입니다.</param>
            <summary>
            Initializes a new instance of the <em>PartCollection</em> class with the specified <em>Route</em> as the owner, as an empty class set with specified initial capacity.  
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="capacity">The initial number of Part elements that can be stored to <em>PartCollections</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.Enqueue(Mozart.SeePlan.DataModel.Part)">
            <summary>
            주어진 Part를 컬렉션의 끝 부분에 추가합니다.
            </summary>
            <param name="value">컬렉션의 끝에 추가할 개체입니다. 참조 형식에 대해 값은 null이 될 수 있습니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.Dequeue">
            <summary>
            컬렉션에서 첫 번째 요소를 제거 후 반환합니다.
            </summary>
            <returns>컬렉션에서 제거된 첫 번째 요소입니다. 컬렉션에 요소가 없는 경우 null이 될 수 있습니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PartCollection.Peek">
            <summary>
            컬렉션의 첫 번째 요소를 반환합니다.
            </summary>
            <returns>컬렉션의 첫 번째 요소입니다. 컬렉션에 요소가 없는 경우 null이 될 수 있습니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.AreaInfo">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.CollectionBase`1">
            <summary>
            강력한 형식의 컬렉션에 대한 기본 클래스를 제공합니다.
            </summary>
            <typeparam name="T">컬렉션 구성 요소의 형식입니다.</typeparam>
            <summary>
            Provides the basic class for strongly-typed collections. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.IndexOf(`0)">
            <summary>
            지정된 개체를 검색하고, 전체 컬렉션에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다.</param>
            <returns>전체 컬렉션에 item이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
            <summary>
            Reports the zero-based index of the first occurrence of the specified object in this instance(<em>CollectionBase&lt;T&gt;</em>). 
            </summary>
            <param name="item">The object to seek.</param>
            <returns>Returns the zero-based index position of <em>item</em> if that object is found, or -1 if it is not.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            컬렉션의 지정된 인덱스에 요소를 삽입합니다.
            </summary>
            <param name="index">item을 삽입해야 하는 0부터 시작하는 인덱스입니다.</param>
            <param name="item">삽입할 개체입니다.</param>
            <summary>
            Inserts an item to the <em>CollectionBase&lt;T&gt;</em> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <em>item</em> should be inserted.</param>
            <param name="item">The object to insert into the <em>CollectionBase&lt;T&gt;</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            컬렉션의 지정한 인덱스에서 요소를 제거합니다.
            </summary>
            <param name="index">제거할 요소의 0부터 시작하는 인덱스입니다.</param>
            <summary>
            Removes the <em>CollectionBase&lt;T&gt;</em> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.Item(System.Int32)">
            <summary>
            지정한 인덱스에 있는 요소를 가져오거나 설정합니다.
            </summary>
            <param name="index">가져오거나 설정할 요소의 0부터 시작하는 인덱스입니다.</param>
            <returns>지정한 인덱스의 요소입니다.</returns>
            <summary>
            Gets or sets the <em>CollectionBase&lt;T&gt;</em> item from or to the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get or set.</param>
            <returns>Returns the item of the specified index position.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Add(`0)">
            <summary>
            개체를 컬렉션의 끝 부분에 추가합니다.
            </summary>
            <param name="item">컬렉션의 끝에 추가할 개체입니다.</param>
            <summary>
            Appends an item to the end of the <em>CollectionBase&lt;T&gt;</em> list.
            </summary>
            <param name="item">The object to append to the end of the <em>CollectionBase&lt;T&gt;</em> list.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Clear">
            <summary>
            컬렉션에서 요소를 모두 제거합니다.
            </summary>
            <summary>
            Removes all items from the <em>CollectionBase&lt;T&gt;.</em>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Contains(`0)">
            <summary>
            요소가 컬렉션에 있는지 여부를 확인합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다. 참조 형식에 대해 값은 null이 될 수 있습니다.</param>
            <returns>item이 컬렉션에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
            <summary>
            Determines whether the <em>CollectionBase&lt;T&gt;</em> contains a specific value. The value can be null for reference type.
            </summary>
            <param name="item">The object to locate in the <em>CollectionBase&lt;T&gt;</em>. </param>
            <returns><em>true</em> if <em>item</em> is found in the <em>CollectionBase&lt;T&gt;</em>; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            대상 배열의 지정된 인덱스부터 시작하여 전체 컬렉션을 호환되는 1차원 배열에 복사합니다.
            </summary>
            <param name="array">컬렉션에서 복사한 요소의 대상인 일차원 System.Array입니다.System.Array의 인덱스는 0부터 시작해야 합니다.</param>
            <param name="arrayIndex">array에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
            <summary>
            Copies the elements of the <em>CollectionBase&lt;T&gt;</em> to an array, starting at a particular array index.
            </summary>
            <param name="array">
                <para>The one-dimensional System.Array that is the destination of the elements copied from <em>CollectionBase&lt;T&gt;</em>.</para>
                <para>The System.Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">A 32-bit integer that represents the indx in <em>array</em> at which copying beings.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.Count">
            <summary>
            컬렉션에 실제로 포함된 요소의 수를 가져옵니다.
            </summary>
            
            <summary>
            Gets the number of elements in the <em>CollectionBase&lt;T&gt;</em>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.IsReadOnly">
            <summary>
            컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.
            </summary>
            <summary>
            Gets a value indicating whether the <em>CollectionBase&lt;T&gt;</em> is read-only.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Remove(`0)">
            <summary>
            컬렉션에서 맨 처음 나타나는 특정 개체를 제거합니다.
            </summary>
            <param name="item">컬렉션에서 제거할 개체입니다.</param>
            <returns>item이 성공적으로 제거되면 true이고, 그렇지 않으면 false입니다.이 메서드는 item이 컬렉션에 없는 경우 ArgumentException이 발생합니다.</returns>
            <summary>
            Removes the first occurence of a specific object from <em>CollectionBase&lt;T&gt;</em>.
            </summary>
            <param name="item">The object to remove from the <em>CollectionBase&lt;T&gt;</em>.</param>
            <returns>
                <para><em>true</em> if <em>item</em> was successfully removed from the <em>CollectionBase&lt;T&gt;</em>; otherwise, <em>false</em>.</para>
                <para>This method throws <em>ArgumentException</em> if <em>item</em> was not found in the <em>CollectionBase&lt;T&gt;</em></para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.GetEnumerator">
            <summary>
            컬렉션을 반복하는 열거자를 반환합니다.
            </summary>
            <returns>컬렉션을 반복하는 열거자입니다.</returns>
            <summary>
            Returns a enumerator the iterates through the <em>CollectionBase&lt;T&gt;</em>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <em>CollectionBase&lt;T&gt;</em>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.First">
            <summary>
            컬렉션의 첫 번째 요소를 반환합니다.
            </summary>
            <summary>
            Returns the first item of the list.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.Last">
            <summary>
            컬렉션의 마지막 요소를 반환합니다.
            </summary>
            <summary>
            Returns the last item of the list. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.CollectionBase`1.Capacity">
            <summary>
            크기를 조정하지 않고 내부 데이터 구조가 보유할 수 있는 전체 요소 수를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            지정된 컬렉션의 요소를 컬렉션의 끝에 추가합니다.
            </summary>
            <param name="collection">요소가 컬렉션의 끝에 추가되어야 하는 컬렉션입니다. 컬렉션 자체가 null일 수는 없지만 T 형식이 참조 형식인 경우 null인 요소를 포함할 수 있습니다.</param>
            <summary>
            Adds the elements of the specified collection to the end of the <em>CollectionBase&lt;T&gt;</em>.
            </summary>
            <param name="collection">
                <para>The collection whose elements should be added to the end of the <em>CollectionBase&lt;T&gt;</em>.</para>
                <para>The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</para>
            </param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.AsReadOnly">
            <summary>
            현재 컬렉션에 대한 읽기 전용 컬렉션 래퍼를 반환합니다.
            </summary>
            <returns></returns>
            <summary>
            Returns a read-only <em>CollectionBase&lt;T&gt;</em> wrapper for the current collection. 
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.BinarySearch(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.ConvertAll``1(System.Converter{`0,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.Exists(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.Find(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindAll(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindIndex(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindIndex(System.Int32,System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindLast(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindLastIndex(System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindLastIndex(System.Int32,System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.ForEach(System.Action{`0})" -->
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.GetRange(System.Int32,System.Int32)">
            <summary>
            소스 컬렉션에 있는 일련의 요소에 대한 단순 복사본을 만듭니다.
            </summary>
            <param name="index">범위가 시작되는 컬렉션 0부터 시작하는 인덱스입니다.</param>
            <param name="count">범위의 요소 수입니다.</param>
            <returns>소스 컬렉션에 있는 일련의 요소에 대한 단순 복사본입니다.</returns>
            <summary>
            Creates a shallow copy of a range of elements in the source <em>CollectionBase&lt;T&gt;</em>.
            </summary>
            <param name="index">The zero-based <em>CollectionBase&lt;T&gt;</em> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <em>CollectionBase&lt;T&gt;</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.IndexOf(`0,System.Int32)">
            <summary>
            지정된 개체를 검색하고, 지정된 인덱스부터 마지막 요소까지 포함하는 컬렉션의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다.참조 형식에 대해 값은 null이 될 수 있습니다.</param>
            <param name="index">검색 시작 0부터 시작하는 인덱스입니다.0은 빈 목록에서 유효합니다.</param>
            <returns>index부터 마지막 요소까지 포함하는 컬렉션의 요소 범위에 item이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the <em>CollectionBase&lt;T&gt;</em>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that extends from <em>item</em> to the last element, if found; otherwise -1.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 컬렉션의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다.참조 형식에 대해 값은 null이 될 수 있습니다.</param>
            <param name="index">검색 시작 0부터 시작하는 인덱스입니다.0은 빈 목록에서 유효합니다.</param>
            <param name="count">검색할 영역에 있는 요소 수입니다.</param>
            <returns>index에서 시작하여 count개의 요소를 포함하는 컬렉션의 요소 범위에 item이 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the <em>CollectionBase&lt;T&gt;</em>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that starts at <em>item</em> and contains <em>count</em> number of elements, if found; otherwise -1.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            지정된 컬렉션의 요소를 컬렉션의 지정된 인덱스에 삽입합니다.
            </summary>
            <param name="index">요소를 삽입해야 하는 0부터 시작하는 인덱스입니다.</param>
            <param name="collection">요소가 컬렉션의 지정된 인덱스에 삽입되어야 하는 컬렉션입니다.</param>
            <summary>
            Inserts the elements of a collection into the <em>CollectionBase&lt;T&gt;</em> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">
                <para>The collection whose elements should be inserted into the <em>CollectionBase&lt;T&gt;</em>.</para>
                <para>The collection itself cannot be null, but it can contain elements that are null, if type <em>T</em> is a reference type.</para>
            </param>
            <exception cref="T:System.ArgumentNullException"><em>collection</em> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><em>index</em> is less than 0.</para>
                <para>-or-</para>
                <para><em>index</em> is greater than System.Collections.Generic.List&lt;T&gt;.Count.</para>
            </exception>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.EnsureCapacity(System.Int32)">
            <summary>
            지정된 수의 요소를 보유할 수 있도록 컬렉션의 크기를 조정합니다.
            </summary>
            <param name="min">컬렉션이 보유해야하는 요수의 수입니다.</param>
            <summary>
            Ensures that the capacity of this instance of <em>CollectionBase&lt;T&gt;</em> is at least the specified value. 
            </summary>
            <param name="min">The minimum capacity to ensure.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.LastIndexOf(`0)" -->
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            지정된 개체를 검색하고, 첫 번째 요소부터 지정된 인덱스까지 포함하는 컬렉션의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다.참조 형식에 대해 값은 null이 될 수 있습니다.</param>
            <param name="index">역방향 검색 시작 0부터 시작하는 인덱스입니다.</param>
            <returns>첫 번째 요소부터 index까지 포함하는 컬렉션의 요소 범위에 item이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the <em>CollectionBase&lt;T&gt;</em>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of <em>item</em> within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that extends from the first element to <em>index</em>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 컬렉션의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.
            </summary>
            <param name="item">컬렉션에서 찾을 개체입니다.참조 형식에 대해 값은 null이 될 수 있습니다.</param>
            <param name="index">역방향 검색 시작 0부터 시작하는 인덱스입니다.</param>
            <param name="count">count개의 요소를 포함하고 index에서 끝나는 컬렉션의 요소 범위에 item이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</param>
            <returns></returns>
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the <em>CollectionBase&lt;T&gt;</em>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <em>item</em>, within the range of elements in the <em>CollectionBase&lt;T&gt;</em> that contains <em>count</em> number of elements and ends at <em>index</em>, if found; otherwise, -1.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.RemoveAll(System.Predicate{`0})" -->
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            컬렉션의 지정한 인덱스에서 지정된 만큼의 요소를 제거합니다.
            </summary>
            <param name="index">제거할 요소의 0부터 시작하는 인덱스입니다.</param>
            <param name="count">제거할 요소의 수입니다.</param>
            <summary>
            Removes a range of elements from the <em>CollectionBase&lt;T&gt;</em>. 
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">Returns the number fo the elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><em>index</em> is less than 0</para>
            <para>-or-</para>
            <para><em>count</em> is less than 0.</para>
            </exception>
            <exception cref="T:System.ArgumentException"><em>index</em> and <em>count</em> do not denote a valid range of elements in the <em>CollectionBase&lt;T&gt;</em>.</exception>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Reverse">
            <summary>
            전체 컬렉션에서 요소의 순서를 반대로 바꿉니다.
            </summary>
            <summary>
            Reverses the order of the elements in the entire <em>CollectionBase&lt;T&gt;</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Reverse(System.Int32,System.Int32)">
            <summary>
            지정된 범위에서 요소의 순서를 반대로 바꿉니다.
            </summary>
            <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
            <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.Sort">
            <summary>
            기본 비교자를 사용하여 전체 컬렉션의 요소를 정렬합니다.
            </summary>
            <summary>
            Sorts the elements in the entire <em>CollectionBase&lt;T&gt;</em> using the default comparer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.Sort(System.Comparison{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.Sort(System.Collections.Generic.IComparer{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" -->
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.ToArray">
            <summary>
            컬렉션의 요소를 새 배열에 복사합니다.
            </summary>
            <returns></returns>
            <summary>
            Copies the elements of the <em><em>CollectionBase&lt;T&gt;</em></em>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.CollectionBase`1.TrimExcess">
            <summary>
            컬렉션에 있는 요소의 실제 수가 임계값보다 작은 경우 용량을 요소 수로 설정합니다.
            </summary>
            <summary>
            Sets the capacity to the actual number of elements in the <em>CollectionBase&lt;T&gt;</em>, if that number is less than a threshold value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.DataModel.CollectionBase`1.TrueForAll(System.Predicate{`0})" -->
        <member name="T:Mozart.SeePlan.DataModel.DataObject">
            <summary>
            동적 속성을 관리하는 개체의 클래스입니다.
            </summary>
            <summary>
            The class of objects to manage dynamic properties. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.DataObject.Item(Mozart.SeePlan.DataModel.DynamicProperty)">
            <summary>
            지정된 동적 속성의 값을 가져오거나 설정합니다.
            </summary>
            <param name="key">대상 동적 속성 정보입니다.</param>
            <returns>지정된 동적 속성의 값입니다.</returns>
            <summary>
            Gets or sets the value of the <em>DynamicProperty</em>. 
            </summary>
            <param name="key">대상 동적 속성 정보입니다.</param>
            <returns>지정된 동적 속성의 값입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.DataObject.GetProperty``1(Mozart.SeePlan.DataModel.DynamicProperty)">
            <summary>
            입력된 동적 속성의 값을 가져옵니다.
            </summary>
            <typeparam name="T">동적 속성 값의 형식입니다.</typeparam>
            <param name="key">대상 동적 속성 정보입니다.</param>
            <returns>지정된 동적 속성의 값입니다. 해당하는 값이 설정되어 있지 않은 경우 기본값을 반환합니다.</returns>
            <summary>
            Searches for the value of the dynamic property with the specified <em>DynamicProperty</em>. 
            </summary>
            <typeparam name="T">The type of the dynamic property value.</typeparam>
            <param name="key">The <em>DynamicProperty</em> to use as the key to get the dynamic propety.</param>
            <returns>Returns an object representing the dynamic property with the specified <em>key</em>, if found; otherwise, <em>default</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.DataObject.ChangeProperty``1(Mozart.SeePlan.DataModel.DynamicProperty,System.Func{``0,``0})">
            <summary>
            지정된 동적 속성의 값을 정해진 함수를 사용해서 변경하고, 그 값을 반환합니다.
            </summary>
            <typeparam name="T">동적 속성 값의 형식입니다.</typeparam>
            <param name="key">대상 동적 속성 정보입니다.</param>
            <param name="func">지정된 동적 속성의 값을 변경하는 메서드입니다.</param>
            <returns>변경 완료된 지정된 동적 속성의 값입니다.</returns>
            <summary>
            Changes the value of the dynamic property with the conditions defined by the specified method.
            </summary>
            <typeparam name="T">The type of the dynamic property value.</typeparam>
            <param name="key">The <em>DynamicProperty</em> to use as the key to get the dynamic propety.</param>
            <param name="func">The <em>System.Func&lt;in T,out TResult&gt;</em> delegate that encapsulates the method to change the dynamic property.</param>
            <returns>Returns the changed value of the dynamic property of the specified <em>key</em>, according to the methods in <em>func</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.DataObject.SetProperty(Mozart.SeePlan.DataModel.DynamicProperty,System.Object)">
            <summary>
            지정된 동적 속성의 값을 설정합니다.
            </summary>
            <param name="key">대상 동적 속성 정보입니다.</param>
            <param name="value">설정할 속성 값입니다.</param>
            <summary>
            Sets the value of the dynamic property with the specified object. 
            </summary>
            <param name="key">The <em>DynamicProperty</em> to use as the key to get the dynamic property. </param>
            <param name="value">The object to set as the value of the specified dynamic property.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.DynamicProperty">
            <summary>
            동적 속성 정의를 위한 모델
            </summary>
            <summary>
            Model to define dynamic property.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.DynamicPropertyCollection">
            <summary>
            키의 해시 코드에 따라 구성되는 키/값 쌍의 DynamicProperty 컬렉션을 나타냅니다.
            </summary>
            <summary>
            This shows the DynamicProperty of key/valu pairs composed according to Hash Code of the key. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.FailureInfo">
            <summary>
            고장, 수리 정보 관리 (MTTR, MTTF) 데이터 클래스입니다.
            </summary>
            <summary>
            This is the data class for Failure and Repair information management. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.FailureInfo.Mttr">
            <summary>
            MTTR : Mean Time To Repair, 평균 수리 시간 입니다.
            </summary>
            <summary>
            MTTR : Mean Time To Repair, average repair time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.FailureInfo.Mttf">
            <summary>
            MTTF : Mean Time To Failure, 평균 고장 시간 입니다.
            </summary>
            <summary>
            MTTF : Mean Time To Failure, average failure time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.FailureInfo.LastRepair">
            <summary>
            마지막 수리 시각입니다.
            </summary>
            <summary>
            Last repair time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.FailureInfo.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            생성자입니다.
            </summary>
            <param name="mttr">MTTR(Mean Time To Repair, 평균 수리 시간) 입니다.</param>
            <param name="mttf">MTTF(Mean Time To Failure, 평균 고장 시간) 입니다.</param>
            <param name="lastRepair">장비의 마지막 수리 시각입니다.</param>
            <summary>
            Consturctor.
            </summary>
            <param name="mttr">MTTR(Mean Time To Repair, average repair time).</param>
            <param name="mttf">MTTF(Mean Time To Failure, average failure time).</param>
            <param name="lastRepair">Last repair time of equipment.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.FailureSchedule">
            <summary>
            고장, 수리 스케줄 관리 (MTTR, MTTF) 클래스입니다.
            </summary>
            <summary>
            MTTR, MTTF schedule manangement class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.FailureSchedule.#ctor(System.DateTime,System.Int32)">
            <summary>
            생성자입니다.
            </summary>
            <param name="eventTime">Failure 발생시각 입니다.</param>
            <param name="stime">Failure 시간(down time)입니다. 단위는 초단위입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="eventTime">The time when Failure occured.</param>
            <param name="stime">Failure downtime. The time is in seconds.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.FailureSchedule.Generate(System.DateTime,System.DateTime,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>고장 Schedule 리스트를 생성합니다.</summary>
            <param name="startTime">고장정보 생성 구간 시작시각 입니다.</param>
            <param name="endTime">고장정보 생성 종료 시각 입니다.</param>
            <param name="mttrEx">평균 수리 시간입니다.</param>
            <param name="mttfEx">평균 고장 간격입니다.</param>
            <param name="lastRepairTime">마지막 수리 시각입니다.</param>
            <param name="minFenceTime">고장정보 생성 시작시각 설정을 위한 최소 시각 입니다.</param>
            <remarks>starttime 과 endtime 구간내에서 mttr, mttf 정보를 사용하여 반복적으로 고장 스케줄정보(FailureSchedule) 를 생성합니다. lastRepairTime 이 DateTime.MinValue 이 아니고 minFenceTime 보다 클경우
            lastRepairTime 부터 고장정보를 생성하며, 그렇지 않은 경우 starttime 부터 생성합니다.</remarks>
            <returns></returns>
            <summary>Generate failure schedule.</summary>
            <param name="startTime">The start time of failure information generation.</param>
            <param name="endTime">The time completed to create failure information.</param>
            <param name="mttrEx">Average repair time (MTTR).</param>
            <param name="mttfEx">Averate failure time (MTTE).</param>
            <param name="lastRepairTime">Last repair time.</param>
            <param name="minFenceTime">The minimum time to configure failure information generation start time.</param>
            <remarks>The Failure Schedule is created repeatedly between starttime and endtime using MTTR and MTTF information.
            If lastRepairTime is not DateTime.MinValue and larger than minFenceTime, Failure Information is created through lastRepariTime. If not, the information will be created through starttime. </remarks>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ProcTimeInfo">
            <summary>
            공정 작업시간에 대한 정보입니다.
            </summary>
            <summary>
            This is the information about Step processing time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ProcTimeInfo.FlowTime">
            <summary>
            Flow Time 데이터입니다.
            </summary>
            <summary>
            Flow Time data
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ProcTimeInfo.TactTime">
            <summary>
            Tact Time 데이터입니다.
            </summary>
            <summary>
            Tact Time data
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ProcTimeInfo.LoadingTime">
            <summary>
            Loading time. This value is only valid for parallel chamber process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ProcTimeInfo.UnloadingTime">
            <summary>
            Unloading time. This value is only valid for parallel chamber process.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ProcTimeInfo.Zero">
            <summary>
            기본 ProcTime 데이터입니다. 기본데이터는 Zero 입니다.
            </summary>
            <summary>
            Default ProcTime data. The default data is Zero.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.RoutingType">
            <summary>
            후행 진로 연결의 논리 연산 유형입니다.
            사용되는 곳이 없습니다.
            </summary>
            <summary>
            The logical operater type of the trailing node connection. 
            No longer in use. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Linkable">
            <summary>Routing Node 를 표현하는 기본 객체클래스입니다.</summary>
            <summary>This is base object class to express Routing Nodes.</summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Linkable.#ctor">
            <summary>생성자입니다.</summary>
            <summary>Initializes a new instance of the <em>Linkable</em> class.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Linkable.RoutType">
            <summary>
            후행 연결의 Routing Type (for Alternative Routing)
            사용되는 곳이 없습니다.
            </summary>
            <summary>
            Routing Type (for Alternative Routing)
            No longer in use. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Linkable.HasJoins">
            <summary>선행 Node 가 있는지 여부를 판별합니다</summary>
            <value>선행 Node 가 있는 경우 true, 그렇지 않은 경우 false 입니다.</value>
            <summary>Determines whether preceding Node exists. </summary>
            <value>If preceding Node exists, return true, or else, return false.</value>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Linkable.Joins">
            <summary>선행 Node 와의 연결 정보(Transition) 집합입니다.</summary>
            <summary>This is the set of information linked(Transition) to preceding Nodes.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Linkable.HasSplits">
            <summary>후행 Node 가 있는 여부를 판별합니다.</summary>
            <value>후행 Node 가 있는 경우 true, 그렇지 않은 경우 false 입니다.</value>
            <summary>Determines whether followed(successor) Node exists. </summary>
            <value>If followed Node exists, return true, or else, return false.</value>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Linkable.Splits">
            <summary>후행 Node 와의 연결정보(transition) 집합입니다.</summary>
            <summary>This is the set of information linked(Transition) to followed Nodes.</summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Linkable.LinkTo(Mozart.SeePlan.DataModel.Linkable)">
            <summary>특정 Node(Linkable 객체)를 후행 Node 로 설정합니다.</summary>
            <param name="to">후행 Node 객체입니다.</param>
            <returns>선-후행 Node 의 연결 객체를 반환합니다.</returns>
            <summary>Set a specific Node (Linkable object) as followed Node.</summary>
            <param name="to">Followed Node object.</param>
            <returns>Return the linked preceded-followed Node object. </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Linkable.LinkFrom(Mozart.SeePlan.DataModel.Linkable)">
            <summary>특정 Node(Linkable 객체)를 선행 Node 로 설정합니다.</summary>
            <param name="from">선행 Node 객체입니다.</param>
            <returns>선-후행 Node 의 연결정보를 반환합니다.</returns>
            <summary>Set a specific Node (Linkable object) as preceding Node.</summary>
            <param name="from">Preceding Node object.</param>
            <returns>Return the linked preceding-followed Node object. </returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.LoadInfo">
            <summary>
            대상공정에 대한 작업정보(할당된 자원, 작업시작시간, 작업종료시간, 작업시간 정보관리) 추상 클래스입니다.
            </summary>
            <summary>
            The abstract class of target Step's process information (loaded resource, processing start time, processing end time, processing time information management). 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.LoadInfo.#ctor(Mozart.SeePlan.DataModel.Step)">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
            <param name="step"></param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.Step">
            <summary>
            작업 공정입니다.
            </summary>
            <summary>
            Process Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.StartTime">
            <summary>
            작업시작시간입니다.
            </summary>
            <summary>
            Process start time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.EndTime">
            <summary>
            작업종료시간입니다.
            </summary>
            <summary>
            Process end time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.WorkTime">
            <summary>
            작업시간(Processing Time)입니다. 
            </summary>
            <summary>
            Processing Time
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.TactTime">
            <summary>
            작업시간(Tact Time)입니다.
            </summary>
            <summary>
            Tact Time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.LoadedResource">
            <summary>
            작업을 수행한 장비 정보입니다.
            </summary>
            <summary>
            The equipment information processing Entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.Index">
            <summary>
            현재 작업정보가 포함된 작업물의 전체 작업정보에서의 Index 입니다.
            </summary>
            <summary>
            The Index of the entitie's entire process information including the current processing information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.RecipeID">
            <summary>
            작업조건 정보입니다.
            </summary>
            <summary>
            Process condition information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.ToolID">
            <summary>   
            작업시 사용한 Second Resource ID. 
            </summary>
            <summary>
            The ID of Second Resource used for processing.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.StepID">
            <summary>
            작업공정 ID 입니다.
            </summary>
            <summary>
            Step ID.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.ResID">
            <summary>
            작업수행 장비 ID 입니다.
            </summary>
            <summary>
            Equipment ID.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.IsStarted">
            <summary>작업을 시작했는지 여부입니다. <strong>true</strong> 인 경우 시작한 상태입니다.</summary>
            <summary>Determines whether process has started or not. If <strong>true</strong> is returned, processing is started.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.IsEnded">
            <summary>작업을 완료했는지 여부입니다. <strong>true</strong> 인 경우 완료한 상태입니다.</summary>
            <summary>Determines whether process has completed or not. If <strong>true</strong> is returned, processing is completed.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.LoadInfo.PegInfoList">
            <summary>작업에 대한 Foward Pegging 정보입니다.</summary>
            <summary>The Forward Pegging information of the process.</summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.LoadInfo.Start(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            작업정보에 작업을 시작한 상태로 변경합니다. 
            </summary>
            <param name="startTime">작업시작시각 입니다.</param>
            <param name="loadedResource">작업을 수행하는 장비데이터 입니다.</param>
            <summary>
            Change the process state to "Start" in process information. 
            </summary>
            <param name="startTime">Processing start time.</param>
            <param name="loadedResource">Equipment data processing the entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.LoadInfo.End(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            작업정보에 작업을 완료된 상태로 변경합니다.
            </summary>
            <param name="endTime">작업완료시각 입니다.</param>
            <param name="loadedResource">작업을 수행한 장비데이터 입니다.</param>
            <summary>
            Change the process state to "End" in process information. 
            </summary>
            <param name="endTime">Process end time.</param>
            <param name="loadedResource">Equipment data that processed the entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.LoadInfo.AddStepTarget(Mozart.SeePlan.DataModel.StepTarget,System.Double)">
            <summary>작업정보에 Forward Pegging 결과를 추가합니다.</summary>
            <param name="stepTarget">Pegging 대상이 되는 StepTarget 입니다.</param>
            <param name="qty">Pegging 수량입니다.</param>
            <remarks>결과가 FowardPegInfo 로 생성되어 PegInfoList 에 추가됩니다.</remarks>
            <summary>Add Forward Pegging result to process information. </summary>
            <param name="stepTarget">StepTarget for Pegging.</param>
            <param name="qty">Pegging quantity.</param>
            <remarks>The result is created as ForwardPegInfo and included to PegInfoList.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PeriodSection">
            <summary>
            작업기간의 시작시간, 종료시간 관리를 위한 클래스입니다.
            </summary>
            <summary>
            This class is used to manage the start/end time of job schedule(duration).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.StartTime">
            <summary>기간의 시작시각 속성입니다.</summary>
            <summary>The property of start time of duration.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.EndTime">
            <summary>기간의 종료시각 속성입니다.</summary>
            <summary>The property of end time of duration.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.Duration">
            <summary>기간 속성입니다.</summary>
            <summary>Duration property</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.IsEmpty">
            <summary>기간의 유효성을 판단하는 속성입니다.</summary>
            <value>기간이 길이가 0이하인 경우 true, 그렇지 않은 경우 fasle 입니다.</value>
            <summary>The property to check duration validation</summary>
            <value>If duration length is 0, return true, or else, return false.</value>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.ScheduleType">
            <summary>Down Schedule 조정 규칙을 설정, 참조하기 위한 속성입니다.</summary>
            <summary>This is the property to configure and refer Down Schedule adjustment rule.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PeriodSection.ScheduleFactor">
            <summary>
            Down Schedule 조정 규칙에서 사용하는 설정값입니다.
            </summary>
            <summary>
            The value used to configure Down Schedule adjustment rule.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.Clone">
            <summary>구간 데이터를 복제하여 반환합니다.</summary>
            <returns>PeriodSection 데이터의 MemberwiseClone 객체를 반환합니다.</returns>
            <summary>Replicate and return section data</summary>
            <returns>Returns the MemberwiseClone object of PeriodSection data.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.ValidateToNext(Mozart.SeePlan.DataModel.PeriodSection)">
            <summary>
            현재 작업 기간과 다음 작업 기간 중 중첩되는 구간이 존재하는 경우 현재 작업 기간을 0초로 축소하고, 다음 작업 시작 시간을 현재 작업의 시작 시간으로 변경합니다.
            </summary>
            <param name="next">다음 작업 기간입니다.</param>
            <summary>
            Changes the start time of the next job to the start time of the current job, reduces the job period of the current job to 0, if there is a overlap between the period of the current and next job.
            </summary>
            <param name="next">The period of the next job.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.Overlaps(Mozart.SeePlan.DataModel.PeriodSection)">
            <summary>입력받은 구간정보와 중첩여부를 판별합니다.</summary>
            <overloads>구간정보(PeriodSection) 과 구간정보간의 중첩여부를 판별합니다.</overloads>
            <param name="p">비교대상 구간정보입니다.</param>
            <returns>구간의 중첩이 있는 경우 true, 그렇지 않은 경우 fasle 입니다.</returns>
            <summary>Determine for any overlap of the input PeriodSection.</summary>
            <overloads>Determines overlap among PeriodSections.</overloads>
            <param name="p">PeriodSection used as comparison</param>
            <returns>If PeriodSection is overlapped, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.Overlaps(System.DateTime,System.DateTime)">
            <summary>입력받은 구간 정보와의 중첩여부를 판별합니다.</summary>
            <overloads>구간의 Start, End 시각정보와 비교합니다.</overloads>
            <param name="start">비교대상 구간 정보의 시작시각입니다.</param>
            <param name="end">비교대상 구간 정보의 종료시각입니다.</param>
            <returns>구간의 중첩이 있는 경우 true, 그렇지 않은 경우 fasle 입니다.</returns>
            <summary>Determine for any overlap of the input PeriodSection.</summary>
            <overloads>Compare with Start/End time of the PeriodSection.</overloads>
            <param name="start">The start time of the comparison PeriodSection target.</param>
            <param name="end">The end time of the comparison PeriodSection target.</param>
            <returns>If PeriodSection is overlapped, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.Equals(System.Object)">
            <summary>입력받은 객체와의 동일성 여부를 체크합니다.</summary>
            <param name="obj">비교대상 객체입니다.</param>
            <summary>Checks the identity from the input object </summary>
            <param name="obj">Comparison target object.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.ToString">
            <summary>구간정보를 표시하는 문자열을 반환합니다.</summary>
            <remarks>StartTime -&gt; EndTime 의 형태로 출력됩니다.</remarks>
            <summary>Returns string showning PeriodSection.</summary>
            <remarks>Prints as StartTime -&gt; EndTime.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.ToString(System.String)">
            <summary>구간 정보를 표시하는 문자열을 반환합니다.</summary>
            <overloads>문자열 표시 포맷을 정의할 수 있습니다.</overloads>
            <param name="format">
            	<para>문자열 정의 포맷입니다.</para>
            	<list type="number">
            		<item>D, d : 구간정보로 표시합니다.</item>
            		<item>S, s : 시작시각만 표시합니다.</item>
            		<item>E, e : 종료시각만 표시합니다.</item>
            	</list>
            </param>
            <summary>Returns string showning PeriodSection.</summary>
            <overloads>String format can be defined here.</overloads>
            <param name="format">
            	<para>String definition format.</para>
            	<list type="number">
            		<item>D, d : Display section information.</item>
            		<item>S, s : Display only start time.</item>
            		<item>E, e : Display only end time.</item>
            	</list>
            </param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.ToString(System.IFormatProvider)">
            <summary>구간 정보를 표시하는 문자열을 반환합니다.</summary>
            <param name="formatProvider">문자열 Format 을 지정하기 위한 IFormatProvider 객체입니다.</param>
            <summary>Returns string showning PeriodSection.</summary>
            <param name="formatProvider">This is the IFormatProvider object to designate string Format.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PeriodSection.ToString(System.String,System.IFormatProvider)">
            <summary>구간 정보를 표시하는 문자열을 반환합니다.</summary>
            <param name="format">
            	<para>문자열 정의 포맷입니다.</para>
            	<list type="number">
            		<item>D, d : 구간정보로 표시합니다.</item>
            		<item>S, s : 시작시각만 표시합니다.</item>
            		<item>E, e : 종료시각만 표시합니다.</item>
            	</list>
            </param>
            <param name="formatProvider">문자열 Format 을 지정하기 위한 IFormatProvider 객체입니다.</param>
            <summary>Returns string showning PeriodSection</summary>
            <param name="format">
            	<para>String definition format.</para>
            	<list type="number">
            		<item>D, d : Display section information.</item>
            		<item>S, s : Display only start time.</item>
            		<item>E, e : Display only end time.</item>
            	</list>
            </param>
            <param name="formatProvider">This is the IFormatProvider object to designate string Format.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.DownScheduleType">
            <summary>장비의 Down Schedule 을 처리하는 방식에 대한 열거형입니다.</summary>
            <summary>Enumration type of Down Schedule handling method of equipment.</summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.DownScheduleType.Custom">
            <summary>
            사용자 로직에 의한 처리 방식입니다. Down(PM/Failure) 시작시각과 중첩되는 작업물을 Split 하여 처리하는 경우 사용할 수 있습니다. 
            </summary>
            <summary>
            To handle through user specified logic. This is used to Split entities overlapping Down(PM/Failure) start time.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.DownScheduleType.ShiftForward">
            <summary>
            Dispatching 시점에 ScheduleFactor 로 설정된 시간 이내에 시작되는 Down(PM/Failure) Schedule 이 있는 경우, Down 일정을 당겨서 실행하는 Rule 입니다. 
            </summary>
            <summary>
            This executes the rule to shift Down schedule forward at Dispatching in case Down(PM/Failure) schedule exists within the time configured in ScheduleFactor. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.DownScheduleType.ShiftBackward">
            <summary>
            장비 작업 시작 시점에 시작된 작업물의 종료시각 이전에 예정된 Down(PM/Failure) Schedule 이 있는 경우, 
            Down 일정을 미뤄서 실행하는 Rule 입니다. 이 옵션은 Down Schedule 을 그대로 Shift 하는 개념입니다. Down 시간에는 변동이 없습니다. 
            </summary>
            <summary>
            This executes the rule to shift Down schedule backward at the point when the equipment start processing in case Down(PM/Failure) Schedule is within the end time of entity processing. 
            This only shifts the Down Scheudle and does not change the Down time itself. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.DownScheduleType.ShiftBackwardStartTimeOnly">
            <summary>
            장비 작업 시점에 시작된 작업물의 종료시각 이전에 예정된 Down(PM/Failure) Schedule 이 있는 경우, 
            Down 일정을 미뤄서 실행하되, Down 종료시각은 유지하는 개념입니다. 결과적으로 Down 시간이 줄어들게 됩니다. 
            </summary>
            <summary>
            This executes the rule to shift Down schedule backward at the point when the equipment start processing in case Down(PM/Failure) Schedule is within the end time of entity processing.  
            This maintains the Down end time. In conclusion Down time is reduced. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.DownScheduleType.Cancel">
            <summary>
            장비 작업 시작 시점에 작업물의 종료시각 이전에 예정된 Down(PM/Failure) Schedule 이 있는 경우 Down 계획을 취소합니다. 
            </summary>
            <summary>
            This cancles Down schedule at the point when the equipment start processing in case Down(PM/Failure) Schedule is within the end time of entity processing.  
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PMSchedule">
            <summary>
            제조업의 설비보존을 위한 PM작업 일정관리를 위한 클래스입니다.
            </summary>
            <summary>
            This is the class used to manange PM task schedule to preserve equipment in the manufacturing industries. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PMSchedule.PMType">
            <summary>
            PM 유형입니다.
            </summary>
            <summary>
            PM type.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PMSchedule.DownQty">
            <summary>
            PM 유형이 Component 형으로 장비 일부만 down 되는 경우 
            down 되는 구성품의 수입니다.
            </summary>
            <summary>
            This function is used to check the number of down equipment when PM type is Component type(only few equipment go down)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PMSchedule.AdjustedTactTime">
            <summary>
            일부 component down(PM) 시 발생하는 성능 문제로 
            조정된 Tacttime 시간간격 데이터입니다.
            </summary>
            <summary>
            The adjusted TactTime data due to performance issue caused by component type down(PM). 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PMSchedule.ComponentID">
            <summary>
            PM이 발생한 컴포넌트의 ID를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets and sets component ID of the PM occurrence. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.PMSchedule.IsFullDown">
            <summary>Determines whether PM type is Full down(all equipment) type.</summary>
            <value>If PM type is Full down, return <strong>true</strong>, or else, return <strong>false</strong>.</value>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PMSchedule.#ctor(System.DateTime,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <overloads>PM 시작시각 및 PM 시간 정보를 기준으로 PM Schedule 정보를 생성합니다. PMType 은 기본으로 Full 로 지정됩니다.</overloads>
            <param name="eventTime">PM 발생 시각입니다.</param>
            <param name="stime">PM 수행시간입니다. 초단위입니다.</param>
            <summary>
            Constructor.
            </summary>
            <overloads>Generate PM schedule according to PM start time and PM duration time information. PMType is set as Full as default.</overloads>
            <param name="eventTime">The time PM event occured.</param>
            <param name="stime">PM duration time.(seconds)</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PMSchedule.#ctor(Mozart.SeePlan.DataModel.PMType,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pmType">PM 유형입니다.</param>
            <param name="eventTime">PM 발생 시각입니다.</param>
            <param name="qty">PM 처리대상 component 수량입니다.</param>
            <param name="stime">PM 시간입니다.초단위입니다.</param>
            <param name="ttime">component down으로 인해 조정된 Tact time 데이터입니다.초단위 입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="pmType">PM type</param>
            <param name="eventTime">The time PM event occured.</param>
            <param name="qty">The number of target Components to PM. </param>
            <param name="stime">PM duration time.(seconds)</param>
            <param name="ttime">The adjusted TactTime(seconds) data due to performance issue caused by component type down(PM).</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PMSchedule.#ctor(Mozart.SeePlan.DataModel.PMType,System.DateTime,System.String,System.Int32,System.Int32,Mozart.SeePlan.DataModel.DownScheduleType,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="pmType">PM 유형입니다.</param>
            <param name="eventTime">PM 발생 시각입니다.</param>
            <param name="componentID">PM 발생 Unit 설비 ID입니다.</param>
            <param name="stime">PM 시간입니다.초단위입니다.</param>
            <param name="ttime">component down으로 인해 조정된 Tact time 데이터입니다.초단위 입니다.</param>
            <param name="scheduleType">DownSchedule 조정 규칙입니다.</param>
            <param name="scheduleFactor">Down Schedule 조정 규칙에서 사용하는 설정값입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="pmType">PM type</param>
            <param name="eventTime">The time PM event occured.</param>
            <param name="componentID">The Unit Equipment ID to perform PM.</param>
            <param name="stime">PM duration time.(seconds)</param>
            <param name="ttime">The adjusted TactTime(seconds) data due to performance issue caused by component type down(PM).</param>
            <param name="scheduleType">DownSchedule adjustment rule.</param>
            <param name="scheduleFactor">Cofiguration value used in Down Schedule adjustment rule.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PMSchedule.#ctor(Mozart.SeePlan.DataModel.PMType,System.DateTime,System.Int32,System.Int32,System.Int32,Mozart.SeePlan.DataModel.DownScheduleType,System.Int32)">
            <summary>
            생성자입니다.
            </summary>
            <param name="pmType">PM 유형입니다.</param>
            <param name="eventTime">PM 발생 시각입니다.</param>
            <param name="qty">PM 처리대상 component 수량입니다.</param>
            <param name="stime">PM 시간입니다.초단위입니다.</param>
            <param name="ttime">component down으로 인해 조정된 Tact time 데이터입니다.초단위 입니다.</param>
            <param name="scheduleType">DownSchedule 조정 규칙입니다.</param>
            <param name="scheduleFactor">Down Schedule 조정 규칙에서 사용하는 설정값입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="pmType">PM type</param>
            <param name="eventTime">The time PM event occured.</param>
            <param name="qty">The number of target Components to PM. </param>
            <param name="stime">PM duration time.(seconds)</param>
            <param name="ttime">The adjusted TactTime(seconds) data due to performance issue caused by component type down(PM).</param>
            <param name="scheduleType">DownSchedule adjustment rule.</param>
            <param name="scheduleFactor">Cofiguration value used in Down Schedule adjustment rule.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.PMSchedule.ValidateToNext(Mozart.SeePlan.DataModel.PeriodSection)">
            <summary>다음 PM schedule 정보와의 충돌을 판별하고 조정합니다.</summary>
            <param name="next">다음 검토대상 구간정보 입니다.</param>
            <remarks>
            	<para>PMType 과 DownSchedule 타입에 따라 아래와 같이 처리됩니다</para>
            	<list type="number">
            		<item>next 가 PMSchedule 이 아닌 경우 PeriodSection 의 ValidataToNext 함수의 로직을 따릅니다.</item>
            		<item>next 가 PMSchedule 이면서 PMType 이 동일한 경우 next down 정보를 현행 down 정보와 통합합니다.</item>
            		<item>next 가 PMSchedule 이면서 PMType 이 다르고 Component 형태일 경우 현행 down 종료시각을 next 시작시각으로 조정합니다.</item>
            		<item>next 가 PMSchedule 이면서 PMType 이 다르고 Full 형태일 경우 next 의 down 시작시각을 현행 down 종료시각으로 조정합니다.</item>
            	</list>
            </remarks>
            <summary>Checks if the corresponding PM schedule information collides with the next PM schedule and adjusts the schedule. </summary>
            <param name="next">The section information of the next inspection.</param>
            <remarks>
            	<para>The handling method depending on PMType and DownSchedule type is as follows</para>
            	<list type="number">
            		<item>If 'next' is not PMSchedule, it will follow the logics in ValidataToNext function of PeriodSection.</item>
            		<item>If 'next' is PMSchedule and PMType is same, integrate 'next' down information with current down information.</item>
            		<item>If 'next' is PMSchedule, PMType is different and is a Component type, adjust current down end time to 'next' start time.</item>
            		<item>If 'next' is PMSchedule, PMType is different and is a Full type, adjust down start time of 'next' to current down end time.</item>
            	</list>
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PMType">
            <summary>
            PM 유형입니다.
            </summary>
            <summary>
            PM type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PMType.Full">
            <summary>장비 전체 Down 처리 타입입니다.</summary>
            <summary>Change all equipment to Down state.</summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PMType.Component">
            <summary>
            장비 일부 Down 처리 타입입니다.
            </summary>
            <summary>
            Change some of the equipment to Down state.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ResourceType">
            <summary>
            자원 유형입니다.
            </summary>
            <summary>
            Resource type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceType.Machine">
            <summary>
            기계 타입입니다.
            </summary>
            <summary>
            Equipment type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceType.Human">
            <summary>
            인간 타입입니다.
            </summary>
            <summary>
            Crew(Human) type.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.SimEqpType">
            <summary>
            장비의 Processing 유형입니다.
            </summary>
            <summary>
            Equiment processing type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.Inline">
            <summary>
            연속투입이 가능한 장비 타입입니다.
            </summary>
            <summary>
            Inline type equipment: The equipment that could load continously.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.Table">
            <summary>
            연속투입이 불가하하고 단일 작업물작업 진행 타입입니다.
            </summary>
            <summary>
            Table type equipment: Cannot load continously. This equipment can only process single entity. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.Chamber">
            <summary>
            장비를 구성하는 복수개의 Chamber 에서 동시가공할 수 있는 타입으로 Inline 유형과 유사합니다.
            </summary>
            <summary>
            Chamber type equipment: Similar to Inline type. This equipment can process simultaneously through multiple Chambers. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.ParallelChamber">
            <summary>
            장비를 구성하는 복수개의 Chamber 에서 복수개의 작업물을 동시에 진행할 수 있는 장비 타입입니다.
            </summary>
            <summary>
            Prarllel Chamber type equipment: This equipment can process multiple entities simultaneously through multiple Chambers. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.LotBatch">
            <summary>
            복수개의 작업물을 동시에 처리하되 연속투입이 불가능한 타입입니다.
            </summary>
            <summary>
            LotBatch type equipment: This equipment can process multiple entities simultaneously but cannot load consecutively. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.BatchInline">
            <summary>
            복수개의 작업물을 동시에 처리하되 연속투입이 가능한 타입입니다.
            </summary>
            <summary>
            BatchInline type equipment: This equipment can process multiple entities simultaneously and can load consecutively. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.Bucket">
            <summary>
            Bucket 유형입니다.
            </summary>
            <summary>
            Bucket type equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.UnitBatch">
            <summary>
            한작업물을 구성하는 Unit 들을 묶음으로 작업합니다. 연속투입이 불가합니다.
            </summary>
            <summary>
            UnitBatch type equipment: Process by binding Units(group of single entity). Cannot load consecutively.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.SimEqpType.None">
            <summary>
            장비타입이 설정되지 않은 상태입니다.
            </summary>
            <summary>
            Unspecified equipment type. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ResourceState">
            <summary>
            자원 상태유형입니다.
            </summary>
            <summary>
            Resource state type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceState.Up">
            <summary>
            가동상태입니다.
            </summary>
            <summary>
            Up state. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceState.Down">
            <summary>
            다운상태입니다.
            </summary>
            <summary>
            Down state.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Resource">
            <summary>
            자원(Resource) 에 대한 기본 클래스입니다.
            </summary>
            <summary>
            Base class of Resource. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Resource.#ctor(System.String,System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="resID">장비 ID 입니다.</param>
            <param name="resGroup">장비그룹 name 입니다.</param>
            <summary>
            Initializes a new instance of <em>Resource</em> class with the specified resource identification and the name of the group where the specified resource is in part of. 
            </summary>
            <param name="resID">Equipment ID.</param>
            <param name="resGroup">Equipment group name.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Resource.#ctor(System.String,System.String,Mozart.SeePlan.DataModel.ResourceType,System.Int32,System.DateTime,System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            생성자입니다. 
            </summary>
            <param name="resID">장비 id 입니다.</param>
            <param name="resGroup">장비그룹 name 입니다.</param>
            <param name="resType">장비타입입니다.(Human, Machine)으로 구분됩니다.</param>
            <param name="shiftType">작업 교대수입니다. </param>
            <param name="openDate">장비 사용을 위한 유효 시작시각입니다.</param>
            <param name="closeDate">장비 사용을 위한 유효 종료시각입니다.</param>
            <param name="setupTime">장비의 기본 Setup 소요시간 입니다.</param>
            <param name="isAutomated">장비의 자동화 여부입니다.</param>
            <summary>
            Initializes a new instance of <em>Resource</em> class with the specified resource identification, the name of the group where the specified resource is in part of, 
            the type of the specified resource whether it is human or machine resource, the available and expiration time of the resource utilization, default time consumption for setup,
            and a boolean value whether the specified resource is automated or not. 
            </summary>
            <param name="resID">Equipment ID.</param>
            <param name="resGroup">Equipment group name</param>
            <param name="resType">Equipment type. Classified as Human/Machine.</param>
            <param name="shiftType">Work Shift counts.</param>
            <param name="openDate">The available time to use Equipment.</param>
            <param name="closeDate">The expiration date to use Equipment.</param>
            <param name="setupTime">The time consumed to perform basic Setup on equipment.</param>
            <param name="isAutomated">Determines whether it is automated equipment or not.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ResID">
            <summary>
            장비 ID 입니다. 
            </summary>
             <summary>
            Equipment ID
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.Key">
            <summary>
            Resource 에 대한 Key 데이터 입니다. 기본값은 ID 와 같습니다. 
            유일한 Key 정보가 필요한 경우 별도로 설정합니다.
            </summary>
            <summary>
            Key value for Resource. The default value is same as Resource ID. 
            This is configured when unique key is required. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ResGroup">
            <summary>
            장비그룹 name 입니다.
            </summary>
            <summary>
            Equipment group name
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ResType">
            <summary>
            자원유형 (사람/기계)입니다.
            </summary>
            <summary>
            Resource type(Human/Equipment).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.SimType">
            <summary>
            장비 시뮬레이션 타입입니다. 
            </summary>
            <summary>
            Equipment Simulation Type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.State">
            <summary>
            장비상태입니다. (Up/Down 중 하나입니다.)
            </summary>
            <summary>
            Equipment State.(Either Up/Down)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.StateChangeTime">
            <summary>Equipment state change time.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.DispatcherType">
            <summary>
            장비에서 사용할 Dispatcher 의 유형
            </summary>
            <summary>
            Dispatcher type used by Equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.PresetID">
            <summary>
                <para>장비에서 사용할 Weight Preset의 이름을 가져오거나 설정합니다.</para>
                <para>만약 Preset 속성을 사용해서 장비에서 사용할 Weight Preset을 직접 설정한다면 해당 속성이 우선 적용됩니다.</para>
            </summary>
            <summary>
                <para>Gets or sets the specified string containing the name of the weight preset to be used by the equipment.</para>
                <para>If <em>Resource.Preset</em> property is used to set weight preset, then values in <em>Resource.Preset</em> property will be used by the equipment instead of <em>PresetID</em>. </para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.Preset">
            <summary>
            장비에서 사용할 Weight Preset 입니다.
            </summary>
            <summary>
            Weight Preset used by Equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ShiftType">
            <summary>
            작업 Shift 적용 유형입니다.교대조 수입니다.
            예)2교대인경우 2, 3교대인 경우 3입니다.
            </summary>
            <summary>
            Work Shift application type. Total number of rotation.
            EX)Two shifts 2, Three shifts 3.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.OpenDate">
            <summary>
            자원 유효일 시작일자입니다.
            </summary>
            <summary>
            Resource validation date. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.CloseDate">
            <summary>
            자원 유효일 종료일자입니다.
            </summary>
            <summary>
            Resource expiration date. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.Utilization">
            <summary>
            장비 효율입니다. 
            </summary>
            <summary>
            Equipment efficiency. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.IsAutomated">
            <summary>
            자동화 장비여부입니다.
            </summary>
            <summary>
            Determines whether it is automated equipment or not. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.SetupTime">
            <summary>
            기본 Setup 소요시간 입니다.
            </summary>
            <summary>
            Time consumed for basic Setup. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.IsNeedSetup">
            <summary>
            장비 Setup이 필요한지 여부입니다.
            </summary>
            <summary>
            Checks if equipment needs Setup. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.Calendar">
            <summary>
            자원의 기본 Capacity 정보입니다.
            </summary>
            <summary>
            Basic Capacity information of Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ChildCount">
            <summary>
            The count of child equipment,  like chamber.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.ForceAddRunWip">
            <summary>
            여러 작업물을 동시에 처리할 수 있는 설비에서 
            두 번째 또는 그 이후의 RUN 재공이 이전 RUN 재공의 작업 시간으로 인해 시뮬레이션 시작 시간 이후에만 투입 가능할 때 
            이전 작업물의 작업 시간을 무시하고, 지정한 시간이 즉시 투입할 수 있는지 여부를 설정하거나 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Resource.Initialize(Mozart.SeePlan.TimeLibrary.DateTimeInterval)">
            <summary>Time Horizon 내에서 적용될 EventCalendar 생성합니다.</summary>
            <param name="horizon">장비의 계획 수행 시간구간 정보입니다.</param>
            <summary>Generate EventCalendar to be applied within Time Horizon.</summary>
            <param name="horizon">The time section information of equipment plan execution.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Resource.CalculateOperationTime(System.TimeSpan)">
            <summary>
            표준공정의 작업시간 정보와 자원의 효율을 바탕으로 실제 작업시간을 계산합니다.
            </summary>
            <param name="processingTime">작업물의 공정 작업시간(ProcessTime) 입니다.</param>
            <returns></returns>
            <summary>
            Caculates the actual processing time based on the standard Step processing time and resource efficiency.
            </summary>
            <param name="processingTime">The Step processing time of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Resource.SetDown(System.DateTime)">
            <summary>
            장비를 down 처리합니다.
            </summary>
            <param name="now">down 처리 시작시각입니다.</param>
            <summary>
            Turn equipment down. 
            </summary>
            <param name="now">The time when equipment is down.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Resource.LocationKey">
            <summary>
            Location Key 입니다. 값은 항상 LocationKeys.EQP 입니다. 
            </summary>
            <summary>
            Location Key.The key value is always LocationKeys.Eqp. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ResourceCalendar">
            <summary>
                <para>자원의 가용 일정을 관리하는 기능을 제공하는 클래스입니다.</para>
                <para>공장의 가동 일정을 기준으로 개별 자원의 가용 일정을 관리할 수 있습니다.</para>
                <para>개별 자원의 가용 일정은 ResourceEvent를 통해 정의됩니다.</para>
            </summary>
            <summary>
                <para>The class that provides the functionality to manage the availability schedule of the resources.</para>
                <para>The availibity schedule of the resource can be managed individually in reference to the factory operation schedule.</para>
                <para>The availibility schedule for each resources are defined through ResourceEvent.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.#ctor">
            <summary>
            새로운 ResourceCalendar를 생성합니다.
            </summary>
            <summary>
            Initiates a new instance of the ResourceCalendar class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceCalendar.ShiftType">
            <summary>
                <para>관리 대상 Shift를 가져오거나 설정합니다. </para>
                <para>첫 번째 Shift의 ShiftType은 1입니다.</para>
            </summary>
            <summary>
                <para>Gets or sets the shift of the specified <em>ResourceCalendar</em>.</para>
                <para>The ShfitType of the first shift is 1.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceCalendar.Events">
            <summary>
            자원 가용 일정의 목록을 가져옵니다.
            </summary>
            <summary>
            Gets the list of the availability schedule of the resources. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.Initialize(Mozart.SeePlan.TimeLibrary.DateTimeInterval)">
            <summary>
            스케줄 시에 Time Horizon 과 Resource Events 정보를 이용하여 Event Calendar 생성
            </summary>
            <param name="horizon"></param>
            <summary>
            Generate Event Calendar throguh Resource Events information and Time Horizon used for scheduling. 
            </summary>
            <param name="horizon"></param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.UpdateCalendar(Mozart.SeePlan.DataModel.ResourceEvent,Mozart.SeePlan.TimeLibrary.DateTimeInterval)">
            <summary>
            자원 이벤트 정보 와 Schedule Time Horizon 정보를 기준으로  이벤트 캘린더 업데이트 (이벤트 사항 추가)
            </summary>
            <param name="evt"></param>
            <param name="horizon"></param>
            <summary>
            Update Event Calendar throguh Resource Events information and Time Horizon used for scheduling. 
            </summary>
            <param name="evt"></param>
            <param name="horizon"></param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.Clear">
            <summary>
            등록된 자원 가용 일정을 초기화합니다.
            </summary>
            <summary>
            Removes all elements of the availabitlity schedule of the resources. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.CalcWorkTime(System.DateTime,System.Double)">
            <summary>
            자원의 로딩가능시각 과 공정의 작업시간이 주어졌을 때,
            자원의 실제 스케줄 상의 시작, 완료 시각 계산
            </summary>
            <param name="prevDateTime"></param>
            <param name="operationTime"></param>
            <returns></returns>
            <summary>
            Caculates the actual start and end time of the resource schedule with the specified process time of the Step(process) and possible loading time of the resource. 
            </summary>
            <param name="prevDateTime"></param>
            <param name="operationTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.NextWorkingTime(System.DateTime)">
            <summary>
            주어진 시간 이후에 시작되는 작업 가능 시간을 반환합니다.
            </summary>
            <param name="datetime">기준 시간입니다.</param>
            <returns>다음 작업 가능 구간의 시작 시간입니다.</returns>
            <summary>
            Returns the next start time of the work, of the specified time. 
            </summary>
            <param name="datetime">The reference time to get the next start time of work section.</param>
            <returns>Returns the start time of the next work section.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.NextNonWorkingTime(System.DateTime)">
            <summary>
            주어진 시간 이후에 시작되는 작업 불가능 시간을 반환합니다.
            </summary>
            <param name="datetime">기준 시간입니다.</param>
            <returns>다음 작업 불가능 구간의 시작 시간입니다.</returns>
            <summary>
            Returns the start time of the next non working time of the specified time.
            </summary>
            <param name="datetime">The reference time to get the start time of the next non working section.</param>
            <returns>Returns the start time of the next non working section.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.StartDateTime(System.DateTime)">
            <summary>
            작업 시작시각 계산
            </summary>
            <param name="prevDateTime"></param>
            <returns></returns>
            <summary>
            Calculate process start time. 
            </summary>
            <param name="prevDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCalendar.EndDateTime(System.DateTime,System.Double)">
            <summary>
            작업 완료시각 계산
            </summary>
            <param name="startDateTime"></param>
            <param name="operationTime"></param>
            <returns></returns>
            <summary>
            Calculate process end time. 
            </summary>
            <param name="startDateTime"></param>
            <param name="operationTime"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ResourceCollection">
            <summary>
            Resource 형식의 강력한 형식 ICollection을 모델링합니다.
            </summary>
            <summary>
            Models a strongly-typed ICollection of Resource type. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCollection.#ctor">
            <summary>
            새로운 ResourceCollection을 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the ResourceCollection class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCollection.#ctor(System.Collections.Generic.IEnumerable{Mozart.SeePlan.DataModel.Resource})">
            <summary>
            지정된 컬렉션에서 복사한 Resource를 포함하는 새로운 ResourceCollection을 생성합니다.
            </summary>
            <param name="items">요소가 새 목록에 복사되는 컬렉션입니다.</param>
            <summary>
            Initializes a new instance of the <em>ResourceCollection</em> class containing <em>Resource</em> copied from the specified <em>Resource</em> collections.
            </summary>
            <param name="items">The collection of <em>Resrouce</em> elements to copy to <em>ResourceCollection</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceCollection.#ctor(System.Int32)">
            <summary>
            비어있는 상태에서 지정한 초기 용량을 가지는 새로운 ResourceCollection을 생성합니다.
            </summary>
            <param name="capacity">새 목록에 처음 저장할 수 있는 Part의 수입니다.</param>
            <summary>
            Initializes a new instance of the <em>ResourceCollection</em> as an empty class set with specified initial capacity. 
            </summary>
            <param name="capacity">The initial number of <em>Part</em> elements that can be stored to <em>ResourceCollections</em>.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.REventType">
            <summary>
            EventType : 이벤트 처리 유형 (이벤트 유형과는 별개)
            </summary>
            <summary>
            EventType : Event handling type (Different from type of event)
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventType.None">
            <summary>
            이벤트 유형이 지정되지 않은 상태를 나타냅니다.
            </summary>
            <summary>
            Represents no event type is specified. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventType.PM">
            <summary>
            PM(Preventive Maintenance) 이벤트 유형을 나타냅니다.
            </summary>
            <summary>
            Specifies PM(Preventive Maintenance) event type.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventType.Overtime">
            <summary>
            초과 작동 이벤트 유형을 나타냅니다.
            </summary>
            <summary>
            Specfies the work overtime event type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventType.Breakdown">
            <summary>
            고장 이벤트 유형을 나타냅니다.
            </summary>
            <summary>
            Sepcifies the resource breakdown event type. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.REventCycleType">
            <summary>
            CycleType : 반복주기 유형
            </summary>
            <summary>
            CycleType : Repeat cycle type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.None">
            <summary>
            반복없음
            </summary>
            <summary>
            No repeat
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.Day">
            <summary>
            1일 주기 반복
            </summary>
            <summary>
            Repeat cycle for 1 day.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.Week">
            <summary>
            1주일 주기 반복
            </summary>
            <summary>
            Repeat cycle for 1 week.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.Month">
            <summary>
            1개월 주기 반복
            </summary>
            <summary>
            Repeat cycle for 1 month.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.Quater">
            <summary>
            분기별 주기 반복
            </summary>
            <summary>
            Repeat cycle for a quarter. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.HalfYear">
            <summary>
            반기별 반복
            </summary>
            <summary>
            Repeat cycle for half an year. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.REventCycleType.Year">
            <summary>
            년간 반복
            </summary>
            <summary>
            Repeat cyclr for a year.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.ResourceEvent">
            <summary>
            -- ResourceEvent
            -- Objective : Besides regular time capacity, the System should reflect
            --                 the irregular capacity change of resource on Scheduling.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceEvent._refStartDate">
            <summary>
            Start date time of the resource event based on the repetition cycle.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceEvent._cycleType">
            <summary>
            The repeate cycle of the resource event. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceEvent._eventType">
            <summary>
            Specifies the event type. (None/PM/Overtime,Breakdown,etc)
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceEvent._duration">
            <summary>
            Duration of the event resource. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.ResourceEvent._validRange">
            <summary>
            Valid time range of the resource event. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceEvent.#ctor(Mozart.SeePlan.DataModel.REventType,Mozart.SeePlan.DataModel.REventCycleType)">
            <summary>
            주어진 이벤트 유형과 반복 주기 유형을 사용하여 새로운 ResourceEvent를 생성합니다.
            </summary>
            <param name="eventType">이벤트의 유형입니다.</param>
            <param name="cycleType">이벤트의 반복 주기 유형입니다.</param>
            <summary>
            Initializes a new instance of the <em>ResourceEvent</em> class with the specified event type representing the event state of the resource, and the specified repeat cycle of the resource event. 
            </summary>
            <param name="eventType">The type of the resource event.</param>
            <param name="cycleType">The repeat cycle of the resource event.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.ResourceEvent.#ctor(Mozart.SeePlan.DataModel.REventType,Mozart.SeePlan.DataModel.REventCycleType,System.DateTime,System.TimeSpan,System.DateTime)">
            <summary>
            , 주어진 이벤트 유형과 반복 주기 유형 및 이벤트 지속 시간을 사용하여 이벤트의 유효 기간이 정해져 있는 새로운 ResourceEvent를 생성합니다.
            </summary>
            <param name="eventType">이벤트의 유형입니다.</param>
            <param name="cycleType">이벤트의 반복 주기 유형입니다.</param>
            <param name="refStartDate">첫 이벤트 발생 시간입니다.</param>
            <param name="eventTime">이벤트 지속 시간입니다.</param>
            <param name="validDateEnd">
                <para>이벤트 유효 기간의 끝입니다.</para>
                <para>로직 적용 시 날짜 부분만 사용됩니다.(시/분/초 버림)</para>
                <para>이벤트가 유효 기간 내에 시작된다면 지속 시간이 유효 기간을 넘어도 지속 시간이 온전히 반영됩니다.</para>
            </param>
            <summary>
            Initializes a new instance of the <em>ResourceEvent</em> class with the specified event type representing the event state of the resource,the specified repeat cycle of the resource event, and time related values of the resource event. 
            </summary>
            <param name="eventType">The type of the resource event.</param>
            <param name="cycleType">The repeat cycle of the resource event.</param>
            <param name="refStartDate">The time of the first resource event occurrence.</param>
            <param name="eventTime">The duration time of resource event.</param>
            <param name="validDateEnd">
                <para>The end of the resource event period.</para>
                <para>Although the specified value is DateTime, only the date will be used when logic is implemented.</para>
                <para>The resource event duration time is valid even though the duration time exceeds the valid resource event date as long as the resource event is occurred within the valid resource event date.</para>
            </param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.EventType">
            <summary>
            이벤트 유형 (None/PM/Overtime/고장/...)
            </summary>
            <summary>
            Event Type (None/PM/Overtime/Failure/...)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.EventCycle">
            <summary>
            이벤트 반복 주기
            </summary>
            <summary>
            Event repetition cycle. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.RefStartDate">
            <summary>
            이벤트 시작 날짜 (반복주기의 기준)
            </summary>
            <summary>
            Event start date(based on repeat cycle)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.Duration">
            <summary>
            이벤트 시간 
            </summary>
            <summary>
            Event duration 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.ValidRange">
            <summary>
            유효기간 설정
            </summary>
            <summary>
            Set valid date. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.ValidDateStart">
            <summary>
            유효기간 설정(시작시각)
            </summary>
            <summary>
            Set valide date (start time)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.ResourceEvent.ValidDateEnd">
            <summary>
            유효기간 설정(종료시각)
            </summary>
            <summary>
            Set valide date (end time)
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Route">
            <summary>
            제조업의 공정 Process 처럼 단위 작업의 흐름정보를 관리유지하기 위한 클래스입니다.
            <seealso cref="T:Mozart.SeePlan.DataModel.Part"/>
            </summary>
            <summary>
            This is the class to maintain and manage process flow of unit entity such as Step process in manufacturing industries. 
            <seealso cref="T:Mozart.SeePlan.DataModel.Part"/>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Route.#ctor">
            <summary>
            기본 생성자입니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>Route</em> class.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Route.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <overloads>Route ID 를 지정하여 생성합니다.</overloads>
            <param name="id"></param>
            <summary>
            Initializes a new instance of the <em>Route</em> class with the specified string containins the route identification representing the location within the process flow. 
            </summary>
            <overloads>Designate and generate Route ID.</overloads>
            <param name="id"></param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Route.Key">
            <summary>
            Route 에 대한 Key 데이터 입니다. 기본값은 ID 와 같습니다. 
            유일한 Key 정보가 필요한 경우 별도로 설정합니다.
            </summary>
            <summary>
            Key value for Route. The default value is same as Route ID. 
            This is configured when unique key is required. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Route.RouteID">
            <summary>Route ID 입니다. Route 에 대한 표시 ID 입니다.</summary>
            <summary>This is the Route ID. ID to express Route.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Route.RootActivity">
            <summary>Root 부품입니다. 설정가능합니다.</summary>
            <summary>Root parts. This could be configured.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Route.Activities">
            <summary>
            공정흐름과 연결된 부품 컬렉션입니다. 
            </summary>
            <summary>
            The part collection linked to Step flow. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Route.GetLeafSteps">
            <summary>
            부품 컬렉션의 Leaf Task(공정) 집합을 반환합니다.
            </summary>
            <returns>공정리스트입니다.</returns>
            <summary>
            Returns the Leaf Task(Step) set of part collection.
            </summary>
            <returns>Returns Step list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Route.IDComparer">
            <summary>
            Route ID 간 비교클래스입니다. 
            </summary>
            <summary>
            This is the class to compare Route ID. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Route.IDComparer.Compare(Mozart.SeePlan.DataModel.Route,Mozart.SeePlan.DataModel.Route)">
            <summary>Route 정보간 비교 함수입니다.</summary>
            <param name="x">비교대상 Route 입니다.</param>
            <param name="y">비교대상 Route 입니다.</param>
            <returns>x, y 의 Route ID 간 문자열 비교 결과를 반환합니다.</returns>
             <summary>Compares two specified <em>Route</em> objects and returns an integer that indicates their relative position in the sort order.</summary>
             <param name="x"><em>Route</em> object to compare to y.</param>
             <param name="y"><em>Route</em> object to comapre to x.</param>
             <returns>Returns a signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown below.
                 <para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                 <para>Zero : <em>x</em> occurs in the smae position as <em>y</em> in the sort order.</para>
                 <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Route.ToString">
            <summary>
            Route 표시명을 반환합니다. 
            </summary>
            <returns>Route 표시명</returns>
            <summary>
            Returns Route display name.
            </summary>
            <returns>Route display name.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Step">
            <summary>
            작업에 대한 정보 유지관리 (작업단위의 상위부품, 공정코드, 공정이름, 작업시간등)를 위한 클래스입니다.
            </summary>
            <summary>
            This the class to maintain and manage of work (Step code, Step name, Process time, parential part of work unit)
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="id">Step id 문자열 입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="id">Step ID string.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.#ctor(Mozart.SeePlan.DataModel.Part,System.String)">
            <summary>
            생성자입니다. 
            </summary>
            <param name="activity">공정을 포함하는 부품입니다.</param>
            <param name="id">Step id 문자열 입니다.</param>
            <summary>
            Constructor. 
            </summary>
            <param name="activity">Part including Step.</param>
            <param name="id">Step ID string.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.Route">
            <summary>
            공정이 포함된 Routing(Process) 정보입니다.
            </summary>
            <summary>
            Routing(Process) information including Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.RouteID">
            <summary>
            공정 Route id 입니다.
            </summary>
            <summary>
            Step Route ID. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.Activity">
            <summary>
            공정으로 생성되는 부품입니다.
            </summary>
            <summary>
            Part created through Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.ActivityID">
            <summary>
            공정으로 생성되는 부품 id 문자열입니다.
            </summary>
            <summary>
            Part ID string created through Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.StepID">
            <summary>
            Step id 문자열입니다.
            </summary>
            <summary>
            Step ID string 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.Key">
            <summary>
            Step 에 대한 Key 데이터 입니다. 기본값은 ID 와 같습니다. 
            유일한 Key 정보가 필요한 경우 별도로 설정합니다.
            </summary>
            <summary>
            Key value for Step. The default value is same as Step ID. 
            This is configured when unique key is required. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Step.ProcessTime">
            <summary>
            공정처리 시간간격입니다.
            </summary>
            <summary>
            Time interval of Step processing time. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.IsLeaf">
            <summary>
            공정의 선행 공정이 없는 공정인지 여부입니다. 
            </summary>
            <returns>선행공정이 없는 공정인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>
            Checks if there is preceding Step of the target Step.  
            </summary>
            <returns>If there is no preceding Step, return <strong>true</strong>, or else, return <strong>false</strong>입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetPrevSteps">
            <summary>
            직전 선행공정 리스트를 반환합니다.하위부품의 하위공정까지 검색하여 반환합니다.
            </summary>
            <returns>선행공정 리스트입니다.</returns>
            <summary>
            Returns the nearest preceding Steps. Searches and returns child Part and Step. 
            </summary>
            <returns>Preceding Step list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetRoutPrevSteps">
            <summary>
            Returns the nearest preceding Steps of Route type. 
            </summary>
            <returns>Returns the nearest Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetLeafSteps">
            <summary>
            동일 부품내의 Leaf공정(선행공정이 없는 공정) 리스트를 반환합니다.
            </summary>
            <returns>동일 부품내의 Leaf 공정리스트입니다.</returns>
            <summary>
            Returns the LeafStep(Step with no preceding Step) list within identical Parts. 
            </summary>
            <returns>Return Leaf Step list within identical Parts.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetInnerPrevSteps">
            <summary>
            동일 부품내의 직전 선행공정리스트를 반환합니다.
            </summary>
            <returns>선행공정 리스트입니다.</returns>
            <summary>
            Returns the nearest preceding Step list within identical Parts. 
            </summary>
            <returns>Return preceding Step list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetInnerRoutPrevSteps">
            <summary>
            동일 부품내의 Rout 타입의 직전 선행공정리스트를 반환합니다.
            </summary>
            <returns>선행공정 리스트입니다.</returns>
            <summary>
            Returns the nearest preceding Step list of Route type within identical Parts.
            </summary>
            <returns>Return preceding Step list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetDefaultPrevStep">
            <summary>
            동일 부품내의 Route 직전 선행공정을 반환합니다.
            진전 공정 중 첫번째 공정을 반환합니다. 
            선행공정이 여러개인 경우 선행공정의 구성시 우선순위를 고려하여 소팅해야 합니다. 
            </summary>
            <returns>직전 선행 공정입니다.</returns>
            <summary>
            Returns the nearest preceding Step list of Route type within identical Parts.
            Returns the first Step of the nearest Step. 
            If there are multiple preceding Steps, the preceding Steps should sorted by priority. 
            </summary>
            <returns>Return the nearest Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetDefaultNextStep">
            <summary>
            동일 부품내의 Route 직후 공정을 반환합니다.
            </summary>
            <returns>다음 공정입니다.</returns>
            <summary>
            Return list of next Steps right after Routing within identical Parts. 
            </summary>
            <returns>Return next Step</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetNextSteps">
            <summary>
            단순 직후 후행공정 리스트를 반환합니다. 상위 부품의 공정까지 포함하여 찾은 후 반환합니다.
            </summary>
            <returns>후행 공정 리스트입니다.</returns>
            <summary>
            Returns the nearest followed Steps. Searches and returns parent Part and Step. 
            </summary>
            <returns>Return followed Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetInnerNextSteps">
            <summary>
            동일부품 내의 직후 후행공정 리스트를 반환합니다.
            </summary>
            <returns>후행 공정 리스트입니다.</returns>
            <summary>
            Returns the nearest followed Step list within identical Parts. 
            </summary>
            <returns>Return followed Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.IsUniquePrevStep(Mozart.SeePlan.DataModel.Step)">
            <summary>
            입력된 공정이 유일한 선행공정인지 여부를 반환합니다.
            </summary>
            <param name="prevStep">대상 공정입니다.</param>
            <returns>대상 공정이 유일한 선행공정인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다. </returns>
            <summary>
            Checks if input Step is unique preceding Step.
            </summary>
            <param name="prevStep">Target Step.</param>
            <returns>If target Step is unique preceding Step, return <strong>true</strong>, or else, return <strong>false</strong>입니다. </returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Step.GetTranferTime(Mozart.SeePlan.DataModel.Step)">
            <summary>
            해당공정에서 후행공정까지의 이동시간을 반환합니다.
            </summary>
            <param name="toStep">후행공정 입니다.</param>
            <returns>이동시간 간격입니다.</returns>
            <summary>
            Returns the required time to transfer from the current Step to toStep. 
            </summary>
            <param name="toStep">Followed Step.</param>
            <returns>Returns the time elapsed for transfer.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.StepCollection">
            <summary>
            Task 형식의 강력한 형식 ICollection을 모델링합니다.
            </summary>
            <summary>
            Models the strongly-typed ICollection of Task type. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepCollection.#ctor(Mozart.SeePlan.DataModel.Part)">
            <summary>
            주어진 Part를 소유자로 하는 새로운 StepCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <summary>
            Initialize a new instance of <em>StepCollection</em> class with the specified <em>Part</em> as the owner. 
            </summary>
            <param name="owner">The owner of the object to be created.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepCollection.#ctor(Mozart.SeePlan.DataModel.Part,System.Collections.Generic.IEnumerable{Mozart.SeePlan.DataModel.Step})">
            <summary>
            주어진 Part를 소유자로 하고, 지정된 컬렉션에서 복사한 Step을 포함하는 새로운 StepCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="values">요소가 새 목록에 복사되는 컬렉션입니다.</param>
            <summary>
            Initializes a new instance of <em>StepCollection</em> class with the specified <em>Part</em> as the owner, containing <em>Step</em> copied from the specified <em>Step</em> collections.
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="values">The collection of <em>Step</em> elements to copy to <em>StepCollection</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.StepCollection.#ctor(Mozart.SeePlan.DataModel.Part,System.Int32)">
            <summary>
            주어진 Part를 소유자로 하고, 비어 있는 상태에서 지정한 초기 용량을 가지는 새로운 StepCollection을 생성합니다.  
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="capacity">새 목록에 처음 저장할 수 있는 Step의 수 입니다.</param>
            <summary>
            Initializes a new instance of the <em>StepCollection</em> class with the specified <em>Step</em> as the owner, as an empty class set with specified initial capacity.    
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="capacity">The initial number of <em>Step</em> elements that can be stored to <em>StepCollections</em>.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.StepCollection.Item(System.Int32)">
            <summary>
            지정한 인덱스에 있는 요소를 가져옵니다.
            </summary>
            <param name="index">가져오거나 설정할 요소의 0부터 시작하는 인덱스입니다.</param>
            <returns>지정한 인덱스의 요소입니다.</returns>
            <summary>
            Gets the <em>Step</em> item from the specified index. 
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>Returns the item of the specified index position.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.TransitionType">
            <summary>Transition 타입입니다.</summary>
            <summary>Transition type</summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.TransitionType.Rout">
            <summary>Route 순서에 따라 진행하는 타입입니다.</summary>
            <summary>This is a Transistion type performed according to Route sequence.</summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.TransitionType.Cond">
            <summary>조건에 의한 진행을 위한 타입입니다.</summary>
            <summary>This is a Transistion type performed according to the condition.</summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.PrecedanceType">
            <summary>
            작업의 선후관계 종류
            </summary>
            <summary>
            Type of work sequencing relationship 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PrecedanceType.FF">
            <summary>
            Finish And Finish
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PrecedanceType.FS">
            <summary>
            Finish And Start
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PrecedanceType.SF">
            <summary>
            Start And Finish
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.PrecedanceType.SS">
            <summary>
            Start And Start
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.Transition">
            <summary>
            -- Transition : Linkable 개체간의 Routing 정보를 담고 있다.
            </summary>	
            <summary>
            -- Transition : Routing information among Linkable entities.
            </summary>	
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Transition.#ctor">
            <summary>기본 생성자입니다.</summary>
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.Transition.#ctor(Mozart.SeePlan.DataModel.Linkable,Mozart.SeePlan.DataModel.Linkable)">
            <summary>생성자입니다.</summary>
            <overloads>Transition 을 구성하는 from, to node 를 사용하여 생성합니다.</overloads>
            <param name="from">transition을 구성하는 from node 객체입니다.</param>
            <param name="to">transition을 구성하는 to node 객체입니다.</param>
            <summary>Constructor.</summary>
            <overloads>Create using from/to node composing Transition.</overloads>
            <param name="from">From node object composing Transition.</param>
            <param name="to">To node object composing Transition.</param>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Transition.TransType">
            <summary>Transition 실행 방식입니다.</summary>
            <summary>Transition execution method.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Transition.Condition">
            <summary>from node 와 to node 간의 실행 조건 유형입니다.</summary>
            <summary>This describes the execution type among from node and to node.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Transition.Source">
            <summary>Transition 의 From node 객체입니다.</summary>
            <summary>The From Node object of Transition.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Transition.Target">
            <summary>Transition 의 To node 객체입니다.</summary>
            <summary>The To Node object of Transition.</summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.Transition.TransferTime">
            <summary>Transition 시간 입니다.</summary>
            <summary>Transition time</summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.TransitionCollection">
            <summary>
            Transition 형식의 강력한 형식 ICollection을 모델링합니다.
            </summary>
            <summary>
            Models a strongly-typed ICollection of Transition type. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.TransitionCollection.#ctor(Mozart.SeePlan.DataModel.Linkable)">
            <summary>
            주어진 Linkable을 소유자로 하는 새로운 TransitionCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <summary>
            Initialize a new instance of <em>TrasitionCollection</em> class with the specified <em>Linkable</em> as the owner. 
            </summary>
            <param name="owner">The owner of the object to be created.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.TransitionCollection.#ctor(Mozart.SeePlan.DataModel.Linkable,System.Collections.Generic.IEnumerable{Mozart.SeePlan.DataModel.Transition})">
            <summary>
            주어진 Linkable을 소유자로 하고, 지정된 컬렉션에서 복사한 Transition을 포함하는 새로운 TransitionCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="values">요소가 새 목록에 복사되는 컬렉션입니다.</param>
            <summary>
            Initializes a new instance of <em>TransitionCollection</em> class with the specified <em>Linkable</em> as the owner, containing <em>Transition</em> copied from the specified <em>Transition</em> collections.
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="values">The collection of <em>Transition</em> elements to copy to <em>TransitionCollection</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.TransitionCollection.#ctor(Mozart.SeePlan.DataModel.Linkable,System.Int32)">
            <summary>
            주어진 Linkable을 소유자로 하고, 비어 있는 상태에서 지정한 초기 용량을 가지는 새로운 TransitionCollection을 생성합니다.
            </summary>
            <param name="owner">생성될 개체의 소유자입니다.</param>
            <param name="capacity">새 목록에 처음 저장할 수 있는 Part의 수입니다.</param>
            <summary>
            Initializes a new instance of the <em>TransitionCollection</em> class with the specified <em>Linkable</em> as the owner, as an empty class set with specified initial capacity.
            </summary>
            <param name="owner">The owner of the object to be created.</param>
            <param name="capacity">The initial number of <em>Transition</em> elements that can be stored to <em>StepCollections</em>.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mozart.SeePlan.DataModel.WeightFactor" -->
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.Name">
            <summary>
            Factor name 입니다.
            </summary>
            <summary>
            Factor name
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.Factor">
            <summary>
            가중치입니다.
            </summary>
            <summary>
            Weight Factor.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.Sequence">
            <summary>
            Factor 의 순서입니다. Sorted 방식의 dispatcher 의 factor 소팅 우선순위입니다.
            </summary>
            <summary>
            Factor sequence. The sorting method is sorting the factor by priority of Dispatcher. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.Criteria">
            <summary>
            Factor value 계산시 사용할 수 있는 가이드 정보입니다.
            </summary>
            <summary>
            The guide information that could be used for calculating Factor value. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.Type">
            <summary>
            Factor 의 값 산출유형입니다.
            </summary>
            <summary>
            Factor value calculation method.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightFactor.OrderType">
            <summary>
            SortedDispatcher 를 사용시 Factor 의 소팅 방식입니다.
            </summary>
            <summary>
            The factor sorting method when SortedDispatcher is used. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightFactor.#ctor(System.String,System.Double,System.Single,Mozart.SeePlan.DataModel.FactorType,Mozart.SeePlan.DataModel.OrderType)">
            <summary>
            생성자입니다.
            </summary>
            <param name="name">Factor name 입니다.</param>
            <param name="weightFactor">가중치입니다</param>
            <param name="sequence">Factor 의 순서입니다. Sorted 방식의 dispatcher 의 factor 소팅 우선순위입니다.</param>
            <param name="type">Factor 의 값 산출유형입니다.</param>
            <param name="orderType">SortedDispatcher 를 사용시 Factor 의 소팅 방식입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="name">Factor name</param>
            <param name="weightFactor">Weight Factor.</param>
            <param name="sequence">Factor sequence. The sorting method is sorting the factor by priority of Dispatcher. </param>
            <param name="type">Factor value calculation method.</param>
            <param name="orderType">The factor sorting method when SortedDispatcher is used.</param>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.WeightInfo">
            <summary>
            작업물의 Dispatching 평가점수 정보입니다. 
            </summary>
            <remarks>Dispatching 시점에 특정 작업물에 대해 평가된 모든 WeightFactor 별 평가점수 결과를 설정하거나 참조할 수 있습니다.</remarks>
            <summary>
            Information of the Dispatching weight factor of entities.
            </summary>
            <remarks>The weight factors are configured and referred for each WeightFactor evaluated for a particular entity at Dispatching point. </remarks>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.WeightInfo._eval">
            <summary>
            key : factor name, vlaue : factor value
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.SetValue(Mozart.SeePlan.DataModel.WeightFactor,System.Double,System.String)">
            <summary>
            Dispatching weight factor 별 계산된 점수를 저장합니다.
            </summary>
            <param name="factor">대상 Weight factor 입니다.</param>
            <param name="value">Weight factor 계산 값입니다.</param>
            <param name="description">Weight value 에 대한 설명입니다.</param>
            <summary>
            Saves calucluated factors per Dispatching weight factor.
            </summary>
            <param name="factor">Target Weight factor.</param>
            <param name="value">Calculated Weight factor value.</param>
            <param name="description">The description of weight value.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.SetValueData(Mozart.SeePlan.DataModel.WeightFactor,Mozart.SeePlan.DataModel.WeightValue)">
            <summary>
            Dispatching weight factor 별 계산된 점수를 저장합니다.
            </summary>
            <param name="factor">Weight factor  입니다.</param>
            <param name="valueData">Weight factor 계산 값입니다</param>
            <summary>
            Saves calucluated factors per Dispatching weight factor.
            </summary>
            <param name="factor">Target Weight factor.</param>
            <param name="valueData">Calculated Weight factor value.</param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.GetValue(Mozart.SeePlan.DataModel.WeightFactor)">
            <summary>
            특정 weight factor 에 대한 계산값을 반환합니다.
            </summary>
            <param name="factor">대상 Weight Factor 객체입니다.</param>
            <returns>대상 weight factor 에 대한 Dispatching 시 계산값입니다.</returns>
            <summary>
            Returns the calculated value of a specific weight factor.
            </summary>
            <param name="factor">Target weight factor object</param>
            <returns>Returns the calculated value of target weight factor at Dispatching.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.GetValueData(Mozart.SeePlan.DataModel.WeightFactor)">
            <summary>
            특정 weight factor 에 대한 계산값을 반환합니다.
            </summary>
            <param name="factor">대상 Weight Factor 입니다.</param>
            <returns>대상 weight factor 에 대한 Dispatching 시 계산값입니다.</returns>
            <summary>
            Returns the calculated value of a specific weight factor.
            </summary>
            <param name="factor">Target weight factor object</param>
            <returns>Returns the calculated value of target weight factor at Dispatching.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.GetFixedValueData(Mozart.SeePlan.DataModel.WeightFactor)">
            <summary>FactorType = FIXED 인 Factor 값을 참조하기 위한 함수입니다.</summary>
            <param name="factor">대상 Weight Factor 객체입니다.</param>
            <returns>factor 가 FIXED 인 경우 해당 값을 반환하며, 값이 없는 경우 WeighValue.MinValue 를 반환합니다. FIXED 타입이 아닌 경우에는 Null 을 반환합니다.</returns>
            <summary>This is the function to refer to factor value that is FactorType = FIXED. </summary>
            <param name="factor">Target weight factor object.</param>
            <returns>If factor is FIXED, return the corresponding valye. If there is no value, return WeighValue.MinVlaue. If factor is not FIXED type, return NULL.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.GetWeightedSum">
            <summary>
            계산된 결과값의 합계를 반환합니다.
            </summary>
            <returns>결과 합계입니다.</returns>
            <summary>
            Returns the sume of calculated results.
            </summary>
            <returns>Returns the result of the sum.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightInfo.Reset">
            <summary>평가결과 설정된 모든 값을 삭제합니다.</summary>
            <summary>Delete all weight factor results configured values.</summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.FactorType">
            <summary>
            Weight 기반 Dispatcher 에서 값을 계산할때, 방식을 정의합니다. 
            </summary>
            <summary>
            This defines the method to calculate value of Weight based Dispatcher.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.FactorType.NONE">
            <summary>
            미지정
            </summary>
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.FactorType.FIXED">
            <summary>
            Lot이나 Step 에 상관없이 고정 계산값을 사용하는 Type 입니다.
            </summary>
            <summary>
            This is the type to use fixed value regardless of Lot or Step.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.FactorType.LOTTYPE">
            <summary>
            Lot 별로 Weight Factor Value 를 계산해야 하는 Type 입니다.
            </summary>
            <summary>
            This is the type to calculated Weight Factor Value for each Lot.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.FactorType.STEPTYPE">
            <summary>
            공정(Step)별로 Weight Factor Value 를 계산해야 하는 Type 입니다.
            </summary>
            <summary>
            This is the type to calculated Weight Factor Value for each Lot
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.OrderType">
             <summary>
            WeightSorted Dispatcher 를 사용하는 경우 Factor 별 소팅방식입니다.
             </summary>
             <summary>
            The sorting method in case WeightSorted Dispatcher is used. 
             </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.OrderType.ASC">
            <summary>
            오름차순 정렬방식입니다.
            </summary>
            <summary>
            Sort in ascending order.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.DataModel.OrderType.DESC">
            <summary>
            내림차순 정렬방식입니다.
            </summary>
            <summary>
            Sort in descending order. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.DataModel.WeightPreset">
            <summary>
            Weight Preset 에 대한 데이터 클래스입니다.
            </summary>
            <summary>
            Data class for Weight Preset
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightPreset.Name">
            <summary>
            Weight Preset 명칭입니다. 
            </summary>
            <summary>
            Weight Preset name 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.DataModel.WeightPreset.FactorList">
            <summary>
            Weight Preset 을 구성하는 Factor 리스트입니다. 
            </summary>
            <summary>
            Factor list that compose Weight Preset. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightPreset.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <overloads>Preset ID 를 지정하여 생성합니다.</overloads>
            <param name="name"></param>
            <summary>
            Constructor.
            </summary>
            <overloads>Designate and creates Preset ID.</overloads>
            <param name="name"></param>
        </member>
        <member name="M:Mozart.SeePlan.DataModel.WeightPreset.#ctor">
            <summary>기본 생성자입니다.</summary>
            <summary>Default Constructor.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Optimization.InitializeOptimizerControl.SolverName">
            <summary>
            Set Solver
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Optimization.InitializeOptimizerControl.ExportPath">
            <summary>
            Set ExportPath
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Optimization.InitializeOptimizerControl.ExportOutputFiles">
            <summary>
            Set ExportOutputFile
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Optimization.InitializeOptimizerControl.ExportGdxFiles">
            <summary>
            Set ExportGdxFile
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPegTargetComparer">
            <summary>PegTarget 비교자 Interface입니다.</summary>
            <summary>PegTarget comparer Interface.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPegTargetComparer.ComparePegTarget(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.PegTarget)">
            <summary>지정된 두 PegTarget 개체를 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</summary>
            <param name="x">비교할 첫째 PegTarget 개체입니다.</param>
            <param name="y">비교할 둘때 PegTarget 개체입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 PegTarget의 우선순위는 같습니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
            <summary>Compare selected two PegTargets and return integer value to indicate each other's location from the sorting order.</summary>
            <param name="x">PegPart entity 'x' for comparison.</param>
            <param name="y">PegPart entity 'y' for comparison.</param>
            <returns>
            	<para>This is the 32 bit integer with mathematical symbols to show the prority relationship among two compared PegTargets.</para>
            	<para>If the value is negative, the priority of x is higher than y.</para>
            	<para>If the value is 0, the priority of both PegParts are same.</para>
            	<para>If the value is positive, the priority of x is lower than y.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.GetLastPeggingStepDelegate">
            <summary>
            PegPart의 마지막 Pegging 대상 공정을 반환하는 대리자입니다.
            </summary>
            <param name="pegPart">마지막 Pegging 대상 공정을 찾을 PegPart입니다.</param>
            <returns>PegPart의 마지막 Pegging 대상 공정입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.GetPrevPeggingStepDelegate">
            <summary>
            PegPart의 현재 공정 기준 이전 Pegging 대상 공정을 반환하는 대리자입니다.
            </summary>
            <param name="pegPart">이전 Pegging 대상 공정을 찾을 PegPart입니다.</param>
            <param name="currentStep">PegPart의 현재 공정입니다.</param>
            <returns>PegPart의 이전 Pegging 대상 공정입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SplitPegPartDelegate">
            <summary>
            PegPart를 여러 개의 PegPart로 분할하는 대리자입니다
            </summary>
            <param name="pegPart">분할 대상 PegPart입니다.</param>
            <returns>분할된 PegPart의 목록입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.DecideAlignDelegate">
            <summary>
            PegPart를 Flow의 실행 대상 PegPart에서 제외할지 여부를 결정하는 대리자입니다.
            </summary>
            <param name="pegPart">제외 여부를 판단할 PegPart입니다.</param>
            <returns>PegPart를 Flow의 실행 대상 PegPart에서 제외할지 여부입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.MergePegPartsDelegate">
            <summary>
            주어진 PegPart들을 병합하는 대리자입니다.
            </summary>
            <param name="parts">병합 대상 PegPart의 목록입니다.</param>
            <returns>병합된 PegPart들의 목록입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SelectCaseDelegate">
            <summary>
            Flow 내 PegPart가 진행 가능한 경로가 여러 개인 경우 경로를 결정하는 대리자입니다.
            </summary>
            <param name="part">경로 결정 대상 PegPart입니다.</param>
            <returns>선택된 PegPart의 경로 이름입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.CompareAlignDelegate">
            <summary>
            두 Align Block의 우선순위를 비교하는 대리자입니다.
            </summary>
            <param name="x">첫 번째 Align Block의 이름입니다.</param>
            <param name="y">두 번째 Align Block의 이름입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 Align Block의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.GetAlignKeyDelegate">
            <summary>
            PegPart가 Flow의 실행 대상에서 제외될지를 결정하는 대리자입니다.
            </summary>
            <param name="pegPart">제외 대상 PegPart 개체입니다.</param>
            <returns>PegPart가 제외 대상인 경우 null, 그 외의 경우 입력된 PegPart 개체입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.CompareAlignKeyDelegate">
            <summary>
            두 Align Key의 우선순위를 비교하는 대리자입니다.
            </summary>
            <param name="x">첫 번째 Align Key입니다.</param>
            <param name="y">두 번째 Align Key입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 Align Key의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ComparePegPartDelegate">
            <summary>
            두 PegPart의 우선순위를 비교하는 대리자입니다.
            </summary>
            <param name="x">첫 번째 PegPart입니다.</param>
            <param name="y">두 번째 PegPart입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 PegPart의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ComparePegTargetDelegate">
            <summary>
            두 PegTarget의 우선순위를 비교하는 대리자입니다.
            </summary>
            <param name="x">첫 번째 PegTarget입니다.</param>
            <param name="y">두 번째 PegTarget입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 PegTarget의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.OnBeginFlowDelegate">
            <summary>
            Flow 실행 시작 시 호출되는 대리자입니다.
            </summary>
            <param name="flow">실행을 시작하는 Flow입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.OnEndFlowDelegate">
            <summary>
            Flow 실행 종료 후 호출되는 대리자입니다.
            </summary>
            <param name="flow">실행이 종료된 Flow입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.AlignBlock">
            <summary>Align 기능을 실행할 수 있는 Block Class입니다.</summary>
            <remarks>Align 기능이란 특정 조건을 만족하는 PegPart를 Flow의 실행 대상 PegPart에서 잠시 제외시켜놓는 것을 의미합니다. 제외된 PegPart는 Flow에 더이상 실행 가능한 PegPart가 존재하지 않을 때 다시 실행 대상으로 복귀할 수 있습니다.</remarks>
            <summary>Block Class to execute Align function.</summary>
            <remarks>Align is a function is to remove a PegPart for a moment from the target PegPart to execute Flow when satisfying a sepcific condition.   
            The removed PegPart is restored when there is no PegPart to Flow.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.Name">
            <summary>Block의 이름을 가져옵니다.</summary>
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.Type">
            <summary>Block의 종류를 가져옵니다.</summary>
            <summary>Get Block type</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.Flow">
            <summary>Block이 속한 Flow 개체를 가져옵니다.</summary>
            <summary>Get Flow entity where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.AlignedPegParts">
            <summary>이 Align Block에 의해 Flow의 실행 대상에서 제외된 PegPart의 목록을 가져옵니다.</summary>
            <remarks>
            Key는 PegPart가 제외될 때 사용자가 입력한 AlignKey입니다.
            Value는 동일한 AlignKey로 제외된 PegPart의 목록입니다.
            </remarks>
            <summary>Get list of PegPart removed from Flow target.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.AlignBlock.HasMergeFunction">
            <summary>PegPart 병합에 사용할 MergePegParts 함수가 설정되어 있는지 여부를 가져옵니다.</summary>
            <summary>Determine whether Flow has MergePegParts as substitute.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.AlignBlock.Align(Mozart.SeePlan.Pegging.PegPart)">
            <summary>PegPart가 Flow의 실행 대상에서 제외될지를 결정합니다.</summary>
            <param name="pegPart">결정 대상 PegPart 개체입니다.</param>
            <remarks>생성자에서 입력한 GetAlignKey 대리자의 실행 결과값이 null이 아닌 경우 제외 대상이되고, null인 경우 제외되지 않습니다. 제외 대상 PegPart는 AlignedPegParts에 추가됩니다.</remarks>
            <returns>PegPart가 제외 대상인 경우 null, 그 외의 경우 입력된 PegPart 개체입니다.</returns>
            <summary>Decides whether the PegPart will be removed from Flow execution target.</summary>
            <param name="pegPart">Target PegPart entity for decision.</param>
            <remarks>If the result value of the input substitute GetAlignkey in Constructor is not null, the corresponding PegPart is to be removed. If it is not null, the PegPart won't be removed.
            The remobed PegPart is added to AlignedPegPArt.</remarks>
            <returns>If target PegPart is to be removed, return null, or else return input PegPart entity.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.Pegging.AlignBlock.Resume" -->
        <member name="M:Mozart.SeePlan.Pegging.AlignBlock.MergePegParts(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>설정된 MergePegParts 함수를 사용해 입력된 PegPart들을 병합한 뒤 반환합니다.</summary>
            <param name="pegParts">병합 대상 PegPart의 목록입니다.</param>
            <remarks>생성자에서 입력한 MergePegParts 대리자를 실행합니다.</remarks>
            <returns>병합된 PegPart의 목록입니다.</returns>
            <summary>Merge input PegPart list.</summary>
            <param name="pegParts">Target PegPart list to be merged.</param>
            <remarks>Execute the MergePegParts substitute included in the constructor.</remarks>
            <returns>Return merged PegPart list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.BlockExecuter">
            <summary>BlockFlow 실행기 Class입니다.</summary>
            <summary>BlockFlow execution tool class.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockExecuter.InputList">
            <summary>최초에 입력된 PegPart의 목록을 가져옵니다.</summary>
            <summary>Get the PegPart list input for the first time.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockExecuter.ScheduleList">
            <summary>잔여 PegPart의 목록을 가져옵니다.</summary>
            <summary>Get remaining PegPart list.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.BlockExecuter.#ctor(Mozart.SeePlan.Pegging.PegEngine)">
            <summary>생성자입니다.</summary>
            <param name="engine">Pegging Engine 개체입니다.</param>
            <returns>생성된 BlockFlow 실행기입니다.</returns>
            <summary>Constructor.</summary>
            <param name="engine">Pegging Engine entity.</param>
            <returns>Generated BlockFlow execution tool.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.BlockExecuter.Execute(Mozart.RuleFlow.IFlow,System.Collections.Generic.IList{Mozart.RuleFlow.IStageTargetGroup})">
            <summary>입력된 BlockFlow를 실행하고, 잔여 PegPart의 목록을 반환합니다.</summary>
            <param name="flow">실행 대상 Flow 개체입니다.</param>
            <param name="targetList">실행 대상 PegPart의 목록입니다.</param>
            <returns>잔여 PegPart의 목록입니다.</returns>
            <summary>Run the input BlockFlow and reutrn remaining PegPart list.</summary>
            <param name="flow">Target execution Flow entity.</param>
            <param name="targetList">Target PegPart list for execution.</param>
            <returns>Return remaining PegPart list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.BlockFlow">
            <summary>Block 구조의 Flow 정보를 나타내는 Class입니다.</summary>
            <summary>The class to sholw Flow information of Block structure.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.Blocks">
            <summary>Flow에 속한 Block의 목록을 가져옵니다.</summary>
            <remarks>목록의 Key는 Block name.. 목록의 Value는 Block 개체입니다.</remarks>
            <summary>Get list of Block inside the Flow.</summary>
            <remarks>The key in the list is Block name and value is Block entity</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.StartBlock">
            <summary>Flow의 첫 번째 Block을 가져옵니다.</summary>
            <summary>Get the first Block of the Flow.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.AlignBlocks">
            <summary>Flow에 속한 AlignBlock의 목록을 가져옵니다.</summary>
            <remarks>목록의 Key는 AlignBlock의 이름입니다. 목록의 Value는 AlignBlock 개체입니다.</remarks>
            <summary>Get list of AlignBlock inside the Flow.</summary>
            <remarks>The key in the list is AlignBlock name and value is AlignBlock entity</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.NextBlockSelector">
            <summary>다음 Block 선택자를 가져옵니다.</summary>
            <summary>Get next Block selector.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.CompareAlignFunction">
            <summary>Flow에 속한 AlignBlock의 비교 대리자를 가져옵니다.</summary>
            <remarks>Flow에 더이상 실행 가능한 PegPart가 존재하지 않을 때 AlignBlock에서 대기하고 있는 PegPart를 다시 실행가능 대상으로 복귀시킬 수 있습니다. 어떤 AlignBlock의 PegPart를 실행가능 대상으로 선정할지 결정하기 위해 사용됩니다.</remarks>
            <summary>Get substitute comparer of AlignBlock inside Flow.</summary>
            <remarks>When there is no more PegPart to be executed by Flow, the PegPart goes on standby in AlignBlock and could be retored to be executed again.
            This Action is used to select which PegPart to process waiting in AlignBlock.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.PegPartComparer">
            <summary>PegPart 비교자를 가져옵니다.</summary>
            <summary>Get PegPart comparer.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.PegTargetComparer">
            <summary>PegTarget 비교자를 가져옵니다.</summary>
            <summary>Get PegTarget comparer.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.OnBeginFlowFunction">
            <summary>
            Flow 실행 시작 시 호출되는 대리자를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlow.OnEndFlowFunction">
            <summary>
            Flow 실행 종료 후 호출되는 대리자를 가져옵니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.BlockFlowBuilder">
            <summary>
            BlockFlow를 생성 및 구성하기 위한 기능을 제공하는 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.BlockFlowBuilder.Flow">
            <summary>
            생성된 BlockFlow를 가져옵니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.BlockFlowExetensions">
            <summary>BlockFlow 클래스에 대한 확장 메소드 집합 Class입니다.</summary>
            <summary>This is the class of extension method set for BlockFlow class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.BlockFlowExetensions.GetBlock(Mozart.SeePlan.Pegging.BlockFlow,System.String)">
            <summary>BlockFlow에서 입력된 이름을 갖는 Block을 찾아 반환합니다.</summary>
            <param name="flow">대상 BlockFlow 개체입니다.</param>
            <param name="blockName">찾을 Block의 이름입니다.</param>
            <returns>찾은 Block 개체입니다. 동일한 이름을 갖는 Block이 존재하지 않는 경우 null입니다.</returns>
            <summary>Search Block with the name input through BlockFlow.</summary>
            <param name="flow">Target BlockFlow entity</param>
            <param name="blockName">Block name to be searched.</param>
            <returns>Returns the searched Block entity. If there is no Block matching with the input name, return null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.BlockFlowExetensions.GetOrCreateStage(Mozart.SeePlan.Pegging.BlockFlow,Mozart.SeePlan.DataModel.Step,System.String)">
            <summary>BlockFlow에서 입력한 Step과 StageTemplate 이름을 갖는 Stage를 찾아 반환합니다. 해당 Stage가 존재하지 않는 경우 생성합니다.</summary>
            <param name="flow">대상 BlockFlow 개체입니다.</param>
            <param name="step">대상 Step 개체입니다.</param>
            <param name="stageTemplate">대상 StageTemplate 이름입니다.</param>
            <returns>찾거나 생성된 Stage 개체입니다.</returns>
            <summary>Search Stage with the Step and StageTemplate name input through BlockFlow. A new Stage is created if there is no matching results.</summary>
            <param name="flow">Target BlockFlow entity</param>
            <param name="step">Target Step entity</param>
            <param name="stageTemplate">Target StageTemplate name</param>
            <returns>Returns either searched or created Stage entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.EndBlock">
            <summary>Flow의 마지막 Block Class입니다. PegPart의 이전 Pegging 대상 Step을 찾는 기능을 합니다.</summary>
            <summary>This is the last Block Class of the Flow. This operates to find target Step for Pegging before PegPart phase.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.EndBlock.Name">
            <summary>Block의 이름을 가져옵니다.</summary>
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.EndBlock.Type">
            <summary>Block의 종류를 가져옵니다.</summary>
            <summary>Get Block type..</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.EndBlock.Flow">
            <summary>Block이 속한 Flow 개체를 가져옵니다.</summary>
            <summary>Get Flow entity where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.EndBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.EndBlock.GetPrevPeggingStep(Mozart.SeePlan.Pegging.PegPart)">
            <summary>입력된 PegPart에 대한 이전 Pegging 대상 Step을 반환합니다.</summary>
            <param name="pegPart">이전 Pegging 대상 Step을 찾을 개체입니다.</param>
            <returns>이전 Pegging 대상 Step 개체입니다.</returns>
            <summary>Return the target Steps to be Pegged before the input PegPart. </summary>
            <param name="pegPart">This is the entity to search the target Steps for Pegging before PegPart.</param>
            <returns>Returns the entity of the target Steps for Pegging before PegPart</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IBlock">
            <summary>BlockFlow 하위의 Pegging 로직 실행 단위 Interface입니다.</summary>
            <summary>Pegging logic execution phase interface subordinate to BlockFlow.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IBlock.Name">
            <summary>Block의 이름을 가져옵니다.</summary>
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IBlock.Type">
            <summary>Block의 종류를 가져옵니다.</summary>
            <summary>Get Block type.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IBlock.Flow">
            <summary>Block이 속한 Flow 개체를 가져옵니다.</summary>
            <summary>Get Flow object where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.BlockType">
            <summary>Block 종류를 나타냅니다.</summary>
            <summary>Express Block type.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.START">
            <summary>Flow의 첫번째 Block을 나타냅니다.</summary>
            <summary>Specifes the first Block of the Flow.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.END">
            <summary>Flow의 마지막 Block을 나타냅니다.</summary>
            <summary>Spcifies the last Block of the Flow.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.ALIGN">
            <summary>특정 조건을 만족하는 PegPart를 Flow의 실행 대상 PegPart에서 제외하는 Block을 나타냅니다.</summary>
            <summary>Specifies a Block to conditionally exclude PegPart from the Flow execution.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.SPLIT">
            <summary>PegPart를 분할하는 Block을 나타냅니다.</summary>
            <summary>Sepcifies a Block to split PegPart.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.SWITCH">
            <summary>조건에 따라 Flow 내에서 PegPart의 흐름을 변경하는 Block을 나타냅니다.</summary>
            <summary>Specifies a Block to conditionally change the PegPart flow within the Flow.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.BlockType.STAGE">
            <summary>정의된 Rule을 순서대로 수행하는 Block을 나타냅니다.</summary>
            <summary>Specifies a Block to execute Rule in the specified order.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerNodeBuilder">
            <summary>
            PeggerNode를 생성 및 구성하기 위한 기능을 제공하는 Interface입니다.
            </summary>
            <summary>
            IPeggerNodeBuilder is a interface that provides funtionality to create and configure PeggerNode.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerNodeBuilder.SetName(System.String)">
            <summary>
            PeggerNode의 이름을 설정합니다.
            </summary>
            <param name="name">PeggerNode의 이름입니다.</param>
            <returns>이름 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
            <summary>
            Sets the name of PeggerNode.
            </summary>
            <param name="name">The string to set PeggerNode name.</param>
            <returns>Returns itself as an instance with PeggerNode name set completed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerNodeBuilder.Build">
            <summary>
            이전에 주어진 정보로부터 PeggerNode를 생성해서 반환합니다.
            </summary>
            <returns>생성 및 구성이 완료된 PeggerNode입니다.</returns>
            <summary>
            Creates and returns PeggerNode through previously given information.
            </summary>
            <returns>Returns the created and configured PeggerNode.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.NextBlockSelector">
            <summary>다음 Block 선택자 Class입니다.</summary>
            <summary>This is the next Block selector class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.NextBlockSelector.#ctor(Mozart.SeePlan.Pegging.BlockFlow)">
            <summary>생성자입니다.</summary>
            <param name="flow">NextBlockSelector가 속한 Flow 개체입니다.</param>
            <returns>생성된 NextBlockSelector 개체입니다.</returns>
            <summary>Constructor.</summary>
            <param name="flow">The Flow entity where NextBlockSelector is belonged.</param>
            <returns>Generated NextBlockSelector entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.NextBlockSelector.#ctor(Mozart.SeePlan.Pegging.BlockFlow,System.Collections.Generic.Dictionary{Mozart.SeePlan.Pegging.IBlock,Mozart.SeePlan.Pegging.IBlock})">
            <summary>생성자입니다.</summary>
            <overloads>미리 정의된 Block 연결관계를 추가합니다.</overloads>
            <param name="flow">NextBlockSelector가 속한 Flow 개체입니다.</param>
            <param name="nextBlockMap">미리 정의된 Block 연결관계 목록입니다.</param>
            <returns>생성된 NextBlockSelector 개체입니다.</returns>
            <summary>Constructor.</summary>
            <overloads>Add pre-defined Block link relation.</overloads>
            <param name="flow">The Flow entity where NextBlockSelector is belonged.</param>
            <param name="nextBlockMap">The list of pre-defined link relation Block.</param>
            <returns>Generated NextBlockSelector entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.NextBlockSelector.AddNextBlockMap(Mozart.SeePlan.Pegging.IBlock,Mozart.SeePlan.Pegging.IBlock)">
            <summary>Block 연결관계를 추가합니다.</summary>
            <param name="from">시작 Block 개체입니다.</param>
            <param name="to">끝 Block 개체입니다.</param>
            <summary>Add Block link relation.</summary>
            <param name="from">Start Block entity.</param>
            <param name="to">End Block entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.NextBlockSelector.GetNext(Mozart.SeePlan.Pegging.PegPart)">
            <summary>입력된 PegPart에 대한 다음 Block 개체를 반환합니다.</summary>
            <param name="pegPart">다음 Block을 찾을 PegPart 개체입니다.</param>
            <returns>
            	<para>다음 Block 개체입니다.</para>
            	<para>PegPart의 CurrentBlock이 null인 경우 Flow의 첫째 Block입니다.</para>
            	<para>PegPart의 CurrentStep이 null인 경우 null입니다.</para>
            	<para>PegPart의 CurrentBlock이 SwitchBlock인 경우 SwitchBlock의 다음 실행 Block을 찾는 로직 결과입니다.</para>
            	<para>PegPart의 CurrentBlock이 EndBlock인 경우 Flow의 첫째 Block입니다.</para>
            	<para>PegPart의 CurrentBlock과 연결관계가 있는 Block이 존재하지 않는 경우 null입니다.</para>
            </returns>
            <summary>Return the next Block of the input PegPart.</summary>
            <param name="pegPart">The PegPart entity to search for the next Block.</param>
            <returns>
            	<para>Next Block entity.</para>
            	<para>If CurrentBlock of PegPart is null, return the first Block of the Flow.</para>
            	<para>If CurrentStep of PegPart is null, return null.</para>
            	<para>If CurrentBlock of PegPart is SwitchBlock, return the result of the logic for searching the next Block of SwitchBlock.</para>
            	<para>If CurrentBlock of PegPart is EndBlock, return the first Block of the Flow.</para>
            	<para>If there is no Block with link relationship with CurrentBlock of PegPart, return null.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegFlowExecuter">
            <summary>PegFlow 실행기 Class입니다.</summary>
            <summary>This is the PegFlow executer class.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlowExecuter.InputList">
            <summary>최초에 입력된 PegPart의 목록을 가져옵니다.</summary>
            <summary>Get the list of PegPart entered for the first time.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlowExecuter.ScheduleList">
            <summary>잔여 PegPart의 목록을 가져옵니다.</summary>
            <summary>Get remaining PegPart list.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlowExecuter.Comparer">
            <summary>Flow의 PegPart 비교자를 가져옵니다.</summary>
            <summary>Get PegPart comparer of the Flow.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegFlowExecuter.#ctor(Mozart.RuleFlow.IEngine)">
            <summary>생성자입니다.</summary>
            <param name="engine">실행 엔진 개체입니다.</param>
            <returns>생성된 Flow 실행기입니다.</returns>
            <summary>Constructor.</summary>
            <param name="engine">Execute engine entity.</param>
            <returns>Return generate Flow executer.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegFlowExecuter.Execute(Mozart.RuleFlow.IFlow,System.Collections.Generic.IList{Mozart.RuleFlow.IStageTargetGroup})">
            <summary>Flow를 실행하고, 잔여 PegPart의 목록을 반환합니다.</summary>
            <param name="flow">실행 대상 PegFlow입니다.</param>
            <param name="targetList">실행 대상 PegPart의 목록입니다.</param>
            <returns>실행 결과 잔여 PegPart의 목록입니다.</returns>
            <summary>Execute Flow and return remaining PegPart list.</summary>
            <param name="flow">Target PegFlow to execute.</param>
            <param name="targetList">List of target PegPart to execute.</param>
            <returns>Return the remaining PegPart of the execution result.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerNormalNode">
            <summary>
            PeggerArea 하위에서 공정에 관계없이 수행되는 Pegging 로직 실행 단위 디자인 클래스입니다. 
            PeggerNormalNode로부터 PegFlow가 생성됩니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerNormalNode.Name">
            <summary>
            Node의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerNormalNode.Stages">
            <summary>
            Node에 속한 Stage 이름의 목록을 가져옵니다. 런타임
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerNormalNode.Flow">
            <summary>
            실제로 Pegging 로직을 수행하는 Flow 인스턴스를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerNormalNode.OnBeginFlowFunction">
            <summary>
            Node의 Flow 실행 시작 시 호출되는 함수를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerNormalNode.OnEndFlowFunction">
            <summary>
            Node의 Flow 실행 종료 시 호출되는 함수를 가져옵니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder">
            <summary>
            공정에 관계없이 수행되는 PeggerNode(PeggerNormalNode)를 생성 및 구성하기 위한 기능을 제공하는 클래스입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.#ctor(System.String)">
            <summary>
            주어진 이름을 사용하여 새로운 PeggerNormalNodeBuilder를 생성합니다.
            </summary>
            <param name="name">PeggerN</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.SetName(System.String)">
            <summary>
            PeggerNormalNode의 이름을 설정합니다.
            </summary>
            <param name="name">PeggerNormalNode의 이름입니다.</param>
            <returns>이름 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.SetStages(System.Collections.Generic.ICollection{System.String})">
            <summary>
            PeggerNormalNode에 속한 Stage 이름의 목록을 설정합니다.
            </summary>
            <param name="stages">PeggerNormalNode에 속할 Stage 이름의 목록입니다.</param>
            <returns>Stage 이름 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.SetOnBeginFlowFunction(Mozart.SeePlan.Pegging.OnBeginFlowDelegate)">
            <summary>
            PeggerNormalNode의 Flow 실행 시작 시 호출되는 함수를 설정합니다.
            </summary>
            <param name="onBeginFlow">PeggerNormalNode의 Flow 실행 시작 시 호출될 함수입니다.</param>
            <returns>Flow 시작 함수 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.SetOnEndFlowFunction(Mozart.SeePlan.Pegging.OnEndFlowDelegate)">
            <summary>
            PeggerNormalNode의 Flow 실행 종료 후 호출되는 함수를 설정합니다.
            </summary>
            <param name="onEndFlow">PeggerNormalNode의 Flow 실행 후 호출될 함수입니다.</param>
            <returns>Flow 종료 함수 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerNormalNodeBuilder.Build">
            <summary>
            이전에 주어진 정보로부터 PeggerNormalNode를 생성해서 반환합니다.
            </summary>
            <returns>생성 및 구성이 완료된 PeggerNormalNode입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerProcessNode">
            <summary>
            PeggerArea 하위에서 공정 순서대로 수행되는 Pegging 로직 실행 단위 디자인 클래스입니다. 
            PeggerProcessNode로부터 BlockFlow가 생성됩니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.Name">
            <summary>
            Node의 이름을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.Blocks">
            <summary>
            Node에 포함된 Block 정보의 목록을 가져옵니다. 
            Key는 Block의 이름입니다.
            Value는 Block의 유형과 Block의 추가 정보입니다.
            Block의 추가 정보는 일반적으로 Stage Block에서 사용되고, 해당 Stage Block이 어떤 Stage를 실행해야 하는지를 나타냅니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.NextBlockMap">
            <summary>
            Node에 포함된 Block 간 연결관계의 목록을 가져옵니다. 
            Block 간 연결관계는 1:1 관계입니다.
            Key는 From Block의 이름입니다.
            Value는 To Block의 이름입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.Functions">
            <summary>
            Node에 포함된 Block을 구성하는 함수의 대리자의 목록을 가져옵니다.
            Key는 Block의 이름입니다.
            Value는 Block을 구성하는 함수의 대리자 목록입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.SwitchCases">
            <summary>
            Node에 포함된 Switch Block의 분기 정보의 목록을 가져옵니다.
            Key는 Switch Block의 이름입니다.
            Value는 Switch Block의 분기 정보의 목록입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.PegPartComparer">
            <summary>
            Node의 Flow 내에서 다음 실행 PegPart를 선택할 때 사용되는 PegPart 간 우선순위 비교자를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.PegTargetComparer">
            <summary>
            Node의 Flow 내에서 PegPart에 PegTarget을 추가할 때 PegTarget을 정렬하기 위한 PegTarget 간 우선순위 비교자를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.CompareAlignFunction">
            <summary>
            Node의 Flow 내에서 Flow의 실행 대상으로 복귀시킬 PegPart를 선택할 때 사용되는 Align Block 간 우선순위 비교자를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.OnBeginFlowFunction">
            <summary>
            Node의 Flow 실행 시작 시 호출되는 함수를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.OnEndFlowFunction">
            <summary>
            Node의 Flow 실행 종료 시 호출되는 함수를 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerProcessNode.Flow">
            <summary>
            이 PeggerProcessNode에 의해 생성된 Flow를 가져옵니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder">
            <summary>
            공정 순서대로 수행되는 PeggerMode(PeggerProcessNode)를 생성 및 구성하기 위한 기능을 클래스입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.#ctor(System.String)">
            <summary>
            주어진 이름을 사용하여 새로운 PeggerProcessNodeBuilder를 생성합니다.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetName(System.String)">
            <summary>
            PeggerProcessNode의 이름을 설정합니다.
            </summary>
            <param name="name">PeggerProcessNode의 이름입니다.</param>
            <returns>이름 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.AddBlock(System.String,System.String,Mozart.SeePlan.Pegging.BlockType)">
            <summary>
            PeggerProcessNode에 주어진 정보의 Block을 추가합니다.
            </summary>
            <param name="blockName">Block의 이름입니다.</param>
            <param name="caption">Block의 추가 정보입니다.</param>
            <param name="type">Block의 종류입니다.</param>
            <returns>Block 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.AddNextBlockMap(System.String,System.String)">
            <summary>
            PeggerProcessNode에 Block 간 연결관계를 추가합니다.
            </summary>
            <param name="fromBlockName">From Block입니다.</param>
            <param name="toBlockName">To Block입니다.</param>
            <returns>Block 연결관계 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.AddSwitchCase(System.String,System.String,System.Int32,System.String)">
            <summary>
            PeggerProcessNode에 Switch Block의 PegPart 흐름 분기 정보를 추가합니다.
            </summary>
            <param name="blockName">Switch Block의 이름입니다</param>
            <param name="value">분기의 이름입니다.</param>
            <param name="priority">분기의 우선순위입니다.</param>
            <param name="toBlockName">분기에 포함된 첫 번째 Block의 이름입니다.</param>
            <returns>Switch Block의 분기 정보 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.AddFunction(System.String,System.Delegate)">
            <summary>
            PeggerProcessNode에 Block을 구성하는 함수를 추가합니다.
            </summary>
            <param name="blockName">Block의 이름입니다.</param>
            <param name="function">Block에 추가할 함수입니다.</param>
            <returns>함수 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetPegPartComparer(Mozart.SeePlan.Pegging.ComparePegPartDelegate)">
            <summary>
            PeggerProcessNode에 Flow 내에서 다음 실행 PegPart를 선택할 때 사용되는 PegPart 간 우선순위 비교자를 설정합니다.
            </summary>
            <param name="comparer">PegPart 간 우선순위 비교자입니다.</param>
            <returns>PegPart 간 우선순위 비교자 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetCompareAlignFunction(Mozart.SeePlan.Pegging.CompareAlignDelegate)">
            <summary>
            PeggerProcessNode에 Flow 내에서 Flow의 실행 대상으로 복귀시킬 PegPart를 선택할 때 사용되는 Align Block 간 우선순위 비교자를 설정합니다.
            </summary>
            <param name="compareAlign">두 Align Block 간 우선순위 비교자입니다.</param>
            <returns>Align Block 간 우선순위 비교자 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetPegTargetComparer(Mozart.SeePlan.Pegging.ComparePegTargetDelegate)">
            <summary>
            PeggerProcessNode에 Flow 내에서 PegPart에 PegTarget을 추가할 때 PegTarget을 정렬하기 위한 PegTarget 간 우선순위 비교자를 설정합니다.
            </summary>
            <param name="comparer">두 PegTarget 간 우선순위 비교자입니다.</param>
            <returns>PegTarget 간 우선순위 비교자 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetOnBeginFlowFunction(Mozart.SeePlan.Pegging.OnBeginFlowDelegate)">
            <summary>
            PeggerProcessNode에 Flow 실행 시작 시 호출되는 함수를 설정합니다.
            </summary>
            <param name="onBeginFlow">Flow 실행 시작 시 호출되는 함수입니다.</param>
            <returns>함수 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.SetOnEndFlowFunction(Mozart.SeePlan.Pegging.OnEndFlowDelegate)">
            <summary>
            PeggerProcessNode에 Flow 실행 종료 시 호출되는 함수를 설정합니다.
            </summary>
            <param name="onEndFlow">Flow 실행 종료 시 호출되는 함수입니다.</param>
            <returns>함수 설정작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerProcessNodeBuilder.Build">
            <summary>
            이전에 주어진 정보로부터 PeggerProcessNode를 생성해서 반환합니다.
            </summary>
            <returns>생성 및 구성이 완료된 PeggerProcessNode입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegPartComparer">
            <summary>The class to compare PegPart. The property of the PegPart entity is used for comparison.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartComparer.#ctor(Mozart.SeePlan.Pegging.ComparePegPartDelegate)">
            <summary>Constructor</summary>
            <param name="comparer">The entity of PegPart comparer substitute.</param>
            <returns>Returns PegPart comparer entity. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartComparer.ComparePegPart(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.PegPart)">
            <summary>Compare selected two PegParts and return integer value to indicate each other's location from the sorting order.</summary>
            <param name="x">PegPart entity 'x' for comparison.</param>
            <param name="y">PegPart entity 'y' for comparison.</param>
            <returns>
            	<para>This is the 32 bit integer with mathematical symbols to show the prority relationship among two compared PegParts.</para>
            	<para>If the value is negative, the priority of x is higher than y.</para>
            	<para>If the value is 0, the priority of both PegParts are same.</para>
            	<para>If the value is positive, the priority of x is lower than y.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegTargetComparer">
            <summary>This is the PegTarget comparer class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegTargetComparer.#ctor(Mozart.SeePlan.Pegging.ComparePegTargetDelegate)">
            <summary>Constructor.</summary>
            <param name="comparer">The entity of PegTarget comparer substitute.</param>
            <returns>Returns PegTarget comparer entity. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegTargetComparer.ComparePegTarget(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.PegTarget)">
            <summary>Compare selected two PegTargets and return integer value to indicate each other's location from the sorting order.</summary>
            <param name="x">PegPart entity 'x' for comparison.</param>
            <param name="y">PegPart entity 'y' for comparison.</param>
            <returns>
            	<para>This is the 32 bit integer with mathematical symbols to show the prority relationship among two compared PegTargets.</para>
            	<para>If the value is negative, the priority of x is higher than y.</para>
            	<para>If the value is 0, the priority of both PegParts are same.</para>
            	<para>If the value is positive, the priority of x is lower than y.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SplitBlock">
            <summary>This is the Block class to split PegPart.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SplitBlock.Name">
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SplitBlock.Type">
            <summary>Get Block type.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SplitBlock.Flow">
            <summary>Get Flow entity where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SplitBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SplitBlock.SplitPegPart(Mozart.SeePlan.Pegging.PegPart)">
            <summary>Split the input PegPart and return the split PegParts.</summary>
            <param name="pegPart">The target PegPart entity to split.</param>
            <returns>Return split PegPart list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.StageBlock">
            <summary>This is the Block class having the function to execute Stage.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StageBlock.Name">
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StageBlock.StageTemplateName">
            <summary>Get Stage Template name to be mapped to Block.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StageBlock.Type">
            <summary>Get Block type..</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StageBlock.Flow">
            <summary>Get Flow entity where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StageBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.StageBlock.Execute(Mozart.SeePlan.Pegging.PegPart)">
            <summary>Execute the current Block of the input PegPart and return the generated output PegPart list. </summary>
            <param name="pegPart">Target PegPart entity to be executed.</param>
            <remarks>
            	<para>When Block is executed, the Stage of the current Step of the PegPart is searched and executed.When Stage does not exist, a new Stage is created referring to Stage Template name of Step and Block.</para>
            	<para>The return value is the PegPart list from the generated Stage output.</para>
            </remarks>
            <returns>The generated PegPart list from Block output.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.StageBlock.GetOrCreateStage(Mozart.SeePlan.DataModel.Step)">
            <summary>Searches the Stage of the input Step and returns. If Stage does not exist, a new Stage is created and returned.</summary>
            <param name="step">The Step entity to be mapped with Stage.</param>
            <returns>Returns the Step entity to be mapped with Stage. </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.StartBlock">
            <summary>This is the first Block class of the Flow. This functions as searching for the last Step of PegPart.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StartBlock.Name">
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StartBlock.Type">
            <summary>Get Block type.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StartBlock.Flow">
            <summary>Get Flow entity where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.StartBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.StartBlock.#ctor(System.String,Mozart.SeePlan.Pegging.BlockFlow,Mozart.SeePlan.Pegging.GetLastPeggingStepDelegate)">
            <summary>Contructor.</summary>
            <param name="name">Block name.</param>
            <param name="flow">Flow entity where Block belongs to.</param>
            <param name="getLastPeggingStep">The substitute to find the last Pegging Step of the PegPart.</param>
            <returns>Return the generated Start Block entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.StartBlock.GetLastPeggingStep(Mozart.SeePlan.Pegging.PegPart)">
            <summary>Returns the lastt Pegging Step of the input PegPart.</summary>
            <param name="pegPart">The PegPart entity to search for the last Pegging Step.</param>
            <returns>Returns the last Pegging Step entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SwitchBlock">
            <summary>The Block class to handle Switch logic.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchBlock.Name">
            <summary>Get Block name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchBlock.Type">
            <summary>Get Block type.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchBlock.Flow">
            <summary>Get Flow where Block belongs to.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchBlock.Enabled">
            <summary>
            Gets or sets a value indicating whether the block can be executed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchBlock.#ctor(System.String,Mozart.SeePlan.Pegging.BlockFlow,Mozart.SeePlan.Pegging.SelectCaseDelegate)">
            <summary>Constructor.</summary>
            <param name="name">Block name.</param>
            <param name="flow">The BlockFlow entity including Block.</param>
            <param name="switchFunction">The substitute to evaluate Switch value.</param>
            <returns>생성된 Return generate SwitchBlock.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchBlock.AddNext(System.String,System.Int32,Mozart.SeePlan.Pegging.IBlock)">
            <summary>Add next Block to be executed according to the Case value.</summary>
            <param name="value">Case value.</param>
            <param name="priority">Case prority.</param>
            <param name="next">The entity of next Block to executed satisfying the Case. </param>
            <remarks>There could be more than two Blocks to be executed next. In this case, one of the Blocks to be executed could be selected from NextBlockSelector.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchBlock.AddCases(System.Collections.Generic.List{Mozart.SeePlan.Pegging.SwitchCaseInfo},System.Collections.Generic.Dictionary{System.String,Mozart.SeePlan.Pegging.IBlock})">
            <summary>
            Switch Block의 분기 정보를 추가합니다.
            </summary>
            <param name="cases">분기 정보의 복록입니다.</param>
            <param name="blocks">
            Flow 내의 전체 Block 목록입니다.
            Key는 Block의 이름입니다. 
            Value는 Block 인스턴스입니다.
            </param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchBlock.GetNext(Mozart.SeePlan.Pegging.PegPart)">
            <summary>Return the next Block to be executed from the input PegPart.</summary>
            <param name="pegPart">The PegPart entity to search for the next Block to be executed.</param>
            <returns>Returns the entity of next Block to be executed. If there is no Block satisfying the Case, return null.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SwitchCase">
            <summary>This the class that shows he Case belonging to Switch Block.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.SwitchCase.DEFAULT">
            <summary>Default Case value.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchCase.Value">
            <summary>Get Case value.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchCase.Priotity">
            <summary>Get Case priority.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.SwitchCase.IsDefaultCondition">
            <summary>Determines whether it is the default Case of SwitchCase.</summary>
            <remarks>If the Case value is same as SwitchCase.DEFAULT, return true, or else, return false.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchCase.#ctor(System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="value">Case value.</param>
            <param name="priority">Case priority.</param>
            <returns>Returns generated SwitchCase entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchCase.IsMatch(System.String)">
            <summary>Returns the result whether the input value matches the Case value.</summary>
            <param name="value">Comparison value.</param>
            <returns>If input value is equal to Case value, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SwitchConditionComparer">
            <summary>
            	<para>The class to compare the Switch Case priority.</para>
                <para>The highest priority is the default Case. The lower value is the higher priority for SwitchCase.</para>
            	<para>[2015.4.92.0] This class is no longer in use..</para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SwitchCaseInfo">
            <summary>
            	<para>This is the class that includes the Switch Case and the Switch's next Block information.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SwitchCaseInfo.#ctor(System.String,System.Int32,System.String)">
            <summary>
            주어진 분기의 이름과 우선순위, 분기의 첫 번째 Block 이름으로부터  새로운 SwitchCaseInfo를 생성합니다.
            </summary>
            <param name="value">분기의 이름입니다.</param>
            <param name="priority">분기의 우선순위입니다.</param>
            <param name="toBlockName">분기의 첫 번째 Block 이름입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.FlowExtensions">
            <summary>Flow 클래스에 대한 확장 메소드 집합 Class입니다.</summary>
            <summary>This is the class of extension method set for Flow class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.FlowExtensions.BuildByProc(Mozart.RuleFlow.IEngine,System.String,System.Object,Mozart.SeePlan.DataModel.Step,Mozart.RuleFlow.IStageSelector,Mozart.RuleFlow.IStageSelector,System.Boolean,Mozart.RuleFlow.IRulePreset,System.Predicate{Mozart.SeePlan.DataModel.Step})">
            <summary>Process 정보를 통해 Flow를 자동 구성합니다. Flow구성 순서는 Forward 방향의 공정 진행 순서입니다.</summary>
            <param name="engine">Pegging Engine 개체입니다.</param>
            <param name="name">생성할 Flow 이름입니다.</param>
            <param name="process">Process 개체입니다.</param>
            <param name="first">초기 Step 개체입니다.</param>
            <param name="cs">Flow를 구성하는 Child Stage Selector 개체입니다.</param>
            <param name="ns">Flow를 구성하는 Next Stage Selector 개체입니다.</param>
            <param name="availableToMerge">Flow에 속한 Stage들이 PegMart를 Merge/Split할 수 있는지 여부입니다.</param>
            <param name="preset">Flow를 구성하는 Stage 생성시 사용될 Rule Preset 개체입니다.</param>
            <param name="filter">Flow 구성시 사용될 Step 필터함수입니다.</param>
            <returns>생성된 Flow 개체입니다.</returns>
            <summary>Composes Flow information automatically through Process information. The Flow composition order is the Step process sequence of Forward direction.</summary>
            <param name="engine">Pegging Engine entity.</param>
            <param name="name">Name of Flow to be created.</param>
            <param name="process">Process entity.</param>
            <param name="first">Initial Step entity.</param>
            <param name="cs">The Child Stage Selector entity to compose Flow.</param>
            <param name="ns">The Next Stage Selector entity to compose Flow.</param>
            <param name="availableToMerge">Determines whether Stage in Flow will Merge/Split PegMart.</param>
            <param name="preset">The Rule Preset entity used when creating Stage composing Flow.</param>
            <param name="filter">The Step Filter function to used for composing Flow.</param>
            <returns>Returns created Flow.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.FlowExtensions.BuildByProcBwd(Mozart.RuleFlow.IEngine,System.String,System.Object,Mozart.SeePlan.DataModel.Step,Mozart.RuleFlow.IStageSelector,Mozart.RuleFlow.IStageSelector,System.Boolean,Mozart.RuleFlow.IRulePreset,System.Predicate{Mozart.SeePlan.DataModel.Step})">
            <summary>
            Process 정보를 통해 Flow를 자동 구성합니다. Flow구성 순서는 Backward 방향의 공정진행순서입니다.
            Pegging 실행시 Main Flow 를 구성하기 위해 사용됩니다. 
            </summary>
            <param name="engine">Pegging Engine 개체입니다.</param>
            <param name="name">생성할 Flow 이름입니다.</param>
            <param name="process">Process 개체입니다.</param>
            <param name="last">초기 Step 개체입니다.</param>
            <param name="cs">Flow를 구성하는 Child Stage Selector 개체입니다.</param>
            <param name="ns">Flow를 구성하는 Next Stage Selector 개체입니다.</param>
            <param name="availableToMerge">Flow에 속한 Stage들이 PegMart를 Merge/Split할 수 있는지 여부입니다.</param>
            <param name="preset">Flow를 구성하는 Stage 생성시 사용될 Rule Preset 개체입니다.</param>
            <param name="filter">Flow 구성시 사용될 Step 필터함수입니다.</param>
            <returns>생성된 Flow 개체입니다.</returns>
            <summary>
            Composes Flow information automatically through Process information. The Flow composition order is the Step process sequence of Backward direction.
            This is used to compose Main Flow for Pegging. 
            </summary>
            <param name="engine">Pegging Engine entity.</param>
            <param name="name">Name of Flow to be created.</param>
            <param name="process">Process entity.</param>
            <param name="last">Initial Step entity.</param>
            <param name="cs">The Child Stage Selector entity to compose Flow.</param>
            <param name="ns">The Next Stage Selector entity to compose Flow.</param>
            <param name="availableToMerge">Determines whether Stage in Flow will Merge/Split PegMart.</param>
            <param name="preset">The Rule Preset entity used when creating Stage composing Flow.</param>
            <param name="filter">The Step Filter function to used for composing Flow.</param>
            <returns>Returns created Flow.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerCfg2">
            <summary>정의되어 있는 모든 PeggerModel과 활성화된 PeggerModel을 제공하는 Interface입니다.</summary>
            <summary>This is the Interface that provides all PeggerModel and activated PeggerModel.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerCfg2.Models">
            <summary>정의되어 있는 모든 PeggerModel의 목록을 가져옵니다.</summary>
            <summary>Gets the list of all defined PeggerModel.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerCfg2.Actives">
            <summary>활성화된 PeggerModel의 목록을 가져옵니다.</summary>
            <summary>Get the list of activated PeggerModel.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerModelBase">
            <summary>
            <para>Pegging 모델의 최상위 Interface입니다.</para>
            <para>[2015.4.92.0] 이 Interface 추후 사용되지 않을 예정입니다.</para>
            </summary>
            <summary>
            <para>The root Interface of Pegging Model.</para>
            <para>[2015.4.92.0] This Interface will soon not be in use.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModelBase.Name">
            <summary>
            PeggerModel의 이름을 가져옵니다.
            </summary>
            <summary>
            Get PeggerModel name.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.MoMaster">
            <summary>
            Demand Master(최종 생산제품에 대한 수요) 정보입니다.
            </summary>
            <summary>
            Demand Master(End-product demand) information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoMaster.MoPlanList">
            <summary>최종 생산제품에 대한 단위기간별 계획(MoPlan) 목록을 가져오거나 설정합니다.</summary>
            <remarks>단위기간은 일, 주 등이 될 수 있습니다.</remarks>
            <summary>Get or set unit duration plan (MoPlan) list for end-product.</summary>
            <remarks>The unit duration can be day, week, etc.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoMaster.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoMaster.AddMoPlan(Mozart.SeePlan.Pegging.MoPlan)">
            <summary>Demand Master에 단위기간별 Demand 정보(MoPlan)를 추가합니다.</summary>
            <param name="moPlan">추가대상 Demand 개체입니다.</param>
            <summary>Add unit duration Demand information(MoPlan) to Demand Master.</summary>
            <param name="moPlan">Target Demand entity to add.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.MoPlan">
            <summary>최종 생산제품에 대한 단위기간의 수요(Demand) 정보 Class입니다.</summary>
            <summary>The class of Demand Master(End-product demand) information..</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoPlan.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoPlan.#ctor(System.Double,System.DateTime)">
            <summary>
            생성자입니다.
            </summary>
            <param name="qty">Demand 수량입니다.</param>
            <param name="duedate">Demand 납기일입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="qty">Demand quantity.</param>
            <param name="duedate">Demand due date.</param>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoPlan.Qty">
            <summary>Demand 수량을 가져오거나 설정합니다.</summary>
            <summary>Get/Set Demand quantity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoPlan.DueDate">
            <summary>Demand 납기일을 가져오거나 설정합니다.</summary>
            <summary>Get/Set Demand due date.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoPlan.IsFixed">
            <summary>Demand가 확정된 계획인지 여부를 가져오거나 설정합니다.</summary>
            <summary>Get/Set whether the Demand is a fixed plan.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoPlan.WeekNo">
            <summary>Demand의 주차 번호를 가져오거나 설정합니다.</summary>
            <summary>Get/Set week number of Demand</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MoPlan.Priority">
            <summary>Demand의 우선순위를 가져오거나 설정합니다.</summary>
            <summary>Get/Set Demand priority.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoPlan.Clone">
            <summary>현재 MoPlan을 복제해서 반환합니다.</summary>
            <summary>Replicate current MoPlan and return.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MoPlan.Split(System.Int32)">
            <summary>이 MoPlan에서 입력된 수량 만큼 차감하여 DueDate이 동일한 MoPlan을 생성해서 반환합니다.</summary>
            <param name="splitQty">차감 수량입니다.</param>
            <summary>Deduct the quantities entered through the replicated MoPlan and create MoPlan with same due date and return.</summary>
            <param name="splitQty">Deducted quantities.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PreRuleLogic">
            <summary>
            <para>This is the class with pre-definition of basic Rule for Action.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PreRuleLogic.CREATE_INNER_BUCKET_DEF(System.String,Mozart.SeePlan.Pegging.MoPlan,System.DateTime,System.Boolean,System.Boolean@,Mozart.SeePlan.Pegging.IInnerBucket)">
            <summary>
            	<para>[Predefine] Rules/SMOOTH_DEMAND/CreateInnerBucket</para>
            	<para>Creates new Mozart.SeePlan.Pegging.InnerBucket instance and return.</para>
            </summary>
            <param name="key">Inner Bucket identifier.</param>
            <param name="moPlan">Weekly plan information used as reference for creating Inner Bucket.</param>
            <param name="weekStartDate">The starting week of the weekly plan in InnerBucket.</param>
            <param name="isW00">Determines whether if the weekly plans in InnerBucket is the first week plan.</param>
            <param name="handled">This is the value used to decide to execute the next Definition after executing the current Definition.</param>
            <param name="prevReturnValue">The result of the previous Definition. If it is the first Definition of the Action either null or default vaule is the result.</param>
            <returns>
            	<para>Returns generated InnerBucket entity.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PreRuleLogic.CREATE_OUTER_BUCKET_DEF(System.String,System.Boolean@,Mozart.SeePlan.Pegging.IOuterBucket)">
            <summary>
            	<para>[Predefine] Rules/SMOOTH_DEMAND/CreateOuterBucket</para>
            	<para>Creates new Mozart.SeePlan.Pegging.OuterBucket instance and return.</para>
            </summary>
            <param name="key">Outer Bucket identifier.</param>
            <param name="handled">This is the value used to decide to execute the next Definition after executing the current Definition.</param>
            <param name="prevReturnValue">The result of the previous Definition. If it is the first Definition of the Action either null or default vaule is the result.</param>
            <returns>Returns generated OuterBucket entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerArea2">
            <summary>Pegging Area Class입니다.</summary>
            <summary>Pegging Area Class.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.Name">
            <summary>Area의 이름을 가져오거나 설정합니다.</summary>
            <summary>Get or set Area name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.Nodes">
            <summary>Area에 속한 Node의 목록을 가져합니다.</summary>
            <summary>Get the list of nodes in Area.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.Nexts">
            <summary>다음 Area의 목록을 가져옵니다.</summary>
            <summary>Get the list of next Area.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.Prevs">
            <summary>이전 Area의 목록을 가져옵니다.</summary>
            <summary>Get the list of previous Area.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.IsDummy">
            <summary>Area가 실행 대상인지 아닌지 여부를 가져오거나 설정합니다.</summary>
            <summary>Get or Set to determine whether the Area is a target to perform Flow.</summary>>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerArea2.CurrentNode">
            <summary>현재 실행 중인 Node를 가져옵니다.</summary>
            <summary>Get Node currently in progress.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerAreaBuilder2">
            <summary>
            PeggerArea를 생성 및 구성하기 위한 기능을 제공하는 클래스입니다.
            </summary>
            <summary>
            PeggerAreaBuilder2 is the class that provides functionality to create and configure PeggerArea.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.Name">
            <summary>
            Area의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of Area.
            </summary>
            <returns>Returns the string of Area name.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.IsDummy">
            <summary>
            Area가 실행 대상인지 아닌지 여부를 가져옵니다.
            </summary>
            <summary>
            A boolean value to determine whether the specified Area is to be executed or not.  
            </summary>
            <returns>Returns boolean value to determine whether the specified Area is to be executed or not.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.#ctor(System.String,System.Boolean)">
            <summary>
            주어진 이름과 실행 대상 여부를 사용하여 새로운 PeggerAreaBuilder를 생성합니다.
            </summary>
            <param name="name">Area의 이름입니다.</param>
            <param name="isDummy">Area의 실행 대상 여부입니다.</param>
            <summary>
            Creates new PeggerAreaBuilder using the value returned from <c>Name</c> and <c>IsDummy</c>. 
            </summary>
            <param name="name">The name of Area.</param>
            <param name="isDummy">The boolean value to determine whether the specified Area is to be executed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.AddNode(Mozart.SeePlan.Pegging.IPeggerNodeBuilder)">
            <summary>
            Area에 Node를 추가합니다.
            </summary>
            <param name="node">Area에 추가할 Node입니다.</param>
            <returns>Node 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
            <summary>
            Adds node to the Area and returns itself as an instance. 
            </summary>
            <param name="node">The node to add to Area.</param>
            <returns>Returns itself as an instance with node included.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.AddNext(Mozart.SeePlan.Pegging.PeggerAreaBuilder2)">
            <summary>
            Area에 다음 Area를 추가합니다.
            </summary>
            <param name="next">다음 Area입니다.</param>
            <returns>다음 Area 추가 작업이 완료된 이 인스턴스 자신입니다.</returns>
            <summary>
            Adds the next Area to the specified Area and returns itself as an instance.
            </summary>
            <param name="next">The next Area to add.</param>
            <returns>Returns itself as an instance with the next Area included.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerAreaBuilder2.Build">
            <summary>
            이전에 주어진 정보로부터 PeggerArea를 생성해서 반환하고, 이 PeggerAreaBuilder의 사용을 중지합니다.
            </summary>
            <returns></returns>
            <summary>
                <para>Creates and returns PeggerArea through the previously given information. </para>
                <para>Suspends the specified PeggerAreaBuilder utilization.</para>
            </summary>
            <returns>Returns the created PeggerArea.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IMaterial">
            <summary>Pegging 대상 재공/실적 정보로 사용되기 위한 속성을 제공하는 Interface입니다.</summary>
            <summary>This is the Interface that provides the property to use WIP/Act information for Pegging.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IMaterial.Qty">
            <summary>재공/실적의 수량을 가져오거나 설정합니다.</summary>
            <summary>Get/Set WIP/Act quantity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IMaterial.AvailableTime">
            <summary>재공/실적이 가용해지는 시간을 가져오거나 설정합니다.</summary>
            <summary>Get/Set WIP/Act available time.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IMaterial.State">
            <summary>재공/실적의 상태를 가져오거나 설정합니다.</summary>
            <summary>Get/Set WIP/Act state.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IMergedPegPart">
            <summary>This is the Interface that provides the property of Merged PegPart.(Multiple PegParts merged into a single PegPart)</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IMergedPegPart.Items">
            <summary>
            Merge된 PegPart의 리스트 입니다.
            </summary>
            <summary>
            The list of merged PegPart.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IMergedPegPart.Merge(Mozart.SeePlan.Pegging.PegPart)">
            <summary>입력된 PegPart를 병합합니다. 병합된 PegPart는 Items에 추가됩니다.</summary>
            <param name="item">병합 대상 PegPart 개체입니다.</param>
            <summary>Merges the specified PegPart objects. Merged PegPart objects are included to IList&lt;PegPart&gt; Items.</summary>
            <param name="item">The sepcified PegPart object to merge.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IMergedPegPart.Split(Mozart.SeePlan.Pegging.PegPart)">
            <summary>입력된 PegPart를 병합된 PegPart를 분리합니다. 분리된 PegPart는 Items에서 제거됩니다.</summary>
            <param name="item">분리 대상 PegPart 개체입니다.</param>
            <summary>Splits the specified PegPart object. Split PegPart objects are removed from IList&lt;PegPart&gt; Items.</summary>
            <param name="item">Split target PegPart entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IMergedPegPart.SetCurrentStage(Mozart.SeePlan.Pegging.PegStage)">
            <summary>입력된 Stage를 CurrentStage로 설정합니다. 병합된 PegPart들의 CurrentStage도 함께 변경합니다.</summary>
            <param name="stage">변경 대상 Stage 개체입니다.</param>
            <summary>Set specified Stage as CurrentStage. The values of CurrentStage property of merged PegPart will also change.</summary>
            <param name="stage">Target Stage entity to be changed.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPegger">
            <summary>Pegging 을 수행을 담당하는 최상위 실행 Interface입니다.</summary>
            <summary>The highest-level execution Interface responsible for executing Pegging. </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPegger.Engine">
            <summary>Pegging Engine을 가져옵니다.</summary>
            <summary>Get Pegging Engine.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerArea2">
            <summary>
            PeggerModel 하위의 Pegging 로직 실행 단위 Interface입니다.
            </summary>
            <summary>
            Pegging logic execution phase interface subordinate to PeggerModel class.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.Name">
            <summary>Area의 이름을 가져오거나 설정합니다.</summary>
            <summary>Gets or sets string of Area name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.IsDummy">
            <summary>PeggingModel 실행 시 Area 실행 여부를 가져오거나 설정합니다.</summary>
            <summary>Gets or Sets a boolean value to execute Area when PeggingModel is executed.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.Nodes">
            <summary>Area에 속한 Node의 목록을 가져옵니다.</summary>
            <summary>Gets the list of nodes belonging to Area.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.Nexts">
            <summary>이 Area 다음에 연결된 Area의 목록을 가져옵니다.</summary>
            <summary>Get the list of next Area connected to the specified Area.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.Prevs">
            <summary>이 Area 이전에 연결된 Area의 목록을 가져옵니다.</summary>
            <summary>Get the list of previous Area connected to the specified Area .</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerArea2.CurrentNode">
            <summary>현재 실행 중인 Node를 가져옵니다.</summary>
            <summary>Gets the node currently executing.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerFactory">
            <summary>
            	<para>Pegger 생성을 위한 기능을 제공합니다.</para>
            	<para>[2015.4.92.0] 이 Interface는 더이상 사용되지 않습니다.</para>
            </summary>
            <summary>
            	<para>Provides function to create Pegger.</para>
            	<para>[2015.4.92.0] This Interface is no longer used.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerFactory.Engine">
            <summary>
            RuleFlow Engine 입니다.
            </summary>
            <summary>
            RuleFlow Engine.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerFactory.CreateModelBuilder(System.String)">
            <summary>
            PeggerModel을 생성할 PeggerModelBuilder 를 생성합니다. 
            </summary>
            <returns>PeggerModelBuilder 객체입니다.</returns>
            <summary>
            Generates PeggerModelBuilder to generate PeggerModel. 
            </summary>
            <returns>PeggerModelBuilder 객체입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerNode2">
            <summary>
            PeggerArea 하위의 Pegging 로직 실행 단위 디자인 Interface입니다. 
            PeggerNode로부터 Pegging 로직 실행 단위인 Flow가 생성됩니다.
            </summary>
            <summary>
            IPeggerNode interface is a design of pegging logic execution phase subordinate to PeggerArea class.
            Flow is the pegging execution phase and it is created from PeggerNode. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerNode2.Name">
            <summary>PeggerNode의 이름을 가져옵니다.</summary>
            <summary>Gets PeggerNode name.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerModel">
            <summary>
            <para>Pegging 실행의 기본 단위(PeggerModel) 의 속성과 기능을 제공합니다.</para>
            <para>[2015.4.92.0] 이 Interface는 더이상 사용되지 않습니다.</para>
            </summary>
            <summary>
            <para>Provides property and function of the base unit(PeggerModel) for Pegging.</para>
            <para>[2015.4.92.0] This Interface is no longer in use.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel.PreProcess">
            <summary>
            PreProcess Flow 입니다.
            </summary>
            <summary>
            PreProcess Flow.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel.Main">
            <summary>
            Main Flow 입니다.
            </summary>
            <summary>
            Main Flow.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel.PostProcess">
            <summary>
            PostProcess Flow 입니다.
            </summary>
            <summary>
            PostProcess Flow.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel.Executer">
            <summary>
            FlowExecuter 입니다.
            </summary>
            <summary>
            FlowExecuter.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel.Next">
            <summary>
            다음 실행할 PeggerModel 입니다.
            </summary>
            <summary>F
            Next PeggerModel to execute.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerModel.ChainNext(Mozart.SeePlan.Pegging.IPeggerModel)">
            <summary>
            다음 실행할 PeggerModel 을 연결합니다. 
            </summary>
            <param name="next">다음 실행대상 PeggerModel 입니다. </param>
            <summary>
            Link the next PeggerModel to execute. 
            </summary>
            <param name="next">The target PeggerModel to execute next. </param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerModel2">
            <summary>Pegging 로직을 수행하기 위한 최상위 실행 단위의 인터페이스입니다.</summary>
            <summary>The highest Pegging logic execution phase interface.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel2.StartArea">
            <summary>Pegging Model의 첫째 Area를 가져옵니다.</summary>
            <summary>Get the first Area of Pegging model.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModel2.CurrentArea">
            <summary>현재 실행 중인 Area를 가져옵니다.</summary>
            <summary>Get Area currently in progress.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPeggerModelBuilder">
            <summary>
            PeggerModel을 생성 및 구성하기 위한 기능을 제공하는 Interface입니다.
            </summary>
            <summary>
            The interface that provides functionality for creating and configuring a PeggerModel. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IPeggerModelBuilder.Engine">
            <summary>
            Ruleflow Engine 객체입니다.
            </summary>
            <summary>
            Ruleflow Engine entity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mozart.SeePlan.Pegging.IPeggerModelBuilder.Build" -->
        <member name="M:Mozart.SeePlan.Pegging.IPeggerModelBuilder.SetPreProcessFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel의 PreProcess Flow를 설정합니다.
            </summary>
            <param name="flow">PreProcess Flow로 설정할 Flow입니다.</param>
            <summary>
            Configures PreProcess Flow of PeggerModel.
            </summary>
            <param name="flow">The Flow object to set as <em>PreProcess Flow</em></param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerModelBuilder.SetMainFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel의 Main Flow를 설정합니다.
            </summary>
            <param name="flow">Main Flow로 설정할 Flow입니다.</param>
            <summary>
            Configures Main Process Flow of PeggerModel.
            </summary>
            <param name="flow">The Flow object to set as <em>Main Flow</em></param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPeggerModelBuilder.SetPostProcessFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel의 PostProcess Flow를 설정합니다.
            </summary>
            <param name="flow">PostProcess로 설정할 Flow입니다.</param>
            <summary>
            Configure PostProcess Flow of PeggerModel.
            </summary>
            <param name="flow">The Flow object to set as <em>PostProcess Flow.</em></param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IPegPartComparer">
            <summary>PegPart 비교자 Interface입니다.</summary>
            <summary>PegPart comparer Interface.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IPegPartComparer.ComparePegPart(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.PegPart)">
            <summary>지정된 두 PegPart 개체를 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</summary>
            <param name="x">비교할 첫째 PegPart 개체입니다.</param>
            <param name="y">비교할 둘째 PegPart 개체입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 PegPart의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
            <summary>Compare selected two PegParts and return integer value to indicate each other's location from the sorting order.</summary>
            <param name="x">PegPart entity 'x' for comparison.</param>
            <param name="y">PegPart entity 'y' for comparison.</param>
            <returns>
            	<para>This is the 32 bit integer with mathematical symbols to show the prority relationship among two compared PegParts.</para>
            	<para>If the value is negative, the priority of x is higher than y.</para>
            	<para>If the value is 0, the priority of both PegParts are same.</para>
            	<para>If the value is positive, the priority of x is lower than y.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.MergedPegPart">
            <summary>여러 PegPart를 병합하여 처리하기 위한 PegPart Class입니다.</summary>
            <remarks>PegPartMerger 를 통해 Merge, Split 됩니다.</remarks>
            <summary>This is the PegPart class to merge multiple PegParts into a single PegPart.</summary>
            <remarks>PegParts are merged/splitted through PegPartMerger.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.MergedPegPart.Items">
            <summary>Merge된 PegPart의 목록을 가져옵니다.</summary>
            <summary>Get list of Merged PegPart.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MergedPegPart.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            생성자입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MergedPegPart.Merge(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            입력된 PegPart 를 병합합니다. 
            </summary>
            <param name="pegPart">병합대상 PegPart 개체입니다.</param>
            <summary>
            Merge target PegPart. 
            </summary>
            <param name="pegPart">Target PegPart to be merged.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MergedPegPart.Split(Mozart.SeePlan.Pegging.PegPart)">
            <summary>입력된 PegPart를 병합된 PegPart의 목록에서 제거합니다.</summary>
            <param name="pegPart">제거 대상 PegPart 개체입니다.</param>
            <summary>Remove input PegPart from the merged PegPart list.</summary>
            <param name="pegPart">Target PegPart entity to be removed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.MergedPegPart.SetCurrentStage(Mozart.SeePlan.Pegging.PegStage)">
            <summary>
            입력된 Stage를 CurrentStage로 설정합니다. 
            병합된 PegPart들의 CurrentStage도 함께 변경합니다.
            </summary>
            <param name="stage">변경 대상 Stage 개체입니다.</param>
            <summary>
            Set input Stage as CurrentStage.
            The merged PegPart of CurrentStage is changed together.
            </summary>
            <param name="stage">Target Stage entity to be changed.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegEngine">
            <summary>Pegging Engine Class입니다.</summary>
            <summary>Pegging Engine Class.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegEngine.Executer">
            <summary>Pegger로 정의된 Flow 또는 PeggerModeler로 정의된 Normal Flow와 Stock Area의 Flow를 실행하는 개체를 가져옵니다.</summary>
            <summary>Get entity to execute Flow defined through Pegger or Normal and Stock Areag Flow defined through PeggerModeler.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegEngine.BlockExecuter">
            <summary>PeggerModeler로 정의된 Process Flow를 실행하는 개체를 가져옵니다.</summary>
            <summary>Get entity to execute Process Flow defined through PeggerModeler.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegEngine.#ctor">
            <summary>생성자입니다.</summary>
            <summary>Constructor.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegEngine.#ctor(Mozart.RuleFlow.IRuleManager,Mozart.RuleFlow.IFlowManager)">
            <summary>
            생성자입니다.
            </summary>
            <param name="rule">Pegging Engine에서 사용되는 Rule 관리 개체입니다.</param>
            <param name="flow">Pegging Engine에서 사용되는 Flow 관리 개체입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="rule">Rule management object used in Pegging Engine.</param>
            <param name="flow">Flow management object used in Pegging Engine.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegEngine.CreateFlowBuilder">
            <summary>
            Flow 생성을 위한 FlowBuilder 를 생성하여 반환합니다. 
            </summary>
            <returns>생성된 PegFlowBuilder 개체를 반환합니다.</returns>
            <summary>
            Creates and returns FlowBuilder object to create Flow. 
            </summary>
            <returns>Return the created FlowBuilder object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegEngine.CreateFlowBuilder(Mozart.RuleFlow.IFlow)">
            <summary>입력 Flow 에 대한 FlowBuilder 개체를 생성하여 반환합니다.</summary>
            <param name="flow">수정대상 Flow 개체입니다.</param>
            <returns>생성된 FlowBuilder 개체입니다.</returns>
            <summary>Creates and returns FlowBuilder object for the specified Flow object.</summary>
            <param name="flow">The specified Flow object to modify.</param>
            <returns>Returns FlowBuilder object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegEngine.Dispose">
            <summary>
            생성된 Flow 실행 개체를 폐기합니다.
            </summary>
            <summary>
            Disposes the created Flow execution object. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegFlow">
            <summary>
            공정에 관계없이 수행되는 Pegging 로직 실행 단위 클래스입니다. 
            </summary>
            <summary>
            Pegging logic execution level class. The methods are called regardless of the Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlow.Model">
            <summary>Flow가 포함된 PeggerModel을 가져옵니다.</summary>
            <summary>Get PeggerModel with Flow included.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlow.OnBeginFlowFunction">
             <summary>
             Flow 실행 시작 시 호출되는 함수를 가져옵니다.
             </summary>
            
            <summary>
            Gets the method to be called when Flow starts. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlow.OnEndFlowFunction">
            <summary>
            Flow 실행 종료 시 호출되는 함수를 가져옵니다.
            </summary>
            <summary>
            Gets the method to be called when Flow execution completes. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegFlow.FlowKey">
            <summary>Flow 구분자를 가져옵니다. Flow가 포함된 PeggerModel의 이름과 Flow의 이름이 합쳐진 것입니다.</summary>
            <summary>Get Flow indicator. The name of the indicator is combination of name of Pegger Model infcluding the Flow and name of Flow.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegFlow.#ctor(Mozart.RuleFlow.IEngine)">
            <summary>
            생성자입니다.
            </summary>
            <param name="engine">PegEngine 입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="engine">PegEngine.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegFlow.SetModel(Mozart.SeePlan.Pegging.IPeggerModelBase)">
            <summary>
            Flow의 Pegger model 을 설정합니다. 
            </summary>
            <param name="model">설정대상 Pegger model 입니다.</param>
            <summary>
            Set Pegger Model of Flow. 
            </summary>
            <param name="model">Target Pegger Model to be configured.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegFlowBuilder">
            <summary>
            Peg flow 생성/수정을 위한 클래스입니다.
            </summary>
            <summary>
            Class to generate/modify Peg Flow.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegFlowBuilder.SetModel(Mozart.SeePlan.Pegging.IPeggerModelBase)">
            <summary>
            대상 flow 에 대한 pegger model 을 설정합니다.
            </summary>
            <param name="model">설정대상 Pegger model 입니다.</param>
            <returns>PegStageBuilder 입니다.</returns>
            <summary>
            Set Pegger Model of target Flow. 
            </summary>
            <param name="model">Target Pegger Model to be configured.</param>
            <returns>Return PegStageBuilder.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Pegger">
            <summary>
            Pegging 을 수행을 담당하는 최상위 실행 클래스입니다.
            </summary>
            <summary>
            This the root class responsible for performing Pegging.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Pegger.Current">
            <summary>현재 활성화된 Pegger 개체를 가져옵니다.</summary>
            <summary>Get the currently activated Pegger entity.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Pegger.Engine">
            <summary>PEgging Engine을 가져옵니다.</summary>
            <summary>Get Pegging Engine.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Pegger.CurrentModel">
            <summary>현재 실행 중인 PeggerModel을 가져옵니다.</summary>
            <summary>Get PeggerModel currently in progress.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Pegger.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Pegger.#ctor(Mozart.SeePlan.Pegging.PegEngine)">
            <summary>
            생성자입니다.
            </summary>
            <param name="engine">실행 엔진(Ruleflow Engine) 입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="engine">Ruleflow engine.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Pegger.Initialize(Mozart.Task.Execution.ModelContext)">
            <summary>
            Pegging 실행을 위한 초기화를 수행합니다.
            </summary>
            <param name="context">모델 실행 컨텍스트입니다.</param>
            <summary>
            Perform initialization to execute Pegging.
            </summary>
            <param name="context">Model execution context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Pegger.Execute(Mozart.Task.Execution.ModelContext)">
            <summary>Pegging을 실행합니다.</summary>
            <param name="context">모델 실행 컨텍스트입니다.</param>
            <summary>Executes Pegging.</summary>
            <param name="context">Model execution context.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerFactory">
            <summary>
            Pegger 생성을 위한 Factory 클래스 입니다.
            </summary>
            <summary>
            Factory class to generate Pegger.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerFactory.Engine">
            <summary>
            Ruleflow 엔진객체입니다.
            </summary>
            <summary>
            Ruleflow engine entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerFactory.#ctor(Mozart.RuleFlow.IEngine)">
            <summary>
            생성자입니다. 
            </summary>
            <param name="engine">Ruleflow 엔진입니다.</param>
            <summary>
            Constructor. 
            </summary>
            <param name="engine">Ruleflow engine.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerFactory.CreateModelBuilder(System.String)">
            <summary>
            PeggerModelBuilder 를 생성하여 반환합니다.
            </summary>
            <param name="name">PeggerModel Builder 명칭입니다.</param>
            <returns>PeggerModelBuilder 객체 입니다.</returns>
            <summary>
            Generate and return PeggerModelBuilder
            </summary>
            <param name="name">Name of PeggerModel Builder.</param>
            <returns>PeggerModelBuilder entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModel">
            <summary>
            Pegging 실행을 위한 단위 모델클래스입니다. 
            Pegging 수행시 최소 1개의 PeggerModel 부터 N개의 Pegger 모델을 구성할 수 있습니다.
            </summary>
            <summary>
            This is the unit model class for executing Pegging. 
            At least 1 PeggerModel to N PeggerModel could be composed for executing Pegging.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.Name">
            <summary>
            모델 명입니다.
            </summary>
            <summary>
            Model name.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.PreProcess">
            <summary>
            Pegging 을 위한 전처리 실행 flow 입니다.
            </summary>
            <summary>
            Preprocessing execution Flow for Pegging.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.Main">
            <summary>
            Pegging 수행을위한 flow입니다. 
            </summary>
            <summary>
            Flow to perform Pegging. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.PostProcess">
            <summary>
            Pegging 수행후 후처리 실행 flow 입니다. 
            </summary>
            <summary>
            Postprocess execution Flow after Pegging is completed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.Next">
            <summary>
            다음 실행될 PeggerModel 입니다.         
            </summary>
            <summary>
            Next PeggerModel to execute.       
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel.Executer">
            <summary>
            PeggerModel의 flow 를 실행하는 FlowExecuter 입니다.
            </summary>
            <summary>
            FlowExecuter to execute flow of PeggerModel.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.PeggerModel.Current">
            <summary>
            현재 실행중인 PeggerModel 을 참조하기 위한 Static 변수입니다.
            </summary>
            <summary>
            Static variable to refer to PeggerModel currently in progress. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModel.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModel.ChainNext(Mozart.SeePlan.Pegging.IPeggerModel)">
            <summary>
            해당 모델의 후속 실행모델을 설정합니다.
            </summary>
            <param name="next">다음 실행 PeggerModel입니다.</param>
            <summary>
            Sets the next PeggerModel to execute after the current PeggerModel.
            </summary>
            <param name="next">Next PeggerModel to execute.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModel2">
            <summary>Pegging 모델의 최상위 Class입니다.</summary>
            <summary>The root class of Pegging Model.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel2.Name">
            <summary>Pegging 모델의 이름을 가져오거나 설정합니다.</summary>
            <summary>Get/Set Pegging Model name.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel2.StartArea">
            <summary>Pegging 모델의 첫째 Area를 가져오거나 설정합니다.</summary>
            <summary>Get/Set first Area of Pegging Model.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModel2.CurrentArea">
            <summary>현재 실행 중인 Area를 가져옵니다.</summary>
            <summary>Get Area currently in progress.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.PeggerModel2.Current">
            <summary>현재 실행 중인 Pegging 모델 개체입니다.</summary>
            <summary>Entity of Pegging Model currently in progress.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModelBuilder">
            <summary>
            PeggerModel 생성을 위한 구조체입니다.
            </summary>
            <summary>
            Structure to generate PeggerModel.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerModelBuilder.Engine">
            <summary>
            Pegging 실행을 위한 Ruleflow 엔진입니다.
            </summary>
            <summary>
            Ruleflow engine to execute Pegging.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder.#ctor(Mozart.RuleFlow.IEngine,System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="engine">실행엔진입니다.</param>
            <param name="name">생성대상 PeggerModel 명칭입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="engine">Runflow enging.</param>
            <param name="name">Name of PeggerModel to be generated.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder.Build">
            <summary>
            PeggerModel 을 반환합니다. 
            </summary>
            <returns>PeggerModel 객체입니다.</returns>
            <summary>
            Return PeggerModel
            </summary>
            <returns>Return PeggerModel entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder.SetPreProcessFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel 의 Preflow를 설정합니다. 
            </summary>
            <param name="flow">Pre Processing flow 객체입니다.</param>
            <summary>
            Configure Preflow of PeggerModel 
            </summary>
            <param name="flow">Pre Processing flow entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder.SetMainFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel 의 Mainflow를 설정합니다. 
            </summary>
            <param name="flow">Main Processing flow 객체입니다.</param>
            <summary>
            Configure Mainflow of PeggerModel . 
            </summary>
            <param name="flow">Main Processing flow entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder.SetPostProcessFlow(Mozart.RuleFlow.IFlow)">
            <summary>
            PeggerModel 의 Postflow를 설정합니다. 
            </summary>
            <param name="flow">Post Processing flow 객체입니다.</param>
            <summary>
            Configure Postflow of PeggerModel . 
            </summary>
            <param name="flow">Post Processing flow entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModelBuilder2">
            <summary>
            PeggerModel을 생성 및 구성하기 위한 기능을 제공하는 클래스 입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder2.#ctor(System.String)">
            <summary>
            주어진 이름으로부터 새로운 PeggerModelBuilder를 생성합니다.
            </summary>
            <param name="name">PeggerModel의 이름입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder2.SetStart(Mozart.SeePlan.Pegging.PeggerAreaBuilder2)">
            <summary>
            PeggerModel의 시작 Area를 설정합니다.
            </summary>
            <param name="area">PeggerModel의 시작 Area입니다.</param>
            <returns>시작 Area 설정 작업이 완료된 이 인스턴스 자신입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuilder2.Build">
            <summary>
            이전에 주어진 정보로부터 PeggerModel를 생성하여 반환합니다.
            </summary>
            <returns>생성 및 구성이 완료된 PeggerModel입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModelBuildInterface">
            <summary>
            이 클래스는 더이상 사용되지 않습니다.
            Pegging 모델 구성 중 호출되는 사용자 정의 구현 포인트가 정의되어 있는 클래스입니다.
            </summary>
            <summary>
            This class is no longer in use. 
            The class that defines the user logic implementation points which are called during Pegging model configuration. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuildInterface.GetModelNames">
            <summary>
            Pegger Model(Area) 구성 정보를 만듭니다. 
            </summary>
            <remarks>
            단순한 Pegging 모델의 경우 Area(=Model)가 1개로 구성되지만
            반도체의 B/E 와 같이 Package, Test, Module 등 여러 Area 로 
            분할하여 Pegging 하는 경우 Area 별로 모델을 달리 만들 필요가 
            있으며, 이러한 경우 복수개의 PeggerModel 이 연결된 형태로 
            Pegging 이 수행되어야 합니다. 본 FEAction 은 이러한 모델의 구성정보를 
            생성하여 반환하는 역할을 합니다. 
            </remarks>
            <returns>생성할 모델 이름의 목록입니다.</returns>
            <summary>
            This creates the Pegger Model(Area) comoposition information.
            </summary>
            <remarks>
            For a simple Pegging model, there is only 1 Area(=model).
            However, for Semincon B/E, Pegging could be done for multiple Areas such as Package, Test, Module, etc,
            which requires to have seperate models for each sepcified Areas. 
            In this case, multiple PeggerModels should be linked to each other for Pegging. 
            The corresponding FEAction is used to create and return such model composition information 
            </remarks>
            <returns>Returns the list of model names to created.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuildInterface.GetPreflowStageNames(System.String)">
            <summary>
            대상 Pegger Model 의 Preflow 를 구성하는 Stage 와 실행 순서를 설정합니다. 
            </summary>
            <param name="modelName">Preflow 설정 대상 모델명입니다.</param>
            <returns>Stage 명 배열입니다.</returns>
            <summary>
            This configures the Stage that composes Preflow of and execution order of the target Pegger Model  
            </summary>
            <param name="modelName">The target model name to configure Preflow.</param>
            <returns>Return Stage name array.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuildInterface.GetPostflowStageNames(System.String)">
            <summary>
            대상 Pegger Model 의 Postflow 를 구성하는 Stage 와 실행 순서를 설정합니다.
            </summary>
            <param name="modelName">Postflow 설정 대상 모델명입니다.</param>
            <returns>Stage 명 배열입니다.</returns>
            <summary>
            This configures the Stage that composes Postflow of and execution order of the target Pegger Model .
            </summary>
            <param name="modelName">The target model name to configure Postflow..</param>
            <returns>Return Stage name array.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelBuildInterface.GetStageTemplate(System.String,Mozart.SeePlan.DataModel.Step)">
            <summary>
            대상 Pegger Model 에서 Step별 Pegging 을 수행할때 사용할 Stage 명과 순서를 설정합니다. 
            </summary>
            <param name="modelName">Mainflow 설정 대상 모델명입니다.</param>
            <param name="step">대상 Step입니다. </param>
            <returns>Stage 명 배열입니다.</returns>
            <remarks>각 Step별 Pegging을 수행할 때는 일반적으로 Process 를 구성하는 각 Step 별로
            동일한 방식으로 Pegging 작업을 수행합니다. 따라서 각 Step별로 별도의 Stage 를 구성하지 않고
            Step별 Pegging 수행로직을 정의한 StageTemplate을 지정합니다. 특정 Step에 대해 다른 방식으로
            처리하기 위해 Parameter 에 Step정보가 포함됩니다. 
            </remarks>
            <summary>
            This configures the Stage name to be used and the order for Pegging per Step from the target Pegger Model. 
            </summary>
            <param name="modelName">The target model name to configure Main Flow.</param>
            <param name="step">Target Step.</param>
            <returns>Return Stage name array.</returns>
            <remarks>When Pegging is performed for each Step, Pegging is done the same as it is done for each Steps in Process.
            Therefore, there is no individual Stage for each Step, but instead StageTemplate which defines the Pegging execution logic for the Step is designated.  
            In case a specific Step should be handled different among other Steps, Step information is included to the parameter. 
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModelExtensions">
            <summary>PeggerModel 의 확장 Class입니다.</summary>
            <summary>This is the extension class of PeggerModel.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelExtensions.GetStage(Mozart.SeePlan.Pegging.IPeggerModelBase,Mozart.SeePlan.DataModel.Step,System.String,System.Boolean)">
            <summary>입력된 step에 대한 Stage를 반환합니다. 이미 Stage가 존재하는 경우 해당 Stage를 반환하고 존재하지 않는 경우 새로 생성해서 반환합니다.</summary>
            <param name="model">PeggerModel 개체입니다.</param>
            <param name="step">Stage 의 Mapping step 개체입니다.</param>
            <param name="state">Stage Template의 이름입니다.</param>
            <param name="isFirstStage">Stage Template의 첫번째 Stage 여부입니다. Stage Template이 한 Step의 첫 번째 Stage인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</param>
            <returns>생성된 PegStage 개체입니다.</returns>
            <summary>This returns the Stage of the input Step. If Stage exits, the corresponding Stage will be returned. If not, a new Stage is created and returned.</summary>
            <param name="model">PeggerModel entity.</param>
            <param name="step">The Mapped step entity of the Stage.</param>
            <param name="state">Stage Template name..</param>
            <param name="isFirstStage">Determines whether it is the first Stage of Stage Template. If it is the first Stage, return <strong>true</strong>, or else, return <strong>false</strong>.</param>
            <returns>Returns the created PegStage entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegPartFullMerger">
            <summary>
            주어진 PegPart를 하나의 MergedPegPart로 병합하거나 MergedPegPart를 개별 PegPart로 분할하는 기능을 제공하는 클래스입니다.
            </summary>
            <summary>
            PegPartFullMerger class provides methods to merge PegPart objects to MergedPegPart object or to split MergedPegPart into individual PegParts.   
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.PegPartFullMerger.Default">
            <summary>
            병합 및 분할 기능을 수행하는 기본 인스턴스입니다.
            </summary>
            <summary>
            The basic instance to perform merge and split. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartFullMerger.Merge(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            주어진 PegPart를 하나의 MergedPegPart로 병합합니다.
            </summary>
            <param name="flowName">이 함수를 호출한 Flow의 이름입니다.</param>
            <param name="stageID">이 함수를 호출한 Stage의 이름입니다.</param>
            <param name="state">이 함수를 호출한 Stage의 상태입니다.</param>
            <param name="pegParts">병합할 PegPart의 목록입니다.</param>
            <returns>하나로 병합된 MergedPegPart가 포함된 목록입니다.</returns>
            <summary>
            Merges the specified PegPart objects to one MergedPegPart object.
            </summary>
            <param name="flowName">The string that contains the name of the Flow that called this instance.</param>
            <param name="stageID">The string that contains the name of the Stage that called this instance. </param>
            <param name="state">The string that represents the state of the Stage that called this instance.</param>
            <param name="pegParts">The list of PegPart objects to merge.</param>
            <returns>Returns the list of MergedPegPart objects.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartFullMerger.Split(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            주어진 PegPart를 개별 PegPart로 분할합니다.
            </summary>
            <param name="flowName">이 함수를 호출한 Flow의 이름입니다.</param>
            <param name="pegParts">분할할 PegPart의 목록입니다.</param>
            <returns>분할된 PegPart의 목록입니다.</returns>
            <summary>
            Splits the specified (merged)PegPart objects into individual PegPart objects. 
            </summary>
            <param name="flowName">The string that contains the name of the Flow that called this instance.</param>
            <param name="pegParts">The list of PegPart objects to split.</param>
            <returns>Returns the list of split PegPart objects.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegPartMergerInStage">
            <summary>
            사용자 정의 로직에 따라 PegPart를 병합 또는 분할하는 기능을 제공하는 클래스입니다.
            </summary>
            <summary>
            PegPartMergeInStage class provides methods to merge and split PegParts by user defined logic. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.PegPartMergerInStage.Instance">
            <summary>
            사용자 정의 병합 및 분할 기능을 수행하는 기본 인스턴스입니다.
            </summary>
            
            <summary>
            The basic instance to perform user defined PegPart merge and split functionality. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartMergerInStage.Merge(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            사용자 정의 로직에 따라 PegPart를 병합합니다. 
            ModelRun/MergePegPartsInStage Action을 호출합니다.
            </summary>
            <param name="flowName">이 함수를 호출한 Flow의 이름입니다.</param>
            <param name="pegParts">병합할 PegPart의 목록입니다.</param>
            <returns>병합된 PegPart의 목록입니다.</returns>
            <summary>
            <para>Merges the PegPart objects by user defined logic.</para>
            <para>This method calls ModelRun/MergePegPartsInStage FEAction.</para>
            </summary>
            <param name="flowName">The string that contains the name of the Flow that called this instance.</param>
            <param name="pegParts">The list of PegPart objects to merge</param>
            <returns>Returns the list of merged PegPart objects.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartMergerInStage.Split(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            사용자 정의 로직에 따라 PegPart를 분할합니다.
            ModelRun/SplitPegPartsInStage Action을 호출합니다.
            </summary>
            <param name="flowName">이 함수를 호출한 Flow의 이름입니다.</param>
            <param name="pegParts">분할할 PegPart의 목록입니다.</param>
            <returns>분할된 PegPart의 목록입니다.</returns>
            <summary>
            <para>Splits the PegPart objects by user defined logic.</para>
            <para>This method calls ModelRun/SplitPegPartsInStage FEAction.</para>
            </summary>
            <param name="flowName">The string that contains the name of the Flow that called this instance.</param>
            <param name="pegParts">The list of PegPart objects to split</param>
            <returns>Returns the list of split PegPart objects.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegStage">
            <summary>The Stage information class for Pegging.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegStage.Model">
            <summary>Get PeggerModel entity included with Stage.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegStage.StepID">
            <summary>Return Step indicator performing Pegging.</summary>
            <remarks>This is the structure of multiple Stages being mapped to single StepID according to the StageTemplate composition.</remarks>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.PegStage.StageIDSeperator">
            <summary>
            StageID에서 Stage의 StepID와 State 간 구분자입니다.
            </summary>
            <summary>
            Seperator between Stage's StepID and State in StageID. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegStage.GetStageID(System.String,System.String)">
            <summary>Creates Stage delimiter.</summary>
            <param name="stepID">Step delimiter.</param>
            <param name="state">StageTemplate name of corresponding Stage.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegStageBuilder">
            <summary>
            This is the class to create/modify Pegging Stage.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegStageBuilder.SetModel(Mozart.SeePlan.Pegging.IPeggerModelBase)">
            <summary>
            This configures Pegger Model to Pegging Stage.
            </summary>
            <param name="model">Target Pegger to configure. </param>
            <returns>Return PegStageBuilder.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.FirstPegStageSelector">
            <summary>
            Flow 실행시 첫번째로 실행되어야 할 Stage를 선택하기 위한 클래스입니다.
            </summary>
            <summary>
            This is the class to select the Stage that should executed first from the Flow.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.FirstPegStageSelector.Default">
            <summary>
            기본 FirstPegStageSelector를 반환합니다.
            </summary>
            <summary>
            Returns the default FirstPegStageSelector.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.FirstPegStageSelector.Select(Mozart.RuleFlow.IStageTargetGroup,System.Collections.Generic.IDictionary{System.String,Mozart.RuleFlow.ITransition})">
            <summary>
            대상 PegPart에 첫번째 PegStage를 설정하여 반환합니다.
            </summary>
            <param name="target">PegPart 정보입니다.</param>
            <param name="candidate">첫번째 PegStage 후보 리스트입니다.</param>
            <returns>초기 PegStage가 설정된 PegPart 리스트입니다.</returns>
            <summary>
            Return the first PegStage of the target PegPart.
            </summary>
            <param name="target">PegPart information.</param>
            <param name="candidate">The list of first PegStage candidates.</param>
            <returns>Returns the list of PegPart configured with initial PegStage.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.NextPegStageSelector">
            <summary>
            현재 PegStage의 다음 PegStage를 선택하기 위한 클래스입니다.
            </summary>
            <summary>
            This is the class to select the next PegStage from the current PegStage.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.NextPegStageSelector.Default">
            <summary>
            기본 NextPegStageSelector를 반환합니다.
            </summary>
            <summary>
            Returns the default NextPegStageSelector.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.NextPegStageSelector.Select(Mozart.RuleFlow.IStageTargetGroup,System.Collections.Generic.IDictionary{System.String,Mozart.RuleFlow.ITransition})">
            <summary>
            대상 PegPart 에 Next PegStage를 설정하여 반환합니다.
            </summary>
            <param name="target">대상 PegPart 입니다.</param>
            <param name="candidate">Next PegStage 후보 리스트입니다.</param>
            <returns>Next PegStage가 설정된 PegPart 리스트입니다.</returns>
            <summary>
            Set Next PegState to the target PegPart and return.
            </summary>
            <param name="target">Target PegPart</param>
            <param name="candidate">The list of Next PegStage candidates.</param>
            <returns>Returns the list of PegPart configured with Next PegStage.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ChildPegStageSelector">
            <summary>
            현재 PegStage의 Child PegStage를 선택하기 위한 클래스입니다.
            </summary>
            <summary>
            This is the class to select the Child PegStage from the current PegStage.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Pegging.ChildPegStageSelector.Default">
            <summary>
            기본 ChildPegStageSelector를 반환합니다.
            </summary>
            <summary>
            Returns the default ChildPegStageSelector.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ChildPegStageSelector.Select(Mozart.RuleFlow.IStageTargetGroup,System.Collections.Generic.IDictionary{System.String,Mozart.RuleFlow.ITransition})">
            <summary>
            대상 PegPart 에 ChildPegStage를 설정하여 반환합니다. 
            </summary>
            <param name="target">대상 PegPart 객체입니다.</param>
            <param name="candidate">선택 가능한 ChildPegStage 정보입니다.</param>
            <returns>Child PegStage가 설정된 PegPart 리스트입니다.</returns>
            <summary>
            Configures the ChildPegStage to target PegPart and returns. 
            </summary>
            <param name="target">The specified PegPart object to set ChildPegStage.</param>
            <param name="candidate">Returns the list of PegPart objects with Child PegStage set to it.</param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegWipControl">
            <summary>PEG_WIP Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for PEG_WIP Rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.GetWips(Mozart.SeePlan.Pegging.PegPart,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>대상 PegPart에 대해 Pegging 대상 재공정보를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <param name="isRun">
            	<para>현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</para>
            </param>
            <returns>Pegging 대상 재공정보입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Implement logic to return Step information for Pegging of the target PegPart.</para>
            </summary>
            <param name="pegPart">Target PegPart entity.</param>
            <param name="isRun">
            	<para>A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</para>
            </param>
            <returns>Return the Step information for Pegging.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.SortWip(Mozart.SeePlan.Pegging.Rule.MaterialInfo,Mozart.SeePlan.Pegging.Rule.MaterialInfo)">
            <summary>
            GetWips 를 통해 선택된 재공에 대해 Pegging 우선순위가 높은 순서로 재공을 소팅합니다. 
            구현하지 않으면 재공의 경우 Random 하게 Pegging 이 됩니다.
            </summary>
            <param name="x">비교대상 재공(wip) 정보입니다.</param>
            <param name="y">비교대상 재공(wip) 정보입니다.</param>
            <returns>x 가 y 보다 우선인 경우 양수, 동일한 우선순위의 경우 0, 
            x가 y보다 우선순위가 낮은 경우 음수입니다. </returns>
            <summary>
            Sort the WIPs selected through GetWips with higher Pegging priority..  
            Any WIP not implemented with this logic will be pegged randomly. 
            </summary>
            <param name="x">Target WIP to be compared.</param>
            <param name="y">Target WIP to be compared.</param>
            <returns> If priority of x is higher than y, return positive number, if x,y priority is equal, return 0,
            if priority of x is lower than y, return negative number.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.CanPegMore(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>대상 PegTarget이 재공에 Pegging 가능한지를 판별하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">
            	<para>대상 PegTarget 개체입니다.</para>
            </param>
            <param name="m">Pegging 대상 재공 개체입니다.</param>
            <param name="isRun">현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</param>
            <returns>Pegging이 가능한 경우 true, 그 외의 경우 false입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>FEAction to implement logic to determine whether the target PegTarget can be pegged to the target WIP.</para>
            </summary>
            <param name="target">
            	<para>Target PegPart entity.</para>
            </param>
            <param name="m">The specified WIP object to peg.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</param>
            <returns>If Pegging is possible, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.AvailPegQty(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>대상 PegTarget의 Pegging 가능 수량을 계산하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">대상 PegTarget 개체입니다.</param>
            <param name="m">Pegging 대상 재공 개체입나다.</param>
            <param name="isRun">현재 공정의 Pegging Phase가 Run 상태가 Run 상태인지 여부입니다.</param>
            <returns>대상 PegTarget의 Pegging 가능 수량입니다. Pegging 가능 수량이 0 이하인 경우 Pegging되지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>대상 PegTarget의 Pegging 가능 수량을 계산하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">Target PegPart entity.</param>
            <param name="m">The specified Step object to perform pegging.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</param>
            <returns>Returns the available Pegging counts for the target PegPart. If Pegging count is below 0, Pegging will not be executed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.UpdatePegInfo(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial,System.Double)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>대상 PegTarget에 Pegging 결과를 업데이트하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">대상 PegTarget 개체입니다.</param>
            <param name="m">Pegging된 재공 개체입니다.</param>
            <param name="qty">Pegging된 수량입니다.</param>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Implement logic to update Pegging result to target PegPart</para>
            </summary>
            <param name="target">The specified PegTarget object to update pegging result.</param>
            <param name="m">The pegged WIP object</param>
            <param name="qty">The double-precision floating-point pegged qauntities.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.WritePeg(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial,System.Double)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Pegging 결과를 기록하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">
            	<para>대상 PegTarget 개체입니다.</para>
            </param>
            <param name="m">Pegging된 재공 개체입니다.</param>
            <param name="qty">Pegging된 수량입니다.</param>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Implement logic for writing Pegging result.</para>
            </summary>
            <param name="target">
            	<para>The specified PegTarget object to write pegging result.</para>
            </param>
            <param name="m">The pegged WIP object.</param>
            <param name="qty">The double-precision floating-point pegged qauntities.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegWipControl.IsRemoveEmptyTarget(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Pegging 후 PegTarget 수량을 모두 차감해서 0인 경우 PegPart에서 해당 PegTarget을 제거할 것인지 여부를 결정하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegpart">대상 PegPart입니다.</param>
            <returns>수량이 0인 PegTarget을 PegPart에서 제거할 경우 true, 그 외의 경우 false입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/PEG_WIP</para>
            	<para>Implement logic for determine whether to remove PegTarget from PegPart if PegTarget quantities are all deducted and become 0 after Pegging. </para>
            </summary>
            <param name="pegpart">The specified PegPart object to determine whether if any PegTarget should be removed.</param>
            <returns>If PegTarget with 0 quantity is removed from PegPart, return true;otherwise, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ShiftTatControl">
            <summary>SHIFT_TAT Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>
            <para>This is the class where Action is defined for SHIFT_TAT rule.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ShiftTatControl.GetTat(Mozart.SeePlan.Pegging.PegPart,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>대상 PegPart에 반영할 TAT를 계산하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">
            	<para>대상 PegPart 개체입니다.</para>
            </param>
            <param name="isRun">현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</param>
            <remarks>공정의 TAT만큼 PegTarget의 시간을 이동하는 로직을 실행합니다. 공정에서의 Run phase, Wait phase 를 고려하여 해당 TAT 를 반환하는 로직을 구현합니다. 사이트에 따라 TAT 적용하는 Rule 를 다르게 구성할 경우 Run 혹은 Wait TAT만 고려한다거나
            TAT 를 고려하는 순서와 위치를 변경해서 사용할 수 있습니다.</remarks>
            <returns>대상 PegPart에 반영할 TAT입니다. 반환값이 TimeSpan.Zero와 같거나 작다면 TAT가 반영되지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>Implement logic to calculate TAT for deisgnated PegPart.</para>
            </summary>
            <param name="pegPart">
            	<para>The specified PegPart object to calculate TAT.</para>
            </param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</param>
            <remarks>The logic to shift PegPart time as much as TAT is executed. The TAT logic should also consider Run/Wait phase of the Step and returned. 
            When TAT rule is different by site, either Run or Wait TAT could be considered or the sequence and location to consider TAT could be changed.</remarks>
            <returns>Returns the TAT to be applied to the target PegPart. If the return value is equal or smaller than TimeSpan.Zero, TAT is not applied.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ShiftTatControl.UseTargetTat(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.PegStage,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>PegTarget 별 TAT를 계산할지 여부를 결정합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <param name="stage">TAT 산출 대상 Stage 개체입니다.</param>
            <param name="isRun">
            	<para>현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</para>
            </param>
            <returns>true인 경우 개별 PegTarget에 대한 Tat를 계산하는 GetTargetTat Action이 실행됩니다. 그 외의 경우 PegPart에 대한 Tat인 GetTat Action의 반환값이 사용됩니다. 기본값은 true입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>FEAction to decide whether to calculate TAT per PegTarget.</para>
            </summary>
            <param name="pegPart">The specified PegTarget object to calculate TAT.</param>
            <param name="stage">The specified PegStage object to perform TAT calcultion for the specifed PegTarget.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not.</param>
            <returns>
            <para>Return <em><strong>true</strong></em> to call GetTargetTat FEAction where TAT calculation per PegTarget is proceeded.</para> 
            Or else, return <em><strong>false</strong></em> to call GetTat FEAction to calculate TAT for PegPart only. Default return value is <em><strong>true</strong></em>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ShiftTatControl.GetTargetTat(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.PegStage,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>대상 PegTarget에 반영할 TAT를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegTarget">
            	<para>대상 PegTarget 개체입니다.</para>
            </param>
            <param name="stage">TAT 산출 대상 Stage 개체입니다.</param>
            <param name="isRun">
            	<para>현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</para>
            </param>
            <remarks>
            	<para>PegPart과 PegTarget의 TAT가 모두 존재한다면 PegTarget의 TAT가 반영됩니다.</para>
            	<para>일반적으로 제품/공정단위의 TAT 를 사용하기는 하나 전체 TAT 가 긴 경우 PegTarget의 요구시점(주, 월)에 따라 따른 TAT 를 적용해야 하는 경우 본 함수를 사용합니다.</para>
            </remarks>
            <returns>대상 PegTarget에 반영할 TAT입니다. 반환값이 TimeSpan.Zero와 같거나 작다면 TAT가 반영되지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>Implement logic to return TAT to be applied to target PegTarget.</para>
            </summary>
            <param name="pegTarget">
            	<para>The specified PegTarget object to apply TAT.</para>
            </param>
            <param name="stage">The specified Stage object to calculate TAT.</param>
            <param name="isRun">
            	<para>A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not.</para>
            </param>
            <remarks>
            	<para>If TAT exists in both PegPart and PegTarget, TAT will be reflected to PegTarget.</para>
            	<para>Normally, TAT of Step or Product level is used for PegPart, but in case the entire TAT is long and TAT should be applied according to PegTarget's required period (week, month)
            	GetTargetTat function is used to apply TAT under the mentioned condition.</para>
            </remarks>
            <returns>Returns the TAT to be applied to the target PegTarget. If the return value is equal or smaller than TimeSpan.Zero, TAT is not applied.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ShiftTatControl.UpdateTatInfo(Mozart.SeePlan.Pegging.PegTarget,System.DateTime,System.DateTime,System.TimeSpan,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>PegTarget에 대해 TAT 반영 후 결과를 업데이트하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegTarget">
            	<para>대상 PegTarget 개체입니다.</para>
            </param>
            <param name="oldDueDate">TAT 반영 전의 DueDate입니다.</param>
            <param name="newDueDate">TAT 반영 후의 DueDate입니다.</param>
            <param name="tat">반영된 TAT 값입니다.</param>
            <param name="isRun">현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</param>
            <summary>
            	<para>[FEAction] Rules/SHIFT_TAT</para>
            	<para>Implement logic to update the result after TAT is applied to PegTarget.</para>
            </summary>
            <param name="pegTarget">
            	<para>Target PegPart entity.</para>
            </param>
            <param name="oldDueDate">The DateTime(Due Date) before TAT is applied.</param>
            <param name="newDueDate">The DateTime(Due Date) after TAT is applied.</param>
            <param name="tat">Applied TAT value.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.WriteTargetControl">
            <summary>WRITE_TARGET Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for WRITE_TARGET rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.WriteTargetControl.WriteTarget(Mozart.SeePlan.Pegging.PegPart,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>대상 PegPart에 대한 투입, 완료 목표를 기록하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <param name="isOut">
            	<para>대상 PegPart 개체의 Pegging Phase가 Out 상태인지 여부입니다.</para>
            </param>
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>Implement logic to write input/out target of the target PegPart.</para>
            </summary>
            <param name="pegPart">Target PegPart entity.</param>
            <param name="isOut">
            	<para>A boolean value to determine if the state of the pegging phase of the current step is <em>Out</em> state or not..</para>
            </param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.WriteTargetControl.GetStepPlanKey(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>대상 PegPart으로부터 StepPlan(공정 생산 목표) 구분자를 구해서 반환하는 로직을 구현합니다.</para>
            	<para></para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <remarks>
            	<para></para>
            </remarks>
            <returns>대상 PegPart의 StepPlan(공정 생산 목표) 구분자입니다. 반환값이 null인 경우 PegTarget에 대한 StepPlan(공정 생산 목표)을 생성, 저장하지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>Implement logic to get StePlan(Step production target) dilimeter from target PegPart and return.</para>
            	<para></para>
            </summary>
            <param name="pegPart">Target PegPart entity.</param>
            <remarks>
            	<para></para>
            </remarks>
            <returns>Returns the dilimeter of StepPlan(Step production target) of target PegPart. 
            If return value is null, StepPlan for the PegPart is not generated and saved.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.WriteTargetControl.CreateStepTarget(Mozart.SeePlan.Pegging.PegTarget,System.Object,Mozart.SeePlan.DataModel.Step,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>PegTarget로부터 Forward Pegging에 사용되는 StepTarget(공정 생산 목표) 개체를 생성합니다.</para>
            </summary>
            <param name="pegTarget">대상 PegTarget 개체입니다.</param>
            <param name="stepPlanKey">대상 PegTarget의 StepPlan(공정 생산 목표 그룹) 구분자입니다.</param>
            <param name="step">대상 PegTarget의 현재 공정 개체입니다.</param>
            <param name="isRun">현재 공정의 Pegging Phase가 Run 상태인지 여부입니다.</param>
            <remarks>
            	<para></para>
            </remarks>
            <returns>
            	<para>StepTarget(공정 생산 목표) 개체입니다. 반환값이 null인 경우 대상 PegTarget에 대한 공정 생산 목표를 생성, 저장하지 않습니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] Rules/WRITE_TARGET</para>
            	<para>Generate StepTarget(Step production target) used for Fowrard Pegging from PegTarget.</para>
            </summary>
            <param name="pegTarget">Target PegTarget entity.</param>
            <param name="stepPlanKey">The dilimeter of StepPlan(Step production target) of target PegTarget</param>
            <param name="step">The current Step entity of the target PegPart.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</param>
            <remarks>
            	<para></para>
            </remarks>
            <returns>Returns the dilimeter of StepTarget(Step production target) of target PegPart. 
            If return value is null, StepTarget for the PegPart is not generated and saved.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ApplyActControl">
            <summary>APPLY_ACT Rule의 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for APPLY_ACT rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyActControl.GetActs(Mozart.SeePlan.Pegging.PegPart)">
            <summary>[FEAction] Rules/APPLY_ACT
            <para>PegPart에 대한 실적정보를 찾아 반환하는 로직을 구현합니다.</para></summary>
            <param name="pegPart">Pegging 대상이 되는 PegPart 개체입니다.</param>
            <returns>PegPart에 대한 실적정보입니다.</returns>
            <summary>[FEAction] Rules/APPLY_ACT
            <para>Implement logic to search and return PegPart's actual output.</para></summary>
            <param name="pegPart">PegPart entity to be Pegged.</param>
            <returns>Return actual output information of target PegPart.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyActControl.SortAct(Mozart.SeePlan.Pegging.Rule.MaterialInfo,Mozart.SeePlan.Pegging.Rule.MaterialInfo)">
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>두 실적 정보의 우선순위를 비교합니다.</para>
            </summary>
            <param name="x">첫 번째 실적 정보입니다.</param>
            <param name="y">두 번째 실적 정보입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 실적 정보의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>SortAct performs a comparison of two objects(Act info) of the same type and returns a value indicating whether one object has lower, equal or higher priority than the other.</para>
            </summary>
            <param name="x">The first object(Act info) to compare.</param>
            <param name="y">The second object(Act Info) to compare.</param>
            <returns>
            	<para>A signed integer that indicates the relative values of x and y, as shown below.</para>
            	<para>Less than zero : x priority is higher than y</para>              
            	<para>Zero : x priority equals y.</para>
            	<para>Greater than zero : x priority is lower than y.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyActControl.CanActPegMore(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial)">
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>대상 실적정보를 현재 PegTarget에 Pegging 가능한지 여부를 판별하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">Pegging 대상이 되는 PegTarget 개체입니다.</param>
            <param name="m">Pegging 가능 여부를 검토할 실적정보 개체입니다.</param>
            <returns>Pegging이 가능한 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>Implement a logic to determine if the target output can be Pegged to the current PegTarget.</para>
            </summary>
            <param name="target">PegTarget entity to be Pegged.</param>
            <param name="m">The actual output entity to be determined for Pegging.</param>
            <returns>If Pegging is possible, return <strong>true</strong>, or else, return <strong>false</strong></returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyActControl.WriteActPeg(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.IMaterial,System.Double)">
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>PegTarget에 대한 실적 Pegging 결과를 기록하는 로직을 구현합니다.</para>
            </summary>
            <param name="target">Pegging 대상이 되는 PegTarget 개체 입니다.</param>
            <param name="m">Pegging 대상이 되는 실적정보입니다.</param>
            <param name="qty">실적 Pegging된 수량입니다.</param>
            <summary>
            	<para>[FEAction] Rules/APPLY_ACT</para>
            	<para>Implement logic to search and return PegTarget's actual output.</para>
            </summary>
            <param name="target">PegTarget entity to be Pegged.</param>
            <param name="m">The actual output entity to be Pegged.</param>
            <param name="qty">The output quantity of Peggeing</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ApplyYieldControl">
            <summary>
            	<para>APPLY_YIELD Rule의 Action이 정의되어 있는 Class입니다.</para>
            </summary>
            <summary>
            	<para>This is the class where Action is defined for SHIFT_YIELD rule.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyYieldControl.GetYield(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>대상 PegPart에 대한 수율정보를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <remarks>
            	<para>수율은 0 이상 1 이하의 소수로 표현됩니다. 공정별 수율을 사용하는 경우에 구현이 필요하며, 기본값은 1로 구현하지 않을시에는 수율이 반영되지 않는 것으로 모델링하는 결과를 만듭니다. 일반적으로 Demand 에 평균적인 수율을 고려하여 수정한 경우에는 공정별 수율을 반영하지
            않으며, 공정별 수율적용이 필요한 경우에 Rule 을 적용합니다.</para>
            </remarks>
            <returns>대상 PegPart의 수율정보입니다. 반환값이 1보다 크거나 0보다 작은 경우 수율이 반영되지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>Implement logic to return Yield information of the target PegPart.</para>
            </summary>
            <param name="pegPart">Target PegPart entity.</param>
            <remarks>
            	<para>Yield is expressed as decimal points over 0 and under 1. Logic should be implemented if yield is used for each Step. The default value is not to apply yield through modeling if the value is not 1. 
            	In general, yield for each Step is not applied if average yield is modified by Demand. If yield for each Step is required, a Rule must be applied. </para>
            </remarks>
            <returns>Returns the yield information of the PegPart. If return value is larget than 1 or smaller than 0, yield is not applied.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyYieldControl.UseTargetYield(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.PegStage)">
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>PegTarget 별 수율을 반영할지 여부를 결정합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <param name="stage">수율 계산 대상 위치입니다.</param>
            <returns>true인 경우 개별 PegTarget에 대한 수율을 계산하는 GetTargetYield Action이 실행됩니다. 그 외의 경우 PegPart에 대한 수율인 GetYield Action의 반환값이 수율로 사용됩니다. 기본값은 true입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyYieldControl.GetTargetYield(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.PegStage)">
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>PegTarget에 대한 수율정보를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegTarget">대상 PegTarget 개체입니다.</param>
            <param name="stage">대상 PegTarget의 현재 Pegging 위치 개체입니다.</param>
            <remarks>PegTarget에 대한 수율 정보와 PegPart에 대한 수율 정보가 모두 존재하는 경우 PegTarget에 대한 수율 정보가 반영됩니다.</remarks>
            <returns>PegTarget에 대한 수율정보입니다. 반환값이 1보다 크거나 0보다 작은 경우 수율이 반영되지 않습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>Implement logic to return Yield information of the target PegPart.</para>
            </summary>
            <param name="pegTarget">Target PegPart entity.</param>
            <param name="stage">The object of the current Pegging location of the target PegTarget.</param>
            <remarks>If yield information exists on both PegPart and PegTarget, yield information is reflected to PegTarget.</remarks>
            <returns>Returns the yield information of the PegTarget. If return value is larget than 1 or smaller than 0, yield is not applied.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyYieldControl.RoundResult(System.Double)">
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>수율이 반영된 PegTarget 수량의 소수점을 처리하는 로직을 구현합니다.</para>
            </summary>
            <param name="qty">수율이 반영된 PegTarget 수량입니다.</param>
            <remarks>수율이 반영된 Demand 수량을 특정 자리수에서 반올림, 버림, 올림 등의 가공하고자 할 때 Action을 구현합니다.</remarks>
            <returns>
            	<para>소수점 처리가된 PegTarget 수량입니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>This is the logic to handle decimal points for the quantituy of yield applied PegTarget.</para>
            </summary>
            <param name="qty">PegTarget quantity with yield applied.</param>
            <remarks>This Action is used to process a specific digit by rounding up, down or dropping the Demand quantity with wield applied.</remarks>
            <returns>
            	<para>Return PegTarget quantity with processed decimal points.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ApplyYieldControl.UpdateYieldInfo(Mozart.SeePlan.Pegging.PegTarget,System.Double,System.Double,System.Double)">
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>수율 반영 후 PegTarget을 업데이트하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegTarget">대상 PegTarget입니다.</param>
            <param name="oldQty">수율 반영 전의 PegTarget 수량입니다.</param>
            <param name="newQty">수율 반영 후의 PegTarget 수량입니다.</param>
            <param name="yield">반영된 수율정보입니다.</param>
            <remarks>수율 반영 후 PegTarget 수량 외의 다른 처리가 필요한 경우 Action을 구현합니다.</remarks>
            <summary>
            	<para>[FEAction] Rules/APPLY_YIELD</para>
            	<para>Implement logic to update PegTarget after yield is applied.</para>
            </summary>
            <param name="pegTarget">The PegTarget object to update pegging target quantities after yield is applied.</param>
            <param name="oldQty">The quantity of PegTarget before yield is applied.</param>
            <param name="newQty">The quantity of PegTarget after yield is applied.</param>
            <param name="yield">Applied yield information.</param>
            <remarks>Implement this Action if other handling is required other than handling PegPart quantity after yield is applied.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.FilterTargetControl">
            <summary>FILTER_TARGET Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for FILTER_TARGET rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.FilterTargetControl.FilterTarget(Mozart.SeePlan.Pegging.PegTarget)">
            <summary>
            	<para>[FEAction] Rules/FILTER_TARGET</para>
            	<para>FEAction to implement logic to decide whether to stop pegging anymore for the specified PegTarget.</para>
            </summary>
            <param name="target">The PegTarget object to determine whether to stop pegging or not.</param>
            <returns>If true is returned, Pegging will stop for the specified PegTarget. Return false to proceed pegging for the specified PegTarget.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.FilterTargetControl.FilterPegPart(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>[FEAction] Rules/FILTER_TARGET</para>
            	<para>PegPart에 대해 더이상 Pegging을 진행하지 않도록 제약할지 여부를 결정하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">
            	<para>대상 PegPart 개체입니다.</para>
            </param>
            <returns>
            	<para>대상 PegPart에 대해 더이상 Pegging을 진행하지 않는 경우 true, 그렇지 않은 경우 false입니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] Rules/FILTER_TARGET</para>
            	<para>The FEAction to implement user logics to decide whether to stop pegging for the specified PegPart object.</para>
            </summary>
            <param name="pegPart">
            	<para>The PegPart object to determine whether to perform pegging or not.</para>
            </param>
            <returns>
            	<para><em><strong>true</strong></em> to stop pegging for the specified PegTarget object.;otherwise, <em><strong>false</strong></em> to proceed pegging fore the specified PegTarget object.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.WriteUnpegControl">
            <summary>WRITE_UNPEG Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for WRITE_UNPEG rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.WriteUnpegControl.WriteUnpeg(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>[FEAction[ Rules/WRITE_UNPEG</para>
            	<para>잔여 재공이 Pegging되지 않은(Unpegging) 사유를 기록하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">
            	<para>Dummy 입력 개체입니다. 일반적으로 WRITE_UNPEG Rule은 Post Flow에서 호출됩니다. Pre Flow와 Post Flow에서 실행되는 Rule의 매개변수는 일반적으로 MergedPegPart이며 별도 처리를 하지 않습니다.</para>
            </param>
            <remarks>
            	<para>일반적으로 Pegging이 완료된 후 Pegging되지 않고 남아있는 재공은 제품에 대한 Demand 가 없거나, Demand 에 비해 재공이 너무 많이 투입된 경우로 볼 수 있습니다. 두가지 경우에 대해 사용자 조직의 요구사항에 따라 좀더 세분화된 사유를 분석하는
            로직을 개발할 수 있습니다.</para>
            </remarks>
            <summary>
            	<para>[FEAction] Rules/WRITE_UNPEG</para>
            	<para>Implement logic to write the reasons for remaining quantities being Unpegged. </para>
            </summary>
            <param name="pegPart">
            	<para>Dummy input entity. Normally, WRITE_UNPEG Rule is called by Post Flow. The parameter of the Rule executed from Pre and Post Flow is normally MergedPegPart and it is not proceseed individually. </para>
            </param>
            <remarks>
            	<para>In general, Unpegged WIPs after Pegging is either Demand don't exist for the product or WIPs are loaded more than the Demand.
            	The logic to show more detailed reasons for the both cases can be implemented according to user group requirement.</para>
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ChangePartControl">
            <summary>CHANGE_PART Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for CHANGE_PART rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ChangePartControl.GetPartChangeInfos(Mozart.SeePlan.Pegging.PegPart,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/CHANGE_PART</para>
            	<para>대상 PegPart의 현재 공정 이후 제품 변경정보를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">
            	<para>대상 PegPart 개체입니다.</para>
            </param>
            <returns>제품 변경정보의 목록입니다. 대상 PegPart가 두 개 이상의 제품으로 분기(Split)되는 경우 분기되는 수 만큼의 제품 변경정보를 반환합니다. 제품 변경이 발생하지 않는 경우 null을 반환합니다.</returns>
            <summary>
            	<para>[FEAction] Rules/CHANGE_PART</para>
            	<para>Implement logic to return product change information after the current Step of the target PegPart.</para>
            </summary>
            <param name="pegPart">
            	<para>Target PegPart entity.</para>
            </param>
            <param name="isRun">
            	<para>A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</para>
            </param>
            <returns>Returns the list of product change information. If the target PegPart is Split to more than two products, the product change information is returned as much as the Split amount.
            If there is no change in the product, null is returned.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ChangePartControl.ApplyPartChangeInfo(Mozart.SeePlan.Pegging.PegPart,System.Object,System.Boolean)">
            <summary>
            	<para>[FEAction] Rules/CHANGE_PART</para>
            	<para>대상 PegPart에 제품 변경정보를 반영하는 로직을 구현합니다.</para>
            </summary>
            <param name="pegPart">대상 PegPart 개체입니다.</param>
            <param name="partChangeInfo">제품 변경정보 개체입니다.</param>
            <remarks>
            	<para>이 Action은 Rules/CHANGE_PART/GetPartChangeInfos에서 반환된 제품 변경정보 목록의 수 만큼 실행됩니다.</para>
            	<para>일반적으로 제품 변경정보는 제품(Product)과 공정(Step) 또는 둘 중 하나의 정보를 담고 있습니다.</para>
            	<para>제품 변경 결과에 대한 정보를 기록해야 하는 경우 이 Action에 로직을 구현해야 합니다.</para>
            </remarks>
            <returns>
            	<para>제품 변경정보가 반영된 PegPart입니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] Rules/CHANGE_PART</para>
            	<para>Implement logic to reflect product change information to PegPart.</para>
            </summary>
            <param name="pegPart">Target PegPart entity.</param>
            <param name="partChangeInfo">Product change information entity.</param>
            <param name="isRun">A boolean value to determine if the state of the pegging phase of the current step is <em>Run</em> state or not..</param>
            <remarks>
            	<para>The Action is executed as much as the numbers returned from Rules/CHANGE_PART/GetPartChangeInfos.</para>
            	<para>Normally, product change information includes either one of Product or Step information. </para>
            	<para>The logic should be applied to this Action to write the result of product change.</para>
            </remarks>
            <returns>
            	<para>Return PegPart with product change information applied.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.SmoothDemandControl">
            <summary>SMOOTH_DEMAND Rule에 대한 Action이 정의되어 있는 Class입니다.</summary>
            <summary>This is the class where Action is defined for SMOOTH_DEMAND rule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.GetSmoother">
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>Smoothing 로직에 사용될 Smoother 개체를 생성해서 반환하는 로직을 구현합니다.</para>
            </summary>
            <returns>생성된 Smoother 개체입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>Implement logic to generate and return Smoother entity to be used from Smoothing logic.</para>
            </summary>
            <returns>Returns the generated Smoother object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.GetInnerBucketKey(Mozart.SeePlan.Pegging.MoPlan)">
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>대상 PegTarget의 Inner Bucket 구분자를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="moPlan">대상 PegTarget 개체입니다.</param>
            <returns>대상 PegTarget의 Inenr Bucket 구분자를 반환합니다. Inner Bucket 구분자는 null일 수 없습니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>Implement logic to return Inner Bucket delimiter of the target PegPart.</para>
            </summary>
            <param name="moPlan">The MoPlan object to applu Inner Bucket delimiter .</param>
            <returns>Returns the Inner Bucket indicator of the target PegPart. Null cannot be used for Inner Bucket delimiter.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.GetOuterBucketKey(Mozart.SeePlan.Pegging.MoPlan)">
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>대상 PegTarget의 Outer Bucket 구분자를 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="moPlan">대상 PegTarget 개체입니다.</param>
            <returns>대상 PegTarget의 Outer Bucket 구분자입니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>Implement logic to return Outer Bucket indicator of the target PegPart.</para>
            </summary>
            <param name="moPlan">Target PegPart entity.</param>
            <returns>Returns the Outer Bucket indicator of the target PegPart. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.CreateInnerBucket(System.String,Mozart.SeePlan.Pegging.MoPlan,System.DateTime,System.Boolean)">
            <summary>
            	<para>[FEAction] Ruels/SMOOTH_DEMAND</para>
            	<para>대상 PegTarget로부터 Inner Bucket 개체를 생성하는 로직을 구현합니다.</para>
            </summary>
            <param name="key">Inner Bucket 구분자입니다.</param>
            <param name="moPlan">Inner Bucket을 구성하는 하나의 PegTarget 개체입니다.</param>
            <param name="weekStartDate">Inner Bucket의 주 시작일입니다.</param>
            <param name="isW00">Inner bucket이 첫번째 당주에 속해있는지 여부입니다.</param>
            <returns>생성된 Inner Bucket 개체입니다.</returns>
            <summary>
            	<para>[FEAction] Ruels/SMOOTH_DEMAND</para>
            	<para>Implement logic to generate Inner Bucket from the target PegPart.</para>
            </summary>
            <param name="key">Inner Bucket indicator.</param>
            <param name="moPlan">PegPart entity composing Inner Bucket.</param>
            <param name="weekStartDate">The start week of Inner Bucket.</param>
            <param name="isW00">Determines if Inner Bucket is in the first week of schedule.</param>
            <returns>Return generated Inner Bucket entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.CreateOuterBucket(System.String)">
            <summary>[FEAction] Rules/SMOOTH_DEMAND</summary>
            <param name="key">Outer Bucket 구분자입니다.</param>
            <returns>생성된 Outer Bucket 개체입니다.</returns>
            <summary>[FEAction] Rules/SMOOTH_DEMAND</summary>
            <param name="key">Outer indicator.</param>
            <returns>Return generated Outer Bucket entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.GetWeekNo(Mozart.SeePlan.Pegging.MoPlan)">
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>대상 PegTarget의 주차 번호를 계산해서 반환하는 로직을 구현합니다.</para>
            </summary>
            <param name="moPlan">대상 PegTarget 개체입니다.</param>
            <returns>계산된 주차 번호를 반환합니다.</returns>
            <summary>
            	<para>[FEAction] Rules/SMOOTH_DEMAND</para>
            	<para>Implement logic to calculate and return PegTarget's week number.</para>
            </summary>
            <param name="moPlan">Target PegPart entity.</param>
            <returns>Return the calculated week number.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.SmoothDemandControl.SaveMoPlans(System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan})">
            <summary>
            	<para>[FEAction[ Rules/SMOOTH_DEMAND</para>
            	<para>Smoothing 로직 실행 결과 가공된 PegTarget의 목록을 저장하는 로직을 구현합니다.</para>
            </summary>
            <param name="moPlan">Smoothing 로직의 실행 결과 생성된 PegTarget의 목록입니다.</param>
            <summary>
            	<para>[FEAction[ Rules/SMOOTH_DEMAND</para>
            	<para>Implement logic to save PegTart result list processed by Smoothing logic.</para>
            </summary>
            <param name="moPlan">Generated PegPart list processed by Smoothing logic.</param>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.ApplyAct">
            <summary>
            PegPart에 실적 정보를 반영해서 PegTarget 수량을 차감하고, 결과를 기록하는 Rule입니다.
            </summary>
            <summary>
            The class that defines the rule to apply actual output(production) information to PegPart to deduct the pegging(demand) quanities of PegTarget and to write the result to PegPart. 
            </summary>
            <remarks>
                <para>If PegPart is merged as MergedPegPart, actual output(production) is applied and PegTarget quantities are deducted to each PegPart in MergedPegPart.</para>
                <para>In other words, the MergedPegPart does not need to be split to individual PegParts to apply Act information.</para>
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.ApplyYield">
            <summary>
            PegPart의 각 PegTarget에 수율을 반영해서 잔여 수량을 변경합니다.
            </summary>
            <summary>
            The class that defines the rule to apply yield to each PegTarget of the PegPart and updates the remaining pegging quantities of PegTarget.  
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.ChangePart">
            <summary>
            PegPart에 제품 변경 정보를 반영하는 Rule입니다. 
            적용할 제품 변경 정보가 두 개 이상인 경우 제품 변경 정보의 수 만큼 PegPart가 복제되고, 제품 변경 정보가 반영됩니다.
            </summary>
            <summary>
            The class that defines the rule to apply product part change information to the PegPart.
            PegPart is cloned as much as the numbers of product part change information to be applied. 
            Each of the part change information is applied to each of the specified PegPart. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.FilterTarget">
            <summary>
            조건에 따라 PegPart에 추가되어 있는 PegTarget을 제외하는 Rule입니다.
            </summary>
            <summary>
            The class that defines the rule to conditionally filter the PegTarget in the PegPart.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.PeggingRuleAction">
            <summary>
            사용자 정의 Rule 클래스입니다.
            </summary>
            <summary>
            The class to create user defined rule other than the ones provided from the library. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Rule.PeggingRuleAction.#ctor(Mozart.SeePlan.Pegging.Rule.PeggingRuleActionMethod,System.String,System.String)">
            <summary>
            지정된 이름과 설명 및 함수를 사용하여 새로운 사용자 정의 Rule을 생성합니다.
            </summary>
            <param name="action">Rule 구현 내용입니다.</param>
            <param name="name">Rule의 이름입니다.</param>
            <param name="description">Rule에 대한 설명입니다.</param>
            <summary>
            Creates user-defined rule by specified rule name, description and implemented logic.
            </summary>
            <param name="action">The delegate which user-defined rule logics are implemented.</param>
            <param name="name">The name of the user-defined rule.</param>
            <param name="description">The description of the user-defined rule.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Rule.PeggingRuleAction.Execute(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            지정된 PegPart를 사용하여 사용자 정의 Rule을 실행합니다.
            </summary>
            <param name="pegPart">사용자 정의 Rule 실행 대상 PegPart입니다.</param>
            <returns>사용자 정의 Rule 실행 후 결과 PegPart입니다.</returns>
            <summary>
            Executes the user-defined rule with the sepcified PegPart. 
            </summary>
            <param name="pegPart">The specified PegPart object to be used for user-defined rule execution.</param>
            <returns>Returns the updated result of the PegPart after user-defined rule is executed.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.PegWip">
            <summary>
            PegPart에 재공 정보를 반영해서 PegTarget 수량을 차감하고, 결과를 기록하는 Rule입니다.
            </summary>
            
            <summary>
            The class that defines the rule to apply WIP information to the PegPart to deduct pegging(demand) quantities from PegTarget and update the result. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.MaterialInfo">
            <summary>
            재공 또는 실적 정보입니다.
            재공 또는 실적의 우선순위 비교에 사용되며 재공 또는 실적의 우선순위 비교를 야기하는 PegPart 정보가 포함되어 있습니다.
            </summary>
            
            <summary>
            This class is an instance which could be either a WIP or actual output(production) information.
            Depending on which information; WIP or actual output(production), is set, MaterialInfo is used for priority comparison using the properties of the specified value set to this instance. 
            In addition, PegPart information of which it could lead to WIP or actual output(production) priroity comaprison can be set to Mateiral. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Rule.MaterialInfo.Material">
            <summary>
            재공 또는 실적 정보를 가져옵니다.
            </summary>
            <summary>
            Gets the WIP or actual output(production) to compare. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Rule.MaterialInfo.PegPart">
            <summary>
            재공 또는 실적의 우선순위 비교를 야기하는 PegPart를 가져옵니다.
            </summary>
            <summary>
            Gets the PegPart that leads to WIP or actual output(production) priority comparison. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.PeggingRuleBase">
            <summary>
            StageBlock 하위의 Pegging 로직 실행 단위 클래스입니다.
            </summary>
            <summary>
            PeggingRuleBase is a pegging logic execution phase class subordinate to StageBl
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Rule.PeggingRuleBase.Name">
            <summary>
            Rule의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.Rule.PeggingRuleBase.Description">
            <summary>
            Rule의 설명을 가져옵니다.
            </summary>
            <summary>
            Gets the description of the rule. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Rule.PeggingRuleBase.#ctor(System.String,System.String)">
            <summary>
            지정된 이름과 설명을 사용하여 새로운 Rule을 생성합니다.
            </summary>
            <param name="name">Rule의 이름입니다.</param>
            <param name="description">Rule에 대한 설명입니다.</param>
            <summary>
            Creates a new rule with <em>Name</em> and <em>Description</em>. 
            </summary>
            <param name="name">The name of rule set from <em>Name</em>.</param>
            <param name="description">The description of rule set from <em>Description</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Rule.PeggingRuleBase.Execute(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            지정된 PegPart를 사용하여 Rule을 실행합니다.
            </summary>
            <param name="pegPart">Rule 실행 대상 PegPart입니다.</param>
            <returns>Rule 실행 후 결과 PegPart입니다.</returns>
            <summary>
            Executes the rule with the specified PegPart.
            </summary>
            <param name="pegPart">The specified PegPart object to be used for rule execution.</param>
            <returns>Returns the updated result of the PegPart object after the rule is executed.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.ShiftTat">
            <summary>
            PegPart의 각 PegTarget에 TAT(Turnaround Time)을 반영해서 DueDate를 변경합니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.SmoothDemand">
            <summary>
            Demand를 정해진 로직에 따라 기간 내내 수량이 비슷한 수준을 유지하도록 조정합니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.WriteTarget">
            <summary>
            PegPart의 각 PegTarget에 대한 현재 상태를 기록하고, 필요한 경우 Simulation에서 사용할 StepTarget을 생성합니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Rule.WriteUnpeg">
            <summary>
            Writes the Unpegged WIP quantities and reasons after all Pegging logics are executed. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegTarget">
            <summary>This is the class that has Demand information for Pegging</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegTarget.PegPart">
            <summary>Get/Set PegPart (Demand group).</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegTarget.MoPlan">
            <summary>Get/Set MoPlan(Manufacturing Order informatin).</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegTarget.Qty">
            <summary>
            	<para>Get/Set quantities available for Pegging.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegTarget.DueDate">
            <summary>Get/Set dates available for Pegging.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegTarget.#ctor(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.MoPlan)">
            <summary>Initializes a new instance of the PegTarget class with the instance of PegPart and MoPlan.</summary>
            <param name="pegPart">PegPart(Demand group) object.</param>
            <param name="moPlan">MoPlan(Manufacturing Order information) object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegTarget.#ctor">
            <summary>Initializes a new instance of the PegTarget class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegTarget.Clone(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            	<para>Replicate current PegTarget and include it to the input PegPart.</para>
            </summary>
            <param name="newPegPart">PegPart entity.</param>
            <returns>Return cloned PegTarget entity.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegPart">
            <summary>Pegging 대상이 되는 Demand 그룹 Class입니다.</summary>
            <remarks>
            	<para>제품과 그 외의 정보를 기준으로 PegTarget을 Grouping합니다. 공정별 Pegging 을 수행하는데 필요한 Main Context 입니다.</para>
            </remarks>
            <summary>This is the class where Pegging targets are groupd as Demand group.</summary>
            <remarks>
            	<para>PegTargets are grouped based on Product and other information. This is the Main Context required for Pegging for each Step.</para>
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.PegTargetList">
            <summary>
            	<para>PegTarget의 목록을 가져옵니다.</para>
            </summary>
            <remarks>PegTarget은 일별 Demand를 의미합니다.</remarks>
            <summary>
            	<para>Get PegTarget list.</para>
            </summary>
            <remarks>PegTarget stands for daily Demands.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.FirstPegTarget">
            <summary>
            	<para>PegPart의 첫 번째 PegTarget을 가져옵니다. PegTarget이 존재하지 않는 경우 null을 반환합니다.</para>
            </summary>
            <summary>
            	<para>Gets the first PegTarget from the PegPart. Return null if PegTarget does not exist.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.MoMaster">
            <summary>PegPart의 Manufacturing Order 정보입니다.</summary>
            <summary>This the Manufacturing Oder information of the PegPart.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.CurrentStage">
            <summary>Pegging 을 진행하는 현재 Stage를 가져오거나 설정합니다.</summary>
            <summary>Get/Set the current Stage proceeding Pegging.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.Tag">
            <summary>사용자 정의 정보를 가져오거나 설정합니다.</summary>
            <summary>Get/Set user defined information.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.CurrentStageStatus">
            <summary>
            	<para>Stage 에 대한 상태정보입니다.</para>
            	<para>[2015.4.92.0] 이 Property는 사용되지 않습니다.</para>
            </summary>
            <summary>
            	<para>This is the status information of Stage.</para>
            	<para>[2015.4.92.0] This property is no longer in use.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.Properties">
            <summary>
            	<para>사용자 정의 속성을 가져오거나 설정합니다.</para>
            </summary>
            <summary>
            	<para>Get/Set user defined property.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.BranchList">
            <summary>
            	<para>PegPart의 분기 정보를 가져오거나 설정합니다.</para>
            </summary>
            <remarks>
            	<para>Pegging 중 Pegging 대상 Demand(Product) 정보가 분기되는 경우 설정합니다. PegPart의 현재 Stage가 종료되고 다음 Stage가 시작되기 전에 분기됩니다.</para>
            </remarks>
            <summary>
            	<para>Get/Set branch point information of PegPart.</para>
            </summary>
            <remarks>
            	<para>This configures when target Demand(Product) information for Pegging is branched off during Pegging.
            	The information is divaricated after the current Stage is finished and before the next Stage is started of the PegPart.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Initializes a new instance of the PegPart class.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.#ctor(Mozart.SeePlan.Pegging.MoMaster)">
            <summary>
            생성자입니다.
            </summary>
            <param name="moMaster">PegPart를 구성하는 Manufacturing Order 정보입니다.</param>
            <summary>
            Initializes a new instance of the PegPArt class with the instance of MoMaster.
            </summary>
            <param name="moMaster">Manufacturing Oder information composing PegPart.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.Init(Mozart.SeePlan.Pegging.MoMaster)">
            <summary>
            기본 생성자로 생성된 경우 초기화를 위한 함수입니다. 
            </summary>
            <param name="moMaster">초기화를 위한 생산 계획 개체입니다.</param>
            <summary>
            This is the initialization function in case the class is generated as default contructor. 
            </summary>
            <param name="moMaster">Production schedule entity for initialization.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.AddPegTarget(Mozart.SeePlan.Pegging.PegTarget)">
            <summary>PegPart를 구성하는 개별 Demand를 추가합니다.</summary>
            <param name="pegTarget">추가 대상 Demand입니다.</param>
            <summary>Adds individual Demands composing PegPart</summary>
            <param name="pegTarget">Target Demand to be added.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.Clone">
            <summary>현재 PegPart를 복제해서 새로운 PegPart를 생성합니다.</summary>
            <returns>복제된 PegPart 개체입니다.</returns>
            <summary>Replicates current PegPart and creates new PegPart.</summary>
            <returns>Returns the replicated PegPart.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.CopyTargets(Mozart.SeePlan.Pegging.PegPart)">
            <summary>현재 PegPart의 모든 Demand를 복제해서 입력된 PegPart에 추가합니다.</summary>
            <param name="pegPart">복제된 Demand를 추가할 PegPart 개체입니다.</param>
            <returns>복제된 Demand 목록입니다.</returns>
            <summary>Replicates all Demands of the current PegPart and adds the demand to the input PegPart.</summary>
            <param name="pegPart">The PegPart entity to include the cloned Demands.</param>
            <returns>Returns the list of cloned Demands.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.AddPegTargets(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegTarget})">
            <summary>입력된 Demand의 목록을 PegTargetList 에 추가합니다.</summary>
            <param name="pegTargets">추가 대상 Demand 목록입니다.</param>
            <summary>Add input Demand list to PegTargetList</summary>
            <param name="pegTargets">Target Demand list to be added.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.RemovePegTarget(Mozart.SeePlan.Pegging.PegTarget)">
            <summary>입력된 PegTarget을 PegTargetList에서 제거합니다.</summary>
            <param name="pegTarget">제거 대상 PegTarget 개체입니다.</param>
            <summary>Remove input PegTarget from PegTargetList.</summary>
            <param name="pegTarget">Target PegTarget entity to be removed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.SortPegTargets">
            <summary>
            PegTargetList를 정렬합니다.
            </summary>
            <summary>
            Aligns PegTargetList.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.ClearPegTargets">
            <summary>PegTargetList의 모든 항목을 제거합니다.</summary>
            <summary>Clear all items in PegTargetList.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPart.ReplacePegTargets(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegTarget})">
            <summary>현재의 PegTargetList를 입력된 Demand의 목록으로 교체합니다.</summary>
            <param name="pegTargets">교체 대상 Demand 목록입니다.</param>
            <summary>Replace Demands to input Demands from current PegTargetList.</summary>
            <param name="pegTargets">List of Demands for replacing.</param>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.CurrentBlock">
            <summary>Pegging을 진행하는 현재 Block을 가져오거나 설정합니다.</summary>
            <remarks>이 Property는 PeggerModeler를 사용해서 Pegging 모듈을 실행하는 경우에만 사용됩니다.</remarks>
            <summary>Get/Set the current Block proceeding Pegging.</summary>
            <remarks>This property is used only when Pegging Module is executed through PeggerModeler.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.CurrentStep">
            <summary>Pegging을 진행하는 현재 Step을 가져오거나 설정합니다.</summary>
            <remarks>이 Property는 PeggerModeler를 사용해서 Pegging 모듈을 실행하는 경우에만 사용됩니다.</remarks>
            <summary>Get/Set the current Step proceeding Pegging.</summary>
            <remarks>This property is used only when Pegging Module is executed through PeggerModeler.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PegPart.StepTag">
            <summary>사용자 로직 처리를 위한 Step 정보를 가져오거나 설정합니다.</summary>
            <summary>Get/Set the Step information to handle user specified logic.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PegPartMerger">
            <summary>
            This the class to Merge/Split PegTarget list input as Flow unit. 
            The PegTargets are merged at the start Stage when Flow starts and split when all Stage is completed from the Flow. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartMerger.Merge(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            Gets PegPArt list and merge PegParts regularly through logic and returns the mergerd PegParts. 
            </summary>
            <param name="flowName">Flow to apply Merge </param>
            <param name="pegParts">Input PegPart list.</param>
            <returns>Return merged PegPart lists.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PegPartMerger.Split(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            Gets PegPArt list and split PegParts regularly through logic and returns the split PegParts. 
            </summary>
            <param name="flowName">Flow to apply Splpit </param>
            <param name="pegParts">Input PegPart list.</param>
            <returns>Return split PegPart lists.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerModelRunInterface">
            <summary>
            이 클래스는 더이상 사용되지 않습니다.
            Pegging 로직 수행 중 호출되는 사용자 정의 구현 포인트가 정의되어 있는 클래스입니다.
            </summary>
            <summary>
            This class is no longer in use. 
            This class defines the Pegging methods where user logics should be implemented. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.GetLastPeggingStep(Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            Backward 기준으로 입력된 PegPart 의 Process 상 첫번째 Pegging Step 을 반환합니다. 
            Forward 기준의 Process 상에서는 Last Step 에 해당합니다. 
            </summary>
            <param name="pegPart">Demand(Target)정보를 포함하는 PegPart 객체입니다.</param>
            <returns>Forward 기준 Process 의 마지막 Step 객체입니다.</returns>
            <remarks>
            Pegging 은 기본적으로 Flow(Process) 를 구성하는를 마지막 Step 이 첫번째 Pegging Step 이 됨으로 
            Action명은 이를 반영하여으며, SemiFAB 라이브러리에 포함된 기본로직은 이를 반영하도록 로직이 
            구성되어 있습니다. 
            공정별 Pegging 을 수행하는 Main flow의 경우에는 제품별로 해당 Stage 를 찾는 로직을 별도로 
            구현할 수 있습니다.
            </remarks>
            <summary>
            Returns the Process's first Pegging Step of the input PegPart based on Backward Planning.  
            This stands for the last Step for Forward Planning.  
            </summary>
            <param name="pegPart">The PegPart entity included with Demand(Target) information.</param>
            <returns>Returns the last Step of the Process based on Forward Planning.</returns>
            <remarks>
            In Pegging, the last Step composing Flow(Process) is normally the first Pegging Step.
            The name of the Action reflects this and the basic logic in SemiFab libarary also reflects this as well.  
            For Main flow that performs Pegging for each Step of each Product, the logic to search for the Stage 
            could be implemented through the following Action. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.GetPrevPeggingStep(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Forward 기준으로 입력된 PegPart 의 현재 Step 의 이전 Step을 반환합니다. 
            Backward 기준 Next Pegging Step 이 됩니다. 
            </summary>
            <param name="pegPart">Demand(Target)정보를 포함하는 PegPart 객체입니다.</param>
            <param name="currentStep">PegPart 의 현재 Pegging Step 입니다.</param>
            <returns>Forward 기준 Process 상의 현재Step 이전 Step 객체입니다.</returns>
            <remarks>
            Pegger Model을 구성하는 Pre, Post flow 의 경우 일반적으로 ModelBuild 시 Stage 의 
            선후관계를 설정함으로 기본 로직에 의해 로직이 수행되며, 공정별 Pegging 을 수행하는 
            Main flow 의 경우에 본 Action 의 결과Step 에 대한 Stage 가 실행됩니다. 
            반도체 Fab 과 같이 Process를 구성하는 공정이 많은 경우에는 조건에 따라 특정 공정에 대한 
            Pegging 을 Skip 하는 등의 업무로직을 본 Action을 통해 구현할 수 있습니다. 
            Pegging 은 Backward 로 진행됨에 따라 Flow 상 이전 Step 이 다음 실행대상 Pegging Step 이 됩니다.
            </remarks>
            <summary>
            Returns the the previous Step of the current Step of input PegPart based on Forward Planning. 
            This is the Next Pegging Step based on Backward Planning. 
            </summary>
            <param name="pegPart">The PegPart entity included with Demand(Target) information.</param>
            <param name="currentStep">The current Pegging Step of the PegPart.</param>
            <returns>Returns the previous Step of the current Step of the Process based on Forward Planning.</returns>
            <remarks>
            Pre and Post Model composing Pegger Model normally have sequence relationship of Stage configured  
            and the logics are performed through the basic logic during ModelBuild. 
            In the other hand Main Flow that performs Pegging per Step is executed through the following Action 
            and Stage executed accorting to the Step result from the corresponding Action.
            Such like Semiconductor Fab, when there are too many Steps in the Process, 
            it is possible to implement logics to Skip Pegging under certain circumstances through this Action. 
            Since Pegging is done Backwards, the previous Step based on Flow, is the next Pegging Step. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.ComparePegPart(Mozart.SeePlan.Pegging.PegPart,Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            Flow에서 실행대상이 되는 PegPart 를 우선실행 기준으로 소팅하기 위한 함수입니다.
            </summary>
            <remarks>
            엔진에서는 특정 Flow 를 실행할때, 실행대상 PegPart 중 하나를 선택해서 해당 PegPart 의 
            CurrentStep에 해당하는 Stage 를 실행하고 다음 실행대상 PegPart 를 선택하여 Stage 실행을
            반복합니다. 이때, PegPart 선택 전에 PegPart를 본 함수를 통해 소팅하여 가장 먼저 실행할
            PegPart 를 선택하게 됩니다. 예를 들어 두개의 PegPart 가 특정 공정에서 Merge가 되는 경우 
            Merge 되는 공정 이전(Backward기준)의 공정에 위치한 PegPart 에 대한 우선순위가 높아져야 
            두개의 PegPart를 해당 공정에서 Merge 하고 그 이후 공정을 진행할 수 있게 됩니다. 
            </remarks>
            <param name="x">비교대상 PegPart 객체입니다.</param>
            <param name="y">비교대상 PegPart 객체입니다.</param>
            <returns>x가 큰경우 1, x=y 인 경우 0, y가 큰경우 -1의 값을 반환합니다.</returns>
            <summary>
            This is the function to sort target PegPart in higher priority orders to executed in the Flow. 
            </summary>
            <remarks>
            When a specific Flow is executed through the Engine, one of the target PegPart is selected and the Stage 
            of the CurrentStep of the selected PegPart is executed and then the next target PegPart is selected and Stage is repeated. 
            At this moment, before PegPart is selected, PegParts could be executed first can be sorted through this function.
            For example, if two PegParts are merged through a specific Step, the PegParts from the previous Step(based on Backward) should have 
            higher priority than other PegParts so it could be merged from the target Step and could be processed through other future Steps. 
            </remarks>
            <param name="x">PegPart 'x' object for comparison.</param>
            <param name="y">PegPar 'y'object for comparison.</param>
            <returns>If 'x' is larger than y, return 1. If 'x=y', return 0. If 'x' is lower than 'y', return -1.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.ComparePegTarget(Mozart.SeePlan.Pegging.PegTarget,Mozart.SeePlan.Pegging.PegTarget)">
            <summary>
            PegPart 에 포함된 PegTarget 을 소팅합니다. 
            </summary>
            <param name="x">비교대상 PegTarget 객체입니다.</param>
            <param name="y">비교대상 PegTarget 객체입니다.</param>
            <returns>x가 큰경우 1, x=y 인 경우 0, y가 큰경우 -1의 값을 반환합니다.</returns>
            <remarks>
            특정 공정에서 Pegging 을 실행하는 시점에 각 동일 PegPart 내의 PegTarget 간의 Pegging 우선순위 소팅을 위한 비교로직을 구현합니다.
            </remarks>
            <summary>
            This is to sort PegTarget included in the PegPart. 
            </summary>
            <param name="x">PegPart 'x' object for comparison.</param>
            <param name="y">PegPar 'y'object for comparison.</param>
            <returns>If 'x' is larger than y, return 1. If 'x=y', return 0. If 'x' is lower than 'y', return -1.</returns>
            <remarks>
            A comparison logic should be implemented to sort Pegging priority among PegTargets included in identical PegParts when Pegging is performed from a particular Step. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.MergePegParts(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            입력된 Flow 의 실행 전에 입력된 PegPart 들을 룰에 따라 병합합니다.  
            </summary>
            <param name="flowName">Flow 명입니다.</param>
            <param name="pegParts">입력된 전체 PegPart 리스트입니다.</param>
            <returns>병합된 PegPart 리스트입니다.</returns>
            <remarks>
            Flow 실행 시작시점에 개별 Demand(PegPart)별 Stage 로직 처리를 하지 않고 특정로직(기준)에 따라 PegPart 의 묶음으로 처리하고자 하는 경우에 PegPart 를 MergedPegPart Type으로 Merge 하도록 로직을 구현합니다. 예를 들어 Pegger Model 의 Pre, Post flow 의 경우 Demand 별 로직을 처리할 필요가 없음으로 모든 PegPart들을 하나의 PegPart 로 묶어서 처리할 수 있습니다.
            </remarks>
            <summary>
            Merge input PegParts according to the rule before executing input Flow. 
            </summary>
            <param name="flowName">Flow name.</param>
            <param name="pegParts">The list of entire input PegParts.</param>
            <returns>Return the list of merged PegParts.</returns>
            <remarks>
            A logic to merge PegPasts as MergedPegPart type could be implemented through the following function in case Stage per Demand(PegPart) logic is not handled but instead
            PegParts should be handled as a batch process from a particular logic. For example,the Demand in Pre/Post flow of Pegger Model is not requried to be handled individually, 
            so these two PegParts could be merged and processed as a single PegPart. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.SplitPegParts(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            입력된 Flow 의 실행이 완료되기 직전 모든 Stage 를 실행한 후 병합된 PegParts 를 다시 
            분리합니다. 
            </summary>
            <param name="flowName">Flow 명입니다.</param>
            <param name="pegParts">전체 PegPart 리스트입니다.</param>
            <returns>분리된 PegPart 리스트입니다.</returns>
            <summary>
            This function is to execute all Stages and split merged PegParts 
            right before input Flow is completed. 
            </summary>
            <param name="flowName">Flow name.</param>
            <param name="pegParts">The list of entire input PegParts.</param>
            <returns>Return the list of split PegParts.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.MergePegPartsInStage(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            특정 Stage 실행 전에 해당 Stage 에서 Merge되어 Pegging 될 필요가 있는 PegPart 를 
            묶어주는 로직을 구현합니다. 
            예를 들어 일부 재공의 경우 특정 Stage 에서  Product A 에 해당하는 제품의 재공이지만, 
            A Demand 가 없는 경우 Product B, Product C 의 순으로 제품이 변경되어 Pegging 가능하다고 할 때 
            상기 Rule 의 구현을 위해 해당 Stage 에서 Product A, B, C 를 Merge 하고 Pegging 하는 로직에서 
            이를 처리하도록 구현할 수 있습니다.
            </summary>
            <param name="flowName">Flow 명입니다. </param>
            <param name="pegParts">전체 PegPart 리스트입니다.</param>
            <returns>병합된 PegPart 리스트입니다.</returns>
            <summary>
            This is a function to implement logic to merge PegParts before a specific Stage is executed, 
            in case merging is required for Pegging through the current Stage. 
            For example, a WIP in a particular Stage can be a WIP for Product A. However when there is no Demand for A and 
            Pegging is possible by changing it to Product B and Product C respectively, a logic to apply the rule to merge and Peg
            Product A, B, C from the corresponding Stage can be included through the following function.
            </summary>
            <param name="flowName">Flow name.</param>
            <param name="pegParts">The list of entire PegParts.</param>
            <returns>Return the list of merged PegParts.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.SplitPegPartsInStage(System.String,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Pegging.PegPart})">
            <summary>
            특정 Stage 실행 후 다음 Stage 시작전에 해당 Stage 에서 Merge 된 PegPart 를 유지하거나 특정로직으로 나누는 로직을 구현합니다.
            </summary>
            <param name="flowName">Flow 명입니다. </param>
            <param name="pegParts">전체 PegPart 리스트입니다.</param>
            <returns>분리된 PegPart 리스트입니다.</returns>
            <summary>
            Implement a logic in this function to either maintain merged PegPart or split the PegPart from a particular Stage before proceeding to the next Stage. 
            </summary>
            <param name="flowName">Flow name.</param>
            <param name="pegParts">The list of entire PegParts.</param>
            <returns>Return the list of split PegParts.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.GetAlignKey(System.String,Mozart.SeePlan.Pegging.PegPart)">
            <summary>
            주어진 PegPart를 Flow의 실행 대상에서 제외할지 여부를 판단합니다. 
            Flow의 실행 대상에서 제외한다면 해당하는 Key 값을 반환합니다. 
            제외된 PegPart는 동일한 Key로 제외된 PegPart와 함께 모여있다가, 
            해당 Key의 실행 대상 복귀가 결정되면 Flow의 실행 대상으로 다시 추가됩니다.
            </summary>
            <param name="flowName">현재 실행 중인 Flow의 이름입니다.</param>
            <param name="pegPart">Flow의 실행 대상에서 제외할지 여부를 판단할 PegPart입니다.</param>
            <returns>제외 대상 여부입니다. 
            반환값이 null이 아닌 경우 PegPart는 Flow의 실행 대상에서 제외되고, 해당 Key 기준으로 별도의 목록에서 관리됩니다.
            반환값이 null인 경우 PegPart는 Flow의 실행 대상에서 제외되지 않습니다.
            </returns>
            <summary>
            Determines whether to exclude the PegPart to be executed from the corresponding Flow.  
            Key value should be set and returned in order to exclude the PegPart. 
            All PegParts with same key will be gathered. These PegParts can be restored and included to the Flow if execution is decided.
            </summary>
            <param name="flowName">Name of the current Flow.</param>
            <param name="pegPart">PegPart to be determined to be excluded from the correpsponding Flow.</param>
            <returns>Returns the Key of PegParts to be excluded.  
            Excluded PegParts with same Key will be stored in the List once returned. 
            No PegParts will be excluded when null is returned from this method. 
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.PeggerModelRunInterface.GetReleaseKey(System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Mozart.SeePlan.Pegging.PegPart}})">
            <summary>
            Flow의 실행 대상으로 복귀할 Key의 목록을 반환합니다.
            </summary>
            <param name="flowName">현재 실행 중인 Flow의 이름입니다.</param>
            <param name="alignList">실행 대상에서 제외된 PegPart들과 그 PegPart들의 Key 목록입니다.</param>
            <returns>Flow의 실행 대상으로 복귀할 Key의 목록입니다.</returns>
            <summary>
            Returns the list of Keys to restore the PegParts to be included to the executing Flow. 
            </summary>
            <param name="flowName">Name of current Flow being executed.</param>
            <param name="alignList">List of PegParts and Key of the PegParts that were excluded to be released from the corresponding executing Flow</param>
            <returns>Returns the list of Keys to restore the PegParts to be included to the executing Flow.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IInnerBucket.BucketStartDate">
            <summary>Bucket의 주 시작일을 가져옵니다.</summary>
            <summary>Get the start week of Bucket.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IInnerBucket.MoPlanList">
            <summary>InnerBucket에 속한 주 단위 계획의 목록을 가져옵니다.</summary>
            <summary>Get list of the weekly plan in InnerBucket. </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IInnerBucket.CutOffDays">
            <summary>CutOff Day을 가져옵니다.</summary>
            <summary>Get CutOff Day</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IInnerBucket.IsW00">
            <summary>InnerBucket에 속한 주 단위 계획들이 첫 주차의 계획인지 여부를 가져옵니다.</summary>
            <summary>Get the result whether if the weekly plans in InnerBucket is the first week plan.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IInnerBucket.SumQty(System.Boolean)">
            <summary>
            InnerBucket에 속한 모든 주 단위 계획의 수량을 더한 값을 반환합니다.
            </summary>
            <param name="withFix">확정 계획 수량 포함 여부입니다.</param>
            <returns>모든 주 단위 계획의 수량의 합입니다.</returns>
            <summary>
            Return the sum of all capacity in the weekly plans of InnerBucket.
            </summary>
            <param name="withFix">Determines whether to include to Fixed plan capacity.</param>
            <returns>Return the total capacity of the weekly plan.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IInnerBucket.GetDailyCapa(System.Int32,System.Int32,System.Int32@)">
            <summary>
            주 단위 계획의 수량의 합으로부터 일 별 계획 수량을 계산합니다.
            </summary>
            <param name="days">주의 날 수입니다.</param>
            <param name="fixedCapa">확정 계획 일 수입니다.</param>
            <param name="remainder">일 별 수량을 균등하게 나눈 뒤 남은 수량입니다.</param>
            <returns>일 별 계획 수량입니다.</returns>
            <summary>
            Calculate daily plan capacity through the sum of weekly plan capacity.
            </summary>
            <param name="days">Total days in a week.</param>
            <param name="fixedCapa">Total days of fixed plan.</param>
            <param name="remainder">The remaining capacity after splitting capacity evenly for daily basis</param>
            <returns>Return daily plan capacity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IInnerBucket.Smooth1(System.DateTime,System.Int32,System.Boolean,System.Int32,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>
            주 단위 계획을 균등한 일 단위 계획으로 재생성합니다. 
            </summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize입니다.</param>
            <param name="minDailyCapa">일 단위 최소 계획 수량입니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주간 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 주 단위 계획의 목록입니다.</param>
            <returns>균등하게 분배된 일 단위 계획의 목록입니다.</returns>
            <summary>
            Regenerate weekly plan to evenly splitted daily plan.
            </summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="minDailyCapa">The minimum capacity of the daily plan.</param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IInnerBucket.Smooth2(System.DateTime,System.Int32[],System.Int32,System.Boolean,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>
            	<para>OuterBucket 기준으로 주 단위 계획을 균등한 일 단위 계획으로 재생성합니다.</para>
            	<para>[2015.4.92.0] 아직 개발이 완료되지 않았습니다.</para>
            </summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="capa">OuterBucket 기준 일 별 제한 수량입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize입니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주간 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 주 단위 계획의 목록입니다.</param>
            <returns>균등하게 분배된 일 단위 계획의 목록입니다.</returns>
            <summary>
            	<para>Regenerate weekly plan to evenly splitted daily plan based on OuterBucket.</para>
            	<para>[2015.4.92.0] The development is not finished.</para>
            </summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="capa">The limited capacity per day based on OuterBucket</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.InnerBucket">
            <summary>
            Smoothing을 실행하는 단위 객체입니다.
            같은 InnerBucket에 속한 주 단위 계획들은 주차가 모두 같습니다.
            같은 InnerBucket에 속한 주 단위 계획들은 동일한 CutOff Day를 갖습니다.
            </summary>
            <summary>
            The unit entity to perform Smoothing.
            The weekly plan in same InnerBucket's week are the same. 
            The weekly plan in same InnerBucket's CuttOff Days are same.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.InnerBucket.Key">
            <summary>InnerBucket 식별자를 가져옵니다.</summary>
            <summary>Get InnerBucket identifier.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.InnerBucket.BucketStartDate">
            <summary>Bucket의 주 시작일을 가져옵니다.</summary>
            <summary>Get the start week of Bucket.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.InnerBucket.MoPlanList">
            <summary>InnerBucket에 속한 주 단위 계획의 목록을 가져옵니다.</summary>
            <summary>Get list of the weekly plan in InnerBucket.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.InnerBucket.CutOffDays">
            <summary>CutOff Day을 가져옵니다.</summary>
            <summary>Get CutOff Day</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.InnerBucket.IsW00">
            <summary>InnerBucket에 속한 주 단위 계획들이 첫 주차의 계획인지 여부를 가져옵니다.</summary>
            <summary>Get the result whether if the weekly plans in InnerBucket is the first week plan.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.InnerBucket.#ctor(System.String,Mozart.SeePlan.Pegging.MoPlan,System.DateTime,System.Boolean)">
            <summary>
            생성자입니다.
            </summary>
            <param name="key">InnerBucket 식별자입니다.</param>
            <param name="moPlan">InnerBucket을 생성할 때 참조할 정보를 갖고 있는 일 단위 계획입니다.</param>
            <param name="bucketStartDate">InnerBucket에 속한 주 단위 계획들의 주 시작일입니다.</param>
            <param name="isW00">InnerBucket에 속한 주 단위 계획들이 첫 주차의 계획인지 여부입니다.</param>
            <returns>생성된 InnerBucket 개체입니다.</returns>
            <summary>
            생성자입니다.
            </summary>
            <param name="key">InnerBucket identifier.</param>
            <param name="moPlan">The daily plan which has the reference information for creating InnerBucket.</param>
            <param name="bucketStartDate">The starting week of the weekly plan in InnerBucket.</param>
            <param name="isW00">Determines whether if the weekly plans in InnerBucket is the first week plan..</param>
            <returns>Generated InnerBucket entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.InnerBucket.SumQty(System.Boolean)">
            <summary>
            InnerBucket에 속한 모든 주 단위 계획의 수량을 더한 값을 반환합니다.
            </summary>
            <param name="withFix">확정 계획 수량 포함 여부입니다.</param>
            <returns>모든 주 단위 계획의 수량의 합입니다.</returns>
            <summary>
            Return the sum of all capacity in the weekly plans of InnerBucket.
            </summary>
            <param name="withFix">Determines whether to include to Fixed plan capacity.</param>
            <returns>Return the total capacity of the weekly plan.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.InnerBucket.GetDailyCapa(System.Int32,System.Int32,System.Int32@)">
            <summary>
            주 단위 계획의 수량의 합으로부터 일 별 계획 수량을 계산합니다.
            </summary>
            <param name="days">주의 날 수입니다.</param>
            <param name="fixedCapa">확정 계획 일 수입니다.</param>
            <param name="remainder">일 별 수량을 균등하게 나눈 뒤 남은 수량입니다.</param>
            <returns>일 별 계획 수량입니다.</returns>
            <summary>
            Calculate daily plan capacity through the sum of weekly plan capacity.
            </summary>
            <param name="days">Total days in a week.</param>
            <param name="fixedCapa">Total days of fixed plan.</param>
            <param name="remainder">The remaining capacity after splitting capacity evenly for daily basis</param>
            <returns>Return daily plan capacity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.InnerBucket.Smooth1(System.DateTime,System.Int32,System.Boolean,System.Int32,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>
            주 단위 계획을 균등한 일 단위 계획으로 재생성합니다.
            </summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize입니다.</param>
            <param name="minDailyCapa">일 단위 최소 계획 수량입니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주간 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 주 단위 계획의 목록입니다.</param>
            <returns>균등하게 분배된 일 단위 계획의 목록입니다.</returns>
            <summary>
            Regenerate weekly plan to evenly splitted daily plan.
            </summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="minDailyCapa">The minimum capacity of the daily plan.</param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.InnerBucket.Smooth2(System.DateTime,System.Int32[],System.Int32,System.Boolean,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>
            	<para>OuterBucket 기준으로 주 단위 계획을 균등한 일 단위 계획으로 재생성합니다.</para>
            	<para>[2015.4.92.0] 아직 개발이 완료되지 않았습니다.</para>
            </summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="totalCapa">OuterBucket 기준 일 별 제한 수량입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize입니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주간 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 주 단위 계획의 목록입니다.</param>
            <returns>균등하게 분배된 일 단위 계획의 목록입니다.</returns>
            <summary>
            	<para>Regenerate weekly plan to evenly splitted daily plan based on OuterBucket.</para>
            	<para>[2015.4.92.0] The development is not finished.</para>
            </summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="totalCapa">The limited capacity per day based on OuterBucket</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.IOuterBucket">
            <summary>Smoothing을 실행하는 상위 단위 개체의 Interface입니다.</summary>
            <remarks>OuterBucket에 속한 InnerBucket들은 CutOff day가 다를 수 있습니다.</remarks>
            <summary>This is the Interface of the top level entities to perform Smoothing.</summary>
            <remarks>The CutOff days of InnerBucket affiliated to OuterBucket may be different.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.IOuterBucket.InnerBucketList">
            <summary>InnerBucket 개체를 목록에 추가합니다.</summary>
            <summary>Add InnerBucket entity to the list.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.IOuterBucket.Smooth(System.DateTime,System.Int32,System.Boolean,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.IInnerBucket},System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>주 단위 기간 계획을 균등한 일 단위 계획으로 재생성합니다.</summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주 선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize 입니다.</param>
            <param name="innerBucketComparer">우선 처리할 InnerBucket을 선택하는 기준입니다. 우선순위가 높을수록 InnerBucket 자체의 일 단위 계획 수량을 만족하기 쉽습니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주 단위 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 상위 단위 계획의 리스트입니다.</param>
            <returns>균등하게 분배된 일 단위 계획입니다.</returns>
            <summary> Regenerate weekly plan to evenly splitted daily plan.</summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="innerBucketComparer"></param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.ISmoother">
            <summary>Smoothing을 실행하는 개체의 Interface입니다.</summary>
            <summary>The Interface of entity to run Smoothing.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.ISmoother.Run">
            <summary>Smoothing을 실행합니다.</summary>
            <summary> Run Smoothing.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.OuterBucket">
            <summary>Smoothing을 실행하는 상위 단위 Class입니다.</summary>
            <remarks>OuterBucket에 속한 InnerBucket들은 CutOff day가 다를 수 있습니다.</remarks>
            <summary>This is the top level class to perform Smoothing.</summary>
            <remarks>The CutOff days of InnerBucket affiliated to OuterBucket may be different.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.OuterBucket.Key">
            <summary>OuterBucket의 식별자입니다.</summary>
            <summary>OuterBucket의 identifier.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.OuterBucket.InnerBucketList">
            <summary>OuterBucket에 속한 InnerBucket의 목록입니다.</summary>
            <summary>The list of InnerBucket affiliated to OuterBucket.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.OuterBucket.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="key">OuterBucket 식별자입니다.</param>
            <returns>생성된 OuterBucket 개체입니다.</returns>
            <summary>
            Initializes a new instance of the OuterBucket class with its sepecified key.
            </summary>
            <param name="key">The string to identify OuterBucket.</param>
            <returns>Returns the created OuterBucket object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.OuterBucket.AddInnerBucket(Mozart.SeePlan.Pegging.IInnerBucket)">
            <summary>InnerBucket 개체를 목록에 추가합니다.</summary>
            <param name="innerBucket">추가할 InnerBucket 개체입니다.</param>
            <summary>Add InnerBucket entity to the list.</summary>
            <param name="innerBucket">InnerBucket entity to be included.</param>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.OuterBucket.Smooth(System.DateTime,System.Int32,System.Boolean,System.Int32,System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.IInnerBucket},System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan}@)">
            <summary>주 단위 기간 계획을 균등한 하위 단위 계획으로 재생성합니다.</summary>
            <param name="startTime">시뮬레이션 시작일의 공장 시작시간입니다.</param>
            <param name="fixDays">확정계획 일 수입니다.</param>
            <param name="allowEarlyProcess">차주 선행 가능 여부입니다.</param>
            <param name="batchSize">일 단위 계획의 BatchSize입니다.</param>
            <param name="innerBucketComparer">우선 처리할 InnerBucket을 선택하는 기준입니다. 우선순위가 높을수록 InnerBucket 자체의 일 단위 계획 수량을 만족하기 쉽습니다.</param>
            <param name="moPlanComparerForSmoothing">Smoothing 시 먼저 처리할 주 단위 계획을 선택하는 기준입니다.</param>
            <param name="failed">일 단위 계획 생성에 실패한 주 단위 계획의 리스트입니다.</param>
            <returns>균등하게 분배된 일 단위 계획입니다.</returns>
            <summary> Regenerate weekly plan to evenly splitted daily plan.</summary>
            <param name="startTime">The operation start time of Factory of the start date of Simulation.</param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines for early process of the following week plan.</param>
            <param name="batchSize">The BatchSize of the daily plan.</param>
            <param name="innerBucketComparer"></param>
            <param name="moPlanComparerForSmoothing">The standard to select weekly plan to process first during Smoothing.</param>
            <param name="failed">The list of weekly plan failed to generate daily plan.</param>
            <returns>The list of evenly splitted daily plan.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.Smoother">
            <summary>This is a class providing a function to generate daily production schedule from weekly production schedule.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.#ctor">
            <summary>Initializes a new instance of the Smoother class.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.#ctor(System.Collections.Generic.List{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.MoPlan},System.Collections.Generic.IComparer{Mozart.SeePlan.Pegging.IInnerBucket},System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the Smoother class.</summary>
            <param name="moPlanComparerForSmoothing">This is the base to select top level plan to be handled first during Smoothing.</param>
            <param name="moPlanComparerForPrioritizing">This is the base to set priority of the low-level plan after Smoothing.</param>
            <param name="innerBucketComparer">This is to select InnerBucket to perform Smoothing first based on OuterBucket. </param>
            <param name="fixDays">Total days of fixed plan.</param>
            <param name="allowEarlyProcess">Determines whether the next week plan could be processed early.</param>
            <param name="batchSize">The BatchSize of the low-level plan.</param>
            <param name="minDailyCapa">The minimum quantity of low-level plan.</param>
            <param name="priorityStartIndex">The priority value of the low-level production schedule with the highest priority. </param>
            <param name="moPlanList">The list of target top-level MoPlan for Smoothing.</param>
            <returns>Return Smoother object</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.Run">
            <summary>
            Performs Smoothing.
            </summary>
            <remarks>
            	<para>Smoothing function includes the following logics.</para>
            	<list type="number">
            		<item>Sorts MoPlan in the order of MoPlans to be executed first.</item>
            		<item>Deducts the quantities(capacity) of MoPlan by reflecting the fixed plan.</item>
            		<item>Calculates the start/end date of Bucketing.</item>
            		<item>Calculates the 1 day average quantity(capacity) of MoPlan.</item>
            		<item>Distributes MoPlan by 1 day average MoPlan quantity(capacity).</item>
            		<item>Configures week number and priority of MoPlan.</item>
            	</list>
            	<para>[2015.4.92.0] Smoothing function based on OuterBucket is no longer provided.</para>
            </remarks>
            <returns>Returns the list of MoPlan smoothed according to given period unit standards.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.GetInnerBucket(System.String)">
            <summary>Returns the InnerBucket with the given identifier.</summary>
            <param name="innerBucketKey">InnerBucket identifier.</param>
            <returns>Returns the InnerBucket entity. If there is not InnerBucket with the given identifier exists, return null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.GetOuterBucket(System.String)">
            <summary>Returns the OuterBucket with the given identifier.</summary>
            <param name="outerBucketKey">OuterBucket identifier.</param>
            <returns>Returns the OuterBucket entity. If there is not OuterBucket with the given identifier exists, return null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.GetDayStartDateTime(System.DateTime,System.Boolean)">
            <summary>
            입력된 날짜와 시간에 대한 공장 시작 시간을 반환합니다.
            </summary>
            <param name="dt">대상 날짜입니다.</param>
            <param name="containsEndBoundary">일 경계시간을 전날에 포함시킬지 여부입니다.</param>
            <returns>공장 시작 시간입니다.</returns>
            <summary>
            Gets the factory start time of the day for entered date and time. 
            </summary>
            <param name="dt">Input DateTime to get factory start time.</param>
            <param name="containsEndBoundary">Value to decide whehter to include the day boundary time on the previous day.</param>
            <returns>Returns the factory start time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.GetWeekStartDateTime(System.DateTime,System.Boolean)">
            <summary>
            입력된 날짜와 시간에 대한 주의 공장 시작 시간을 반환합니다.
            </summary>
            <param name="dt">대상 날짜입니다.</param>
            <param name="containsEndBoundary">일 경계시간을 전날에 포함시킬지 여부입니다.</param>
            <returns>주의 공장 시작 시간입니다.</returns>
            <summary>
            Gets the factory start time of the week for entered date and time. 
            </summary>
            <param name="dt">Input DateTime to get factory start time.</param>
            <param name="containsEndBoundary">Value to decide whehter to include the day boundary time on the previous day.</param>
            <returns>Returns the factory start time of the week.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Pegging.Smoother.GetWeekNo(System.DateTime,System.Boolean)">
            <summary>
            입력된 날짜와 시간에 대한 주차를 반환합니다.
            Returns the week number for entered date and time. 
            </summary>
            <param name="dt">대상 날짜입니다.</param>
            <param name="containsEndBoundary">일 경계시간을 전날에 포함시킬지 여부입니다.</param>
            <returns>주차입니다.</returns>
            <summary>
            Returns the week number for entered date and time. 
            </summary>
            <param name="dt">Input DateTime to get week number.</param>
            <param name="containsEndBoundary">Value to decide whehter to include the day boundary time on the previous day.</param>
            <returns>Returns the week number.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Pegging.PeggerCfg2">
            <summary>모든 PeggerModel과 활성화된 PeggerModel을 제공하는 Class입니다.</summary>
            <summary>This is the class that provides all PeggerModel and activated PeggerModel.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerCfg2.Models">
            <summary>모든 PeggerModel의 목록을 가져옵니다.</summary>
            <summary>Get the list of all PeggerModel.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Pegging.PeggerCfg2.Actives">
            <summary>활성화된 PeggerModel의 목록을 가져옵니다.</summary>
            <summary>Get the list of activated PeggerModel.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipProfileControl">
            <summary>
            WorkStep 별 유입재공에 대한 장비 로딩을 통해 WorkStep 의 In/Out Profile 만들때 사용하는 Control
            </summary>
            <summary>
            Provides methods(controls) to create in/out profile of the <em>WorkStep</em> by loading the arrived entity to the equipment per <em>WorkStep</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipProfileControl.UseProfileManager">
            <summary>
            재공에 대한 프로파일 관리 객체를 사용할지 여부를 판단합니다.
            </summary>
            <returns>
            true인 경우 프로파일 관리 객체를 사용합니다. 
            false인 경우 프로파일 관리 객체를 사용하지 않습니다.
            </returns>
            <summary>
            Returns a value to indicate whether to use <em>ProfileManager</em> object. 
            </summary>
            <returns><em>true</em> to use <em>ProfileManager</em>;otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipProfileControl.IsNeedRecalculate(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물에 대한 프로파일을 다시 계산할지 판단합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>
            true인 경우 대상 작업물에 대한 기존 프로파일을 모두 제거하고 다시 계산합니다. 
            false인 경우 기존 프로파일의 가용시간만 다시 계산합니다.
            </returns>
            <summary>
            Returns a value to indicate wheter to recalculate profile for the specified entity.
            </summary>
            <param name="hb">The specified entity to determine whether to recalculate profile.</param>
            <returns><em>true</em> to remove previous profile and recalculate a new profile for the specified <em>hb</em>;otherwise, <em>false</em> to recalculate the available time of the previous profile.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipProfileControl.UpdateProfileWip(Mozart.SeePlan.Simulation.ProfileWip)">
            <summary>
            대상 작업물에 대한 프로파일을 다시 계산합니다.
            </summary>
            <param name="wip">대상 프로파일입니다.</param>
            <summary>
            Recalculates and updates the information of the specified profile.
            </summary>
            <param name="wip">The specified profile to recalculate</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipProfileControl.CreateProfileWip(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물의 첫 번째 대상 공정에 대한 프로파일을 생성합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>현재 공정에 대한 프로파일입니다.</returns>
            <summary>
            Creates a profile of the first occurrence step of the specified entity(wafer,lot,batch). 
            </summary>
            <param name="hb">The specified entity to create profile of the step.</param>
            <returns>The profile of the step where the specified entity is.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipProfileControl.Advance(Mozart.SeePlan.Simulation.ProfileWip)">
            <summary>
            다음 대상 공정에 대한 프로파일을 생성합니다.
            </summary>
            <param name="wip">대상 프로파일입니다.</param>
            <returns>다음 공정에 대한 프로파일입니다.</returns>
            <summary>
            Creates profiles of the upcoming steps of the specified profile. 
            </summary>
            <param name="wip">The specified profile to seek the next profiles.</param>
            <returns>The list of profiles of the upcoming steps of the specified profile.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FilterManager.GetMethods(System.String)">
            <summary>
            Return Filter methods of provided filter key
            </summary>
            <param name="key">filter group key. </param>
            <returns>Returns Filter method. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FilterManager.CreateMethods(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FilterManager.Filter(System.String,Mozart.Simulation.Engine.ISimEntity,System.DateTime,Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="wip"></param>
            <param name="now"></param>
            <param name="target"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FilterMethod">
            <summary>
            FilterMethod Delegate.
            </summary>
            <param name="wip">Target entity.</param>
            <param name="now">Current time.</param>
            <param name="target">Target equipment.</param>
            <param name="ctx">DispatchContext information.</param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IFilterManager">
            <summary>
            FilterManager Interface.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFilterManager.GetMethods(System.String)">
            <summary>
            Return Filter methods of provided filter keys 
            </summary>
            <param name="key">filter group key. </param>
            <returns>Returns Filter method. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFilterManager.CreateMethods(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFilterManager.Filter(System.String,Mozart.Simulation.Engine.ISimEntity,System.DateTime,Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="wip"></param>
            <param name="now"></param>
            <param name="target"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ProfileManager">
            <summary>
            재공에 대한 프로파일을 관리하는 객체입니다.
            </summary>
            <summary>
            The object to manange profiles of the WIP. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.#ctor">
            <summary>
            생성자입니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>ProfileManager</em> class.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.AddLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            작업물을 등록합니다. 작업물에 대한 공정별 프로파일을 계산합니다.
            </summary>
            <param name="hb"></param>
            <summary>
            Adds the specified entity(wafer,lot,batch) to this instance and calculates profile for each steps for the specified entity.
            </summary>
            <param name="hb">The specified entity(wafer,lot,batch) to add to this instance.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.RemoveLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            등록된 작업물을 제거합니다. 관련 프로파일을 모두 제거합니다.
            </summary>
            <param name="hb"></param>
            <summary>
            Removes the specified entity(wafer,lot,batch) and its related profiles from this instance.
            </summary>
            <param name="hb">The specified entity(wafer,lot,batch) to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.UpdateLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물에 대한 프로파일을 계산합니다. 공정별 프로파일을 다시 작성할지 가용시간만 다시 계산할지 여부는 사용자 로직(IsNeedRecalculate Action)에서 판단합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <summary>
            Calculates the profile for the specified entity(wafer,lot,batch) defined within the <em>IsNeedRecalculate</em> FEAction. 
            </summary>
            <param name="hb">The specified entity to calculate the profile.</param>
            <remarks>
                <para>Depending on the logics implemented in <em>IsNeedRecalculate</em> FEAction, the profiles can be rewritten for each steps or recalculate the available time only.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.UpdateLot(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean)">
            <summary>
            대상 작업물에 대한 공정별 프로파일을 다시 계산합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="checkRecalcuate">프로파일을 다시 작성할지 공장별 가용시간만 다시 계산할지 여부입니다.</param>
            <summary>
            Recalculates the profile per step of the specified entity(wafer,lot,batch).
            </summary>
            <param name="hb">The specified entity to recalculate profile.</param>
            <param name="checkRecalcuate">The boolean value that indicates whether to rewrite the profile or recalculate the available time for each steps. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.UpdateLot(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean,System.Boolean)">
            <summary>
            대상 작업물에 대한 공정별 프로파일을 업데이트 합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="add">작업물이 공장에 처음 등록되었는지 여부입니다.</param>
            <param name="checkRecalcuate">대상 작업물에 대한 프로파일을 다시 계산할지 여부입니다. true인 경우 기존에 등록된 프로파일을 제거하고 다시 계산합니다. false인 경우 사용자 구현 로직에 의해 다시 계산할지 여부를 판단합니다.</param>
            <returns>계산 완료 여부입니다.</returns>
            <summary>
            Returns a value to indicate the profile each steps for the specified entity(wafer,lot,batch) is updated.
            </summary>
            <param name="hb">The specified entity(wafer,lot,batch) to update profile.</param>
            <param name="add">Indicates if the specified <em>hb</em> is a newly released to the factory.</param>
            <param name="checkRecalcuate">
                <para>Indiciates whether to recalculate profile for the specified <em>hb</em>.</para>
                <para>true to remove the previous profile and recalculate;otherwise false, to recalculate profile with user definition.</para>
            </param>
            <returns><em>true</em> if profile update is completed;otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.AdvanceWip(Mozart.SeePlan.Simulation.ProfileWip,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            현재 공정의 프로파일로부터 다음 공정의 프로파일을 계산합니다.
            </summary>
            <param name="wip">현재 공정의 프로파일입니다.</param>
            <param name="hb">대상 작업물입니다.</param>
            <returns></returns>
            <summary>
            Calculates the profile of the next step from the profile of the current step, of the specified entity(wafer,lot,batch).
            </summary>
            <param name="wip">The profile of the current step.</param>
            <param name="hb">The specified entity to get the profile of the next step.</param>
            <returns>The profile of the next step for the specified entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.AddWip(Mozart.SeePlan.Simulation.ProfileWip)">
            <summary>
            대상 프로파일을 추가합니다.
            </summary>
            <param name="wip"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.RemoveWip(Mozart.SeePlan.Simulation.ProfileWip)">
            <summary>
            대상 프로파일을 제거합니다.
            </summary>
            <param name="fwip"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.UpdateWip(Mozart.SeePlan.Simulation.ProfileWip)">
            <summary>
            대상 프로파일을 다시 계산합니다.
            </summary>
            <param name="wip"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.GetWips(Mozart.SeePlan.DataModel.Step)">
            <summary>
            대상 공정에 도착할 유입량을 계산합니다. 
            유입량은 도착시간 순서대로 정렬되어 있습니다.
            </summary>
            <param name="step">대상 공정입니다.</param>
            <returns>대상 공정에 도착할 유입량입니다.</returns>
            <summary>
            Calculates the amount of entities(wafer,lot,batch) that will arrive at the specified step. 
            The entity quantities are sorted by step arrival time. 
            </summary>
            <param name="step">The specified step where entities will arrive.</param>
            <returns>The amount of entities that will arrvie at the specified step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.GetWips(Mozart.SeePlan.DataModel.Step,System.TimeSpan)">
            <summary>
            현재 시간부터 대상 기간 내에 대상 공정에 도착할 유입량을 계산합니다. 
            현재 시간은 AoFactory.Current.NowDT를 의미합니다. 
            유입량은 도착시간 순서대로 정렬되어 있습니다.
            </summary>
            <param name="step">대상 공정입니다.</param>
            <param name="duration">대상 기간입니다.</param>
            <returns>조건을 만족하는 유입량입니다.</returns>
            <summary>
            Calculates the amount of entities(wafer,lot,batch) that will arrive at the specified step within the specified period from the current time. 
            The current time in this phrase means <em>AoFactory.Current.NowDT</em>.  
            The entity quantities are sorted by step arrival time. 
            </summary>
            <param name="step">The specified step where the entities will arrive.</param>
            <param name="duration">The specified period in reference to cacluate the amount of entity inflow.</param>
            <returns>The amount of entities that will arrive at the specified <em>step</em> within the specified <em>duration</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.GetWips(Mozart.SeePlan.DataModel.Step,System.DateTime)">
            <summary>
            대상 시간 이전에 대상 공정에 도작할 유입량을 계산합니다. 
            유입량은 도착시간 순서대로 정렬되어 있습니다.
            </summary>
            <param name="step">대상 공정입니다.</param>
            <param name="fence">대상 시간입니다.</param>
            <returns>조건을 만족하는 유입량입니다.</returns>
            <summary>
            Calculates the amount of entities(wafer,lot,batch) that will arrive at the specified step before the specified time. 
            The entity quantities are sorted by step arrival time. 
            </summary>
            <param name="step">The specified step where the entities will arrive.</param>
            <param name="fence">The specified period in reference to cacluate the amount of entity inflow.</param>
            <returns>The amount of entities that will arrive at the specified <em>step</em> before the specified <em>fence</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileManager.GetMappingWip(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 재공에 대한 첫 번째 공정의 유입량 정보를 반환합니다.
            </summary>
            <param name="hb"></param>
            <returns></returns>
            <summary>
            Returns the entity(wafer,lot,batch) flow quantity of the first step of the specified WIP. 
            </summary>
            <param name="hb">The specified entity to get the amount.</param>
            <returns>The entity flow quantity of the first step.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ProfileWip">
            <summary>
            재공에 대한 프로파일 정보입니다.
            </summary>
            <summary>
            The profile information of the WIP. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ProfileWip.OriginalWip">
            <summary>
            원본 작업물입니다.
            </summary>
            <summary>
            Gets the original(input) WIP data. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ProfileWip.Step">
            <summary>
            대상 공정입니다.
            </summary>
            <summary>
            Gets the specified step to create profile information. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ProfileWip.AvailableTime">
            <summary>
            대상 공정에서의 가용 시간입니다.
            </summary>
            <summary>
            Gets the date and time of the available time of the step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ProfileWip.Prev">
            <summary>
            이전 공정에 대한 프로파일 정보입니다.
            </summary>
            <summary>
            Gets the profile information of the previous step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ProfileWip.Next">
            <summary>
            다음 공정들에 대한 프로파일 정보입니다.
            </summary>
            <summary>
            Gets the list of profile information of the following steps of the current step. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ProfileWip.#ctor(Mozart.SeePlan.DataModel.Step,System.DateTime)">
            <summary>
            생성자입니다.
            </summary>
            <param name="step">대상 공정입니다.</param>
            <param name="availableTime">대상 공정에서의 가용 시간입니다.</param>
            <summary>
            Initializes a new instance of the <em>ProfileWip</em> class with the specified step and available time to create profile information.
            </summary>
            <param name="step">대상 공정입니다.</param>
            <param name="availableTime">대상 공정에서의 가용 시간입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkLotType">
            <summary>
            WorkLot의 프로파일 유형입니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkLotType.Busy">
            <summary>
            작업물을 로딩해서 작업을 진행합니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkLotType.Idle">
            <summary>
            설비가 유휴 상태입니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkLotType.Setup">
            <summary>
            다른 제품에 대한 작업을 수행하기 위해 설비 SETUP을 진행합니다.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkLotType.PM">
            <summary>
            PM을 진행합니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpDispatchInfo">
            <summary>
            Resource 가 EqpDispatchInfo 를 가지고 있으면서 Dispatching 할때마다 Reset 후 
            Dispatching 정보를 저장하기위한 클래스입니다.
            </summary>
            <summary>
            This is the class to save Dispatching information after reset is performed for every Dispatch with Resource that has EqpDispatchInfo. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.InitialWipCount">
            <summary>
            Gets the number of initial WIPs.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.Batches">
            <summary>
            Dispatching 평가대상 작업물의  DispatchingInfo 리스트입니다.
            </summary>
            <summary>
            This is the DispatchingInfo list of of target entities for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.FilterInfos">
            <summary>Flitering 사유별 Filtering 정보(EntityFilterInfo) 집합 속성입니다.</summary>
            <summary>This is the property set of Filtering information(EntityFilterInfo), which has Filtering cases.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.TargetEqp">
            <summary>대상 장비 데이터입니다.</summary>
            <summary>Target equipment data.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.DispatchTime">
            <summary>
            Dispatching 시각입니다.
            /// Dispatching time
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.SelectedWipLog">
            <summary>
            선택된 작업물의 Dispatching log 데이터입니다.
            </summary>
            <summary>
            Dispatching log data of selected WIP.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.FilteredWipLog">
            <summary>
            Dispatching시 제외된 작업물들의 log 데이터입니다.
            </summary>
            <summary>
            WIP log data of filtered from Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDispatchInfo.DispatchWipLog">
            <summary>
            Dispatching 시 평가된 작업물들의 log 데이터입니다.
            </summary>
            <summary>
            WIp log data evaluated for Dispatching.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.#ctor(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Constructor.
            </summary>
            <param name="eqp">장비 데이터입니다.</param>
            <summary>
            Constructor
            </summary>
            <param name="eqp">Equipment data.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.Reset(System.DateTime)">
            <summary>
            Dispatching 기록 정보를 초기화합니다.
            </summary>
            <param name="now">초기화 시각입니다.</param>
            <summary>
            Initializes Dispatching records.
            </summary>
            <param name="now">Initialized time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.Initialize(System.DateTime,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            Dispatching 시작 시점에 호출되는 초기화 함수입니다.
            </summary>
            <param name="now">Current time of Simulation.</param>
            <param name="wips">Dispatching 대상 작업물리스트입니다.</param>
            <summary>
            The initialization function called when Dispatching starts.
            </summary>
            <param name="now">The current time of simulation.</param>
            <param name="wips">List of target entity for Dispatching.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.AddFilteredWipInfo(Mozart.SeePlan.Simulation.IHandlingBatch,System.String)">
            <summary>
            개별 Lot별 필터링 되는 시점에 호출 됩니다.
            </summary>
            <param name="entity">필터링되는 작업물입니다.</param>
            <param name="reason">필터링 사유입니다.</param>
            <summary>
            AddFileterdWipInfo is called at the point when Filtering starts for individual Lots.
            </summary>
            <param name="hb">Entity to be filtered.</param>
            <param name="reason">Filtering case(reason).</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.AddDispatchInfo(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IHandlingBatch[],Mozart.SeePlan.DataModel.WeightPreset)">
            <summary>
            Dispatching 후 Lot 선택이 끝났을때 호출됩니다.
            </summary>
            <param name="list">대기재공 전체 리스트입니다.</param>
            <param name="sel">선택된 작업물 리스트입니다.</param>
            <param name="wp">Dispatching 에 사용된 weight preset 데이터입니다.</param>
            <summary>
            This is called when Lot is selected after Dispatching
            </summary>
            <param name="list">The entire list of Wip in WAIT state.</param>
            <param name="sel">List of selected entities.</param>
            <param name="wp">Weight Preset data used for Dispatching.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.GetSelectedWipLog(Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            최종 선택된 Lot 정보를 기록하기 위한 문자열 출력 함수입니다.
            </summary>
            <param name="sel"></param>
            <summary>
            The string output function to write final selection of Lots. 
            </summary>
            <param name="sel"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.GetDispatchWipLog">
            <summary>
            최종 로그 출력시 Dispatching 상세정보 출력함수 
            </summary>
            <returns></returns>
            <summary>
            The function to print detailed Dispatching information during final log output. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDispatchInfo.GetFilterWipLog">
            <summary>
            최종 로그 출력시 Filtering 상세정보 출력함수 
            </summary>
            <returns></returns>
            <summary>
            The function to print detailed Filtering information during final log output.  
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityDispatchInfo">
            <summary>
            작업물별 Dispatching 결과 정보입니다.
            </summary>
            <summary>
            Dispatching result information per Entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityDispatchInfo.#ctor(Mozart.SeePlan.Simulation.IHandlingBatch,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="hb">Target entity.</param>
            <param name="rank">대상 작업물의 평가우선순위입니다.</param>
            <summary>
            Constructor
            </summary>
            <param name="hb">Target Entity.</param>
            <param name="rank">Priority of target Entity.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EntityDispatchInfo.Log">
            <summary>
            작업물의 Dispatching 로그입니다.
            </summary>
            <summary>
            Dispatching log of Entity. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityFilterInfo">
            <summary>
            작업물 필터정보입니다.사유별 필터링된 재공리스트데이터를 저장합니다.
            </summary>
            <summary>
            Filtering information of Entity. This saves the list data of Filtered WIP with filtering reason.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterInfo.#ctor(System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="reason">필터링 사유입니다.</param>
            <summary>
            Constructor.
            </summary>
            <param name="reason">Filtering case(reason).</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EntityFilterInfo.Reason">
            <summary>
            Filtering 정보에 대한 사유입니다.
            </summary>
            <summary>
            Filtering case(reason).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EntityFilterInfo.FilterWips">
            <summary>Dispatching 전 Filtering 된 작업물의 리스트입니다.</summary>
            <summary>The list of Filterd WIPs before Dispatching.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterInfo.Add(Mozart.SeePlan.Simulation.ILot)">
            <summary>
            Filtering 대상 작업물을 추가합니다.
            </summary>
            <param name="lot">Filtering 대상 작업물입니다.</param>
            <summary>
            Adds Lots to be Filtered.
            </summary>
            <param name="lot">Target Lots to be Filtered.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterInfo.GetLog">
            <summary>
            Filtering 되는 전체 작업물의 log 를 반환합니다.
            </summary>
            <returns></returns>
            <summary>
            Returns the logs for the entire Entities to be Filtered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterInfo.WriteLog(System.Text.StringBuilder)">
            <summary>Filtering 되는 전체 작업물의 log 를 기록합니다.</summary>
            <returns></returns>
            <summary>Writes the logs for the entire Entities to be Filtered</summary>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IDispatchMonitor">
            <summary>
            디스패칭 정보를 수집하는 모니터 인터페이스입니다.
            </summary>
            <summary>
            Provides monitoring to collect dispatch information. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketControl">
            <summary>
            	<para>[FEComponent] Bucketing/BucketControl</para>
            	<para>BucketControl controls the logic from the beginning to the end of Bucketing process of the target entities. </para> 
            	<para>If the target entity for Bucketing has Resource and Capacity given, the Action is designed to search the corresponding Capacity Bucket and the entity and processing time is controlled according to the Bucket property.</para>
            	
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketControl.Instance">
            <summary>
            BucketControl Instance object. This object is used when FEComponent should be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetCapacityBucketKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This is the FEAction that returns the Key to search target Bucket based on entity and Step. 
            	Depending on the Bucket management method, Rule is defined and the defined Rule is implemented through this Action. </para>	
            </summary>
            <param name="hb">Target entity object</param>
            <returns>Returns the Bucket Key object to search Bucket.Normally the data type is string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetCapacityBucket(Mozart.SeePlan.Simulation.BucketManager,System.Object)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>The FEaction to designate and create properties such as simultaneous handling Capacity of the Bucket.
            	Creates and return Bucket belonging to <paramref name="key"/>.</para> 
            </summary>
            <param name="bm">Bucket management object.</param>
            <param name="key">The key of the Bucket to be created.</param>
            <remarks>
            Normally, the properties for the Bucket that user should define are 
            Bucket Key, entire Capacity of Bucket and the Capacity that Bucket could handle simultaneously. 
            </remarks>
            <returns>Returns the Bucket created through user definition.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.InitializeBucketer(Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            	<para>[FEAction] Bucketing/BucketControl</para>
            	<para>Bucketer and initializes after creation.</para>
            </summary>
            <param name="bucketer">Created Bucketer.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.OnDispatch(Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            	<para>[FEAction] Bucketing/BucketControl</para>
            	<para>This FEAction is called at the point when WIP on standby is selected by Bucketer.</para>
            </summary>
            <param name="bucketer">Returns the Bucketer for Dispatching.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetConstraintSetKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>Returns the Capacity Constraint Bucket Key of the product unit.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <remarks>In case F/W is performed by Bucketing in a specific Step and 
            in case the Capacity of the Resource pool of the corresponding Step is considered, Move Bucket is used.
            In addition, in case Bucketing constraint should be applied to each product of the corresponding Step, this function is used to use 
            Capacity Bucket for each product. For example, if product 1 and product 2 in Step "A" could be produced 1,000 and 1,5000 respectively per day, 
            these could be created as Bucket for each product and could be used. </remarks>
            <returns>Returns ConstraintSetKey.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetConstraints(Mozart.SeePlan.Simulation.BucketManager,Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>Creates and returns the Capacity Constraint Bucket list of the target entity.</para>
            </summary>
            <param name="bm">Target BucketManager.</param>
            <param name="hb">Target entity. </param>
            <param name="now">The current time of Simulation.</param>
            <returns>Returns the production Bucket Capacity list of the current Step of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.IsStopSelection(Mozart.SeePlan.Simulation.AoBucketer,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Bucketing/BucketControl</para>
            	<para>This is used to determine whether additional entity could be selected fromt the Bucket considering the constraint of Bucket. </para>
            </summary>
            <param name="bucketer">Bucketer object.</param>
            <param name="hb">Target entity. </param>
            <returns>If Dispatching should be stopped, return <em><strong>True</strong></em>, or else, return <strong><em>False</em></strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.CanDispatch(Mozart.SeePlan.Simulation.AoBucketer,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>Determines whether entity could be processed during Bucketing. This is used to handle job constraints of the Bucketer other than Bucket and Constraint Bucket.</para>
            </summary>
            <param name="bucketer">Bucketer object.</param>
            <param name="hb">Target entity. </param>
            <returns>If Bucketing coud be processed for the target entity, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.CustomSelect(Mozart.SeePlan.Simulation.AoBucketer,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This FEAction is for selecting entities in WIP on standby from Bucketer according to the weight factor of entities.</para>
            	 
            </summary>
            <param name="bucketer">Bucket management object.</param>
            <param name="x">Currently selected Batch.</param>
            <param name="y">Candidate Batch.</param>
            <remarks>
            	<em>[Tip]</em> Normaly, Bucketing is handled as FIFO, but if there is a certain Dispatching Rule used for Bucketing, it should be implemented through this function.</remarks>
            <returns>Returns the selected entity object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.DispatchSelect(Mozart.SeePlan.Simulation.AoBucketer,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This FEAction is for selecting entities in WIP on standby from Bucketer according to the weight factor of entities.</para>
            	 
            </summary>
            <param name="bucketer">Bucket management object.</param>
            <param name="lots">List of waiting entities.</param>
            <remarks>
            	<em>[Tip]</em> Normaly, Bucketing is handled as FIFO, but if there is a certain Dispatching Rule used for Bucketing, it should be implemented through this function.</remarks>
            <returns>Returns the selected entity object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.OnDispatched(Mozart.SeePlan.Simulation.AoBucketer,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This FEAction is called at the point Dispatching is completed for the target Bucketer.</para>
            </summary>
            <param name="bucketer">Target Bucketer object</param>
            <param name="sel">Returns the selected entity object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.AddBucketMove(Mozart.SeePlan.Simulation.CapacityBucket,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This FEAction is to increase Move counts when entities are processed in Bucket.</para>
            	<para>Depending on the situation the units can be changed as Lot and Units.</para>
            </summary>
            <param name="cb">Target Bucket object</param>
            <param name="hb">Target entity object</param>
            <remarks>Move counts are upgraded by each entity </remarks>
            <exception caption="The input value is NULL." cref="T:System.ArgumentNullException">NULL Exception</exception>
            <example>
            	<code title="Example" description="" lang="CS">
            public class Bucket = new Bucket();</code>
            </example>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetBucketTime(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>Returns Processing Time used durin Bucketing</para>
            </summary>
            <param name="hb">Target entity object</param>
            <param name="bucketer">Target Bucketer object</param>
            <remarks>
            	<em>[TIP]</em> If simultaneous processing Capacity and Volume Capacity of Bucket is designated, Processing Time can be assigned according the to similarity of Equipment loading method, if not, Step TAT is used.
            This could change depending on the target system's operation method, so user should implement logic through this FEAction. </remarks>
            <returns>Returns the Processing Time of the target Bucketer.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.GetBucketInputDelay(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>The logic should be implemented here to return the time when additional entities could be input to the current Bucket in case additional Input is restricted due to Slot Capacitiy limit of the Bucket. </para>
            </summary>
            <param name="hb">Bucketing Target entity object</param>
            <param name="bucketer">Target Bucketer object</param>
            <remarks> If a Bucket could process 60 products per hour, one product per minute and could process 5 products simultaneously, 
            the 5 products are the BatchSize. If the current state is Block, this means the entities already loaded will take 5 minutes to complete processing and could be proceed to the next step. </remarks>
            <returns>Returns the Wait time until the target entity(<paramref name="hb"/>) could be input to Bucketer.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.BucketRolling(Mozart.SeePlan.Simulation.CapacityBucket,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para> This FEAction is called at Bucket Rolling of individual Bucket and updates Bucket information.</para>
            </summary>
            <param name="cb">Target Bucket for Rolling.</param>
            <param name="now">Rolling time.</param>
            <param name="atBoundary">Checks if Rolling time is part of Bucket Rolling Hour. If Bucket RollingHour is configured by user, return <em><strong>true</strong></em>, or else, return <em><strong>false</strong></em>.</param>
            <param name="atDayChanged">Determines whether day is changed. If it is change of day period, return <strong><em>true</em></strong> or else, return <em><strong>false</strong></em></param>
            <remarks>Rolling performed as individual Bucket with Capacity Bucket and Constraint Bucket included.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.WriteCheckConstraintLog(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Simulation.IBucket},Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime,Mozart.SeePlan.Simulation.IBucket)">
            <summary>
            	<para>
            		<strong>[FEAction] Bucketing/BucketControl</strong>
            	</para>
            	<para>This is the Action to write th Constraint Bucket Check results. This is called after distinguishing Conatraint Bucket requirement satisfactory.</para>
            </summary>
            <param name="allBuckets">The entire constraint information that should be applied to the target entity.</param>
            <param name="hb">Target entity object</param>
            <param name="now">Current time</param>
            <param name="violate">The contraint information that entity did not satisfy.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketControl.InterceptMove(Mozart.SeePlan.Simulation.AoBucketer,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
                <para>[FEAction] Bucketing/BucketControl</para>
                <para>This FEAction intercepts the entities to be sent to the next Step and handles the logic to Split/Merge entity.</para>
            </summary>
            <param name="bucketer">Target Bucketer object</param>
            <param name="hb">Target entity object</param>
            <returns>Returns the list of entities to be sent to next Step. The entities different from the entities processed according to InterceptMove can move to the next Step.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketEvents">
            <summary>
            	The class with collection of Events triggered durnig <em>BucketControl.</em></summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketEvents.Instance">
            <summary>
            BucketEvents Instance object. This is used when FEComponent should be called directly.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketEvents.OnBeginRolling(Mozart.SeePlan.Simulation.BucketManager,System.DateTime,System.Boolean)">
            <summary>
            	<para>
            		<strong>[FEAction] BucketControl/BucketEvent</strong>
            	</para>
            	<para>
            		The logics to be handled before <em>BucketRolling</em> should be implemented.</para>
            	<para>Executed according to Rolling cycle and called at the point Rolling starts.</para>
            </summary>
            <param name="bm">Bucket management object.</param>
            <param name="now">Current time.</param>
            <param name="atBoundary">Rolling cycle Boundary</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketEvents.OnEndRolling(Mozart.SeePlan.Simulation.BucketManager,System.DateTime,System.Boolean)">
            <summary>
            	<para>
            		<strong>[FEAction] BucketControl/BucketEvent/OnEndRolling</strong>
            	</para>
            	<para>
            		The logics to be handled after <em>BucketRolling</em> should be implemented. </para>
            	<para>Called according to Rolling cycle.</para>
            </summary>
            <param name="bm">Bucket management object.</param>
            <param name="now">Current time.</param>
            <param name="atBoundary">Rolling cycle Boundary.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketInit">
            <summary>
            	<para>
            		<strong>[FEComponent] Factory/BucketInit</strong>
            	</para>
            	<para>Initializes Bucket. 
            	<em>CapacityBucket</em> and <em>ConstraintBucket</em> can be registered to <em>BucketManager</em> during initiailization.
            	In addition, the initial value of Bucket could be corrected.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketInit.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketInit.RollingHours">
            <summary>
            Set Rolling cycle(Hour).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketInit.InnerRollingMinutes">
            <summary>
            Set Inner Rolling cycle(Minutes).
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketInit.InitializeBuckets(Mozart.SeePlan.Simulation.BucketManager)">
            <summary>
            	<para>[FEAction] Factory/BucketInit</para>
            	<para>Initializes BucketManager</para>
            	<para>Capacity Bucket and Constraint Bucket can be included during initialization.</para>
            </summary>
            <param name="bm">BucketManager object.</param>
            <remarks>
            	If <em>CapacityBucket</em>, <em>Constraint Bucket</em> is not registered to <em>BucketManager</em>, Rolling is not performed in a cycle.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketInit.OnCompensate(Mozart.SeePlan.Simulation.BucketManager,System.DateTime,System.Single)">
            <summary>
            	<para></para>
            	<para>[FEAction] Factory/BucketInit</para>
            	<para> This is the FEAction used to develop logic to balance the passed time when the start time configured through initial Bucket is different from Bucket Rolling cycle. </para>
            	<para>This FEAction is to develop logic to correct the initial value, such as considering the passed time to be handled as if actual ouput has already came out.</para>
            </summary>
            <param name="bm">Bucket management object.</param>
            <param name="now">Current time.</param>
            <param name="portion">Correction rate.</param>
            <remarks>
            If Bucket Rolling Hour is 8 hours, and the current time is 3 hours elapsed from Bucket, 
            <paramref name="portion"/> is 3/8 and Volume Capcity of Bucket should be deducted as much as <paramref name="portion"/> to start Simulation. 
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityMergeControl">
            <summary>
             <para>[FEComponent] Entity/MergeControl</para>
             <para>This is the FEComponent used to Merge entity at a particular point. This is used if Merge function of AoFactory is called.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EntityMergeControl.Instance">
            <summary>
            MergeControl Instance object . This is used to call FEComponent directly.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityMergeControl.GetMergeableKey(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            <para>[FEAction] Entity/MergeControl</para>
            <para>Set the Key of the target entities to be Merged. </para>
            </summary>
            <param name="entity">Target entity.</param>
            <returns>Returns the corresponding Key of the targets to Merge. If the target is not be Merged, null is returned. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityMergeControl.OnEnterControl(System.Object,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            <para>[FEAction] Entity/MergeControl</para>
            <para>This is the Event called when Merge targets enters MergeControl.</para>
            </summary>
            <param name="key">The Key created from GetMergeableKey.</param>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityMergeControl.Merge(System.Object,System.Collections.Generic.List{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            <para>[FEAction] Entity/MergeControl</para>
            <para>Merges the entities in the Merge list. The logics to merge the entities should be implemented by the user.</para>
            </summary>
            <param name="key"> The Key created from GetMergeableKey..</param>
            <param name="entitys">Target entity list.</param>
            <returns> Returns the Merged entities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityMergeControl.DisposeEntities(System.Collections.Generic.List{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            <para>[FEAction] Entity/MergeControl</para>
            <para>Returns the entities that could no longer be merged which were already used from Merge.</para>
            </summary>
            <param name="entitys">Target entity list.</param>
            <returns>Returns the list of entities that completed merging.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityMergeControl.OnExitControl(System.Object,System.Collections.Generic.List{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            <para>[FEAction] Entity/MergeControl</para>
            <para>This is the Event called when merged entities are leaving MergeControl.</para>
            </summary>
            <param name="key">Key with the information of merged entities.</param>
            <param name="entitys">List of merged entities.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ForwardPeg">
            <summary>
            	<para>[FEComponent] Entity/ForwardPeg</para>
            	<para>If entity could be produced as various products, this FEComponent is to control the process of deciding 
            	which production target should be aimed for production from the registered targets at the point when product is split. </para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ForwardPeg.Instance">
            <summary>
            ForwardPeg Instace object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.InitStepPlanManager">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para>Initializes StepPlanManager. Either new StepPlan and StepTarget could be included or
            	the StepPlan and StepTarget included in WriteTarget Rule of Pegging module can be manipulated.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.GetStepPlanKeys(Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para> Returns the list of Key to search StepPlan for the entity.
            	If StepPlan with the first Key exists, the corresponding StepPlan is used for Foward Peggeing, or else the StepPlan of the next Key is used. 
            	If the list of Key is null or empty or no StepPlan exist from all Keys, Forward Peggins is not performed. </para>
            </summary>
            <param name="lot">Target entity object</param>
            <returns>Return the key to search StepPlan</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.GetForwardPeggingQtyOfKey(Mozart.SeePlan.Simulation.ILot,System.Object)">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para>Return the available Forward Pegging quantities of the entity.</para>
            </summary>
            <param name="lot">Target entity.</param>
            <param name="key">Target Key.</param>
            <returns>Return the available Forward Pegging quantities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.GetForwardPeggingQty(Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para>Return the available Forward Pegging quantities of the entity.</para>
            </summary>
            <param name="lot">Target entity.</param>
            <returns>Return the available Forward Pegging quantities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.CompareStepTarget(Mozart.SeePlan.DataModel.StepTarget,Mozart.SeePlan.DataModel.StepTarget)">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para>Compares the priority of StepTarget.</para>
            </summary>
            <param name="x">The first StepTarget, x for comparison.</param>
            <param name="y">The second StepTarget, y for comparison.</param>
            <returns>If negative numeral is returned, x is the prior Target and if positive numeral is returned, y is the prior Target.</returns>
            <remarks>Compares Target's priority to select the Target to be deducted first.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ForwardPeg.FilterStepTarget(Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.DataModel.StepTarget)">
            <summary>
            	<para>[FEAction] Entity/ForwardPeg</para>
            	<para>Checks if the condition of the entity cannot be Pegged from StepTarget.</para>
            </summary>
            <param name="lot">Target entity.</param>
            <param name="st">Target StepTarget.</param>
            <returns>If true is returned, entity cannot be Pegged from StepTarget and if false is returned, entity can be Pegged from StepTarget.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.InOutControl">
            <summary>
            	<para>[FEComponent] Entity/InOutControl</para>
            	<para>This FEComponent is used when input and In/Out quantitiy needs to be controlled from a specific Step.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutControl.Instance">
            <summary>
            InOutControl Instance. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.InitializeControl(Mozart.SeePlan.Simulation.InOutAgent)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>Initializes InOutAgent.</para>
            </summary>
            <param name="agent">Target InOutAgent object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.IsWaitToSelect(Mozart.SeePlan.Simulation.InOutAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>Decides whether to immediately select entity to release during InOutAgent inflow. </para>
            </summary>
            <param name="agent">Target InOutAgent object.</param>
            <param name="hb">Target entity for releasing.</param>
            <returns>If entity is on standby and evaluated for release on the next Cycle, return <strong>true</strong>, or else, return <strong>false</strong>. 
            Default value is <strong>true</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.OnEnterControl(Mozart.SeePlan.Simulation.InOutAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>Called when the specified entity(wafer,lot,batch) flows into the <em>InOutAgent</em>.</para>
            </summary>
            <param name="agent">Target InOutAgent object.</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.OnBeginRun(Mozart.SeePlan.Simulation.InOutAgent)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>This Action is called right before logic of InOutAgent is executed.</para>
            </summary>
            <param name="agent">Target InOutAgent object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.RunAgent(Mozart.SeePlan.Simulation.InOutAgent,System.Collections.Generic.List{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>Decides and returns the entities to flow.</para>
            </summary>
            <param name="agent">The specified <em>InOutAgent</em> object to receive the arriving entities.</param>
            <param name="waits">The entire list of waiting entities.</param>
            <returns>Return the list of entities to input..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.OnExitControl(Mozart.SeePlan.Simulation.InOutAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>This FEAction is called at the point entity is leaving the Agent. In other words, it is called right after In, Out is completed.</para>
            	<para>Changing state of entity, leaving logs for the entity at In,Out is done through this Action. </para>
            </summary>
            <param name="agent">The Agent object for In, Out decision making. .</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.OnEndRun(Mozart.SeePlan.Simulation.InOutAgent)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>This FEAction is called right after Agent logic execution is completed.</para>
            </summary>
            <param name="agent">Target Agent object. .</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutControl.GetTimeToRelease(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/InOutControl</para>
            	<para>This FEAction is used to delay releasing entity for a certain amount of time.  </para>
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Return the amount of time to delay. .</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobProfileControl">
            <summary>
            	<para>[FEComponent] JobChangeAgent/JobProfileControl</para>
            	<para>This is the FEComponent to control Queue and composing Profile to perform JobChange decision for each cycle.</para>
            	<para>This FEComponent is called on each JobChange decision making cycle.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobProfileControl.Instance">
            <summary>
            Returns JobProfileControl Instance. It is used when FEComponent needs to be called directly
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.FilterProfileSteps(Mozart.SeePlan.Simulation.WorkGroup,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkStep},System.Boolean)">
            <summary>
            프로파일을 계산해야 할 WorkStep의 목록을 반환합니다.
            </summary>
            <param name="wgroup">프로파일을 계산할 WorkGroup 개체입니다.</param>
            <param name="wsteps">WorkGroup의 모든 WorkStep 목록입니다.</param>
            <param name="reCalc">할당된 설비가 변경되어 프로파일을 다시 계산하고 있는지 여부입니다.</param>
            <returns>프로파일을 계산해야 할 WorkStep의 목록입니다.</returns>
            <summary>
            Returns the list of <em>WorkSteps</em> that are assigned for profile calculation.  
            </summary>
            <param name="wgroup">The <em>WorkGroup</em> object to calculate the profile.</param>
            <param name="wsteps">The entire <em>WorkSteps</em> in the specified <em>WorkGroup</em>.</param>
            <param name="reCalc">Specifies whether to recalculate profile due to the change of equipment allocation.</param>
            <returns>The list of <em>WorkSteps</em> that are assigned for profile calculation.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.CompareProfileStep(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>Compares two WorkSteps in same WorkGroup before composing out profile. </para>
                <para>This logic is only executed when WorkGroup.Ordered property is true.</para>
            </summary>
            <param name="x">First WorkStep instance.</param>
            <param name="y">Second WorkStepInstance.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.PrepareProfileStep(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>The logics to be handled before <em>calculating out profile</em> should be implemented.</para>
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.OnBeginProfiling(Mozart.SeePlan.Simulation.WorkLoader,Mozart.Simulation.Engine.Time)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>The logics to be handled before <em>calculating out profile</em> should be implemented.</para>
            </summary>
            <param name="wl">WorkLoader object.</param>
            <param name="now">Factory current time</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.SelectProfileEqp(Mozart.SeePlan.Simulation.WorkLoader)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>Selects the equipment to load the input WIP of the Step to calculate Out Profile from WorkLoader.</para>
            </summary>
            <param name="wl">WorkLoader object.</param>
            <returns>Return the WorkEqp object for Profiling.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.CompareProfileEqp(Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkEqp)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>
            		<em>SelectEqp</em> 에서 사용되며, <em>WorkLoader</em> 의 대상 장비를 비교하여 선택하기 위한 비교함수입니다. 
            		This FEAction is used from <em>SelectEqp</em> and is the comparison function to compare equipment of <em>WorkLoader</em>.
            		Default architechture is to select the equipment with the fastest loading time.</para>
            </summary>
            <param name="x">Target <em>WorkEqp</em> object x for comparison.</param>
            <param name="y">Target <em>WorkEqp</em> object y for comparison.</param>
            <returns></returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Compares two <em>WorkEqp</em> object and returns an indication of their relative sort order.</para>
            </summary>
            <param name="x">The <em>WorkEqp</em> object to comapare to <em>y</em>.</param>
            <param name="y">The <em>WorkEqp</em> object to compare to <em>x</em>.</param>
            <returns>
            	<para>A 32-bit signed integert that indicates the relative values of <em>x</em> and <em>y</em> as shown as the following.</para>
            	<para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                <para>Zero : <em>x</em> occurs in the same position as <em>y</em> in the sort order.</para>
                <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>  
            <remarks>
                <para>This FEAction is called when default definition <em>SELECT_PROFILE_EQP_DEF</em> is used from JobChangeAgent/JobProfileControl/SelectProfileEqp FEAction.</para>
            	<para>The default definition of this FEAction, <em>COMPARE_PROFILE_EQP_DEF</em>, compares the <em>WorkEqp.AvaiableTime</em> and sorts by the fastest <em>WorkEqp.AvaialableTime</em>.</para>
            	<para>In addition, this FEAction is dependent to JobChangeAgent/JobProfileControl/SelectProfileEqp FEAction.</para>
            	<para>This means even though the default definition <em>SELECT_PROFILE_EQP_DEF</em> is not used, a line to call this FEAction is still required to be implemented through JobChangeAgent/JobProfileControl/SelectProfileEqp FEAction.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.DoFilterLot(Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkStep,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkLot})">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Selects the entities to generate Out Profile by loading it to the actual equipment(<em>WorkEqp</em>). </para>
            </summary>
            <param name="weqp">Target <em>WorkStep</em> for loading.</param>
            <param name="wstep">Target <em>WorkStep</em> to generate Out Profile.</param>
            <param name="list">List of entities.</param>
            <returns>Return the list of filtered entities to generate OutProfile.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.SortProfileLot(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkEqp,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkLot})">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Sorts the entities to generate Out Profile by loading it to the actual equipment(<em>WorkEqp</em>).</para>
            </summary>
            <param name="wstep">The target WorkStep object to calculate Profile. </param>
            <param name="weqp">The target WorkEqp object to calculate Profile. </param>
            <param name="list">List of entities.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.IsStopLoading(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            [FEAction] JobChangeAgent/JobProfileControl
            Determines whether to stop additional loading to the target Step. 
            </summary>
            <param name="wstep">Target WorkStep object.</param>
            <param name="weqp">Target WorkEqp object.</param>
            <param name="wlot">Target WorkLot object.</param>
            <returns>If no additional task is required, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.GetProfileLotQty(Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>프로파일 작성 시 사용할 작업물의 수량을 반환합니다.</para>
            </summary>
            <param name="wlot">프로파일 작성 대상 작업물입니다.</param>
            <returns>작업물의 수량입니다. 기본 로직은 작업물의 UnitQty를 반환합니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Returns the quantities of the specified entity to use to create profile.</para>
            </summary>
            <param name="wlot">The entity to create profile.</param>
            <returns>The quantity of the specified <em>wlot</em>. Default is to return the unit quantity(wafer) of the <em>wlot</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.GetTactTime(Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>프로파일 작성 시 사용할 Tact time을 반환합니다.</para>
            </summary>
            <param name="weqp">프로파일 작성 대상 설비입니다.</param>
            <param name="wlot">프로파일 작성 대상 작업물입니다.</param>
            <returns>작업물의 Tact time입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Returns the tact time to use to create profile for the specified entity.</para>
            </summary>
            <param name="weqp">The equipment to get the tact time to create profile for the specified entity.</param>
            <param name="wlot">The entity to create profile.</param>
            <returns>The tact time from the <em>weqp</em> to process <em>wlot</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.GetProfileTimes(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkLot,System.Boolean,Mozart.Simulation.Engine.Time@,Mozart.Simulation.Engine.Time@,Mozart.Simulation.Engine.Time@,Mozart.Simulation.Engine.Time@,Mozart.Simulation.Engine.Time@,Mozart.Simulation.Engine.Time@,System.Boolean@)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>프로파일 작성에 필요한 시간 정보를 계산합니다. 시작 시간과 끝 시간이 동일한 유형은 프로파일 작성에 반영되지 않습니다. 이 Action은 WorkAgent.AddDummyProfile 속성이 true로 설정된 경우에만 호출됩니다.</para>
            </summary>
            <param name="wstep">프로파일 작성 대상 WorkStep 개체입니다.</param>
            <param name="weqp">프로파일 작성 대상 WorkEqp 개체입니다.</param>
            <param name="wlot">프로파일 작성 대상 WorkLot 개체입니다.</param>
            <param name="isFirstLoading">이번 프로파일 작성 인터벌에서 WorkEqp에 처음으로 프로파일을 추가하는지 여부입니다.</param>
            <param name="setupStartTime">SETUP 시작 시간입니다. 기본값은 WorkEqp의 가용 시간과 WorkLot의 가용 시간 중 늦은 값입니다.</param>
            <param name="setupEndTime">SERUP 완료 시간입니다. 기본값은 WorkEqp의 가용 시간과 WorkLot의 가용 시간 중 늦은 값입니다.</param>
            <param name="busyStartTime">BUSY 시작 시간입니다. 기본값은 WorkEqp의 가용 시간과 WorkLot의 가용 시간 중 늦은 값입니다.</param>
            <param name="busyEndTime">BUSY 완료 시간입니다. BUSY 시작 시간에 유닛 수량과 TAT를 반영한 값입니다.</param>
            <param name="pmStartTime">PM 시작 시간입니다. 기본값은 WorkEqp의 가용 시간과 WorkLot의 가용 시간 중 늦은 값입니다.</param>
            <param name="pmEndTime">PM 완료 시간 입니다. 기본값은 WorkEqp의 가용 시간과 WorkLot의 가용 시간 중 늦은 값입니다.</param>
            <param name="addBusyProfile">작업물에 대한 BUSY 프로파일을 작성할지 여부입니다. BUSY 프로파일을 작성하지 않은 작업물은 현재 WorkStep의 프로파일 작성 대상 작업물로 남아 있습니다.</param>
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>Gets the time information to write profile for the specified step, entity and equipment.</para>
                <para>The profile will not be created if the type of the start and end time are same.</para>
                <para>This FEAction is called only when <em>WorkAgent.AddDummyProfile</em> is <em>true</em>.</para>
            </summary>
            <param name="wstep">The <em>WorkStep</em> object to create profile.</param>
            <param name="weqp">The <em>WorkEqp</em> object to create profile.</param>
            <param name="wlot">The <em>WorkLot</em> object to creaate profile.</param>
            <param name="isFirstLoading">A value to indicate whether it is the first time to add profile to the specified <em>WorkEqp</em> at this profile creation interval.</param>
            <param name="setupStartTime">The time SETUP is started. Default value is the later time between the available time of <em>WorkEqp</em> and the available time of <em>WorkLot</em>.</param>
            <param name="setupEndTime">The time SETUP is completed. Default value is the later time between the available time of <em>WorkEqp</em> and the available time of <em>WorkLot</em>.</param>
            <param name="busyStartTime">The time BUSY(entity processing from equipment) is started. Default value is the later time between the available time of <em>WorkEqp</em> and the available time of <em>WorkLot</em>.</param>
            <param name="busyEndTime">The time BUSY ends. The end time is the time passed from BUSY start time reflecting TAT per unit quantity.</param>
            <param name="pmStartTime">The time PM is started. Default value is the later time between the available time of <em>WorkEqp</em> and the available time of <em>WorkLot</em>.</param>
            <param name="pmEndTime">The time PM is completed. Default value is the later time between the available time of <em>WorkEqp</em> and the available time of <em>WorkLot</em>.</param>
            <param name="addBusyProfile">Specifies a value to write "BUSY" profile of the <em>wlot</em>. If "BUSY" profile is not written, the <em>wlot</em> will remain to write profile for the current <em>WorkStep</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.CreateDummyWorkLot(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkEqp,Mozart.SeePlan.Simulation.WorkLot,Mozart.SeePlan.Simulation.WorkLotType,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,System.Object,Mozart.SeePlan.DataModel.Step)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>주어진 WorkLot의 프로파일 유형을 갖는 Dummy WorkLot을 생성합니다. 생성된 WorkLot의 InEqp, InTime, OutTime은 자동으로 설정됩니다. 이 Action은 WorkAgent.AddDummyProfile 속성이 true로 설정된 경우에만 호출됩니다.</para>
            </summary>
            <param name="wstep">프로파일 작성 대상 WorkStep 개체입니다.</param>
            <param name="weqp">프로파일 작성 대상 WorkEqp 개체입니다.</param>
            <param name="wlot">프로파일 작성 대상 WorkLot 개체입니다.</param>
            <param name="type">프로파일 유형입니다.</param>
            <param name="startTime">프로파일 시작 시간입니다.</param>
            <param name="endTime">프로파일 완료 시간입니다.</param>
            <param name="stepKey">프로파일 작성 대상 WorkStep의 Key입니다.</param>
            <param name="step">프로파일 작성 대상 WorkLot의 현재 공정입니다.</param>
            <returns>WorkEqp의 프로파일에 추가될 DummyWorkLot 개체입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>Creates a dummy <em>WorkLot</em> having the profile type of the specified <em>WorkLot</em>.</para>
                <para>The value of InEqp, ITime, OutTime is set automatically when dummy <em>WorkLot</em> is created.</para>
                <para>This FEAction is called only when <em>WorkAgent.AddDummyProfile</em> is <em>true</em>.</para>
            </summary>
             <param name="wstep">The <em>WorkStep</em> object to create profile.</param>
            <param name="weqp">The <em>WorkEqp</em> object to create profile.</param>
            <param name="wlot">The <em>WorkLot</em> object to creaate profile.</param>
            <param name="type">The type of the profile.</param>
            <param name="startTime">The time creating profile starts.</param>
            <param name="endTime">The time creating profile completes.</param>
            <param name="stepKey">The key of the specified <em>WorkStep</em> to create profile.</param>
            <param name="step">The current step where the specified <em>WorkLot</em> is located.</param>
            <returns>The dummy <em>WorkLot</em> object to add to the profile of <em>weqp</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.Advance(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Move the current Step of the WIP to next Step.</para>
            </summary>
            <param name="wstep">The target WorkStep object to calculate Profile.  </param>
            <param name="wlot">Target WIP(WorkLot) object.</param>
            <returns>Return the wlot object set with the Next Step to the Step information of the wlot.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.UpdateFindStep(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.WorkStep},Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Searches for WorkStep during Update.</para>
            </summary>
            <param name="list">WorkStep list.</param>
            <param name="step">Previous WorkStep information.</param>
            <param name="lot">Lot information.</param>
            <returns>Return the WorkStep to be updated.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.Update(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Update the available time of the <em>WorkLot</em> from the target Step.</para>
            </summary>
            <param name="wstep">Target <em>WorkStep</em> to calculate Profile.</param>
            <param name="wlot">Target WIP(<em>WorkLot</em>) object.</param>
            <returns>Return the <em>WorkLot</em> object with changed available time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.GetMappingLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>대상 작업물에 대응된는 WorkAgent에 등록된 관리 대상 작업물 객체를 반환합니다.</para>
            	<para>대응되는 작업물을 두 개 이상일 수 있습니다. 대응되는 작업물을 두 개 이상인 경우, 모두 같은 WorkStep에 속해 있어야 합니다.</para>
            	<para>기본 반환값은 대상 작업물입니다.</para>
            </summary>
            <param name="hb">대상 작업물 객체입니다.</param>
            <returns>관리 대상 작업물 객체입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobProfileControl</para>
            	<para>Returns the entity object in the <em>WorkAgent</em> that corresponds to the specified entity.</para>
            	<para>There could more than one entity in the <em>WorkAgent</em> that corresponds to the specified entity.</para>
            	<para>If the corresponding entities are more than one, these entities should belong to the same <em>WorkStep</em>.</para>
            	<para>Default return value is the given <em>hb</em>.</para>
            </summary>
            <param name="hb">The entity to searh for the correspondent entity in <em>WorkAgent</em>.</param>
            <returns>The entity object in the <em>WorkAgent</em> correspondent to the specified <em>hb</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobProfileControl.OnEndProfiling(Mozart.SeePlan.Simulation.WorkLoader,Mozart.Simulation.Engine.Time)">
            <summary>
                <para>[FEAction] JobChangeAgent/JobProfileControl</para>
                <para>The logics to be handled after <em>calculating out profile</em> should be implemented.</para>
            </summary>
            <param name="wl">WorkLoader object.</param>
            <param name="now">Factory current time</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobTradeControl">
            <summary>
            	<para>[FEComponent] JobChangeAgent/JobTradeControl</para>
            	<para>주기별로 TRADE 방식의 JobChange 의사결정을 수행하고 Queue 에 대한 제어를 수행하는 JobChangeAgent의 Main FEComponent 입니다.</para>
            </summary>
            <summary>
            	<para>[FEComponent] JobChangeAgent/JobTradeControl</para>
            	<para>The main FEComponent of the JobChangeAgent that performs TRADE based JobChange decisions per cycle and performs control over the queues</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobTradeControl.Instance">
            <summary>
            JobTradeControl Instance 를 반환합니다. FEComponent를 직접호출해야되는 경우 사용합니다.
            </summary>
            <summary>
            Returns the instance of the <em>JobTradeControl</em> class. 
            Used when this FEComponent needs to be called directly from the source code editor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.ClassifyOperationType(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.JobChangeContext,System.Object@)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>WorkStep의 설비 할당 여부를 판별합니다.</para>
            </summary>
            <param name="step">대상 WorkStep 입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <param name="reason">할당 여부 판단 사유입니다.</param>
            <returns>설비 할당이 필요하면 Up, 유지해야하면 Keep, 설비를 내려야할 경우 Down을 반환합니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Determines the equipment allocation of the specified <em>WorkStep</em>.</para>
            </summary>
            <param name="step">The specified <em>WorkStep</em> to determine equipment allocation.</param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <param name="reason">The string containing the resason of the equipment allocation.</param>
            <returns>
            <para>The <em>OperationType</em> object to indicate the equipment allocation type as following.</para>
            <para>Up : Need to allocate equipment.</para>
            <para>Keep : Maintain the current allocated equipment.</para>
            <para>Down : Turn down the equipment.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.CalculatePriority(Mozart.SeePlan.Simulation.WorkStep,System.Object,Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>UP 우선순위 점수를 계산합니다.</para>
            </summary>
            <param name="step">설비 할당이 필요한 WorkStep 입니다.</param>
            <param name="reason">할당 여부 판단 사유입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns>계산된 우선순위 점수입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Calculates the <em>OperationType.UP</em> priority score.</para>
            </summary>
            <param name="step">The specified <em>WorkStep</em> to allocate equipment.</param>
            <param name="reason">The string containing the reason for equipment allocation.</param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns>The score to indicate the priority.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.SelectUpStep(System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkStep},Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>설비할당이 필요한 WorkStep을 가져오는 부분입니다.</para>
            </summary>
            <param name="upWorkSteps">설비할당이 필요한 WorkStep의 목록입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns>설비할당이 필요한 WorkStep입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Gets the <em>WorkStep</em> that needs equipment allocation.</para>
            </summary>
            <param name="upWorkSteps">The list of <em>WorkSteps</em> that needs equipment allocation.</param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns>The <em>WorkStep</em> that needs equipment allocation.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.CompareUpStep(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>설비할당이 필요한 WorkStep의 할당 우선순위를 비교합니다.</para>
            </summary>
            <param name="x">비교할 첫째 WorkStep 개체입니다.</param>
            <param name="y">비교할 둘때 WorkStep 개체입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 WorkStep의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Compares two specified <em>WorkStep</em> objects and returns an integer that indicates their relative position in the sort ordrer.</para>
            	<para>Sorts the priority of the <em>WorkStep</em> to get equipment allocation.</para>
            </summary>
            <param name="x">The <em>WorkStep</em> object to compare to <em>y</em>.</param>
            <param name="y">The <em>WorkStep</em> object to compare to <em>x</em>.</param>
            <returns>
            	<para>A 32-bit signed integert that indicates the relative values of <em>x</em> and <em>y</em> as shown as the following.</para>
            	<para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                <para>Zero : <em>x</em> occurs in the same position as <em>y</em> in the sort order.</para>
                <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>  
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.DoFilterAssignEqp(Mozart.SeePlan.Simulation.WorkStep,System.Collections.Generic.List{Mozart.SeePlan.Simulation.AssignEqp},Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>입력된 WorkStep 개체에 대해 이번 JobChange 의사 결정에서 할당 가능한 설비목록을 작성합니다.</para>
            </summary>
            <param name="upWorkStep">설비할당 대상 WorkStep 개체입니다.</param>
            <param name="assignEqps">대상 WorkStep의 로딩 가능한 설비의 목록입니다. 현재 로딩된 설비는 제외되어 있습니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns>할당 대상 설비 목록입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Creates the list of equipment to allocate to the specified <em>WorkStep</em> from this JobChange decision</para>
            </summary>
            <param name="upWorkStep">The specified <em>WorkStep</em> to allocate equipment.</param>
            <param name="assignEqps">The list of equipment that can be allocated to the workstep. Equipment that is loaded with entity is not included in the list. </param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns>The list of equipment that can be allocated to the specified <em>WorkStep</em>, after filtering.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.SelectAssignEqp(Mozart.SeePlan.Simulation.WorkStep,System.Collections.Generic.List{Mozart.SeePlan.Simulation.AssignEqp},Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>할당가능한 설비목록 중 최적의 설비를 선택합니다. 최적의 설비는 두 대 이상일 수 있습니다.</para>
            </summary>
            <param name="upWorkStep">설비할당 대상 WorkStep 개체입니다.</param>
            <param name="assignEqps">할당이 가능한 설비목록입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns> upWorkStep에 할당할 설비정보입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Finds and selects the best equipment from the specified allocatable equipment list to allocate to the specified <em>WorkStep</em>.</para>
            	<para>The best equipment can be more than one.</para>
            </summary>
            <param name="upWorkStep">The specified <em>WorkStep</em> to allocate equipment.</param>
            <param name="assignEqps">The list of equipment able to be allocated. </param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns>The list of selected equipment from <em>assignEqps</em>, to allocate to the specified <em>upWorkStep</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.CompareAssignEqp(Mozart.SeePlan.Simulation.AssignEqp,Mozart.SeePlan.Simulation.AssignEqp)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>할당 가능한 설비의 우선순위를 비교합니다.</para>
            </summary>
            <param name="x">비교할 첫째 AssignEqp 개체입니다.</param>
            <param name="y">비교할 둘때 Assign 개체입니다.</param>
            <returns>
            	<para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 Assign의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Compares two <em>AssignEqp</em> objects and returns an integer that indicates their relative position in the sort order.</para>
            	<para>Sorts the allocation priority of the equipment.</para>
            </summary>
            <param name="x">The <em>AssignEqp</em> to compare to <em>y</em>.</param>
            <param name="y">The <em>AssignEqp</em> to compare to <em>x</em>.</param>
            <returns>
            	<para>A 32-bit signed integert that indicates the relative values of <em>x</em> and <em>y</em> as shown as the following.</para>
            	<para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                <para>Zero : <em>x</em> occurs in the same position as <em>y</em> in the sort order.</para>
                <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns> 
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.CanAssignMore(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>설비 추가 할당 여부를 판단합니다.</para>
            </summary>
            <param name="upWorkStep">설비 할당이 필요한 WorkStep 개체입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns>설비할당이 추가로 필요할 경우 True, 아닐경우 False를 반환합니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Determines whether the specified <em>WorkStep</em> needs additional equipment allocation.</para>
            </summary>
            <param name="upWorkStep">The specified <em>WorkStep</em> that needs euipment to be allocated.</param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns><em>true</em>, if the specified <em>upWorkStep</em> requires additional equipment allocated;otherwise false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobTradeControl.SelectDownEqp(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>대상 WorkStep을 가공중인 장비 중에 Down 대상 장비를 선택합니다.</para>
            </summary>
            <param name="wstep">할당된 설비를 반환할 대상 WorkStep 개체입니다.</param>
            <param name="context">JobChange 의사결정에 사용되는 정보가 포함되어 있는 context입니다.</param>
            <returns>선택된 Down 대상 장비입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobTradeControl</para>
            	<para>Returns the list of equipment that needs to change its state to "Down" state from the equipment processing the specified <em>WorkStep</em>.</para>
            </summary>
            <param name="wstep">The specified <em>WorkStep</em> that is going to return the allocated equipment.</param>
            <param name="context">The context that contains information to make JobChange decision.</param>
            <returns>The list of equipment selected to change its state to "Down" state.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketingLogic">
            <summary>
            BucketControl Action들의 Default Definition을 정의한 클래스
            </summary>
            <summary>
            Represents the default definition of the FEAction in BucketControl. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchControl">
            <summary>
            	<para>
            		<strong>[FEComponent] Dispatching</strong>
            	</para>
            	<para>At the point the equipment is searching for the next entity, this class handles the series of logics for selecting the final entity to be loaded to the equipment. 
            	These entities are not filtered and remained in front of the equipment for loading.
            	These entities are evaluated and priority is decided and then finally selected according to Processing Type of the equipment.</para>
            </summary>
            <remarks>This class plays the role of <u><strong>RTD(Real Time Dispatcher)</strong></u> of the actual system.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchControl.Instance">
            <summary>
            DispatchControl Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.UpdateContext(Mozart.SeePlan.Simulation.IDispatchContext,Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>This is the FEAction to calculate and save the reference value to be used commonly for calculating the Factor to evaluate the weight factor per entity from the target WIP list(<paramref name="wips"/>)
            	in order for the target equipment(<paramref name="aeqp"/>) to select the entity after filtering the entities that could not be processed.</para>
            </summary>
            <param name="dc">Dispatching Context.</param>
            <param name="aeqp">Target equipment object for loading.</param>
            <param name="wips">The list of waiting entities to be weight factor evaluation..</param>
            <remarks>
            The information used to evaluate priority of the entity is property of entity and equipment, 
            constraint conditions mapped to entity-Step-equipment, entity unit information and etc. 
            Most of this information can be referred during evaluation. However, when evaluating entity unit, cases like inflow amount of waiting entities in group
            or the loading status of the equipment group processing the corresponding Step, could influence performance due to long processing time and repitiion of same tasks.
            Therefore, such information should be calculated and saved to Dispatch Context to evaluate entity unit.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.CheckBatchingType(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching/DispatchControl</strong>
            	</para>
            	<para>장비(<paramref name="aeqp"/>)가 Batch processing 장비인지 확인하고 Batch 처리 장비인 경우 선택된 작업물 집합을 하나의 배치 작업물로 변환할 수 있도록 설정하는 FEAction 입니다.</para>
            </summary>
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching/DispatchControl</strong>
            	</para>
            	<para>Checks whether the specified equipment(<paramref name="aeqp"/>) processing type(<em>SimType</em>) is batch processing type or not.</para>
            	<para>In case the specifeid equipment is a batch processing type, the set of selected lots can be converted to a single batch entity from this FEAction.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="aeqp">Target equipment object for loading</param>
            <remarks>
            In general, entity is transferred/processed in Lots. However, some equipment bind the entities to a certain unit and processes in batch.
            To reflect this kind of condition, when multiple entities are selected according the the batch condition, these entities are batch processed 
            as a single entity from inside of the equipment. Through this FEAction whether process lot as Batch (=DispatchingAgent.ForceBatching) and Batch type(=DispatchingAgent.NewType) should be configured as property of da. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.GetLotBatchType">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>Designates the entity's Batch Type.</para>
            </summary>
            <returns>Return the entity Batch Type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.OnDispatch(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IEntityDispatcher)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>This FEAction is where user defined logic is included and executed right before Dispatcher evaluates the entity.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="aeqp">Target equipment object for loading.</param>
            <param name="wips">List of target entities for dispatching.</param>
            <param name="dispatcher">Dispatcher object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.DoSelect(Mozart.SeePlan.Simulation.DispatcherBase,Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>This FEActions evaluates the priority of the waiting entities and selects the entity to be processed through the target equipment.</para>
            </summary>
            <param name="db">
            	<em>Dispatcher</em> object.</param>
            <param name="aeqp">Target equipment object</param>
            <param name="wips">List of waiting entities.</param>
            <param name="ctx">
            	<em>DispatchingContext</em></param>
            <returns>Return the selected entity list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.Evaluate(Mozart.SeePlan.Simulation.DispatcherBase,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>Sorts waiting entities in priority order.</para>
            </summary>
            <param name="db">
            	<em>Dispatcher</em> object.</param>
            <param name="wips">List of waiting entities.</param>
            <param name="ctx">
            	<em>DispatchingContext</em></param>
            <remarks>
            This FEACtion is called from DoSelect and in case DoSelect is implemented separately, this FEAction is not called. 
            Therefore, if this Action is necessary or should be called, this function should be implemented to DoSelect manually.
            </remarks>
            <returns>Return the list of waiting entities sorted by priority order.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.Select(Mozart.SeePlan.Simulation.DispatcherBase,Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>Selects the final entities to be loaded to the target equipment from the evaluated entities. There could be more than two entities selected.</para>
            </summary>
            <param name="db">Dispatcher object.</param>
            <param name="aeqp">Target equipment object for loading.</param>
            <param name="wips">The list of evaluated entities. Entitiy lists are sorted by priority order dependent on Dispatcher.</param>
            <returns>Return the final selected entities to be loaded.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.IsWriteDispatchLog(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>Determines whether to writhe DispatchingLog from the equipment.
            	This means whether to configure the EqpDispatchInfo of the equipment which includes properties such as filtering history during Dispatching, 
            	Dispatching weight factors per WIP, information of the selected entities, etc.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <returns>If logs should be left, return <strong>true</strong> or else, return <strong>fasle</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.AddDispatchWipLog(Mozart.SeePlan.DataModel.Resource,Mozart.SeePlan.Simulation.EntityDispatchInfo,Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.DataModel.WeightPreset)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching/DispatchControl</strong>
            	</para>
            	<para>The function to return the Dispatching result as string type for a specific equipment, target Lot.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="info">DispatchLog data object for each Lot.</param>
            <param name="lot">Target entity to leave Dispatching log.</param>
            <param name="wp"><em>WeightPreset</em> of the target equipment.</param>
            <returns>Return the Dispatching log(result) of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.GetSelectedWipLog(Mozart.SeePlan.DataModel.Resource,Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>Returns the log output string of the selected entities Dispatched from the target equipment.</para>
            </summary>
            <param name="eqp">Target equipment data object.</param>
            <param name="sels">Selected entity list.</param>
            <returns>Return the log strings of the selected entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.WriteDispatchLog(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.EqpDispatchInfo)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>
            		This FEAction writes the Dispatch log included from <em>AddDispatchWipLot</em> to Output table.</para>
            </summary>
            <param name="da">
            	<em>DispatchingAgent</em> object.</param>
            <param name="info">Equipment Dispatching information object. This object includes information like 
            list of targets for Dispatching, list of selected entities, Dispatching result. </param>
            <remarks>
            This FEAction is able to extract data according to the schema of Dispatchlog(for analysis) for dispatched Lot information for each Dispatch,
            information of filtered entities, final selected entities, etc.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.OnDispatched(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>This FEAction is executed right after entity is selected by Dispatcher.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="aeqp">Target object entity for loading.</param>
            <param name="wips">Selected batch list.</param>
            <remarks>
            This FEAction is executed after entity is selected by equipment but before entity is about to be loaded. 
            This FEAction is used to update the property of the entity or constraints.  
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.InterceptRemove(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>        
            	<para>This FEAction is called at the point entity is selected and about to be removed from Dispatching Queue. </para>
            	<para>This Action is used when entity should be returned immediately and not to perform the task to be removed from the Queue.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target handling batch.</param>
            <remarks>
            During Dispathcing, when Handling size of the Lot is too large, Lots are grouped to be processed in a single process to reduce system load. 
            In this case, this Action is used to handle as Lot Group during Dispatching. </remarks>
            <returns>If entitiy is not removed from Queue and handled separately, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.SortLotGroupContents(Mozart.SeePlan.Simulation.DispatcherBase,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>
            		Sorts the Lots by Lots in <em>LotGroup</em>.Sample Lot of <em>LotGroup</em> can be selected.</para>
            </summary>
            <param name="db">Dispatcher object.</param>
            <param name="list">
            	The Entity object list in <em>LotGroup</em>.</param>
            <param name="ctx">
            	<em>Dispatch Context</em>.</param>
            <remarks>
            If LotGroup used, it means the Lots with same conditions are grouped.
            Therefore, the sorting result can influence the Filtering logic.</remarks>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchControl.RetryLotGroup(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            	<para>[FEAction] Dispatching/DispatchControl</para>
            	<para>This FEAction is used when LotGroup needs to be adjusted. User should manually modify LotGroup using the entity list.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="wips">Target entity list.</param>
            <remarks>There could be entities in LotGroup format.</remarks>
            <returns>Return the modified entity list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchFilterControl">
            <summary>
            This is the Feature Extension Component Class in charge of the control logic used at the point 
            new entity reaches to the equipment waiting to process or the next entity is selected once equipment 
            completes the previous task.
            </summary>
            <remarks>
            Dispatching constraints of both equipment and entity perspective can be reflected through this FEComponent.
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchFilterControl.Instance">
            <summary>
            DispatchFilterControl object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.IsPreventDispatching(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.Simulation.Engine.Time)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>Determines whether to execute Dispatching logic based on the remaining time of the next Down start.</para>
            </summary>
            <param name="aeqp">Target equipment.</param>
            <param name="wips">Dispatching Target entity list.</param>
            <param name="waitDownTime">The remaining time until the next Down starts..</param>
            <remarks>In general, true is returned when the remaining time of next Down is 0.</remarks>
            <returns>Returns the result whether to execute Dispatching logic. If true is returned, Dispatching logic is not executed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.CheckReservation(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>Verifies if there are reserved tasks in the target equipment(<paramref name="aeqp"/>) and returns the list of reserved entities.</para>
            </summary>
            <param name="da">Target DispatchingAgent object.</param>
            <param name="aeqp">Target equipment object for loading.</param>
            <returns>Return the reserved entity(IHandlingBatch) list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.SetFilterContext(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>This FEAction is called right before the waiting entities are evaluated from the target equipment for Dispatching.
            	The codes are added here to save the reference value to Dispatching Context to be used commonly during filtering other than equipment information
            	and individual entities used to filter target entity lists.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="wips">The target waiting entity list for evaluation.</param>
            <param name="ctx">Dispatching Context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.DoFilter(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>The Main function to filter entities before Dispatching. If user implements this function, IsLoadable Action does not activate.</para>
            </summary>
            <param name="eqp">Target equipment object.</param>
            <param name="wips">The target waiting entity list for evaluation.</param>
            <param name="ctx">Dispatching Context.</param>
            <returns>Return the entities not filtered from the target entities for filtering.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.SetLotCondition(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>This FEAction is called before individual entities are evaluated for filtering. This is where to fix the property of the entities before evaluation logic is handled.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="hb">Target entity object for filtering evaluation.</param>
            <param name="ctx">Dispatching Context.</param>
            <remarks>
            In most constraints, when entity-equipment is decided it possible for determination.
            However, it is unable to know on which equipment is fixed to load the entity at the point when entity is waiting from the equipment avaiable for loading.
            In semiconductor industries, Recipe or Reticle are changed according to the equipment, and if the equipment is not decided these two information cannot be fixed. 
            When filtering is considered using these kinds of information, the property of the entity needs to be configured and this configuration can be done by implementing logic through this FEAction.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.IsLoadable(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>This FEAction returns whether the filtering evaluation target entities can be currently loaded to the target equipment.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="hb">Target batch for filtering evaluation.</param>
            <param name="ctx">Dispatching Context.</param>
            <remarks>
            Even thouhg the equipment is available for loading, there are some cases the equipment cannot process the entity for a moment in case the availability or the dynamic condition of Second Resource such as Setup Crew and Tool changes. 
            Therefore, the constraint logics for these kinds of cases are handled through this FEAction. The logic handling process is similar to FilterLoadableEqplist to restrict equipment based on entity. 
            The only difference is that this FEActions filters the entity after the equipment is decided to load.
            </remarks>
            <returns>Return the result whether the target entity can be loaded to the target equipment. If target entity can be loaded to the target equipment, return true, or else, return false.
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.CheckSetupCrew(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>Returns whether SetupCrew is available or not.</para>
            </summary>
            <param name="eqp">Target equipment object.</param>
            <param name="hb">Target batch.</param>
            <param name="ctx">Dispatching Context.</param>
            <returns>If Setup, SetupCrew is not required or SetupCrew is available, <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchFilterControl.CheckSecondResouce(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            	<para>[FEAction] Dispatching/FilterControl</para>
            	<para>Determines whether SecondResource is available or not.</para>
            </summary>
            <param name="eqp">Target equipment object.</param>
            <param name="hb">Target batch.</param>
            <param name="ctx">Dispatching Context.</param>
            <returns>If Second Resource is not requried or available, return <strong><em>true</em></strong>, or else, return <strong><em>false</em></strong>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpDownControl">
            <summary>
            	<para>[FEComponent] Equipment/DownControl</para> 	 
            	<para>This is the control model to model the cases that could change the Equipment to Down state during Simulation and 
            	to reflect the down time state situation of the equipment to the Simulation that could actually occur from the actual production line.</para>
            </summary>
            <remarks>
            There are two cases for Equipment to go Down. One is PM(Preventive Maintenance) which is predictable, and the other is 
            Failure which is impossible to predict. Equipment-intensive manufacturing industries such as Semiconductor industries 
            normally schedule PM regularly. Therefore, it is very common to reflect PM schedule to Simulation. 
            In case of Failure, sometimes the probabilistic frequency and MTTR(Mean Time To Repair) is reflected to model Failure situation,
            but mostly the average operation rate is applied to equipment Processing Time and Capacity of equipment is adjusted. 
            In this case, Failure modeling is not necessary. 
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpDownControl.Instance">
            <summary>EqpDownControl Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDownControl.GetFailureList(Mozart.SeePlan.Simulation.FailureEvents,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/DownControl</para>
            	<para>Create Failure Events according to Failure hanldling Rule and return the event list.</para>
            </summary>
            <param name="fe">Failure information object.</param>
            <param name="aeqp">Target equipment object</param>
            <remarks>
            This could be refleced in case the equipment Failure occurs in a significant level.
            </remarks>
            <returns>Return equipment Failure information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDownControl.GetPMList(Mozart.SeePlan.Simulation.PMEvents,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/DownControl</para>
            	<para>Create PM Event according to PM Schedule and return the list.</para>
            </summary>
            <param name="fe">PM information object. </param>
            <param name="aeqp">Target equipment object</param>
            <remarks>
            It is common to create PM start/end event according to the PM schedule of the modeling target site.
            </remarks>
            <returns>Retrun PM schedule list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDownControl.OnFailureEvent(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.DataModel.FailureSchedule,Mozart.SeePlan.Simulation.DownEventType)">
            <summary>
            	<para>[FEAction] Equipment/DownControl</para>
            	<para>This FEAction is to block loading to the equipment and change the state when Failure Event registered to the equipment occurs. </para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="fs">Failure Schedule object.</param>
            <param name="det">The start/end of FailureEvent. </param>
            <remarks>Default definition <em>ON_FAILURE_EVENT_DEF</em> exists. <em>OnFailureEvent</em> FEAction in here is to reflect user definition.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDownControl.OnPMEvent(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.DataModel.PMSchedule,Mozart.SeePlan.Simulation.DownEventType)">
            <summary>
            	<para>[FEAction] Equipment/DownControl</para>
            	<para>This FEAction is to block loading to the equipment and change the state when PM Event registered to the equipment occurs.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="fs">PM Schedule object.</param>
            <param name="det">The Start/End of PM Event.  </param>
            <remarks>
            	<para>The handling method from the equipment is same for both PM and Failure.</para>
            	<para>However, the equipment state code is different so user defined logic can be included according to the Event type.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpDownControl.ModifyDownSchedule(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Checks if Down Schedule needs to be fixed. This is called after job starts. 
            </summary>
            <param name="now">Current time</param>
            <returns>Returns whether entity should not be processed and inserted to InBuffer.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpEvents">
            <summary>
            	<para>[FEComponent] Equipment/EqpEvents</para>
            	<para>This is the FEComponent used for implement user defined logics of the Events that could occur through equipment other than Process, Setup, Down..</para>
            	<para>The FEcomponent is called when the user defined Event is triggered.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpEvents.Instance">
            <summary>
            EqpEvents Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpEvents.OnEqpStart(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>
            		<strong>[FEAction] Equipment/EqpEvents</strong>
            	</para>
            	<para>This FEAction is used to implement logics to handle any additional works from the system or the equipment by th user at the point the equipment begins to operate.</para>	 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpEvents.ResourceStateChanged(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.DataModel.ResourceState)">
            <summary>
            	<para>
            		<strong>[FEAction] Equipment/EqpEvents</strong>
            	</para>
            	<para>This FEAction is used to implement user logic to handle tasks at the point when the ResourceState of equipment is changed</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="state">The last state of resource</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpEvents.LoadingStateChanged(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.LoadingStates)">
            <summary>
            	<para>
            		<strong>[FEAction] Equipment/EqpEvents</strong>
            	</para>
            	<para>This FEAction is used to implement user logic to handle any tasks for the previous/current state of equipment when equipment's state is changed to LoadingState.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <param name="state">The last state of the equipment.</param>
            <remarks>  
            The user logics are handled after the equipment handles all the major tasks that are required during state change. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpEvents.ProcessStateChanged(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.ProcessStates)">
            <summary>
            	<para>
            		<strong>[FEAction] Equipment/EqpEvents</strong>
            	</para>
            	<para>This FEAction is used to implement user logic to handle tasks at the point when the state of processing entities in the equipment is changed.</para>
            	 
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <param name="state">The last state of entity</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpProcessControl">
            <summary>
            [FEComponent] Equipment/ProcessControl
            This is the FEComponent to control all procedures from entity being loaded to the equipment until Unloading after Processing is completed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpProcessControl.Instance">
            <summary>
            EqpProcessControl Instance. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnCustomLoad(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Implement user defined logic to be applied for Loading Event to this FEAaction </para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity.</param>
            <remarks>
            	<para>This FEAction is executed when [FEAction] Equipment/Misc/UseCustomLoad returns true.</para>
            	<para>If user defined Input Port is used, the entity is loaded to the equipment through the Port user defined and not through the original loader. </para>
            	<para>In this case, user should implement the basic logic to handle entity loading from the Loader.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnTrackIn(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>This FEAction is executed right before Processing starts after entity is loaded to equipment. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            At this point, the basic tasks while entity is being loaded to equipment and data collecting is completed. 
            This is used to add user defined logics handle any additional tasks.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.IsNeedSetup(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Determines whether the current equipment requires SetUp to process the target entity..</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Normally, SetUp is decided depending on the current job condition or the condition of the target job. 
            The detailed conditions differ by the system, so logics to determine these conditions should be included through this FEAction.
            </remarks>
            <returns>If SetUp is required to Process the target entity, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.GetProcessTime(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Set Processing Time of the entity.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            ProctTimeInfo class comprising Process Time and Tact Time is returned as result.
            If Process Time before Processing starts to the current equipment based on the current Step of the entity,
            the Simulation model handles the logic using the corresponding information during Processing.
            </remarks>
            <returns>Return the required time(ProcTimeInfo) to process the current Step of the target entity from target equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.GetProcessUnitSize(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Return the Processing Unit Size of the entity.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Processing Unit Size is the smallest unit of Unit composing entity. 
            The processing method of Processing Unit can differ depending on master data structure and Processing Time calculation method from equipment. 
            However, for Batch type equipment, the Processing time uses the default Unit Size from output aggregation regardless the the actul Unit size, 
            which requires user logic to reflect this condition.
            </remarks>
            <returns>Return the Processing Unit according to the target equipment's Process Type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnEntered(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	    This FEAction is called right after the entity starts to process in the equipment.
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object handling the Processing from equipment.</param>
            <param name="hb">Target entity object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnBeginProcessing(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>This FEAction is called right after Processing starts from the equipment.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object handling the Processing from equipment.</param>
            <remarks>
            The engine triggers the next entity loading event when processing starts and event to end processing. 
            User can include user defined logics using this information.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnEndProcessing(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Implement logics to be handled at the point processing is completed from the equipment. This is the state before Unload, so the entity property and statistics, 
            	property of constraint can be changed. </para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object handling the Processing from equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnTrackOut(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>The logics that requires to be handled at the point entity Track Out from the equipment is implemented through this FEAction. This is the last logic implementation
            	point right before the current Step changes to the next Step.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.InterceptMove(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
                <para>[FEAction] Equipment/ProcessControl</para>
                <para>This FEAction intercepts the entities to be sent to the next Step and handles the logic to Split/Merge entity.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <returns>Returns the list of entities to be sent to next Step. The entities different from the entities processed according to InterceptMove can move to the next Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.OnCustomExit(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>This is the point to implement logics to use and handle series of user defined logics to when Processing is completed for the entity in case Custom Outport Port
            	is used from the equipment.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            	<para>This FEAction is performed when true is returned from [FEAction] Equipment/Misc/UsesCustomOutPort as result.</para>
            	<para>When it is set to use user defined Ouput Port, the entities do not go through the original Unloader and unloads through the user defined port.</para>
            	<para>In this case, user should implement the basic logics to handle Exit which is normally done by Unloader.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.GetLoadableChambers(Mozart.SeePlan.Simulation.AoChamberProc2,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Returns the information of available Chamber of the Parallel Chamber equipment that could process the target entity right this moment. </para>
            </summary>
            <param name="cproc">Process object.</param>
            <param name="hb">Target entity.</param>
            <returns>Chamber ID string list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpProcessControl.GetTactTimeByChamberCount(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoChamberProc2,Mozart.SeePlan.Simulation.IHandlingBatch,System.Int32)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Returns the information of needsetup Chamber of the Parallel Chamber equipment that could process the target entity right this moment. </para>
            </summary>
            <param name="aeqp">셋업 판별 대상 Parallel Chamber 설비입니다.</param>
            <param name="loadableChambers">Loadable chambers</param>
            <param name="hb">로드 대상 작업물입니다.</param>
            <returns>Chamber ID string list.</returns>
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>지정된 ParallelChamber 설비에서 작업물을 로드할 때 사용할 TactTime 값을 반환합니다.</para>
            </summary>
            <param name="aeqp">작업 대상 Parallel Chamber 설비입니다.</param>
            <param name="cproc">작업 대상 Parallel Chamber 설비의 세부 장비 모델입니다.</param>
            <param name="hb">로드 대상 작업물입니다.</param>
            <param name="chamberCount">작업물이 대상 Parallel Chamber에 로드될 때 사용할 챔버의 수입니다.</param>
            <returns>지정된 ParallelChamber 설비에서 작업물을 로드할 때 사용할 TactTime 값입니다. Time.Zero인 경우 GetProcessTime Action의 반환값에 설정된 TactTime이 적용됩니다.</returns>
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Returns the tact time value to use when the entity(lot) is loaded to the specified parallel chamber equipment.</para>
            </summary>
            <param name="aeqp">The specified parallel chamber equipment to load the lot.</param>
            <param name="cproc">The detailed information of the specified parallel chamber equipment.</param>
            <param name="hb">The specified entity(lot) to load to the specified parallel chamber equipment.</param>
            <param name="chamberCount">The number of chambers to use when the specified lot is loaded to the parallel chamber equipment.</param>
            <returns>The tact time to apply when <em>hb</em> is loaded to <em>aeqp</em>. If the return value is <em>Time.Zero</em> the return tact time value from <em>GetProcessTime</em> action will be applied instead.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpMisc">
            <summary>
            [FEComponent] Equipment/Misc
            The FEComponent called at unspecified period to configure/verify equipment state and property.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpMisc.Instance">
            <summary>
            Misc Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.UsesCustomOutPort(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/Misc</para>
            	<para>This FEAction is to configure whether to use user defined logic for the Unload event from Output Port of the equipment.</para>
            	<para>If the value is set as true, [FEAction] Eqpuipment/ProcessControl/OnCustomExit should be implemented.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <remarks>
            When user defined Output Port is used, the Unloader logic of the equipment model is not used. 
            Therefore, all logics requried for Unloading should be be implemented.</remarks>
            <returns>If user defined Out Port should be defined, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.IsBatchType(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/Misc</para>
            	<para>The logic to determine and return the result whether equipment's Processing Type is Batch Type is implemented through this FEAction. </para>
            	<para>In general, Batch is determined according to SimType of equipment. Default SimType {BatchInline, LotBatch} is classfied as Batch Type.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <returns>If equipment is Batch Processing Type, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.CanEnter(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/Misc</para>
            	<para>Determines whether the equipment is able to process additional entities.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Through this FEAction, it is able to check if equipment can load additional entities through other constraints such as 
            daily processing amount limitaion other than from normal constraints such as the quantities of entity that could be processed 
            simultaneously from Processor. 
            </remarks>
            <returns>If additional entities could be loaded, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.GetChamberCapacity(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
                <para>[FEAction] Equipment/Misc</para>
                <para>Returns the number of chambers in chamber type equipment.</para>
            </summary>
            <param name="aeqp">Target chamber type equipment object.</param>
            <remarks>
            This action is not for parallel chamber type equipment, but for chamber type equipment.
            </remarks>
            <returns>the number of chambers</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.GetChamberIDs(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/Misc</para>
            	<para>Returns individual Chamber ID string array inc case equipment SimType is PrallelChamber. </para>
            </summary>
            <param name="aeqp">Target equipment.</param>
            <returns>Return the target equipment's Chamber string array.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpMisc.UseCustomLoad(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/Misc</para>
            	<para>This FEAction is to decide whether to use user defined logic for the Load event from Inport of the equipment.</para>
            	<para>If the value is set as true, [FEAction] Eqpuipment/ProcessControl/OnCustomLoad should be implemented.<br/></para>
            </summary>
            <param name="aeqp">Target equipment object.</param>
            <param name="hb">Target entity.</param>
            <returns>If user defined Inport logic is used, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EqpSetupControl">
            <summary>
            	<para>[FEComponent] Equipment/SetupControl</para>
            	<para>This is the FEComponent to control and model Setup event and procedure.</para>
            </summary>
            <remarks>
            In order for the entity Processing, the equipment should be set to process the entity.
            If the condition to perform the current task is not met, either the state of entity or the equipment should be changed. 
            These entire procedure is called Setup. Information such as Setup requirements for EqpSetupControl, required additional Resources for Setup, 
            required time for Setup and etc are decided and provided to the Simulator. 
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EqpSetupControl.Instance">
            <summary>
            SetupControl Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.IsNeedSetupCrew(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>The logics to determine whether Second Resource is required for equipment Setup is implemented through this FEAction.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Not all Second Resources required for Setup are the targets. 
            This only considers the Resource required for Setup with limited Capacity and constraints.. 
            </remarks>
            <returns>If Second Resource is required for Setup of the target entity, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.GetSetupCrewKey(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>This FEAction is used to implement the logic to return the Key to search the target Setup Resource according to the condition of the entity in case Second Resource is required for Setup.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <returns>Return the Resource ID required for Setup of the target entity and equipment. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.GetNeededSetupCrews(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>This FEAction is used to implement logic to calculate the required Capcity(members) of Second Resource(SetupCrew) for Setup.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <returns>Return the required Capacity of Resource for equipment Setup.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.GetSetupTime(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>This FEAction caculates the required time for Setup when all the Setup conditions are met.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            A fixed time can be used regardless to entity and equipment, but in case there are lot of time gaps depending on Setup type, 
            the model for these cases should be reflected.
            </remarks>
            <returns>Return the required Setup time for the target entity and equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.GetSetupCrewTime(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.SecondResource,System.Int32,Mozart.Simulation.Engine.Time)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>설비 셋업 중 셋업 크루가 필요한 기간을 가져옵니다.</para>
            </summary>
            <param name="aeqp">셋업이 진행되는 설비입니다.</param>
            <param name="hb">셋업을 유발한 작업물입니다.</param>
            <param name="crew">셋업을 수행할 크루 정보입니다.</param>
            <param name="count">셋업을 수행할 크루의 수입니다.</param>
            <param name="setupTime">전체 셋업 시간입니다.</param>
            <returns>전체 셋업 시간과 같거나 전체 셋업 시간보다 짧은 시간입니다. 기본 반환값은 setupTime과 같습니다.</returns>
            <summary>
            <para>[FEAction] Equipment/SetupControl</para>
            <para>Returns the date and time indicating the time setup crew is required out of the entire setup time to perform setup on the specified equipment.</para>
            </summary>
            <param name="aeqp">The equipment in which setup is in process.</param>
            <param name="hb">The entity(wafer,lot,batch) that caused setup.</param>
            <param name="crew">The information of the setup crew to perform setup on this equipment.</param>
            <param name="count">The number of setup crews to perform setup.</param>
            <param name="setupTime">The entire time to complete setup.</param>
            <returns>The time same as the entire setup time or less than the entire setup time. Default return value is <em>setupTime</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.IsAvailableSecondResources(Mozart.SeePlan.Simulation.ISecondResourceOwner,Mozart.SeePlan.Simulation.SecondResource)">
            <summary>
            	<para>Verifies if the Second Resource required for Setup is currently available for use.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="sres">Target Second Resource.</param>
            <returns>Returns the result whether the Second Resoure can be used or not.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.ReleaseSecondResources(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para>Releases Second Resource.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">Target Process Model.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.SeizeSecondResources(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para></para>
            	<para>Share Second Resource to equipment.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object to handle Processing from equipment.</param>
            <remarks>
             Setup Resource is a Resource similar to equipment.
             In case it is utilized by equipment or entity, the state should be updated and if necessary, it should be mananged to restrict 
             other equipment and entity to use the resource. Through Process object(<paramref name="proc"/>), the time Second Resource release after Setup can be checked through this action.  
             </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.SetLastLoadingInfo(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>Updates the latest entity information processed from the equipment.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            In some cases, Setup can occur for each task, but mostly, the entities with the same Setup condition of the equipment are loaded to reduce Setup loss. 
            Therefore, a task to record the latest Setup settings is requried when Setup occurs. 
            The conditions that could affet Setup can differ by Step or manufacturing industries, these conditions should be defined by user.        
            </remarks>
            <returns>Return the LoadInfo of the target entity object(<paramref name="hb"/>).</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.GetNeedSetupChambers(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ChamberInfo[],Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Equipment/ProcessControl</para>
            	<para>Returns the information of needsetup Chamber of the Parallel Chamber equipment that could process the target entity right this moment. </para>
            </summary>
            <param name="aeqp">The parallel chamber type AoEquipment instance to determine setup.</param>
            <param name="loadableChambers">Loadable chambers</param>
            <param name="hb">The specified entity(lot) to load to the specified parallel chamber equipment.</param>
            <returns>Chamber ID string list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.OnBeginSetup(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>This FEAction is called right after Setup starts. If ther are any information required to be handled right after Setup starts, the logics can be implemented through this FEAction.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object to handle Processing from equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EqpSetupControl.OnEndSetup(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            	<para>[FEAction] Equipment/SetupControl</para>
            	<para>This FEAction is where to add the code to disable Setup Resource utilization after Setup is completed.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="proc">The Process object to handle Processing from equipment.</param>
            <remarks>
            The state of the Second Resource required for Setup is changed back to "avaiable" and the utilization history can be aggregated.
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FactoryEvents">
            <summary>
            	<para>[FEComponent] Factory/FactoryEvents Simulation</para>
            	<para>The Component where user can define the function to handle Event that affects the entire objects.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.FactoryEvents.Instance">
            <summary>FactoryEvents Instance object. It is used when FEComponent needs to be called directly. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnBeginInitialize(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at beginning of Simulation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnEndInitialize(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at the end of Simulation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnStart(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at beginning of Simulation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnStarted(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at beginning of Simulation. Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnShiftChange(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at the point Shift, configured from Simulation,is changed.
            	This is Action is first to be called during Shift change, and other tasks could start after this Action is called.
            	Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnShiftChanged(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called after Shift, configured from Simulation,is changed.
            	This is Action is called after all tasks during Shift change is completed.
            	Logics required to be applied at this point can be implemented.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnDayChanged(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at change of day. Logics required to be applied at this point can be implemented. 
            	For example, if contraints are applied in a daily basis, this Action can be used to reset constraint at the point day is changed.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryEvents.OnDone(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction] Factory/FactoryEvents</para>
            	<para>This FEAction is called at the end of Simulation. Logics to write Output or analysis tasks can be done through here.</para>
            </summary>
            <param name="aoFactory">Root Factory object. </param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FactoryInit">
            <summary>
            	<para>[FEComponent] Factory/FactoryInit</para>
            	<para>The FEComponent responsible for initializing components such as Simulation result statistics or resource in Factory.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.FactoryInit.Instance">
            <summary>
            FactoryInit Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryInit.GetWeightPresets(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>
            		<strong>[FEAction]Factory/FactoryInit</strong>
            	</para>
            	<para>Return entire list of WeightPreset to create and initialize equipment. </para>
            </summary>
            <param name="factory">Root AoFactory object. </param>
            <remarks>
            This is only required for Dispatcher based on Preset. 
            It is used to bind Method used by each Factor during WeightManager initializaiton.
            </remarks>
            <returns>Returns WeightPreset list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryInit.InitializeWipGroup(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IWipManager)">
            <summary>
            	<para>[FEAction]Factory/FactoryInit</para>
            	<para>Creates and initializes Wip Group used for aggregating statistics based on WIP. </para>
            </summary>
            <param name="factory">Root AoFactory object. </param>
            <param name="wipManager">Wip manager object. </param>
            <remarks>
            	<para>Registers WipGroup to WipManager.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryInit.GetEqpMonitors(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction]Factory/FactoryInit</para>
            	<para>Returns IEquipmentMonitor based Monitor to aggregate statistics regarding equipment.</para>
            </summary>
            <param name="factory">Root AoFactory object. </param>
            <returns>Return the list of equipment statistics aggregation object(IEquimentMonitor implemented).</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryInit.GetSecondResourcePools(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction]Factory/FactoryInit</para>
            	<para>Registers SecondResource to be used by Simulation.</para>
            </summary>
            <param name="factory">AoFactory object.</param>
            <returns>Return SecondResourcePool list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryInit.InitializeInOutAgents(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            	<para>[FEAction]Factory/FactoryInit</para>
            	<para>Register InOutAgent.</para>
            </summary>
            <param name="factory">Root AoFactory object. </param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobChangeInit">
            <summary>
            	<para>[FEComponent] JobChangeAgent/AgentInit JobChange</para>
            	<para>The FEComponent to define Equipment/Step Group that requires decision making and intialize the available Resource and entering WIP of the corresponding group.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeInit.Instance">
            <summary>
            JobChangeInit Instance object.   It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.InitializeWorkManager(Mozart.SeePlan.Simulation.WorkManager)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Creates WorkAgent for each equipment group requiring decision making for JobChange.</para>
            </summary>
            <param name="wmanager">WorkManager object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetWorkAgentNames(Mozart.SeePlan.Simulation.WorkManager)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Initializes WorkAgent.</para>
                <para>JobChange 의사결정이 필요한 대상 장비그룹별 WorkAgent의 이름의 목록을 반환합니다. 반환된 각 이름마다 WorkAgent 개체가 생성됩니다.</para>
            </summary>
            <param name="wmanager">WorkManager 개체입니다.</param>
            <returns>WorkAgent의 이름의 목록입니다.</returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the list of the names of the <em>WorkAgent</em> per equipment that requires JobChange decision.</para>
                <para>The <em>WorkAgent</em> object is created for each of the names returned.</para>
                <para>This FEAction is dependent to <em>InitializeWorkManager</em> FEAction. The default definition <em>INITIALIZE_WORK_MANAGER_DEF</em> creates <em>WorkAgent</em> object with the returned name from this FEAction.</para>
                <para></para>
            </summary>
            <param name="wmanager">The <em>WorkManager</em></param>
            <returns>WorkAgent의 이름의 목록입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.InitializeAgent(Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Initializes WorkAgent.</para>
            </summary>
            <param name="wagent">Agent(WorkAgent) object to be initialized. </param>
            <remarks>Agent is created in either equipment group or Step group that requires JobChange decision making. 
            At initializtion, the inflow information for the WIP of the Agent is generated 
            and configures the information of equipment loading and equipment available for loading for each WorkStep.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.AddWorkLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물을 JobChangeAgent의 유입 재공으로 등록합니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>입력된 작업물이 속한 WorkStep 개체입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Registers the specified entity as arriving WIPS of the <em>JobChangeAgent</em>.</para>
            </summary>
            <param name="hb">The entity to add to register.</param>
            <returns>Returns the <em>WorkStep</em> where the specified <em>hb</em> belongs to.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetWorkAgentName(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물이 속할 WorkAgent의 이름을 반환합니다.</para>
                <para>반환값이 null이거나 빈 문자열인 경우 작업물은 WorkAgent에 속하지 않습니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>입력된 작업물이 속할 WorkAgent의 이름입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the name of the <em>WorkAgent</em> object where the specified entity belongs to.</para>
                <para>If null or empty string is returned, the specified entity does no belong the <em>WorkAgent</em>.</para>
            </summary>
            <param name="hb">The entity to seek the <em>WorkAgent</em> object.</param>
            <returns>The name of the <em>WorkAgent</em> where the specified <em>hb</em> belongs to.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetWorkGroupKey(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물이 속할 WorkGroup의 Key를 반환합니다.</para>
                <para>반환값이 null인 경우 작업물은 WorkAgent에 속하지 않습니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="wagent">작업물이 속할 WorkAgent 개체입니다.</param>
            <returns>입력된 작업물이 속할 WorkGroup의 Key입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the key of the <em>WorkGroup</em> where the specified entity will belong to.</para>
                <para>If null or empty string is returned, the specified entity does no belong the <em>WorkAgent</em>.</para>
            </summary>
            <param name="hb">The entity to seek the key.</param>
            <param name="wagent">The <em>WorkAgent</em> object in which the specified entity will belong to.</param>
            <returns>The key of the <em>WorkGroup</em> where the specified entitiy will belong to.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetWorkStepKey(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkGroup)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물이 속할 WorkStep의 Key를 반환합니다.</para>
                <para>반환값이 null인 경우 작업물은 WorkAgent에 속하지 않습니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="wgroup">작업물이 속할 workGroup 개체입니다.</param>
            <returns>입력된 작업물이 속할 WorkStep의 Key입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the key of the <em>WorkStep</em> where the specified entity will belong to.</para>
                <para>If null or empty string is returned, the specified entity does no belong the <em>WorkAgent</em>.</para>
            </summary>
            <param name="hb">The entity to seek the key.</param>
            <param name="wgroup">The <em>WorkGroup</em> object in which the specified entity will belong to.</param>
            <returns>The key of the <em>WorkStep</em> where the specified entitiy will belong to.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetTargetStep(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkGroup,System.Object)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물이 속할 WorkStep에 대한 Target Step을 반환합니다.</para>
                <para>반환값이 null인 경우 작업물은 WorkAgent에 속하지 않습니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="wgroup">작업물이 속할 workGroup 개체입니다.</param>
            <param name="wstepKey">작업물이 속할 workStep의 Key입니다.</param>
            <returns>입력된 작업물이 속할 WorkStep의 Key입니다.</returns>
            <remarks>
            아직 WorkStep이 생성되기 전의 상태이므로 WorkStep 개체가 아닌 WorkStep의 Key가 입력됩니다.
            WorkStep의 Key에 해당하는 WorkStep이 아직 생성되지 않은 경우 Action의 반환값을 생성될 
            WorkStep의 관리 대상 Step으로 설정하기 위함입니다.
            </remarks>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the target step of the <em>WorkStep</em> where the specified entity will belong to.</para>
                <para>If null or empty string is returned, the specified entity does no belong the <em>WorkAgent</em>.</para>
            </summary>
            <param name="hb">The entity to seek the key.</param>
            <param name="wgroup">The <em>WorkGroup</em> object in which the specified entity will belong to.</param>
            <param name="wstepKey">The key of the <em>WorkStep</em> where the specified entity will belong to.</param>
            <returns>The key of the <em>WorkStep</em> where the specified entitiy will belong to.</returns>
            <remarks>
            <para>At this stage, <em>WorkStep</em> object is not created yet, so the key of the <em>WorkStep</em> is given instead.</para>
            <para>The return value from this action, is used to set the specified step to be managed by the <em>WorkStep</em> to be created.</para>
            <para>The key used in this method is the key of the <em>WorkStep</em> to be created.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetAvailableTime(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.DataModel.Step)">
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>입력된 작업물이 속할 WorkStep에서 가용한 시간을 반환합니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="wstep">작업물이 속할 WorkStep 개체입니다.</param>
            <param name="targetStep">작업물에 대한 WorkStep 관리대상 Step입니다.</param>
            <returns>입력된 작업물이 속할 WorkStep에서 가용한 시간입니다.</returns>
            <summary>
                <para>[FEAction] JobChangeAgent/AgentInit</para>
                <para>Returns the available time of the specified entity at the specified <em>WorkStep</em> it will belong to.</para>
            </summary>
            <param name="hb">The entity to get the available time at the WorkStep.</param>
            <param name="wstep">The <em>WorkStep</em> object where the specified entity will belong to.</param>
            <param name="targetStep">The target step in the specified <em>WorkStep</em> of the specified entity.</param>
            <returns>The available time of the specified <em>hb</em> at the <em>wstep</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.InitializeWorkGroup(Mozart.SeePlan.Simulation.WorkGroup)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Initializes WorkGroup. WorkGroup is the product group that could be processed in the same condition from Agent.</para>
            </summary>
            <param name="wgroup">The <em>WorkGroup</em> to initialize.</param>
            <returns>Return matching result WorkStep object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.InitializeWorkStep(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Initializes property information of WorkStep.</para>
            </summary>
            <param name="wstep">The target WorkStep for configuration.</param>
            <remarks>
            The properties are AllowedArrivalGap, UpInterval, DownInterval, NewUpInterval. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetLoadableEqps(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Returns the list of available equipment of the specified <em>WorkStep</em>.</para>
            </summary>
            <param name="wstep">The <em>WorkStep</em> object to searh available equipment.</param>
            <returns>The list of the available equipment of the specified <em>WorkStep</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.InitializeWorkEqp(Mozart.SeePlan.Simulation.WorkEqp)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Perform initialization for WorkEqp.</para>
            </summary>
            <param name="weqp">Target WorkEqp for initialization.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.IsRunningLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>작업물이 초기화 시점에 대상 WorkStep에서 작업중인지 여부를 판단합니다.</para>
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns></returns>
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>Returns a value to indicate whether the specified entity is processing at the specified <em>WorkStep</em> during <em>JobChangeAgent</em> initialization.</para>
            </summary>
            <param name="hb">The entity to check if it is processing at the specified <em>WorkStep</em>.</param>
            <returns><em>true</em> if the specified <em>hb</em> is processing in <em>WorkStep</em> during <em>JobChangeAgent</em> initialization; otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeInit.GetRunningWorkStep(Mozart.SeePlan.Simulation.WorkGroup,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] JobChangeAgent/AgentInit</para>
            	<para>작업물이 초기화 시점에 대상 WorkStep에서 작업중인지 여부를 판단합니다.</para>
            </summary>
            <param name="wgroup">대상 WorkGruop.</param>
            <param name="hb">대상 작업물입니다.</param>
            <returns>대상작업물이 진행중인 WorkStep 반환</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobChangeControl">
            <summary>
            	<para>[FEComponent] JobChangeAgent/JobChangeControl</para>
            	<para>This is the Main FEComponent of JobChangeAgent controlling Queue and making JobChange decision for each cycle through CHANGE method.</para>
            	<para>This FEComponent is called on each JobChange decision making cycle.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeControl.Instance">
            <summary>
            Returns JobChangeControl Instance. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.IsNeedDownStep(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Determines whether to enable Down state on the target WorkStep  </para>
            </summary>
            <param name="ws">Target WorkStep object. </param>
            <returns>If target WorkStep needs to be Down, return <strong>true</strong> or else, return <strong>false.</strong></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.SelectDownEqp(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Selects the equipment to be Down state from the equipment processing the target WorkStep.</para>
            </summary>
            <param name="wstep">Target WorkStep object.</param>
            <returns>Return the selected equipment to be Down.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.IsNeedUpStep(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Determines whether to add an equipment to the target WorkStep.</para>
            </summary>
            <param name="ws">Target WorkStep object. </param>
            <returns>If the target WorkStep needs to be Up, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.IsNeedSetup(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Determines whether Setup is required for the target Step to be Up from the target Down equipment.</para>
            </summary>
            <param name="wstep">Target WorkStep.</param>
            <param name="aeqp">Target equipment object.</param>
            <returns>If Setup is required, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.SortUpEqps(System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkUpInfo})">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Sorts the Up order of equipment from the target equipment to be Up.</para>
            </summary>
            <param name="list">WorkUpInfo list.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.SortUpSteps(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkStep},System.Boolean)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Sorts in priority order to decide which Step should be Up first from the waitin NoSetup, Setup Steps of the equipment to go Up.</para>
            </summary>
            <param name="aeqp">Target equipment(<em>AoEquipment</em>) object to go Up.</param>
            <param name="list">List of <em>WorkStep</em> to go Up.</param>
            <param name="setup">Whether to perform Setup from the equipment in the target <em>WorkStep</em> list. If true, Setup is requried, if false, the corresponding <em>WorkStep</em> does not require Setup.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.CanUp(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Determines whether the equipment can be Up from the target <em>WorkStep</em>.</para>
            </summary>
            <param name="aeqp">Target equipment to change its state to "Up".</param>
            <param name="wstep">Target <em>WorkStep</em>.</param>
            <returns>Returns the whether the equipment can go Up or not.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeControl.CanUpMore(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeControl</para>
            	<para>Determines whether additional equipment can be Up from the target <em>WorkStep</em>.</para>
            </summary>
            <param name="wstep">Target <em>WorkStep</em>.</param>
            <returns>Returns the whether additional equipment can go Up or not.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobChangeEvents">
            <summary>
            	<para>[FEComponent] JobChangeAgent/JobChangeEvents</para>
            	<para>This is the set of Event hanling functions that are triggered at the point JobChangeAgent decision making occurs.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeEvents.Instance">
            <summary>
            JobChangeEvent Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnAddWip(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called after WIP is included to WorkGroup at the point of Simulation initialization.</para>
            </summary>
            <param name="wstep">The WorkStep object that included WIP. </param>
            <param name="wlot">The WIP(WorkLot) object to be included. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnStartWorkAgent(Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called before the first Processing of WorkAgent starts. </para>
            </summary>
            <param name="wagent">Target WorkAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnBeforeRun(Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called before Processing starts from each WorkAgent. </para>
            </summary>
            <param name="wagent">Target WorkAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnCalculate(Mozart.SeePlan.Simulation.WorkGroup)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called right after Profile calculation. </para>
            </summary>
            <param name="wgroup">The target WorkGroup object to calculate Profile. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnAfterRun(Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called after Processing ends from each WorkAgent.</para>
            </summary>
            <param name="wagent">Target WorkAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnAddHoldStep(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is called by <em>TRADE</em> type JobChangeAgent.</para>
            </summary>
            <param name="step">Up target WorkStep entity.</param>
            <param name="context">The context including the information used to make JobChange decision making.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnAfterAssignEqp(Mozart.SeePlan.Simulation.WorkStep,System.Collections.Generic.List{Mozart.SeePlan.Simulation.AssignEqp},Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>This FEAction is executed after equipment Up/Down.</para>
            	<para>This FEAction is called by <em>TRADE</em> type JobChangeAgent.</para>
            </summary>
            <param name="step">Up target WorkStep entity.</param>
            <param name="assignedEqps">The list of equipment entity allocated to WorkStep.</param>
            <param name="context">The context including the information used to make JobChange decision making.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeEvents.OnAfterUnassignEqp(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.AssignEqp,Mozart.SeePlan.Simulation.JobChangeContext)">
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>설비가 Job Change 대상 공정의 작업 가능한 설비에서 제외될 때 호출되는 FEAction입니다.</para>
            	<para>이 FEAction은 TRADE 방식의 JobChangeAgent에서만 호출됩니다.</para>
            </summary>
            <param name="step">Job Chage 대상 공정입니다.</param>
            <param name="unassignedEqp">제외된 설비입니다.</param>
            <param name="context">Job Change 의사결정에 사용되는 컨텍스트입니다.</param>
            <summary>
            	<para>[FEAction] JobChangeAgent/JobChangeEvents</para>
            	<para>Called when the equipment is excluded from equipment group that are capable to work on the job change <em>WorkStep</em>.</para>
            	<para>This FEAction can only be used when <em>WorkAgent's</em> <em>AgentType = "TRADE"</em>.</para>
            </summary>
            <param name="step">The <em>WorkStep</em> selected to change the job.</param>
            <param name="unassignedEqp">The equipment to be unassigned to work on the <em>step</em>.</param>
            <param name="context">The context containing global variables to use for job change decision making.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ToolControl">
            <summary>
            	<para>
            		<strong>[FEComponent] SecondResource/ToolControl</strong>
            	</para>
            	<para>The FEComponent in charge of series of logics related to SecondResource utilization.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.IsNeedToolSettings(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Determines whether Tools(SecondResource Set) is required for the current Step of the current entity.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="lot">Target entity object</param>
            <returns>If ToolSetting is required, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.GetToolData(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Create and return Tool information for the current entity.</para>
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="lot">Target entity object</param>
            <returns>Return the required ToolSetting information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.BuildToolItems(Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>
            		Create <em>ToolItem</em> to handle SecondResource through <em>Tool</em> information.</para>
            </summary>
            <param name="tool">Target Tool information.</param>
            <remarks>This is executed after ToolSetting information is create.
            ToolSetting information is created before Dispatching using target Step and equipment information.</remarks>
            <returns>Return created ToolItem list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.GetLastToolSettings(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Return the latest ToolSetting information of the target equipment.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <returns>Return the recently set ToolSetting information of the equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.SelectTool(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.ToolItem,Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolItem,System.Boolean)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Set Key to the actual SecondResource of ToolItem member in ToolSetting. </para>
            </summary>
            <param name="tool">Selected target ToolSettings. </param>
            <param name="item">Selected target ToolItem.</param>
            <param name="lot">Target entity object</param>
            <param name="aeqp">Target equipment object</param>
            <param name="last">The latest ToolSetting information of the equipment.</param>
            <param name="canAlt"></param>
            <returns>Return selected SecondResource Key.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.IsValidToolInfo(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.ToolItem)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Check the relationship among equipment of ToolSettings with multiple ToolItems,
            check if valid ToolItem set has been selected and return the verification result. </para>
            </summary>
            <param name="tool">Target ToolSetting information for evaluation.</param>
            <param name="current">Target ToolItem information for evaluation</param>
            <returns>If selected information is valid, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.IsReadyTool(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.ToolItem,Mozart.SeePlan.Simulation.ToolItem)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Checks if all settings for ToolItem in ToolSettings are completed and ready for use.</para>
            </summary>
            <param name="tool">Target ToolSetting information.</param>
            <param name="current">Target ToolItem information.</param>
            <param name="last">The latest ToolItem information of the equipment.</param>
            <returns>If current ToolSetting can be used, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.IsSameToolSettings(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para> Compares if the two input ToolSetting information are same.</para>
            </summary>
            <param name="x">ToolSetting x for comparison.</param>
            <param name="y">ToolSetting y for comparison.</param>
            <returns>If the two input ToolSettin are same, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.CanDetach(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] SecondResource/ToolControl</para>
            	<para>Determines whether ToolItem attached to entity can be detached after processing is completed. </para>
            </summary>
            <param name="aeqp">Target equipment..</param>
            <param name="hb">Target entity.</param>
            <returns>If Detachment is possible(or required), return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.AttachTool(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] SecondResource/ToolControl</strong>
            	</para>
            	<para>This FEAction is used when user logic should be included during attach product side second resources.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolControl.DetachTool(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] SecondResource/ToolControl</strong>
            	</para>
            	<para>This FEAction is used when user logic should be included during detach product side second resources.</para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ToolEvents">
            <summary>
            	<para>[FECompnent] SecondResource/ToolEvents</para>
            	<para>The FEComponent in charge of series of logics related to SecondResource utilization.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolEvents.OnSeized(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            	<para>[FEAction] SecondResource/ToolEvent</para>
            	<para>This function is called after equipment utilizes ToolSet. </para>
            </summary>
            <param name="tool">The newly utilized ToolSet. </param>
            <param name="eqp">Target equipment object</param>
            <param name="last">Previous utilized ToolSet information.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolEvents.OnReleased(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            	<para>[FEAction] SecondResource/ToolEvent</para>
            	<para>This function is called after equipment releases ToolSet</para>
            </summary>
            <param name="tool">The released ToolSet.</param>
            <param name="eqp">Target equipment object.</param>
            <param name="chg">The new ToolSet to be utilized.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolEvents.OnAttached(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] SecondResource/ToolEvent</para>
            	<para>This function is called after ToolSet is mounted to entity.</para>
            </summary>
            <param name="tool">The mounted ToolSet information.</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolEvents.OnDetached(Mozart.SeePlan.Simulation.ToolSettings,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] SecondResource/ToolEvent</para>
            	<para>This function is called after ToolSet is dismounted from entity. </para>
            </summary>
            <param name="tool">The dismounted ToolSet information.</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TransferControl">
            <summary>
            	<para>
            		<strong>[FEComponent] Transfer/TransferControl</strong>
            	</para>
            	<para>The Component that controls the entity from beginning of transfer, during transfer and end of transfer. </para>
            </summary>
            <remarks>
                <para>In automated production line, entity is transferred through AMHS(Automated Material Handling System). Transfer Control is able to perform the role of AMHS.</para>
            	<para>The same method can be used for modeling even if transferring is done by man in case automation level is poor. The only difference among AMHS and man are decision making and operation subject.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferControl.SetDestination(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Transfer/TransferControl</strong>
            	</para>
            	<para>The destination is decided based on Step information and equipment information available for loading.  </para>
            </summary>
            <param name="hb">Target batch object for transferring.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferControl.OnTransfer(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Tranfer/Transfercontrol</strong>
            	</para>
            	<para>This FEAction is called at the point entity starts to be transferred. 
            	Collecting statistics data regarding transfer and property changing of entity is done through this Action.</para>
            </summary>
            <param name="hb">Target batch object for transferring.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferControl.GetTransferTime(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Transfer/TransferControl</strong>
            	</para>
            	<para>This FEAction calculates and returns the transfer time. Implement user defined logic to calculate transfer time from departure to the arriaval.</para>
            </summary>
            <param name="hb">Target lot for transferring.</param>
            <remarks>
            The Simulation Model is designed to Hold the entity at Transfer start point and release the entity after calculated transfer time is elapsed. 
            </remarks>
            <returns>The consumption time to transfer the specified <em>hb</em> to its destination.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferControl.OnTransfered(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Tranfer/TransferControl</strong>
            	</para>
            	<para>This FEAction is called at the point entity transferring is completed.
            	Impleent user defined logic for collecting statistics data regarding transfer and property changing of entity through this Action.</para>
            </summary>
            <param name="hb">Target lot for transferring. </param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TransferExtControl">
            <summary>
            	<para>[FEComponent] Transfer/TransferSystemInterface</para>
            	<para>This is the Component to reflect system to MOZART that provides Transportation Simulation to include logics to control automated transportation 
            	equipment such as Crane, AGV, Conveyor.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferExtControl.MoveRequest(Mozart.SeePlan.Simulation.TransportAdapter,Mozart.SeePlan.Simulation.AoTransfer,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Transfer/TransferSystemInterface</para>
            	<para>The code to request transfer from External transport system should be added here. MoveRequest of TransportAdapter object can be used. </para>
            </summary>
            <param name="ta">TransportAdapter object.</param>
            <param name="at">The Simulation object to handle Transfer.</param>
            <param name="hb">Target entity object to transfer.</param>
            <remarks></remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferExtControl.OnDelivered(Mozart.SeePlan.Simulation.TransportAdapter,System.String,System.String,System.String)">
            <summary>
            	<para>[FEAction] Transfer/TransferSystemInterface</para>
            	<para>The FEAction that is called at the point when transfer simulation is completed from the external system.</para>
            	<para>Duing transfer from external system, the FEAction searches for the entity wainting in TransportAdaptor and completes transfer. </para>
            </summary>
            <param name="ta">TransportAdapter object.</param>
            <param name="key">The Key string of the transferred entity.</param>
            <param name="sourceLocation">The key string of transfer departure point.</param>
            <param name="targetLocation">The key string of transfer arrival point.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransferExtControl.OnCstResponse(Mozart.SeePlan.Simulation.TransportAdapter,System.String,System.Object)">
            <summary>
            	<para>[FEAction] Transfer/TransferSystemInterface</para>
            	<para>FEAction that is called at Cassette response point. </para>
            </summary>
            <param name="transportAdapter">TransportAdapter object.</param>
            <param name="command">Command string.</param>
            <param name="args">Object with Arguments.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketConstraintSet">
            <summary>
            This is where Set to handle constraints per product(Step) processed throguh Bucket other than production Capacity is defined. 
            </summary>
            <remarks>
            	<para>
            		<em>[EX]</em> Some products cannot be produced more than 1,000 per day and in case other products in the same product group can be produced 5,000 per day, the product group and production constraints can be gathered and these constraints could be reflected during Bucketing. </para>
            
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketConstraintSet.Key">
            <summary>
            ConstraintSet Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketConstraintSet.Constraints">
            <summary>
            Return the entire constraint list as Dictionary type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketConstraintSet.AllConstraints">
            <summary>
            Returns the entire constraint list.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketManager">
            <summary>
            The object to register and manage buckets to use for bucketing.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.BucketManager.bucketConstraints">
            <summary>
            This is the Bucket information of constraints of product and product group. 
            The information is extracted from Buckets at Bucketing execution and composes Caches. 
            Default Key is the Key for Constraints group and the value is BucketConstrainSet.
            BucketConstrainSet could be composed with multiple IBuckets.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.BucketManager.capacityBuckets">
            <summary>
            Bucket to manage Capacity of Resource(Group) to be hnadled by Bucketing.  
            Key is for Capacity Bucket and value is CapacityBucket.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.BucketManager.caches">
            <summary>
            The Bucket constraint list for a specific product.This is the cached contents, Buckets being the source. 
            Key is to show the Constraint group and value is Constraint Bucket.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.#ctor">
            <summary>
            Initializes a new instance of the class <em>BucketManager</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketManager.Enabled">
            <summary>
            Determines whether to perform Bucketing. If value is <strong>true</strong>, Bucketing is performed, or else, 
            Bucketing is not performed when value is <strong>false</strong>.Default value is set as true. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketManager.RollingHours">
            <summary>
            This is the Rolling cycle during Bucketing. The configuration could be changed through the property of BucketInit Control. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketManager.InnerRollingMinutes">
            <summary>
            This is the Inner Rolling considering Slant. The configuration could be changed through the property of BucketInit Control. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.IsBoundary(System.DateTime)">
            <summary>
            Checks if input time is correspondent to BucketRolling cycle. 
            </summary>
            <param name="now">Target time.</param>
            <returns>If input time is correspondent to Rolling cycle, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketManager.CapacityBuckets">
            <summary>
            Returns the entire list of registered Capacity Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketManager.ConstraintSets">
            <summary>
            Returns the entire list of registered Constraint Bucket.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.GetCapacityBucketKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Returns the Capacity Bucket Key of current Step of the target entity.
            </summary>
            <param name="hb">Target entity object</param>
            <returns>Capacity Bucket Key object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.GetCapacityBucket(System.Object)">
            <summary>
            Returns the Bucket object for the Capacity Bucket Key.
            If there is a registered Bucket for the key, return the Bucket, or else, 
            create Bucket for the Key.  
            </summary>
            <param name="key">Capacity bucket key. </param>
            <returns>Returns CapacityBucket object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.AddCapacityBucket(Mozart.SeePlan.Simulation.CapacityBucket)">
            <summary>
            Add target CapacityBucket to BucketManager as management object Bucket. 
            </summary>
            <param name="bck">Target CapacityBucket to include.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.RemoveCapacityBucket(System.Object)">
            <summary>
            Remove registered CapacityBucket of a specific key.
            </summary>
            <param name="key">Target CapacityBucket to remove.</param>
            <returns>If CapacityBucket is removed, return <stong>true</stong>, 
            if there is no item to remove, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.GetConstraintSetKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Returns the Constraint group Key to be applied to the target entity.
            </summary>
            <param name="hb">Target entity object</param>
            <returns>Returns the Constraint key of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.GetConstraintSet(System.Object)">
            <summary>
            Returns the Constraint Bucket list correspondent to Constraint group key. 
            </summary>
            <param name="constraintSetKey">Constraint group key.</param>
            <returns>Returns Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.AddConstraint(System.Object,Mozart.SeePlan.Simulation.IBucket)">
            <summary>
            Add Caontraint Bucket to Constraint Group correspondent to key group.
            </summary>
            <param name="constraintSetKey">Constraint group key.</param>
            <param name="constraint">Target Constraint bucket to be included. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.AddConstraintSet(System.Object,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Simulation.IBucket})">
            <summary>
            Add ConstraintSet.
            </summary>
            <param name="constraintSetKey">ConstraintSet Key.</param>
            <param name="constraints">Target Constraint list.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.ResetCache">
            <summary>
            Initializes cache information.
            Cache initialization can be done depending on the possibility cache information can be changed. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.ResetConstraintSets">
            <summary>
            Initializes Bucket Constraint information.
            Bucket Constraint initialization can be done depending on the possibility Constraint information can be changed. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.GetConstraints(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Returns the Constraint Bucket list of the target entity. 
            </summary>
            <param name="hb">Target entity object</param>
            <param name="now">Current time of Simulation</param>
            <returns>Returns the Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.AddMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary> 
            Add output to target entity that requires Constraint Bucket applied. 
            </summary>
            <param name="hb">Target entity</param>
            <param name="now">Current time of Simulation</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.CanMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Determines and returns whether Bucketing could be performed for the entity that will be applied with constraints. 
            </summary>
            <param name="hb">Target entity</param>
            <param name="now">Current time of Simulation</param>
            <returns><strong>true</strong> to perform bucketing; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.Rolling(System.DateTime)">
            <summary>
            Process Rolling to all Buckets under the management of Bucket Manager. 
            At Rolling, the output of Bucket is initialized and able to perform additional Bucketing on the next Rolling cycle. 
            </summary>
            <param name="now">Rolling time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketManager.Compensate(System.DateTime,System.Single)">
            <summary>
            During initial Bucket configuration, when start time is different from Bucket Rolling, 
            the passed time should be handled that outputs already came out. For example if Rolling is performed for 8 hours starting from 06:00, 
            Simulation start time is 08:00, portion = 1/4(0.25) could be set to consider 1/4 Bucket Move has already occured.  
            </summary>
            <param name="now">Compensate handling time.</param>
            <param name="portion">Output handling portion.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DummyBucket">
            <summary>
            This the Dummy Bucket class that has no Capacity allocated. 
            This is used to proceed Step considering TAT without Capacity constraints. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DummyBucket.Instance">
            <summary>
            Refers to the default Dummybucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DummyBucket.Key">
            <summary>
            Bucket Key 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DummyBucket.Enabled">
            <summary>
            Determines whether to consider Capacity. The value is always set as false. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DummyBucket.SlotCount">
            <summary>
            The constraint for using Bucket simultaneously. It is set as int.MaxValue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DummyBucket.CapaQty">
            <summary>
            The Capacity of Bucket. It is set as int.MaxValue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DummyBucket.Slant">
            <summary>
            The Slant information of Bucket. It is set as null.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DummyBucket.CanMove(System.DateTime)">
            <summary>
            Determines if Bucket is available for input.
            </summary>
            <returns>Returns if entity could be processed. It is always <strong>true</strong>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CapacityBucket">
            <summary>
            Capacity Bucket class of Bucketer.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.CreateDummy(System.Object)">
            <summary>
            Creates Dummy Bucket.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.#ctor">
             <summary>
            Constructor.
             </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.#ctor(System.Object,System.Single)">
            <summary>
            Constructor. Enabled property is set as true.
            </summary>
            <param name="key">Bucket Key.</param>
            <param name="capacity">Capacity amount</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.CumulatedQty">
            <summary>
            The accumulated production of the previous time within Bucket Rolling section.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.PreviousQty">
            <summary>
            The production qunatity of the previous time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.MoveQty">
            <summary>
            The production qunatity of the current time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.RemainQty">
            <summary>
            The remaining quantity that could be produced from Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.Key">
            <summary>
            Bucket Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.Enabled">
            <summary>
            Decision to set Capacity for Bucket. If false, Capacity is not consdiered. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.SlotCount">
            <summary>
            The quantities that could be processed simulataneously.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.CapaQty">
            <summary>
            Capacity of Bucket. The maximum quantities for Bucketing. 
            It also means the total quantities that could be processed during Rolling Hour. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.Slant">
            <summary>
            Slant information of Bucket. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CapacityBucket.Data">
            <summary>
            Data object to sotre Context of Bucket. User can define this object.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.AddMove(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Add actual output quantity when processing target entity from Bucket.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.AddMove(System.Single)">
            <summary>
            Add actual output quantity to input quantity of Bucket. 
            </summary>
            <param name="qty">Actual output quantity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.CanMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Determines whether additional work could be performed from Bucket considering Capacity and Slant
            </summary>
            <param name="hb">Target entity object</param>
            <param name="now"></param>
            <returns>If additional Bucketing can be performed, return, <strong>true</strong>
            , or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.CanMove(System.DateTime)">
            <summary>
            Determines whether additional work could be performed from Bucket considering Capacity and Slant 
            </summary>        
            <returns>If additional Bucketing can be performed, return, <strong>true</strong>
            , or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.Rolling(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Perform Bucket Rolling.
            </summary>
            <param name="now">Current time.</param>
            <param name="atBoundary">Checks whether Rolling start time is equal to Rolling cycle.</param>
            <param name="atDayChanged">Checks if Rolling start time is change of day period.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.Compensate(System.DateTime,System.Single)">
            <summary>
            Add actual output of Bucket as portion. 
            </summary>
            <param name="now">Current time.</param>
            <param name="portion">Actual output portion.
            If Capacity is 1000, portion is 0.2, logic to add 200 actual output is formed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CapacityBucket.IsValidSlotCount">
            <summary>
            Checks if Slot quantity is valid.
            </summary>
            <returns>If SlotCount is larger than 0 and smaller than int.MaxValue, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.QueueControl">
            <summary>
            	<para>[FEComponent] Dispatching/QueueControl</para>
            	<para>This is the FEComponent handling series of tasks such as searching equipment available for the entity to go on standby after the task from previous Step is completed or 
            	to select waiting entities through Weight Factor evaluation at the point equipment is ready to load the next entity.</para>
            </summary>
            <remarks>
            Feature Extension Component exposes Feature Extention Action(FEAction).
            FEAction is the user defined logic development point to change the operating method of Feature Extension Component by user definition.     
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.OnDispatchIn(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This FEAction is executed before logics for task standby is processed of the entity<em>(<paramref name="hb"/></em>).</para>
            </summary>
            <param name="da">
            	<em>DispatchingAgent</em> object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            When entity goes on standby, the equipment available for loading is searched and included to the Queue of the target equipment.
            If the state of the entity is required to be updated before entering the Queue, it is handled through this FEAction.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.IsHold(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>Determines whether the entity(<em><paramref name="hb"/></em>) state should be set as Hold from the current Step. </para>
            </summary>
            <param name="da">
            	<em>DispatchingAgent</em> object.</param>
            <param name="hb">Target entity object</param>
            <returns>If entity state needs to be changed to Hold, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.GetHoldTime(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This FEAction calculates and returns the Hold duration time when entity(<paramref name="hb"/>) has to be changed to Hold state due to certain circumstances from the current Step.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            The target entity will be in Hold state until the time expires and then input to DispatchingAgent object again.
            In this case, all the tasks are performed in order from the current Step of the entity.
            </remarks>
            <returns>Returns the target entity's Hold duration time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.OnHoldExit(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl-&gt; IsHold</strong>
            	</para>
            	<para>This FEAction is called after the entity Hold state is disabled.</para>
            </summary>
            <param name="dispatchingAgent">
            	<em>DispatchingAgent</em> object.</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.InterceptIn(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This FEAction is the first to be executed when entity enters the current Step which determines whether the Step can be processed through loading the entity to the equipment from the current Step.
            	In case the entity requires to be handled differently, this FEAction handles the entity as the corresponding method and returns the result. </para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            In case the task needs to be pended for certain amount of time due to qualtity issue of entity or other reasons 
            due to status change of the entity caused by merging or splitting from the current Step, the logic to process such data needs to be implemented by user through this FEACtion.
            True should be returned for exception handling and user should keep in mind to avoid Deadlock through exception Routing of the entity. 
            This FEAction can also be used to Hold entity through DispatchingAgent in case the quantities of Lot is too large which could not be processed in individual Lot, but requires to be be processed in LotGroup after gathering certain Lots. 
            </remarks>
            <returns>If the target entity should be handled as exception Route, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.IsBucketProcessing(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This FEAction determines if the entity(<paramref name="hb"/>) should be processed through Bucketing method(Capacity deduction type and not individual loading) if it is difficult to designate equipment to load the entity from the current Step.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            If the entity is determined to be handled through Bucketing, the entity should be included to BucketingAgent and entity Routing route needs to be changed. 
            </remarks>
            <returns>If entity needs to be handled through Bucketing, return <strong>true</strong> or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.FilterLoadableEqpList(Mozart.SeePlan.Simulation.DispatchingAgent,System.Collections.Generic.IList{System.String},Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This FEAction is called after the list of equipment is searched that could load the target entity(<em><paramref name="hb"/></em>).
            	The logics to filter the equipment(<em><paramref name="src"/></em>) from the list is impletemented through this Action.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="src">The list of Equipment ID that could load the the target entities.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            The list of equipment that could load the target entity could be found through master data, 
            but due to the constraints such as processing condition, equipment state, entity property or time period, 
            some of the available equipment requires to be removed from the list. The logics to remove the equipment should be 
            implemented by user through this FEAction. 
            </remarks>
            <returns>Return the filtered list of equipment ID that could load the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.OnNotFoundDestination(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch,System.Int32)">
            <summary>
            	<para></para>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>This is the FEAction to implement logic to handle the entity in case there is no equipement(<em><paramref name="destCount"/></em>) able to load the target entity(<em><paramref name="hb"/></em>) at all.</para>
            </summary>
            <param name="da">
            	<em>DispatchingAgent</em> object.</param>
            <param name="hb">Target entity object</param>
            <param name="destCount">The number of equipment able to load the target entity. If there is no equipment available the value is 0.</param>
            <remarks>
            When this FEAction is called, it is considered either equipment cannot be found due to certain circumstances or error in master data when it should be normallu loading the target entity.
            User can define whether to handle the entities through Bucketing or not handle at all and leave logs for further investigation of the master data. 
            This should follow the organization's work process rule or data management rule and implemented through this FEAction.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.QueueControl.GetLotGroupKey(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Dispatching -&gt; QueueControl</strong>
            	</para>
            	<para>Define the Key to be used by LotGroup. If identical Key is defined it will be in the same LotGroup.</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <returns>Return the Key of LotGroup. If Key value is NULL, the corresponding entity will not be part of the LotGroup.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SlantInfo">
            <summary>
            The class to save Bucket's pricessing speed information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SlantInfo.Qty">
            <summary>
            The amount that could be produced in UnitHour.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SlantInfo.UnitHours">
            <summary>
            UnitHour.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SlantInfo.UPH">
            <summary>
            The limitation ratio that could exceed UPH. (EX: 1.1, 1.2)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SlantInfo.IncommingQty">
            <summary>
            Default processing per hour. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SlantInfo.MaxQty">
            <summary>
            Maximum processing per hour. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SlantInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SlantInfo.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="qty">The amount that could be produced in UnitHour.</param>
            <param name="unitHours">The unit hour to configure Slant information.</param>
            <param name="uph">The limitation ratio that could exceed UPH.(EX: 1.1, 1.2).</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchingInfo">
            <summary>
            The Queue information required for Dispatching from each equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingInfo.Port">
            <summary>
            The Port to recieve entity from DispatchingAgent to the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingInfo.Source">
            <summary>
            Target equipment object.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingInfo.Queue">
            <summary>
            The Entity Queue from each target equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingInfo.Queue2">
            <summary>
            The alternative entity Queue from each target equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingInfo.Buffered">
            <summary>
            The list of entities on standby for loading to the target equipment. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingInfo.#ctor(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            생성자입니다.
            </summary>
            <param name="src">Equipment object.</param>
            <param name="port">DispatchInport object.</param>
            <summary>
            <para>Initializes a new instance of the <em>DispatchingInfo</em> class with the specified equipment active object to load the entity recieved from <em>AoDispatchIn</em>, to its buffer,</para> 
            <para>and the specified port to receive the entity in the queue of <em>AoDispatchIn</em>, through the <em>DispatchOutPort.</em></para> 
            </summary>
            <param name="src">Equipment object.</param>
            <param name="port">DispatchInport object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingInfo.CreateQueue2">
            <summary>
            Create Second Queue.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingInfo.CreateBuffered">
            <summary>
            Create Buffer Queue.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingInfo.NewQueue">
            <summary>
            Create new Queue.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FifoDispatcher">
            <summary>
            The class of FIFO type Dispatcher.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IDispatchContext">
            <summary>
            This is the context class to configure the global variables that are thrown during Dispatching cycle.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IDispatchContext.ModelContext">
            <summary>
            Simulation Model Context.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.Reset">
            <summary>
            Initializes Context configuration value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IDispatchContext.Item(System.Object)">
            <summary>
            The property value of a specific Key in Dispatch context. 
            </summary>
            <param name="key">Property key string.</param>
            <returns>Returns the property value of the key.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IDispatchContext.Keys">
            <summary>
            The list of Keys registred to Dispatch context. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.Set(System.Object,System.Object)">
            <summary>
            Saves property value to a specific key.
            </summary>
            <param name="key">Property key string.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.Remove(System.Object)">
            <summary>
            Removes property value from a specific key.
            </summary>
            <param name="key">Target Property key string to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.Get``1(System.Object,``0)">
            <summary>
            Return the property value of a sepcific key as target data type. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.GetOrAdd``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Return the property value of a specific key as target data type or create one if value does not exist.
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="creator">The function to crate property value when it does not exist.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDispatchContext.Pop``1(System.Object,``0)">
            <summary>
            Return th property value of a specific key as target data type and delete it from Context. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchContext">
            <summary>
            This is the Context class to configure the global variables that are thrown during Dispatching cycle.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.Reset">
            <summary>
            Initializes the Context confivuration value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchContext.ModelContext">
            <summary>
            Simulation Model Context.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchContext.Item(System.Object)">
            <summary>
            The property value of a specific Key in Dispatch context. 
            </summary>
            <param name="key">Property key string.</param>
            <returns>Returns the property value of the key.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchContext.Keys">
            <summary>
            The property value of a specific Key in Dispatch context.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.Set(System.Object,System.Object)">
            <summary>
            Saves property value to a specific key.
            </summary>
            <param name="key">Property key string.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.Remove(System.Object)">
            <summary>
            Removes property value from a specific key.
            </summary>
            <param name="key">Property key string to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.Get``1(System.Object,``0)">
            <summary>
            Return the property value of a sepcific key as target data type. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.GetOrAdd``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Return the property value of a specific key as target data type or create one if value does not exist.
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="creator">The function to crate property value when it does not exist.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchContext.Pop``1(System.Object,``0)">
            <summary>
            Return th property value of a specific key as target data type and delete it from Context. 
            </summary>
            <typeparam name="TValue">Target property type to return.</typeparam>
            <param name="key">Property key string.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>Returns the property value.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IWeightManager">
            <summary>
            WeightManager Interface.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWeightManager.GetPreset(System.String)">
            <summary>
            Returns the weight preset.
            </summary>
            <param name="preset">Target preset ID</param>
            <returns>The weight preset</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWeightManager.GetMethods(System.String)">
            <summary>
            Returns WeightMethod list.
            </summary>
            <param name="preset">Target Preset ID.</param>
            <returns>Returns WeightMethod list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWeightManager.GetEvaluator(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Returns the weight evaluator
            </summary>
            <param name="target">The target of weight evaluation</param>
            <returns>Returns the weight evaluator</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightMethod">
            <summary>
            WeightMethod Delegate.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="now">Current time.</param>
            <param name="target">Target equipment.</param>
            <param name="factor">WeightFactor information.</param>
            <param name="ctx">DispatchContext information.</param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IWeightMethod">
            <summary>
            WeightMehtod Interface.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IWeightMethod.Factor">
            <summary>
            WeightFactor information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IWeightMethod.Method">
            <summary>
            WeightMethod information.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IWeightPresetProvider">
            <summary>
            WeightPreset을 제공하는 기능을 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Reperesents the method that provides WeightPreset.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IWeightPresetProvider.Preset">
            <summary>
            WeightPreset을 가져옵니다.
            </summary>
            <summary>
            Gets WeightPreset
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightEvaluator">
            <summary>
            Weight Factor 기반의 Dispatcher를 사용할 경우 이 객체를 이용하여 Weight계산
            </summary>
            <summary>
            Calculates the weight score using this instance in case the equipment is using weight factor based dispatcher for dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.Target">
            <summary>
            Target equipment object to perform Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.Preset">
            <summary>
            Weight Factor의 집합
            </summary>
            <summary>
            Represents the set of weight factors. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.Factory">
            <summary>
            The root Simulation Model(Factory) object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.Log">
            <summary>
            Model Logger.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.Comparer">
            <summary>
            Comparer used by Dispatcher to evaluate waiting WIPs .
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightEvaluator.FactorList">
            <summary>
            The list of functions used by Weight based Dispatcher to calculate Factor value. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightEvaluator.#ctor(Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.DataModel.WeightPreset)">
            <summary>
            지정된 ActiveObject와 WeightPreset을 사용하여 새로운 WeightEvaluator를 생성합니다.
            </summary>
            <param name="target">Weight 기반 작업물 우선순위 결정이 필요한 ActiveObject입니다.</param>
            <param name="preset">Weight 정보를 포함하고 있는 WeightPreset입니다.</param>
            <summary>
            Initializes a new instance of the <em>WeightEvaluator</em> class with the specified <em>ActiveObject</em> and <em>WeightPreset</em>
            </summary>
            <param name="target">The active object which requires the priority decision of the weight factor based entity.</param>
            <param name="preset">The weight preset containing the weight factor information.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightEvaluator.GetWeight(Mozart.SeePlan.DataModel.WeightFactor,Mozart.SeePlan.Simulation.WeightMethod,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            WeightMethod 를 이용하여 Weight Factor에 대한 평가 결과 값을 산출 후 값을 반환
            </summary>
            <param name="factor">작업물의 우선순위를 평가하기 위한 평가요소</param>
            <param name="method">Weight Factor 에 대한 평가 결과 값을 산출하기 위한 함수</param>
            <param name="hb">평가 대상 작업물입니다.</param>
            <param name="ctx">작업물 평가에 사용되는 컨텍스트 개체입니다.</param>
            <returns>작업물의 평가 요소에 대한 결과값입니다.</returns>
            <summary>
            Calculates and returns the <em>WeightValue</em> of the weight factor defined by <em>WeightMethod</em> delegate. 
            </summary>
            <param name="factor">The factor reference to calculate <em>WeightValue</em> to be used to evaluate dispatch priority of the specified entity.</param>
            <param name="method">The delegate that defines the formula to calculate the <em>WeightValue</em> for the specified weight factor.</param>
            <param name="hb">The entity to receive <em>WeightValue</em> to be used for dispatch order evaluation.</param>
            <param name="ctx">The context object used to evaluate the dispatch order of the specified entity. </param>
            <returns>The <em>WeightValue</em> calculated from the defined <em>method</em> for the <em>factor</em>, to sort the dispatch priority of the specified <em>hb</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightEvaluator.Evaluate(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            작업물별 WeightFactor의 WeightValue를 평가하여 우선순위를 반영한 결과 반환
            </summary>
            <param name="lots">평가 대상 작업물의 목록입니다.</param>
            <param name="ctx">작업물 평가에 사용되는 컨텍스트 개체입니다.</param>
            <returns>우선순위를 고려해서 정렬된 작업물의 목록입니다.</returns>
            <summary>
            Returns sorted list of entities by dispatch order(Ascending), by evaluating the <em>WeightValue</em> of the <em>WeightFactor</em> per entity in the specified list of entities.
            </summary>
            <param name="lots">The list of entities to evaluate dispatch order.</param>
            <param name="ctx">The context object used to evaluate the dispatch order of the specified entity.</param>
            <returns>The sorted list of entities in dispatch order(Ascending).</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightEvaluator.SortLotGroupContents(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            LogGroup 내의 개별 작업물을 정렬한 목록을 반환합니다.
            </summary>
            <param name="list">LotGroup에 속한 작업물의 목록입니다.</param>
            <param name="ctx">작업물 평가에 사용되는 컨텍스트 개체입니다.</param>
            <returns>우선순위를 고려해서 정렬된 작업물의 목록입니다.</returns>
            <summary>
            Returns the sorted list of entities in the <em>LotGroup</em>.
            </summary>
            <param name="list">The list of entities in the <em>LotGroup</em>.</param>
            <param name="ctx">The context object used to evaluate the dispatch order of the specified entity.</param>
            <returns>The sorted list of entities in dispatch order (Ascending).</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightPriorityComparer">
            <summary>
            작업물의 Weight Factor 평가값을 차례대로 비교하여 작업물의 우선순의를 판단하는 비교자 클래스입니다.
            </summary>
            <summary>
            Compares the weight value(per weight factor) of the two <em>IHandlingBatch</em>  to determine dispatch order.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightPriorityComparer.#ctor(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IWeightMethod})">
            <summary>
            지정된 Weight Factor 계산 함수의 목록을 사용하여 새로운 WeighPriorityComparer를 생성합니다.
            </summary>
            <param name="factorList">Weight Factor 계산 함수의 목록입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightPriorityComparer.Compare(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            두 작업물의 우선순위를 비교합니다.
            </summary>
            <param name="x">첫 번째 작업물입니다.</param>
            <param name="y">두 번째 작업물입니다.</param>
            <returns>
                <para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
                <para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
                <para>값이 0인 경우 두 작업물의 우선순위는 동일합니다.</para>
                <para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
             <summary>
             Compares the two specified <em>IHandlingBatch</em> arguments and returns an integer that indicates their own relative position in the sort order. 
             </summary>
             <param name="x">The first <em>IHandlingBatch</em> to compare.</param>
             <param name="y">The second IHandlingBatch to compare.</param>
             <returns>Returns a signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown below.
                 <para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                 <para>Zero : <em>x</em> occurs in the smae position as <em>y</em> in the sort order.</para>
                 <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightSortedDispatcher">
            <summary>
            The class of Dispathcer using Weight Sorting method. 
            </summary>
            /// <remarks> This class is generated when DispatchType is set as 'WeightSorted' from Equipment Model.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightSumComparer">
            <summary>
            작업물의 Weight Factor 별 평가값의 가중합 기준으로 작업물의 우선순위를 판단하는 비교자 클래스 입니다.
            </summary>
            <summary>
            Compares weighted sum(weight values per weight factor) of the two <em>IHandlingBatch</em> to determine dispatch order. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightSumComparer.Compare(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            두 작업물의 우선순위를 비교합니다.
            </summary>
            <param name="x">첫 번째 작업물입니다.</param>
            <param name="y">두 번째 작업물입니다.</param>
            <returns>
                <para>두 비교 대상 간의 우선순위 관계를 나타내는 32비트 부호 있는 정수입니다.</para>
            	<para>값이 음수인 경우 x는 y보다 우선순위가 높습니다.</para>
            	<para>값이 0인 경우 두 작업물의 우선순위는 동일합니다.</para>
            	<para>값이 양수인 경우 x는 y보다 우선순위가 낮습니다.</para>
            </returns>
             <summary>
             Compares the two specified <em>IHandlingBatch</em> arguments and returns an integer that indicates their own relative position in the sort order. 
             </summary>
             <param name="x">The first <em>IHandlingBatch</em> to compare.</param>
             <param name="y">The second IHandlingBatch to compare.</param>
             <returns>Returns a signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown below.
                 <para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                 <para>Zero : <em>x</em> occurs in the same position as <em>y</em> in the sort order.</para>
                 <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WeightSumComparer.Default">
            <summary>
            기본 WeightSumComparer 개체입니다.
            </summary>
            <summary>
            The default <em>WeightSumComparer</em> object.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightSumDispatcher">
            <summary>
            The class of Dispathcer using Weight Sum method.
            </summary>
            <remarks> This class is generated when DispatchType is set as 'WeightSum' from Equipment Model.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityControl">
            <summary>
            	<para>[FEComponent] Entity/Route</para>
            	<para>This FEComponent is in charge of the series of logics regaring Routing of the entities and processing state decision during the entire Simulation cycle.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.EntityControl.Instance">
            <summary>
            EntityControl Instance object. It is used when FEComponent needs to be called directly. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnRelease(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This FEAction is called at the point entity is loaded to the line (before moving to the first input Step). 
            	The user logics to apply information at point of loading to the entity property and statistics aggergation can be implemented to this Action. </para>
            </summary>
            <param name="factory">Root Factory object..</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.IsInputControl(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Decides whether to send entity to InOutAgent.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <returns>If entity should be sent to InOutAgent, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.GetInputControlKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Decides whether to send entity to In/Out Agent.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <returns>If entity should be sent to InOutAgent, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.GetLotDispatchingKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Selects the Controller for Dispatching entities.
            </summary>
            <remarks>
            Unless multiple Dispatching Controller is used, this FEAction can be used to determine Bucketing or normal loading. 
            However, in case Dispatching is done in equipment groups, a Rule to select Dispatching Controller is requried dependent to the current Step of the entity. 
            This FEAction is the point to implement such Rules.  
            </remarks>
            <param name="hb">Target entity object to select route.</param>
            <returns>Return the Key string of DispatchingAgent.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnDispatchIn(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            This is the function to change the property of the entity when entity starts to Wait.
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.PrePegging(Mozart.SeePlan.Simulation.IHandlingBatch,System.Collections.Generic.List{Mozart.SeePlan.DataModel.PeggingInfo})">
            <summary>
            This function is used to Peg entity to Target at the point Step begins Wait state.
            The Demand that is pegged is confirmed by selection after Lot is Dispatched.
            </summary>
            <param name="hb">Target entity.</param>
            <param name="infos">The list of quantity information and the selected StepPlan</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnFailPrePegging(Mozart.SeePlan.Simulation.ILot,System.Boolean,System.Collections.Generic.IEnumerable{System.Tuple{Mozart.SeePlan.DataModel.Step,System.Object}},System.Double,Mozart.SeePlan.DataModel.ForwardPeggingFailReason)">
            <summary>
            PrePegging을 시도했지만 유효한 StepTarget이 존재하지 않거나 
            Pegging 가능 수량이 존재하지 않아 PrePegging에 실패한 경우 호출되는 Action입니다.
            </summary>
            <param name="lot">PrePeegging 대상 작업물입니다.</param>
            <param name="isRun">PrePeegging 대상 작업물의 상태입니다.</param>
            <param name="keys">PrePegging 대상 작업물의 StePlanKey 목록입니다.</param>
            <param name="qty">PrePegging 대상 작업물의 Pegging 가능 수량입니다.</param>
            <param name="reason">PrePegging에 실패한 사유입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.GetLoadableEqpList(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Returns the the list of equipment that could load the target entity(<paramref name="hb"/>).</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            In manufacturing industries, there are many ways to designate equipment to process Steps. 
            These could differ by the characteristics of the industry, product and Step. 
            Therefore, the equipment designation should be defined by user and the required logics can be implemented through this FEAction.
            </remarks>
            <returns>Return the list of equipment IDs that are possible to load the target entities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.GetLoadableEqpList2(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Searches and returns the list of alternative equipment that could load the target entity(<paramref name="hb"/>).</para>
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Normally, the equipment of the list from "GetLoadableEqpList" FEAction used for loading, but if the option "UseSecondQueue" of DispatchingAgent is enabled, 
            other than the primary equipment list, the alternative equipment list is also considered as the equipment for loading entities.
            </remarks>
            <returns>Return the list of equipment IDs that are possible to load the target entities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnDispatched(Mozart.SeePlan.Simulation.DispatchingAgent,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            This function is called at the point entity Dispatching is completed 
            </summary>
            <param name="da">DispatchingAgent object.</param>
            <param name="aeqp">Dispatching target equipment object.</param>
            <param name="sels">List of entities Dispatched(selected).</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.ConfirmPegging(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Confirms the Pegged Demand information from Prepegging after entity is selected.</para>
            	<para>The quantity information of ForewardPegInfo is reflected from the internal logic. The logics to confirm other information such as PartChange is included here.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Returns the Confirmation result. If true is returned, the quantity information of ForwardPegInfo is reflected to StepTarget.
            If false, is returned, the quantities of StepTarget are recovered.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.StartTask(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.ActiveObject,System.DateTime)">
            <summary>
            	<para>This is the Event called when entity starts to be processed.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <param name="ao">Target equipment object</param>
            <param name="now">Current time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnStartTask(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.ActiveObject,System.DateTime)">
            <summary>
            This is where the logics are implemented to handle OnStratTask(Step) when entity starts processing. 
            </summary>
            <param name="hb">Target entity object</param>
            <param name="ao">Target equipment object</param>
            <param name="now">Current time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.EndTask(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.ActiveObject,System.DateTime)">
            <summary>
            	<para>This is the Event that is triggered when entity processing ends.</para>
            </summary>
            <param name="hb">Target entity.</param>
            <param name="now">Current time.</param>
            <param name="ao">Target equipment object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnEndTask(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.ActiveObject,System.DateTime)">
            <summary>
            This is where the logics are implemented to handle OnEndTask(Step) when entity processing is completed. 
            </summary>
            <param name="hb">Target entity object</param>
            <param name="ao">Target equipment object</param>
            <param name="now">Current time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.MoveNext(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>Send entity to the next Step.</summary>
            <param name="hb">Target entity.</param>
            <param name="now">Current time.</param>
            <returns>Return entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.StepChange(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This is the FEAction that returns the list of entities after setting the following Steps for each Lot from each Batch of the Handling Batch unit.</para>
            </summary>
            <param name="hb">Target entity object</param>
            <param name="now">Current time. </param>
            <remarks>
            Handling Batch can be a one whole entity or entities in Batch. 
            Depending on the condition the entity can be either split or merged. 
            This does not consider grouping the minimum size unit of Lots. 
            This is considered when the Lot information is vanished due to previous Lot splitting to two or more Lots or 
            when two or more Lots merging into one Lot. 
            </remarks>
            <returns>Return the list of entities set to the next Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.GetNextStep(Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.DataModel.LoadInfo,Mozart.SeePlan.DataModel.Step,System.DateTime)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Searches and returns the next Step of of the current Step according to the individual entity unit.</para>
            </summary>
            <param name="lot">Target entity object</param>
            <param name="loadInfo">The loading information object of the current Step.</param>
            <param name="step">Current Step information.</param>
            <param name="now">Current time of Simulation</param>
            <returns>Return the next Step of the current Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.CreateLoadInfo(Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.DataModel.Step)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>Generates and returns the loading information object of the Step.</para>
            </summary>
            <param name="lot">Target entity object</param>
            <param name="task">The target Step to generate loading information.</param>
            <returns>Return the loading information object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnAddWipManager(Mozart.SeePlan.Simulation.IWipManager,Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This FEAction is called at the point That Lot is being included to WipManager. 
            	The Lot is automatically included to WipManager at WIP initialization and when new entity is released. 
            	However, when new Lot is created during Simulation due to Lot Split or Merge, user has to include the created Lot to WipManager. 
            	This function is called at this point.</para>
            </summary>
            <param name="wipManager">WipManager object. </param>
            <param name="lot">Target Lot object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnCreateDummy(Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This FEAction is called at the point that lot is being created dummy. and this dummy lot are used busy event after PM. 
            	Set dummy lot information like qty etc..</para>
            </summary>
            <param name="dummyLot">Target dummy lot object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnDeleteWipManager(Mozart.SeePlan.Simulation.IWipManager,Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This FEAction is called at the point the target Lot is being removed from WipManager.
            	This is automatically called when the Step of the Lot is completed and destroyed and this is called when user manually
            	calls the Out funtion from WipManager as well.</para>
            </summary>
            <param name="wipManager">WipManager object. </param>
            <param name="lot">Targe Lot object to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.IsDone(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>The logics to determine whether Steps completed within Step route are targets for destruction are implemented through this FEAction.</para>
            </summary>
            <param name="hb">The target entities for completion.</param>
            <remarks>
            In general, the Step is finished when the next Step could not be searched. 
            However, there are cases when Step to end the task is designated. 
            The logics to consider these cases should be implemented. 
            </remarks>
            <returns>If all Steps of the entity is finshed and should be destroyed, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityControl.OnDone(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/Route</para>
            	<para>This FEAction is called at the point when entity processing from the line is completed and to be destroyed.
            	The user defined logics to aggregate statistics could be implemented through this Action.</para>
            </summary>
            <param name="hb">Entity object to be destroyed.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LotGroup`2">
            <summary>
            The class is used to gather and process entities for a particular purpose. 
            </summary>
            <typeparam name="TLot">The entity unit type that composes Group.</typeparam>
            <typeparam name="TStep">Step type.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.BatchID">
            <summary>
            LotGroup의 고유 식별자를 가져오거나 설정합니다. LotGroup 자체의 BatchID가 필요한 경우 설정할 수 있습니다. 기본값은 null입니다.
            </summary>
            <summary>
                <para>Gets or sets the unique ID for the Group. This information can be set if LotGroup iteself requires batch ID.</para>
                <para>Default value is null.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.Lot">
            <summary>
            The first entity to form Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.Sample">
            <summary>
            The first entity to form Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.CurrentStep">
            <summary>
            The current Step of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.NumOfUnits">
            <summary>
            The quantity of Batch. It is always set as 1.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.UnitQty">
            <summary>
            The quantity of entity unit included in LotGroup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.Count">
            <summary>
            The quantity of entity unit composing Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.IsStarted">
            <summary>
            Determines whether to start processing the first entity. 
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.IsFinished">
            <summary>
            Determines whether all process is completed for the entity.
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.DispatchInTime">
            <summary>
            The start time(Queue input time) of Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.ReleaseTime">
            <summary>
            Batch release time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.CurrentState">
            <summary>
            The current state of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.StateTime">
            <summary>
            The beginning time of the current state of entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.#ctor">
            <summary>
            Conatructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.ToString">
            <summary>
            The display name of Lot Group.
            </summary>
            <returns>Returns display name of Lot Group. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.MoveFirst(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the first Step. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return first Step information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.StepChange(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the next Step. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>List of entities set to the next Step. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.StartTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Start processing the current Step of the Batch.
            </summary>
            <param name="now">Processing start time.</param>
            <param name="eqp">Target equipment for loading.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.EndTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Complete the process of the current Step of the Batch. 
            </summary>
            <param name="now">Processing end time. </param>
            <param name="eqp">Target equipment for loading.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.Apply(System.Action{Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            This is used to implement a specified logic for all entities in Batch. 
            </summary>
            <param name="action">The logic delegate to be applied to entity unit. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.Add(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Add entity unit to Group.
            </summary>
            <param name="hb">Target entity to add. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.AddRange(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            Add entity list to Group.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.AddSort(Mozart.SeePlan.Simulation.IHandlingBatch,System.Collections.Generic.IComparer{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            Add entity unit to Group. Sort through comparer and stored to Contents after. 
            </summary>
            <param name="hb">Target entity to add. </param>
            <param name="comparer">The Comparer used for sorting.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.Sort(System.Collections.Generic.IComparer{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            Sort Contents. 
            </summary>
            <param name="comparer">The Comparer used for sorting.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.Remove(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Remove entity from entities composing Group.
            </summary>
            <param name="hb">Target entity to remove. </param>
            <returns>If entity is properly removed, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.Clone">
            <summary>
            Replicate LotGroup and create. 
            </summary>
            <returns>Return Lot Group clone.</returns>
            <remarks>The Contents of the replicated Lot Group does not interlock with the original Contents. They work as separate lists.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.GetPreviousEffectiveEqpList">
            <summary>
            Return list of equipment that was available from previous Step. 
            </summary>
            <returns>Return equipment ID string list. </returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.IsPartial">
            <summary>
            Determines if entity has been Split. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.IsPartialStart">
            <summary>
            Determines whether to start processing Split entities. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.IsPartialEnd">
            <summary>
            Determines whether to processing is completed for the Split entities. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotGroup`2.Mozart#SeePlan#Simulation#IHandlingBatch#ToolSettings">
            <summary>
            The Second Resource pool configured to the current Step of the entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotGroup`2.GetEnumerator">
            <summary>
            The section of IEnumerable where member is implemented. 
            Return list of entity unit composing Batch. 
            </summary>
            <returns>Return list of entity unit.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.InOutAgent">
            <summary>
            Agent object to control In/Out.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutAgent.#ctor(Mozart.SeePlan.Simulation.AoFactory,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="factory">Root Factory object. </param>
            <param name="key">Key value to distinguish Agent.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Key">
            <summary>
            InOutAgent Key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Factory">
            <summary>
            Root Simulation Model object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Priority">
            <summary>
            The section where ICalendarEvent property is implemented. This is the execution priority of the created Events.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Timing">
            <summary>
            The section where ICalendarEvent property is implemented.
            Event trigger time type. When there are Events with same time, 
            the execution priority is set according to the trigger time type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Duration">
            <summary>
            The section where ICalendarEvent property is implemented.
            This is the Manager Logic cycle.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.FireAtStart">
            <summary>
            The section where ICalendarEvent property is implemented.
            Determines whether to trigger Event when Simulation starts. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.StartBoundary">
            <summary>
            The section where ICalendarEvent property is implemented.
            The time when Event can be triggered.  Event could be triggered between StartBoundary ~ EndBoundary.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.EndBoundary">
            <summary>
            The section where ICalendarEvent property is implemented..
            The time when Event can be stopped. Event could be stopped between StartBoundary ~ EndBoundary. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.Now">
            <summary>
            Return current time as engine time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.InOutAgent.NowDT">
            <summary>
            Return current time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutAgent.AddToRelease(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Release entity from Agent.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutAgent.GetWaitList">
            <summary>
            Return list of waiting entities in Agent.
            </summary>
            <returns>Returns the list of entities waiting.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutAgent.RemoveQueue(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Remove entities from the entity processing list.
            </summary>
            <param name="hb">Target entity to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.InOutAgent.Take(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Make entity wait at Agent.
            </summary>
            <param name="hb"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventBase">
            <summary>
            일정 시간을 주기로 반복해서 발생하는 이벤트 클래스입니다.
            </summary>
            <summary>
             Represents the event that occurs repeatedly on a specific cycle during simulation.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.Name">
            <summary>
            이벤트의 이름을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the name of this <em>CalendarEventBase</em> class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.Priority">
            <summary>
            이벤트의 우선순위를 가져오거나 설정합니다. 동일한 시간 및 동일 시점에 발생하는 이벤트들은 우선순위에 따라 오름차순으로 발생합니다.
            </summary>
            <summary>
            <para>Gets or sets the occurence order of this event.</para> 
            <para>When there are more than two event occurence with same specified time and same occurence time, the event will occur by the specified <em>Priority</em> in ascending order.</para>
            </summary>
            <remarks>
                <para>There are two properties considered to sort the event occurence order when there are multiple events to occur at the same time. The first one is <em>Timing</em> and the second is <em>Priority</em>.</para>
                <para>The events are sorted first according to the values set in <em>Timing</em>, which are <em>CalendarEventAt.AtBeing</em> or <em>CalendarEventAt.AtEnd</em></para>
                <para>The events set as <em>AtBegin</em> is considered to occur in advance of events set as <em>AtEnd</em>.</para>
                <para>Once sorted by <em>Timing</em> the second to be considered is the values set in <em>Priority</em>.</para>
                <para>The events will be sorted in ascending order of the value set in <em>Priority</em> among the events set with same <em>Timeing</em>.</para>
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.Timing">
            <summary>
            이벤트 발생 시점을 가져오거나 설정합니다. 
            </summary>
            <summary>
            Gets or sets the event occurrence time.
            </summary>
            <remarks>
                <para>There are two properties considered to sort the event occurence order when there are multiple events to occur at the same time. The first one is <em>Timing</em> and the second is <em>Priority</em>.</para>
                <para>The events are sorted first according to the values set in <em>Timing</em>, which are <em>CalendarEventAt.AtBeing</em> or <em>CalendarEventAt.AtEnd</em></para>
                <para>The events set as <em>AtBegin</em> is considered to occur in advance of events set as <em>AtEnd</em>.</para>
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.Duration">
            <summary>
            이벤트 발생 주기를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the event occurrence frequency. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.FireAtStart">
            <summary>
            시뮬레이션 시작 시간에 이벤트가 발생할지 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets a value to indicate whether the event should occur on simulation start time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.StartBoundary">
            <summary>
            이벤트가 유효한 기간의 시작 시간을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the starting time of the event valid period. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventBase.EndBoundary">
            <summary>
            이벤트가 유효한 기간의 끝 시간을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the time the event valid period ends. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventBase.Initialize(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            이벤트를 초기화합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            Initializes this event. 
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventBase.Run(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            이벤트를 실행합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            Executes the event.
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventBase.Done(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            시뮬레이션이 종료되는 시점에 이벤트를 종료 처리합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <summary>
            Handles to end the event when simulation ends. 
            </summary>
            <param name="cm">The calendar event manager object.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventMethod">
            <summary>
            Simulation 중 설정된 주기에 따라 발생하는 이벤트의 실행 단계 별 처리하는 함수를 나타내는 대리자입니다.
            </summary>
            <param name="evt">발생한 이벤트입니다.</param>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            Represents the methods that defines the handling process for each stages of the specified event which occurrence repeats at the specified frequency during simulation. 
            </summary>
            <param name="evt">The event that occured at the specfied cycle.</param>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
            
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventDelegator">
            <summary>
            일정 시간을 주기로 반복해서 발생하는 이벤트 클래스입니다. CalendarEventBase 클래스의 abstract 메서드를 구현한 클래스입니다.
            </summary>
            <summary>
            Represents the event that occurs repeatedly on a specific cycle during simulation. 
            This class contains methods derived from <em>CalendarEventBase</em> abstract class.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventDelegator.DoneAction">
            <summary>
            시뮬레이션이 종료되는 시점에 이벤트를 종료 처리할 때 호출하는 메서드를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the defined action(method) to call to handle the event termination when simulation ends.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventDelegator.RunAction">
            <summary>
            이벤트를 실행할 때 호출하는 메서드를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the defined action(method) to execute the event. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventDelegator.InitializeAction">
            <summary>
            이벤트를 초기화할 때 호출하는 메서드를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the defined action(method) to initialize the event. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventDelegator.Initialize(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            이벤트를 초기화합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            <para>Initializes the calendar event as defined in <em>InitializeAction</em> of this instance.</para>
            <para>This method is derived from <em>CalendarEventBase</em> abstract class.</para>
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventDelegator.Run(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            <para>Executes the calendar event as defined in <em>RunAction</em> of this instance.</para>
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventDelegator.Done(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            시뮬레이션이 종료되는 시점에 이벤트를 종료 처리합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <summary>
            <para>Handles to end the calendar event as defined in <em>DoneAction</em> of this instance.</para>
            <para>This method is derived from <em>CalendarEventBase</em> abstract class.</para>
            </summary>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChangeInfo">
            <summary>
            The class of equipment state change information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.State">
            <summary>
            Equipment state type.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.StateTime">
            <summary>
            Equipment state change time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.Plans">
            <summary>
            현재의 설비 상태를 야기한 작업 정보의 배열을 가져옵니다.
            </summary>
            <summary>
            Gets the array of work plans that occurred the current equipment state.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.IsEmpty">
            <summary>
            Determines whether it is empty plan or not. If StateTime is DateTime.MinValue, return true.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.IsIgnorableState">
            <summary>
            Determines whether the state could be ignored. In this case, IDLE and IDLE RUN are the state that could be ignored.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.IsSlide">
            <summary>
            In Slide state
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeInfo.CanIdleRun">
            <summary>
            Checks if IDLE RUN could occure. If IDLERUN occurs, return true, or else, return false.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeInfo.Copy">
            <summary>
            Creates simple copy.
            </summary>
            <returns>Returns the copied ChangeInfo.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeInfo.SetPlan">
            <summary>
            Set work information list(Plan) empty.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeInfo.SetPlan(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            현재의 설비 상태를 야기한 작업 정보를 추가합니다.
            </summary>
            <param name="entity">현재의 설비 상태를 야기한 작업물입니다.</param>
            <summary>
            Adds the work plan that caused the state change of the equipment.
            </summary>
            <param name="entity">The entity that caused the state change of the equipment.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChangeStatBase`2">
            <summary>
            일정 기간 동안의 설비의 상태 변경 이력을 관리하는 클래스입니다.
            설비의 상태 변경 이력은 각 설비 상태 별 유지 시간으로 관리됩니다.
            </summary>
            <typeparam name="TEqp">설비의 형식입니다.</typeparam>
            <typeparam name="TChangeInfo">설비의 상태 변경 정보 형식입니다.</typeparam>
            <summary>
            Manages the history of the equipment state changes of the certain range of period. 
            The state change history of the equipment is managed by the maintained time set for each state of the equipment.
            </summary>
            <typeparam name="TEqp">The type of the equipment.</typeparam>
            <typeparam name="TChangeInfo">The type of the state change information of the equipment.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.Key">
            <summary>
            관리 대상 설비 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the equipment object to manage.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.NowDT">
            <summary>
            설비의 현재 시간을 가져옵니다.
            </summary>
            <summary>
            Gets the current time of the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.LastInfo">
            <summary>
            현재 기간의 설비 상태 변경 정보를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the state change information of the equipment of the current period.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.LastWriteTime">
            <summary>
            이전 기간에 마지막으로 설비 현상태를 기록한 시간을 가져오거나 반환합니다.
            </summary>
            <summary>
            Gets or sets the time of the current equipment state was last written from the previous period.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.LastWriteState">
            <summary>
            이전 기간의 마지막으로 기록한 설비 상태를 
            </summary>
            <summary>
            Gets or sets the last written state of the equipment from the previous period.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.LastTime">
            <summary>
            마지막으로 상태를 변경한 시간을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the time the equipment state was last changed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.#ctor(`0)">
            <summary>
            주어진 설비를 사용하여 새로운 ChangeStatBase를 생성합니다.
            </summary>
            <param name="eqp">관리 대상 설비입니다.</param>
            <summary>
            Initializes a new instance of the class <em>ChangeStateBase</em> with the specified equipment to manage the state change history.
            </summary>
            <param name="eqp">관리 대상 설비입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.Commit">
            <summary>
            현재까지 기록된 설비 상태 변경 정보를 커밋합니다.
            </summary>
            <summary>
            Commits the state change information of the equipment written so far.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.Slide">
            <summary>
            설비의 상태 변경 이력을 관리하는 기간을 다음으로 이동합니다.
            </summary>
            <summary>
            Shifts the maitain period of the state change history of the equipment, to the next maintain period.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.Insert(`0,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            설비 상태를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <param name="state">변경된 설비 상태입니다.</param>
            <param name="entity">상태 변경을 야기한 작업물입니다.</param>
            <summary>
            Writes the state of the equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
            <param name="state">The changed state of the specified equipment.</param>
            <param name="entity">The entity(wafer, lot, batch) that caused state change of the equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertBusy(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            지정된 작업물에 대한 Busy 상태를 기록합니다.
            </summary>
            <param name="entity">Busy 상태를 야기한 작업물입니다.</param>
            <summary>
            Writes the state, "Busy", information for the specified entity(wafer,lot,batch). 
            </summary>
            <param name="entity">The entity that caused the state to change to "Busy".</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertIdleRun">
            <summary>
            IdleRun  상태를 기록합니다.
            </summary>
            <summary>
            Writes the "IdleRun" state. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertIdle">
            <summary>
            Idle 상태를 기록합니다.
            </summary>
            <summary>
            Writes the "Idle" state. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertSetup(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            지정된 작업물에 대한 Setup 상태를 기록합니다.
            </summary>
            <param name="entity">Setup 상태를 야기한 작업물입니다.</param>
            <summary>
            Writes the state, "Setup" for the specified entity(wafer,lot,batch).
            </summary>
            <param name="entity">The entity that caused the state to change to "Setup".</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertChamberSetup(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time)">
            <summary>
            지정된 작업물에 대한 Setup 상태를 기록합니다.
            </summary>
            <param name="entity">Setup 상태를 야기한 작업물입니다.</param>
            <param name="stateStartTime">Chamber의 Setup 시작 시간입니다. 값이 Time.Zero와 같은 경우 공장의 현재 시간을 사용합니다.</param>
            <summary>
            Writes the state, "Setup" for the specified entity(wafer,lot,batch).
            </summary>
            <param name="entity">The entity that caused the state to change to "Setup".</param>
            <param name="stateStartTime">The start time of the chamber setup. The date and time of the current factory time is used when this value is set <em>Time.Zero</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertDown">
            <summary>
            Down 상태를 기록합니다.
            </summary>
            <summary>
            Writes the "Down" state.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.InsertPM">
            <summary>
            PM 상태를 기록합니다.
            </summary>
            <summary>
            Writes the "PM" state.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues">
            <summary>
            설비 상태별 해당 상태를 유지한 시간을 관리하는 클래스입니다.
            </summary>
            <summary>
            Manages the time held for each state of the equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.TotalHours">
            <summary>
            시간 단위의 관리 기간을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the management period in time unit.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.StateHours">
            <summary>
            시간 단위의 설비 상태별 유지 시간을 가져옵니다.
            </summary>
            <summary>
            Gets or sets the time maintained for each state of the equipment in time unit.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.#ctor">
            <summary>
            새로운 TimeValues를 생성합니다.
            </summary>
            <summary>
            Initiates a new instance of the class <em>TimeValues</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.Clear">
            <summary>
            저장된 모든 시간 정보를 제거합니다.
            </summary>
            <summary>
            Removes all information stored in <em>TotalHours</em> and <em>StateHours</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.Item(Mozart.SeePlan.Simulation.LoadingStates)">
            <summary>
            지정된 설비 상태의 유지 시간을 가져오거나 설정합니다.
            </summary>
            <param name="st">설비의 상태입니다.</param>
            <returns>설비 상태의 유지 시간입니다.</returns>
            <summary>
            지정된 설비 상태의 유지 시간을 가져오거나 설정합니다.
            </summary>
            <param name="st">설비의 상태입니다.</param>
            <returns>설비 상태의 유지 시간입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBase`2.TimeValues.GetRate(Mozart.SeePlan.Simulation.LoadingStates)">
            <summary>
            Returns the state maintained time portion of the specified equipment.
            </summary>
            <param name="st">The state of the specified equipment.</param>
            <returns>The portion of the maintained time of the specified state out of the entire specified hours.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChangeStatBuf`2">
            <summary>
            일정 기간 동안의 설비 상태 변경 이력을 관리하는 클래스입니다. 
            설비의 상태가 변경될 때마다 문자열로 된 상태 변경 정보를 버퍼에 저장하는 방식으로 관리합니다.
            </summary>
            <typeparam name="TEqp">설비의 형식입니다.</typeparam>
            <typeparam name="TChangeInfo">설비의 상태 변경 정보 형식입니다.</typeparam>
            <summary>
                <para>Manages the history of equipment state change of the specified range of period.</para>
                <para>String value of the state change information will be stored to the buffer each time the state changes.</para>
            </summary>
            <typeparam name="TEqp">The type of the equipment.</typeparam>
            <typeparam name="TChangeInfo">The type of the state change information of the equipment.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBuf`2.Buffer">
            <summary>
            설비의 상태 변경 정보를 관리하는 버퍼를 가져옵니다.
            </summary>
            <summary>
            Gets the buffer that mananges the state change information of the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBuf`2.StringBuffer">
            <summary>
            설비의 상태 변경 정보가 기록된 문자열 버퍼를 가져옵니다.
            </summary>
            <summary>
            Gets the buffer containing the string of state change information of the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeStatBuf`2.StateTimes">
            <summary>
            기간별 설비의 각 상태별 유지 시간의 목록을 가져옵니다.
            Key는 기간의 시작 시간입니다. 
            Value는 설비의 상태별 유지 시간 정보입니다.
            </summary>
            <summary>
            Gets the list of the maintained time for each state of the equipment.
            Key : The start time of the specified period.
            Value : The information of the maintained time for each state of the equipment.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBuf`2.#ctor(`0)">
            <summary>
            주어진 설비를 사용하여 새로운 ChangeStatBuf를 생성합니다.
            </summary>
            <param name="eqp">관리 대상 설비입니다.</param>
            <summary>
            Initializes a new instance of the <em>ChangeStatBuf</em> class with the specified equipment of the specified type.
            </summary>
            <param name="eqp">관리 대상 설비입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBuf`2.Commit">
            <summary>
            현재까지 기록된 설비 상태 변경 정보를 커밋합니다.
            </summary>
            <summary>
            Commits the written state change history of the equipment so far. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeStatBuf`2.Slide">
            <summary>
            버퍼에 기록된 현재 기간의 상태 변경 이력을 제거하고, 설비의 상태 변경 이력을 관리하는 기간을 다음으로 이동합니다.
            </summary>
            <summary>
            Removes the state change history of the current period from the buffer, and shifts the period to manage the equipment state change to the next period.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AgentType">
            <summary>
            WorkAgent 의 JobChange 의사 결정 방식
            </summary>
            <summary>
            Specifies the <em>JobChange</em> decision type of the <em>WorkAgent</em>
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AgentType.CHANGE">
            <summary>
             CHANGE 방식의 JobChange 의사 결정은 Down 대상 공정 (WorkStep) 을 우선 결정하고, 
             Down 된 설비 또는 유휴 설비를 Up 대상 공정 (WorkStep) 에 할당하는 방식
            </summary>
            <summary>
            <para>Specifies <strong>CHANGE</strong> type.</para> 
            <para>When <em>JobChange</em> uses <strong>CHANGE</strong> type, the <em>WorkSteps</em> to be Down are decided first, and allocates either equipment in down state or idle state to the <em>WorkStep</em> to be Up.</para>
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AgentType.TRADE">
            <summary>
             TRADE 방식의 JobChange 의사 결정은 Up 대상 공정 (WorkStep) 을 우선 결정하고, 
             다른 공정 (WorkStep) 에 이미 할당된 설비나 유휴 설비를 Up 대상 공정 (WorkStep) 에 할당하는 방식
            </summary>
            <summary>
             <para>Specifies <strong>TRADE</strong> type.</para>
             <para>When <em>JobChange</em> uses <strong>TRADE</strong> type, the <em>WorkSteps</em> to be Up are decided first, and allocates equipment that is allocated to other <em>WorkStep</em>, or equipment in idle state to the <em>WorkStep</em> to be Up. </para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.OperationType">
            <summary>
            WorkStep의 설비 할당 유형을 나타냅니다.
            </summary>
            <summary>
            Specifies the equipment allocation type of the <em>WorkStep</em>
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.OperationType.Keep">
            <summary>
            현재 할당된 설비를 유지해아 합니다.
            </summary>
            <summary>
            Specifies to maintain the current assigned equipment as it is. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.OperationType.Up">
            <summary>
            설비를 추가로 할당해야 합니다.
            </summary>
            <summary>
            Specifies to allocate additional equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.OperationType.Down">
            <summary>
            할당된 설비의 일부를 할당 해제 해야 합니다.
            </summary>
            <summary>
            Specifies to deallocate the allocated equipmment 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.OperationType.Hold">
            <summary>
            이번 Agent 실행 중에는 할당 유형 판단을 중지합니다.
            </summary>
            <summary>
            Specifies not determine the allocation type for this agent execution. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.JobChangeContext">
            <summary>
            JobChange 의사결정에 필요한 각종 정보들을 포함하고 있는 Class
            </summary>
            <summary>
            Contains and provides all necessary information to make job change decision.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.UpList">
            <summary>
            설비를 추가로 할당 받아야 하는 WorkStep list
            </summary>
            <summary>
            The list of <em>WorkStep</em> to be allocated with additional equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.KeepList">
            <summary>
            현재의 Up/Down의 판단을 보류한 상태의 WorkStep list
            </summary>
            <summary>
            The list of <em>WorkStep</em> in which the current Up/Down judgement is pended 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.DownList">
            <summary>
            할당된 설비를 반환해야하는 WorkStep list
            </summary>
            <summary>
            The list of <em>WorkStep</em> to return the allocated equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.HolderList">
            <summary>
            현재의 설비 상태를 유지하는 WorkStep list
            </summary>
            <summary>
            The list of <em>WorkStep</em> that maintains the current state of the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.IsRunJobChange">
            <summary>
            WorkAgent에서 현재 Trade 방식의 JobChange 로직을 수행하고 있는지 여부를 가져옵니다.
            </summary>
            <summary>
            Determines whether to calculate 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.CurrentUpWorkStep">
            <summary>
            Up 대상으로 선택된 WorkStep입니다.
            </summary>
            <summary>
            The selected <em>WorkStep</em> to change to "Up" state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.CurrentDownSteps">
            <summary>
            Down 가능 대상으로 선택된 WorkStep의 목록입니다.
            </summary>
            <summary>
            The list of selected <em>WorkSteps</em>s that are possible to change their states to "Down" 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.AllAssignEqps">
            <summary>
            Up 대상으로 선택된 WorkStep에 할당 가능한 설비의 목록입니다.
            </summary>
            <summary>
            The list of equipment that could be allocated to the WorkSteps selected to be <em>Up</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.FilteredAssignEqps">
            <summary>
            Up 대상으로 선택된 WorkStep에 할당 가능한 설비의 목록 중 사용자 로직에 의해 실제 할당 가능한 것으로 판단된 설비의 목록입니다.
            </summary>
            <summary>
            Gets the list of equipment to allocate to the <em>WorkSteps</em> selected to be "Up" from the specified list of equipment, that matches the criteria defined within the FEAction
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.SelectedAssignEqps">
            <summary>
            Up 대상으로 선택된 WorkStep에 할당된 설비의 목록입니다.
            </summary>
            <summary>
            Gets the list of equipment allocated to the <em>WorkSteps</em> to be "Up". 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.AssignedEqps">
            <summary>
            Agent 실행 중 할당된 설비 정보의 목록입니다.
            </summary>
            <summary>
            Gets the list of equipment allocated during <em>agent</em> execution.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.JobChangeContext.Data">
            <summary>
            기타 사용자 설정 속성입니다.
            </summary>
            <summary>
            Gets or sets additional custom property. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeContext.#ctor">
            <summary>
            새로운 JobChangeContext를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the class <em>JobChangeContext</em>, initializing its properties. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeContext.AddStep(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.OperationType,System.Object)">
            <summary>
            입력된 WorkStep 개체를 입력된 OperationType에 맞는 목록에 추가합니다. 
            WorkStep 개체의 OperationType에 해당하는 목록에 이미 WorkStep이 존재하는 경우 
            해당 목록에서 WorkStep 개체를 제거한 뒤에 새로운 OperationType에 맞는 목록에 추가합니다.
            </summary>
            <param name="step">목록에 추가할 WorkStep 개체입니다.</param>
            <param name="type">WorkStep을 추가할 목록의 종류입니다.</param>
            <param name="reason">WorkStep의 OperationType 판단 사유입니다. 기본값은 null입니다.</param>
            <summary>
            Adds the specified <em>WorkStep</em> object to the list of <em>WorkSteps</em> having the same specified <em>OperationType</em> properties.
            If the specified <em>WorkStep</em> is already in one of the list of <em>WorkSteps</em> with the same <em>OperationType</em>, the specified <em>WorkStep</em> will be removed from the previous list and added to the new <em>WorkStep</em> list corresponded to the specified <em>OperationType</em>.
            </summary>
            <param name="step">The specified <em>WorkStep</em> to add to the list of <em>WorkSteps</em> of the specified <em>OperationType</em>.</param>
            <param name="type">The type indicating which list to add the specified <em>WorkStep</em>.</param>
            <param name="reason">The reason explaining the specified <em>OperationType</em> of the specified <em>WorkStep</em> is set or changed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeContext.RemoveStep(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            입력된 WorkStep 개체를 WorkStep의 OperationType에 해당하는 목록에서 제거합니다.
            </summary>
            <param name="step">제거 대상 WorkStep 개체입니다.</param>
            <summary>
            Removes the specified <em>WorkStep</em> object from the list of <em>WorkSteps</em> of the corresponding <em>OperationType</em> property.
            </summary>
            <param name="step">The specified <em>WorkStep</em> to remove from the list.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.JobChangeContext.GetList(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            입력된 WorkStep 개체가 속한 목록을 반환합니다.
            </summary>
            <param name="step">대상 WorkStep 개체입니다.</param>
            <returns>입력된 WorkStep 개체가 속한 목록입니다. WorkStep이 속한 목록이 존재하지 않는 경우 null을 반환합니다.</returns>
            <summary>
            Gets the list of <em>WorkSteps</em> of the corresponding <em>OperationTypes</em> where the specified <em>WorkStep</em> object belongs to.
            </summary>
            <param name="step">The specified <em>WorkStep</em> to seek the list.</param>
            <returns>The list of <em>WorkStep</em> where the specified <em>step</em> belongs to. If no matchin list is found, return null.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AssignEqp">
            <summary>
            JobChangeAgent에서 사용되는 대상 공정에 할당된 설비정보에 대한 정보를 담고 있는 Class
            </summary>
            <summary>
            Contains the information of equipment assigned to the specified step, used by <em>JobChangeAgent</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AssignEqp.WorkStep">
            <summary>
            설비가 할당된 WorkStep 정보입니다.
            </summary>
            <summary>
            Gets the <em>WorkStep</em> information that has equipment assigned.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AssignEqp.Target">
             <summary>
             작업중인 장비와 Mapping 되는 시뮬레이션 장비 객체입니다.
            </summary>
             <summary>
             Gets the mapping information of the current working equipment as simulation equipment object. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AssignEqp.IsAssigned">
             <summary>
             이번시점에 설비가 할당되었는지에 대한 여부를 나타냅니다.
            </summary>
             <summary>
             Gets a value to indicate if the equipment is assigned for this instance. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AssignEqp.#ctor(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            생성자
            </summary>
            <param name="workStep">대상공정</param>
            <param name="eqp">설비</param>
            <summary>
            Initializes a new instance of the class <em>AssignEqp</em> with the specified <em>workStep</em> object with the assigned <em>eqp</em>.
            </summary>
            <param name="workStep">The <em>WorkStep</em> to assign <em>eqp</em></param>
            <param name="eqp">The equipment to be allocated to <em>workStep</em>.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.OutProfile">
            <summary>
            This the class the provides the features to calculate Out Profile. 
            </summary>
            <remarks>Out Profile consist of OutSegment. If X,Y axis value is limited, users can</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.MaxQty">
            <summary>
            Set the Max value of Y axis (Quantity). If Max value is not configured, float type MaxValue is returned.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.MaxTime">
            <summary>
            Set the Max value of X axis (Time). If Max value is not configured, float type MaxValue is returned.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.AllSegments">
            <summary>
            Returns the input OutSegment. These are the OutSegments that are not affected by Max limitation. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.RestrictSegments">
             <summary>
            Return the OutSegment restricted by Max value. 
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.First">
            <summary>
            Return the first OutSegment. If no Segment is registered, return NULL.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.Last">
            <summary>
            Return the last OutSegment. If no Segment is registered, return NULL.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutProfile.HasZeroPointAxisX">
            <summary>
            Check if Zero Point value exist in X axis. .
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Constructor.
            </summary>
            <param name="maxTime">The Max value of X axis(Time). If no value is configured, NULL is returned.</param>
            <param name="maxQty">The Max value of Y axis(Quantity). If no value is configured, NULL is returned.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Remove(Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Remove OutSegment.
            </summary>
            <param name="seg">The Segment to be removed. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.InsertLastBoundary">
             <summary>
            Create the last Segment that gradient is 0 due to Max limitation. 
             </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.SetMax(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Configure Maximum Boundary. 
            </summary>
            <param name="maxTime">The maximum time value. If value is NULL, there is no maximum value. </param>
            <param name="maxQty">The maximum quantity value. If value is NULL, maximum value is not limited. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetBoundaryTime(System.Single)">
            <summary>
            Check Boundary value for X axis(Time). If X axis exceeds Max value, Max value is returned. 
            </summary>
            <param name="time">The time value of X axis. </param>
            <returns>Return Time value adjusted considering Boundary.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.SafeGetQty(System.Single)">
            <summary>
            Check Boundary value for Y axis(Quantity).
            </summary>
            <param name="qty">The quantity value of Y axis.</param>
            <returns>Return Quantity value adjusted considering Boundary.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Shift(System.Single,System.Single,System.Boolean)">
            <summary>
            Shift Profile
            </summary>
            <param name="shiftX">X axis increment.</param>
            <param name="shiftY">Y axis increment.</param>
            <param name="positive">If true, Shift first and consider only positive numerals. If false, Shift Profile as it is.  </param>
            <returns>Returns shifted Prfofile. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetQty(System.Single,System.Boolean)">
            <summary>
            Calculate the Y coordinate through input X coordinate. 
            </summary>
            <param name="time">Time x coordinate value. </param>
            <param name="isEnd">Configure whether to search value based on End. </param>
            <returns>Return the Y coordinate quantity value corresponding to the input x coordinate. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetQty(System.Single,System.Single@,System.Boolean)">
            <summary>
             Calculate the Y coordinate through input X coordinate. 
            </summary>
            <param name="time">Time x coordinate value. </param>
            <param name="slope">Gradient value.</param>
            <param name="isEnd">Configure whether to search value based on End. </param>
            <returns>Return the Y coordinate quantity value corresponding to the input x coordinate. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetTimePoints">
            <summary>
            Return x coordinates included in Profile. 
            </summary>
            <returns>Return X coordinate string list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetFirstOverTime(System.Single)">
            <summary>
            Return the first time when quantity hits targetQty. 
            </summary>
            <param name="qty">The quantity value to be inquired. </param>
            <returns>Returne x coordinate time value. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.MakeContinuous">
            <summary>
            Create Profile as a form of Continous type. 
            </summary>
            <returns>Return Profile as a form of Continous type. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.MakeConvex">
            <summary>
            Create Convex type Profile. 
            </summary>
            <returns>Return Convex type Profile. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.AddSegmentList(System.Collections.Generic.List{Mozart.SeePlan.Simulation.OutSegment},Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Add Segment.
            </summary>
            <param name="list">The target list to add Segment. </param>
            <param name="segment">Segment to be added. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.AddSegment(System.Single,System.Single,System.Single)">
            <summary>
            Add Segment.
            </summary>
            <param name="x">X coordinate. </param>
            <param name="y">Y coordinate. </param>
            <param name="slope">Gradient</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.AddSegment(Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Add Segment.
            </summary>
            <param name="seg">Segment to be added.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.AddRangeSegement(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.OutSegment})">
            <summary>
            Add Segment.
            </summary>
            <param name="segments">The list of Segment to be added.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Scale(System.Single)">
            <summary>
            Scale Quantity axis(Y axis). 
            </summary>
            <param name="scale">The Factor value to Scale. </param>
            <returns>Return scaled Profile. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Plus(Mozart.SeePlan.Simulation.OutProfile)">
            <summary>
            Sum Profile. 
            </summary>
            <param name="other">Profile to be summed. </param>
            <returns>Returns the summed result of Profile. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Subtract(Mozart.SeePlan.Simulation.OutProfile,System.Boolean)">
            <summary>
            Deduct input Profile from my Profile. 
            </summary>
            <param name="other"></param>
            <param name="positive"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.MinMerge(Mozart.SeePlan.Simulation.OutProfile)">
            <summary>
            Merge one out of two Profiles and create OutProfile with Min value. 
            </summary>
            <param name="other">Profile to be merged. </param>
            <returns>Create new OutProfile that is merged. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.MaxMerge(Mozart.SeePlan.Simulation.OutProfile)">
            <summary>
            Merge one out of two Profiles and create OutProfile with Max value. 
            </summary>
            <param name="other">Profile to be merged. </param>
            <returns>Create new OutProfile that is merged. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.Clone">
            <summary>
            Create a copy of OutProfile. 
            </summary>
            <returns>Create a new object and create a copy of OutProfile. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetFirstCrossPoint(Mozart.SeePlan.Simulation.OutProfile)">
            <summary>
            Get the first Crossed coordinates. 
            </summary>
            <param name="other">Target Profile. </param>
            <returns>The crossed coordinates. Returns NULL if there are no crossed coordinates. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.GetLotQty(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Returns the entity quantities. 
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Return quantity. If no additional modification is done, UnitQty is returned. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutProfile.AddLotList(System.Single,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            Add entity to Profile and creage Segment. 
            </summary>
            <param name="time">The time information that entity is included. X axis is used. </param>
            <param name="list">Target entity list.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.OutPt2D">
            <summary>Saves the second demension(X,Y) point value used from OutProfile. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutPt2D.#ctor(System.Single,System.Single)">
            <summary>
            Creates 2D Point.
            </summary>
            <param name="x">X axis value</param>
            <param name="y">Y axis value</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutPt2D.UpdateX(System.Single)">
            <summary>
            Updates X axis value. 
            </summary>
            <param name="x">Target X axis value to change. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutPt2D.UpdateY(System.Single)">
            <summary>
            Updates Y axis value.
            </summary>
            <param name="y">Target Y axis value to change.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutPt2D.IsSamePt(Mozart.SeePlan.Simulation.OutPt2D)">
            <summary>
            Compares the x,y axis of the specified <em>OutPt2D</em> with the x,y axis of this instance to check if both are equal. 
            </summary>
            <param name="pt">The comparison point value</param>
            <returns>If both X,Y axis value are equal, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutPt2D.CompareTo(Mozart.SeePlan.Simulation.OutPt2D)">
            <summary>
            Compares 2D value. The values are compared in X, Y order. 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.OutSegment">
            <summary>
            The Segment class to calculate OutProfile. 
            Segment consist of X,Y coordinates and gradient. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutSegment.Point">
            <summary>
            The second demension coordinates. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutSegment.X">
            <summary>
            X axis time value. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutSegment.Y">
            <summary>
            Y axis quantity value. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.OutSegment.Slope">
            <summary>
            Gradient.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the class <em>OutSegment</em> with the specfied x axis time value, specified y axis time value and specified gradient.
            </summary>
            <param name="x">X axis time value.</param>
            <param name="y">Y axis quantity value.</param>
            <param name="slope">Gradient value.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.GetQty(System.Single)">
            <summary>
            Return the Y coordinate(Quantity) of the corresponding X axis value. .
            </summary>
            <param name="time">X axis time coordinate.</param>
            <returns>Y axis quantity value. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.GetTime(System.Single)">
            <summary>
            Return X coordinate(Time) of the corresponding Y coordinate(Quantity) value . 
            </summary>
            <param name="qty">Y axis quantity coordinate..</param>
            <returns>X axis time value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.GetMinMaxQty(System.Single,System.Single@,System.Single@)">
            <summary>
            Calculate the Min, Max quantity vaule until 'time'. 
            </summary>
            <param name="time">X axis time value. .</param>
            <param name="maxQty">Maximum quantity value.</param>
            <param name="minQty">Minimum quantity value.</param>
            <returns>Value is always true.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.GetFirstOverTime(System.Single)">
            <summary>
            Calcualte the firs X coordinate that exceeds the Y coordinate quantity.
            </summary>
            <param name="quantity">Target Y coordinate value.</param>
            <returns>Return X coordinate. If gradient is 0, return X coordinate. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.CompareTo(Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Compare with other Segment. 
            </summary>
            <param name="other">Target Segment for comparison. </param>
            <returns>If X coordinate of my Segment is smaller, return negative number, if the X coordinate of target Segment is smaller, return positive number.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.Scale(System.Single)">
            <summary>
            Scale Y axis and gradient value. 
            </summary>
            <param name="scale">Scaling Factor value.</param>
            <returns>Return scaled Segment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.Shift(System.Single,System.Single,System.Boolean)">
            <summary>
            Shift Segment..
            </summary>
            <param name="shiftX">X value to shift.</param>
            <param name="shiftY">Y value to shift.</param>
            <param name="positive">Shift postive numeral only. </param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.ChangeSlope(System.Single)">
            <summary>
            Change gradient. 
            </summary>
            <param name="slope">The gradient value to be changed. </param>
            <returns>Return the OutSegment with changed gradient. A new instance is created and returned. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.GetSlope(Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Calculate gradient among Segments. 
            </summary>
            <param name="seg">The Segment value to calculate gradient. </param>
            <returns>Return gradient value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.UpdateQty(System.Single)">
            <summary>
            Update Y axis quantity value of the Segment. 
            </summary>
            <param name="qty"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.Compare(Mozart.SeePlan.Simulation.OutSegment,System.Single,System.Boolean)">
            <summary>
            Compare Y coordinate value of Sgement. 
            </summary>
            <param name="other">Subject to compare. </param>
            <param name="current">Current value of X coordinate. </param>
            <param name="upper">If true, apply upper. If false, apply lower. </param>
            <returns>Return the upper Segment. If y coordinates are equal, compare through gradient. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.ToString">
            <summary>
            Express as string type. The format is {x},{y},{slope}.
            </summary>
            <returns>Retun {x},{y},{slope} format string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.OutSegment.IsIncludeSegment(Mozart.SeePlan.Simulation.OutSegment)">
            <summary>
            Check if Segment is already included. 
            </summary>
            <param name="other">The target Segment to check if it is already included. </param>
            <returns>If Segment is included, return true, or else, return false. </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkEqp">
            <summary>The entity class to deploy Job Change Agent logic.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkEqp.Target">
            <summary>
            The simulation equipment object which is mapped to equipment in progress.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkEqp.AvailableTime">
            <summary>
            The next available time of equipment to load entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkEqp.Data">
            <summary>
            The user defined data property of WorkEqp.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkEqp.#ctor(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Consturctor.
            </summary>
            <param name="eqp">Target equipment object</param>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkEqp.Step">
            <summary>
            The Step which target equipment is processing. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkEqp.Stop">
            <summary>
            Determine whether to block additional loading to the equipment.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkAgent">
            <summary>
            The class that manages equipment group information that requires Job Change decision making.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WorkAgent.unassigns">
            <summary>
            List of equipment decided to be Down.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.Id">
            <summary>
            WorkAgent ID. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.AgentType">
            <summary>
            WorkAgent의 Job Change 의사결정 방식입니다.
            </summary>
            <summary>
            Gets the JobChange decision type of the <em>WorkAgent</em>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.Groups">
            <summary>
            List of product group(WorkGroup) to be handled through WorkAgent. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.Interval">
             <summary>
            The execution cycle of WorkAgent logic. 
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.LastActiveTime">
            <summary>
            The last execution time of WorkAgent.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.Factory">
            <summary>
            Root Simulation Model object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.Now">
            <summary>
            The current time in Time data type.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.NowDT">
            <summary>
            The current time in DateTime data type.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.LoadableWorkSteps">
            <summary>
            The information of WorkStep per equipment that could be processed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.ThreadGroup">
            <summary>
            Thread job group key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.IsReProfiling">
            <summary>
            설비할당 변경 후 변경이 일어난 WorkStep이 속하는 WorkGroup의 Profile 재구성 여부입니다.
            </summary>
            <summary>
            Gets a value to indicate whether to reconstruct profile of the <em>WorkGroup</em> when the <em>WorkStep</em> in this group changed due to equipment allocation change. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.IsReleaseDownEqp">
            <summary>
            Down으로 판단된 WorkStep에서 설비 할당 해제 여부입니다.
            </summary>
            <summary>
            Gets a value to indicate whether to release the allocated equipment from the <em>WorkStep</em> assumed to be "Down".
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.AddDummyProfile">
            <summary>
            작업물 로딩이 아닌 Idle, Setup, PM에 대한 프로파일을 작성할지 여부를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets a value to indicate whether to create profile for IDLE, SETUP and PM.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkAgent.MaximumProfileIterationCount">
            <summary>
            하나의 WorkGroup에 대한 프로파일 작성 횟수의 최대값을 가져오거나 설정합니다. 
            값이 0 또는 음수인 경우 프로파일 작성 횟수의 제한이 없음을 의미합니다. 
            프로파일 작성 횟수를 초과하는 경우 ErrorLister에 경고 메시지가 기록됩니다.
            </summary>
            <summary>
            <para>Gets and sets the max count to write profile for one <em>WorkGroup</em>.</para>
            <para>If the max count is set as either 0 or negative number, this means there will be no count limits for writing the profile for the WorkGroup.</para>
            <para>If the profile is written more than the given max count, a warning message is written to the <em>ErrorLister</em>.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.#ctor(System.String)">
            <summary>
            Consturctor.
            </summary>
            <param name="id">ID.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.Down(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            지정된 설비를 Job Change 대상 공정의 작업 가능한 설비에서 제외합니다.
            </summary>
            <param name="wstep">Job Change 대상 공정입니다.</param>
            <param name="downEqp">제외된 설비입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.Up(Mozart.SeePlan.Simulation.WorkStep,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            지정된 설비를 Job Change 대상 공정의 작업 가능한 설비로 등록합니다.
            </summary>
            <param name="wstep">Job Change 대상 공정입니다.</param>
            <param name="upEqp">작업 가능한 설비입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.GetFollowingWorkStep(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>대상 작업물이 유입 대상으로 등록된 WorkStep 개체를 반환합니다.</summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>대상 작업물이 유입 대상으로 등록된 WorkStep이 존재하는 경우 해당 WorkStep 개체입니다. 그 외의 경우 null입니다.</returns>
            <summary>Returns the <em>WorkStep</em> object of the specified entity.</summary>
            <param name="hb">The entity to seek the <em>WorkStep</em></param>
            <returns>The <em>WorkStep</em> object in which the specified <em>hb</em> will arrive to;otherwise, null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.GetLoadableEqpList(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkStep@)">
            <summary>Return the list of equipment that could work.</summary>
            <param name="hb">Target entity.</param>
            <param name="followingStep">Target entity Contains WorkStep.</param>
            <returns>Return list list of equipment that could work.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.GetGroup(System.Object)">
            <summary>Return the <em>WorkGroup</em> from the registered <em>WorkGroup</em> that is the key. A new <em>WorkGroup</em> is created and returned if no groupe exists.</summary>
            <param name="key">Search key.</param>
            <returns>Return the matching result WorkGroup.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkAgent.TryGetGroup(System.Object)">
            <summary>Return the <em>WorkGroup</em> from the registered <em>WorkGroup</em> from the input key. If there is no matching result, return null.</summary>
            <param name="key">Search key.</param>
            <returns>Return the matching result <em>WorkGroup</em>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkGroup">
            <summary>
            The class of WorkGroup that is handled by the JobChange managing equipment group.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Steps">
            <summary>
            The list of WorkStep handled by Work Agent.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Agent">
            <summary>
            Work Agent object that includes WorkGroup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Factory">
            <summary>
            Root Simultion Model.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Key">
            <summary>
            WorkGroup key.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Ordered">
            <summary>
            The property that determines whether to compose the profile of each WorkStep in order.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkGroup.Data">
            <summary>
            The user defined property data of the WorkGroup.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.#ctor(Mozart.SeePlan.Simulation.WorkAgent,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="agent">WorkAgent.</param>
            <param name="key">WorkGroup key.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.Calculate">
            <summary>
            Calculates Input, Output profile. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.CalculateProfile(System.Boolean)">
            <summary>
            Calculate Input, Output profile for the registered WorkStep.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.CalculateProfile(Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
             Calculate Input profile for the target WorkStep.
            </summary>
            <param name="wstep">Target WorkStep.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.AddWip(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.Time,System.Object,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Add WIP to WorkStep.
            </summary>
            <param name="wip">Target entity.</param>
            <param name="arrivalTime">The expected arrival time of target entity.</param>
            <param name="stepKey">Step object Key.</param>
            <param name="step">The initialization Step of the target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.GetStep(System.Object,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Search and return WorkStep registered to WorkGroup.
            Create and return WorkStep in case there is no information in the target Step.
            </summary>
            <param name="key">The key used to search WorkStep.</param>
            <param name="step">
            The target Step that manages the WorkStep to be searched. 
            If WorkStep does not exist, the corresponding Step creates WorkStep to manage.
            </param>
            <returns>Return the searched WorkStep object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkGroup.TryGetStep(System.Object)">
            <summary>
            Search and return WorkStep registered to WorkGroup.
            If there is no registered WorkStep, return null.
            </summary>
            <param name="key">Step to be searched.</param>
            <returns>Return the searched WorkStep object.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkLoader">
            <summary>
            This is the class to calculate the work load of the Work Group during Job Change logic deployment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLoader.EqpList">
            <summary>
            The list of work eqp to handle specific WorkGroup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLoader.Group">
            <summary>
            Target WorkGroup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLoader.Steps">
            <summary>
            프로파일을 계산할 WorkStep의 목록을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLoader.LockAdvance">
            <summary>
            Determines whether to block additional loading to the available equipment of the target Group.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLoader.Data">
            <summary>
            The user defined property data of the WorkGroup.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLoader.#ctor(Mozart.SeePlan.Simulation.WorkGroup,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkEqp},System.Boolean)">
            <summary>
            Constructor. 
            </summary>
            <param name="group">The target Work group to calculate work load.</param>
            <param name="eqpList">The list of equipment to process Step of target work group.</param>
            <param name="lockAdvance">Determines whether to block additional loading to the available equipment of the target Group. Default value is false.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLoader.#ctor(Mozart.SeePlan.Simulation.WorkGroup,System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkStep},System.Collections.Generic.List{Mozart.SeePlan.Simulation.WorkEqp},System.Boolean)">
            <summary>
            지정된 WorkGroup의 WorkStep들에 대한 프로파일을 계산하는 새로운 WorkLoader를 생성합니다.
            </summary>
            <param name="group">The target Work group to calculate work load.</param>
            <param name="stepList">프로파일을 계산할 WorkStep 개체의 목록입니다.</param>
            <param name="eqpList">The list of equipment to process Step of target work group.</param>
            <param name="lockAdvance">Determines whether to block additional loading to the available equipment of the target Group. Default value is false.</param>
            <summary>
            Initializes a new instance of the <em>WorkLoader</em> class to calculate profile for the <em>WorkStep</em> of the specified <em>WorkGroup</em>. 
            </summary>
            <param name="group">The target Work group to calculate work load.</param>
            <param name="stepList">The list of <em>WorkStep</em>s to calculate profile.</param>
            <param name="eqpList">The list of equipment to process <em>WorkStep</em> of target work group.</param>
            <param name="lockAdvance">Determines whether to block additional loading to the available equipment of the target Group. Default value is false.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLoader.Load">
            <summary>
            Perform loading from WorkEqp.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLoader.AddProfile(Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            Add WorkLot to Profile. 
            Add the target WLot to the Profile of the WorkStep in the current Step.
            </summary>
            <param name="wlot"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkLot">
            <summary>
            The entity information that is used for Job Change logic deployment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.Batch">
            <summary>
            The information of the actual Batch to be mapped. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.Lot">
            <summary>
            The information of the actual Lot to be mapped. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.StepKey">
            <summary>
            WorkStep key of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.Step">
            <summary>
            The current Step of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.AvailableTime">
            <summary>
            The available time of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.InTime">
            <summary>
            The In time of the entity to the current Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.OutTime">
            <summary>
             The Out time of the entity in current Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.InEqp">
            <summary>
            IThe equipment used to calculate InTime/OutTime
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkLot.ProfileType">
            <summary>
            WorkLot이 나타내는 프로파일의 유형을 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the profile type represented by the <em>WorkLot</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLot.#ctor(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.Time,System.Object,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Contructor.
            </summary>
            <param name="hb">The actual entity information object. </param>
            <param name="availableTime">The time entity can start to process from the current Step.</param>
            <param name="stepKey">The Key of the current Step of the entity.</param>
            <param name="step">The current Step of entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkLotComparer">
            <summary>
            WorkLot의 우선순위 비교자 클래스입니다.
            </summary>
            <summary>
            Compares two <em>WorkLot</em> objects.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkLotComparer.Compare(Mozart.SeePlan.Simulation.WorkLot,Mozart.SeePlan.Simulation.WorkLot)">
            <summary>WorkLot의 가용 시간 기준으로 두 WorkLot의 우선순위를 비교합니다.</summary>
            <param name="x">WorkLot entity 'x' for comparison.</param>
            <param name="y">WorkLot entity 'y' for comparison.</param>
            <returns>
            	<para>This is the 32 bit integer with mathematical symbols to show the prority relationship among two compared PegParts.</para>
            	<para>If the value is negative, the priority of x is higher than y.</para>
            	<para>If the value is 0, the priority of both WorkLot are same.</para>
            	<para>If the value is positive, the priority of x is lower than y.</para>
            </returns>       
            <summary>Compares the available time of the two <em>WorkLot</em> objects and returns n integer that indicates their relative position in the sort order.</summary>
            <param name="x">The first <em>WorkLot</em> object to compare to <em>y</em>.</param>
            <param name="y">The second <em>WorkLot</em> objcet to compare to <em>x</em>.</param>
            <returns>
            	<para>A 32-bit signed integert that indicates the relative values of <em>x</em> and <em>y</em> as shown as the following.</para>
            	<para>Less than zero : <em>x</em> precedes <em>y</em> in the sort order.</para>
                <para>Zero : <em>x</em> occurs in the same position as <em>y</em> in the sort order.</para>
                <para>Greater than zero : <em>x</em> follows <em>y</em> in the sort order.</para>
            </returns>       
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkManager">
            <summary>
            The class that manages the model that provied Job Change decision making.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Name">
            <summary>
            Work Manager name.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Priority">
            <summary>
            The section where ICalendarEvent property is implemented. This is the execution priority of the created Events.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Timing">
            <summary>
            The section where ICalendarEvent property is implemented.
            Event trigger time type. When there are Events with same time, 
            the execution priority is set according to the trigger time type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Duration">
            <summary>
            The section where ICalendarEvent property is implemented.
            This is the Manager Logic cycle.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.FireAtStart">
            <summary>
            The section where ICalendarEvent property is implemented.
            Determines whether to trigger Event when Simulation starts. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.StartBoundary">
            <summary>
            The section where ICalendarEvent property is implemented.
            The time when Event can be triggered.  Event could be triggered between StartBoundary ~ EndBoundary.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.EndBoundary">
            <summary>
            The section where ICalendarEvent property is implemented..
            The time when Event can be stopped. Event could be stopped between StartBoundary ~ EndBoundary. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Initialized">
            <summary>
            WorkManager가 초기화 되었는지 여부를 가져옵니다. 
            초기화 되기 전에 추가된 작업물은 임시로 저장되어 있다가 초기화 시점에 WorkLot 개체로 변경됩니다.
            </summary>
            <summary>
            Gets a value to indicate whether the <em>WorkManager</em> is initialized.
            The added entity before intiailization will be stored in a temporary location and will be created as <em>WorkLot</em> during initialization.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkManager.Agents">
            <summary>
            Registered WorkAgent list.
            WorkAgent is required for each equipment group that needs Job Change decision making.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.GetAgent(System.String)">
            <summary>
            WorkManager에 등록된 WorkAgent를 찾아 반환합니다. 
            </summary>
            <param name="id">검색 대상 id 입니다.</param>
            <returns>검색된 WorkAgent 객체입니다.</returns>
            <summary>
            Returns the <em>WorkAgent</em> from the <em>WorkManager</em> mathcing the specified ID. 
            </summary>
            <param name="id">The ID to seek for.</param>
            <returns>The <em>WorkAgent</em> from the <em>WorkManager</em> that matches the specified <em>id</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.Add(System.String)">
            <summary>
            Register WorkAgent.
            Create and return WorkGroup through input ID.
            </summary>
            <param name="id">WorkAgent ID string.</param>
            <returns>Return registered WorkAgent.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.Add(Mozart.SeePlan.Simulation.WorkAgent)">
            <summary>
            Register input WorkAgent.
            </summary>
            <param name="wagent">Target WorkAgent to be included.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.Remove(System.String)">
            <summary>
            Remove WorkAgent matching the input ID.
            </summary>
            <param name="id">ID of the WorkAgent to delete.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.Find(System.Predicate{Mozart.SeePlan.Simulation.WorkAgent})">
            <summary>
            Search and return registered WorkAgent through input keyword. 
            </summary>
            <param name="match">Target WorkAgent to search.</param>
            <returns>Return matching result WorkAgent object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.GetLoadableEqpList(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.WorkStep@)">
            <summary>
            Search and return the equipment that could load the target entity from all registered WorkAgent.
            </summary>
            <param name="hb">Target entity.</param>
            <param name="isFollowing">Determine if the target entity is part of WorkAgent management.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.UpdateLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Update entity information. 
            </summary>
            <param name="hb">The entity to update information.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.AddLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            작업물을 WorkManager에 등록합니다.
            </summary>
            <param name="hb">등록 대상 작업물입니다.</param>
            <summary>
            Adds the specified entity to the <em>WorkManager</em>
            </summary>
            <param name="hb">The entity to add.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkManager.RemoveLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            WorkManager에 등록된 작업물을 제거합니다.
            </summary>
            <param name="hb">제거 대상 작업물입니다.</param>
            <summary>
            Removes the specified entity from the <em>WorkManager</em>
            </summary>
            <param name="hb">The entity to remove.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkStep">
            <summary>
            The class of state information of Step for JobChange.
            JobChange information is created referred to the Key in JobChangeAgent.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Group">
            <summary>
            The WorkGroup including WorkStep. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Agent">
            <summary>
            WorkAgent of WorkStep.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Factory">
            <summary>
            Root Simultion Model.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Key">
            <summary>
            WorkStep Key. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Steps">
            <summary>
            The list of Steps to be mananged by WorkStep. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.LoadableEqps">
            <summary>
            The list of equipment available to perform WorkStep(Job). 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.LoadedEqps">
            <summary>
            The list of equipment performing the WorkStep(Job).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.LoadedEqpDictionary">
            <summary>
            The list of equipment performing the Job.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.LoadedEqpCount">
            <summary>
            The numbers of equipment performing the Job(WorkStep).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Inflows">
            <summary>
            The list of WIP information to be going to the target Job.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.LoadedEqpIDs">
            <summary>
            설비 ID 목록입니다.
            </summary>
            <summary>
            Gets the list of equipment ID.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Priority">
            <summary>
            우선순위입니다.
            </summary>
            <summary>
            Gets the number to indicate the priority to get equipment assigned. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.OperationType">
            <summary>
            판단 정보입니다.
            </summary>
            <summary>
            Gets the <em>OperationType</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Reason">
            <summary>
            Operation Type 판단 사유입니다.
            </summary>
            <summary>
            Gets the reason of the <em>OperationType</em> value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Profiles">
            <summary>
            The list of Output target entities of the target Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.IsDown">
            <summary>
            Determines whether the target Step requires to be Down. If Down is required, set as true, or else, set as false.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Order">
            <summary>
            The order of the corresponding Step. This is used to compare the sequence among other WorkStep..
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Unassigns">
            <summary>
            The list of waiting WIPs in the current Step waiting from the Equipment when the Equipment processing the current Step have changed the state to Down.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Wips">
            <summary>
            Inflow WIP. It is the InFlow + previouse WorkStep composite Out Profiles.  
            It is initialized each time Out Profile is calculated from current WorkStep.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.ProfileAssignWips">
            <summary>
            Profile에 반영된 WorkLot 정보입니다.
            현 WorkStep의 Out Profile 계산 시마다 초기화됩니다.
            </summary>
            <summary>
            The <em>WorkLot</em> in the profile. 
            Resets each time out profile is calcuilated from the specified <em>WorkStep</em>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.AllowedArrivalGap">
            <summary>
            The variable for Job Change decision making.
            If the Inflow target entity's arrival time is later than the deisgnated time, 
            exchange the job to other job(Down) of the equipment that should be processing the corresponding entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.UpInterval">
            <summary>
            The variable for Job Change decision making.
            OutProfile 상 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.DownInterval">
            <summary>
            The variable for Job Change decision making.
            If the downtime of the equipment to process the target Step is longer than the designate time, 
            exchange the job to other job(Down) of the equipment that should be processing the corresponding entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.NewUpInterval">
            <summary>
            The variable for Job Change decision making.
            The minimum time not to change the job when the job is changed to the corresponding Step and started. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkStep.Data">
            <summary>
            The user defined property data of WorkStep.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.#ctor(Mozart.SeePlan.Simulation.WorkGroup,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="group">The WorkGroup to include WorkStep.</param>
            <param name="key">WorkStep Key.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.AddLoadableEqp(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Add equipment available for loading to the corresponding Step.
            </summary>
            <param name="aeqp">Target equipment to add.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.RemoveLoadableEqp(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Remove equipment available for loading from the corresponding Step.
            </summary>
            <param name="aeqp">Target equipment to remove.</param>
            <returns>If target equipment is removed properly, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.AddLoadedEqp(Mozart.SeePlan.Simulation.AoEquipment,System.Boolean)">
            <summary>
            Add working equipment to target Step. 
            </summary>
            <param name="aeqp">Equipment in progress.</param>
            <param name="isReal">
            <para>Inidicates a value whether to add the specified <em>aeqp</em> to the assigned equipment list during agent execution.</para>
            <para>Default is <em>true</em>.</para>
            </param>
            <remarks>
            When <em>isReal</em> is set as false, the specified equipment will not be added to the assigned equipment for allocation.
            <em>IsReal</em> property is used to whether to treat the specified equipment as virtual equipment to calculate profile to check if the current allocated equipment can handle the product flow and judge whether to activate(UP) or stop(Down) the specified equipment.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.RemoveLoadedEqp(Mozart.SeePlan.Simulation.AoEquipment,System.Boolean)">
            <summary>
            Remove equipment from the list of working equipmen of the current Step.
            </summary>
            <param name="aeqp">Target equipment to be removed.</param>
            <param name="isReal">
            <para>Inidicates a value whether to add the specified <em>aeqp</em> to the assigned equipment list during agent execution.</para>
            <para>Default is <em>true</em>.</para>
            </param>
            <returns>If target equipment is removed properly, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
            <remarks>
            When <em>isReal</em> is set as false, the specified equipment will not be added to the assigned equipment for allocation.
            <em>IsReal</em> property is used to whether to treat the specified equipment as virtual equipment to calculate profile to check if the current allocated equipment can handle the product flow and judge whether to activate(UP) or stop(Down) the specified equipment.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.IsLoadedEqp(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Determine whether the input equipment is the equipment loading the same Step.
            </summary>
            <param name="aeqp">Target equipment for distinction..</param>
            <returns>If the it is the equipment loading the same Step, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.ResetLoadedEqp">
            <summary>
            Initialize the currently processing equipment registered in the current Step.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.AddWip(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.Simulation.Engine.Time,System.Object,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Include inflow target WIP to the corresponding Step.
            Create WorkLot from input WIP information. WorkLot will be used from Job Change logic.  
            </summary>
            <param name="wip">Inflow target WIP(entity). </param>
            <param name="arrivalTime">Expected inflow time. .</param>
            <param name="stepKey">Step object key.</param>
            <param name="step">Step object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.Contains(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물이 공정 유입 대상 재공인지 여부를 반환합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <returns>True인 경우 작업물이 공정 유입 대상입니다. 그 외의 경우 작업물은 공정 유입 대상이 아닙니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.AddWip(Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            해당 Step 에 유입 대상 재공을 추가합니다.
            </summary>
            <param name="wlot">유입대상 재공입니다.</param>
            <summary>
            Adds the specified <em>WorkLot</em> to the <em>WorkStep.Steps</em>.
            </summary>
            <param name="wlot">The entity to arrive to the <em>WorkStep</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.RemoveWip(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Remove the target entity from WorkStep management.
            The calculated Profile before this step does not change.
            The Profile that is already removed should be calculated again. 
            </summary>
            <param name="wip">Target entity.</param>
            <returns>Return the result whether the target entity is removed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.RemoveWip(Mozart.SeePlan.Simulation.WorkLot)">
            <summary>
            Remove the target entity from WorkStep management.
            The calculated Profile before this step does not change.
            The Profile that is already removed should be calculated again.
            </summary>
            <param name="wlot">Target entity.</param>
            <returns>Return the result whether the target entity is removed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.Reset(System.Boolean)">
            <summary>
            Delete and initialize the calculated In/Out profile.
            </summary>
            <param name="resetWips"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WorkStep.FindLot(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Search for the WorkLot of the corresponding entity.
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Returns the WorkLot of the corresponding entity. If there is no matching results, return NULL.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoBucketer">
            <summary>This is the Simulation object for handling Bucket which performs the role of equipment.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBucketer.blocker">
            <summary>
            This is used to constraint the quantities of entities to be processed simultaneously from Bucket.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBucketer.locks">
            <summary>
            The product Bucket Key Set restricted to be processed due to Capacity Bucket constraint from Bucketer.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.IsBucketing">
            <summary>
            Determines and return if the current state is possible for Bucketing.
            </summary>
            <remarks>
            Return <strong>false</strong> when additional Bucket loading cannot be performed for a while due to Bucket load constraint and Capacity limit.
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.IsFifo">
            <summary>
            Determines and returns whether the Dispatching method for WIPs in Wait state is FIFO or not during Bucketing.
            The default method is FIFO. Set as false to perform Dispatching through user specified definition.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Key">
            <summary>
            Bucket Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Bucket">
            <summary>
            Capacity Bucket of Bucketer.
            All Bucketer will have Capacity Bucket configured. 
            If there is a Bucket with no Capacity limit, Dummy Bucket is automatically allocated.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.RollingHours">
            <summary>
            The Rolling time of Bucket.
            The output of Capcity Bucket is reset at Rolling point,
            and the logic to initialize other confugration value can be perforemd here. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Agent">
            <summary>
            This is the BucketAgent managing Bucketer.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Factory">
            <summary>
            This is the root Simulation object of the entire Factory. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Waits">
            <summary>
            The list of WIPs currently in Wait state for Bucketing.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Capacity">
            <summary>
            The maximum quantities of entities(HandlingBatch) that Bucketer could process simulataneously. When there is no limit, int.MaxValue is returned.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.Take(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Load target entity to Bucketer to process the entity through Bucketer.
            Add entities to Bucketer and in case the entities could be processed right away, Bucketing is performed.
            </summary>
            <param name="hb">Target entities for Bucketing.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.Take(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean)">
            <summary>
            Load target entity to Bucketer to process the entity through Bucketer..  
            </summary>
            <param name="hb">Target entities for Bucketing.</param>
            <param name="lockDispatch">Determines whether the state should be changed to Wait for Dispatching from Bucketer.
            If true,the entities are in Wait state until Dispatching is triggered. 
            If false, the entites are Dispatched for Bucketing.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.Add(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            If target entities for Bucketing is selected as Dispatching result, Bucketing is performed for the corresponding entities.
            The entities are processed and Bucket ouput is updated. 
            From this point until Bucketing, the entities are in standby from Bucketer, and removed from Bucketer when time is over. 
            </summary>
            <param name="entity">The target entity object for Bucketing..</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.GetNextInTime">
            <summary>
            The time when the next entities could be loaded.  
            </summary>
            <returns>Returns the time when the next entities could be loaded. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.CanDispatch">
            <summary>
            Determines whether additional Bucketing could be done from the current Bucketer. 
            </summary>
            <returns>If additional Bucketer could be loaded, return <strong>true</strong>
            or else, return <strong>false</strong></returns>
            <remarks>Determines whether additional Bucketer could be loaded for both Capacity perspective for simultaneous processing 
            and Bucketer handling. </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.Rolling">
            <summary>
            Rolling is performed in a cycle according to the configured RollingHour and 
            the constraints from the previous Bucket is deactivated and Dispatching is performed for the 
            WIPs in Wait state. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBucketer.Dispatch">
            <summary>   
            Select WIP waiting in Bucketer to perform Bucketing according to priority order. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.WeightComparer">
            <summary>
            Comparer used by Dispatcher to evaluate waiting WIPs .
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.WeightEval">
            <summary>
            Weight Evaluator
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBucketer.Preset">
            <summary>
            The weight preset
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BucketAgent">
            <summary>
            The root Simulation object that manages Bucketer and in charge of Bucketing.
            BucketAgent allocates Bucketer to the entities for Bucketing and controls the entire process from start to the end of Bucketing. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketAgent.Factory">
            <summary>
            Root Simulation object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketAgent.Output">
            <summary>
            Output Port of BucketAgent object. 
            The entities going through BucketAgent is passed through Output Port as different object.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketAgent.WaitUntilFire">
            <summary>
            Determines for Bucketing standby. If set as  <strong>true</strong>, 
            The entities are on standby for Dispatching from Bucketer (AoBucketer) 
            registered in BucketAgent. Default value is <strong>false</strong>.        
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketAgent.IsBucketing">
            <summary>
            Determines whether to use Bucketing. 
            The Bucketing is decided by determining whether BucketManager is active or not. 
            BucketManager manages all Bucket information for Bucketing. 
            When BucketManager is created, the default value is set as True. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BucketAgent.BucketManager">
            <summary>
            Bucket information management object. BucketManager manages Capacity Bucket and 
            Constraint Bucket information used from Bucketer. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.GetBucketer(System.Object)">
            <summary>
            Searches for Bucketer according to Bucketer Key information
            If there is no created Bucketer, NULL is returned. 
            </summary>
            <param name="key">Bucketer Key.</param>
            <returns>The bucketer active object that matches the specified <em>key</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.AllBucketers">
            <summary>
            Returns the list of Bucketer mananged by BucketAgent. 
            </summary>
            <returns>Returns the list of registered Bucketer.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.LockDispatch">
            <summary>
            Set all entities in Bucketer registerd in BucketAgent on standby for Dispatching. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.UnlockDispatch">
            <summary>
            Start Dispatching from Bucketer registered in BucketAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.Take(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            This is used to Bucketing the entities in the current Step. 
            Searches for the appropriate Bucketer for the entities and inserts the entities to the corresponding Bucketer. 
            If Bucketer is not created for the entities, the logic to create Bucketer is called. 
            </summary>
            <param name="hb">Target entity object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.GetBucketTime(Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            Returns the Processing Time to apply Bucketing to target entity.
            </summary>
            <param name="entity">Target entity object </param>
            <param name="bucketer">Target Bucketer object. </param>
            <returns>Bucketing Processing Time.</returns>
            <remarks>It is designed to call [FEAction] BucketControl/GetBucketTime.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BucketAgent.GetNextInputDelay(Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.Simulation.AoBucketer)">
            <summary>
            Returns the time when additional entities could be input to the current Bucket
            in case additional Input is restricted due to Slot Capacitiy limit of the Bucket. 
            </summary>
            <param name="entity">Target entity.</param>
            <param name="bucketer">Target Bucketer.</param>
            <returns></returns>
            <remarks>When the following function is called, it is designed to call [FEAction] BucketControl/GetBucketInputDelay.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IBucket">
            <summary>
            Interface of Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucket.Key">
            <summary>
            Bucket Key
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucket.Enabled">
            <summary>
            Determines whether to configure Capacity or not. If false, Capacity is not considered.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucket.AddMove(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Add actual ouput quantities to target entity when processed in Bucket.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucket.AddMove(System.Single)">
            <summary>
            Add actual output quantities as much as the input quantities through Bucket.
            </summary>
            <param name="qty">Actual outpu quantities.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucket.CanMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Determines whether to add work considering Bucket's Capacity and Slant.
            </summary>
            <param name="hb">Target entity object</param>
            <param name="now"></param>
            <returns>If additional Bucketing is possible, return <strong>true</strong>, 
            or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucket.Rolling(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Perform Bucket Rolling.
            </summary>
            <param name="now">Current time.</param>
            <param name="atBoundary">Checks whether Rolling time is correspondent to Rolling cycle.</param>
            <param name="atDayChanged">Checks whether Rolling time is the change of day point.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucket.Compensate(System.DateTime,System.Single)">
            <summary>
            Add actual output of Bucket as portion. 
            </summary>
            <param name="now">Current time.</param>
            <param name="portion">Actual output portion.
            If Capacity is 1000, portion is 0.2, logic to add 200 actual output is formed.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IBucketManager">
            <summary>
            The Interface to manange Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucketManager.Enabled">
            <summary>
            Determine whether to perform Bucketing or not. If value is set as <strong>true</strong>, Bucketing is performed.
            If value is set as <strong>false</strong>, Bucketing is not performed. The default value is true. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucketManager.RollingHours">
            <summary>
            The Rolling cycle during Bucketing. The configuration could be changed through the property of BucketInit Control. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucketManager.InnerRollingMinutes">
            <summary>
            The internal Rolling cycle considering Slant. The configuration could be changed through the property of BucketInit Control.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.GetCapacityBucketKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Return the current Step's Capacity Bucket Key of the target entity. 
            </summary>
            <param name="hb">Target entity object</param>
            <returns>Return Capacity Bucket Key object. </returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucketManager.CapacityBuckets">
            <summary>
            Return the entire list of registered Capacity Bucket.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IBucketManager.ConstraintSets">
            <summary>
            Return the entire list of registered Constraint Bucket.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.GetCapacityBucket(System.Object)">
            <summary>
            Return the Bucket object for the Capacity Bucket key.
            If there is registered Bucket for the key, return the Bucket.
            If Bucket does not exist, create one.
            </summary>
            <param name="key">Capacity bucket key. </param>
            <returns>Return CapacityBucket object. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.AddCapacityBucket(Mozart.SeePlan.Simulation.CapacityBucket)">
            <summary>
            Add CapacityBucket as Bucket to be mananged by Bucket Manager. 
            </summary>
            <param name="bucket">CapacityBucket to be added.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.RemoveCapacityBucket(System.Object)">
            <summary>
            Remove CapacityBucket from a certain key. 
            </summary>
            <param name="key">Target CapacityBucket key to be removed.</param>
            <returns>If key is properly removed, return <strong>true</strong>, 
            or if there are no keys to remove, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.AddConstraint(System.Object,Mozart.SeePlan.Simulation.IBucket)">
            <summary>
            Add Constraint Bucket to Constraint group in the key group.
            </summary>
            <param name="constraintSetKey">Constraint group Key.</param>
            <param name="constraint">Target Constraint bucket to be added. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.AddConstraintSet(System.Object,System.Collections.Generic.IEnumerable{Mozart.SeePlan.Simulation.IBucket})">
            <summary>
            Add ConstraintSet.
            </summary>
            <param name="constraintSetKey">ConstraintSet Key.</param>
            <param name="constraints">List of Constraint correspondent to key.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.GetConstraintSet(System.Object)">
            <summary>
            Return Constraint Bucket list of the Constraint group Key.
            </summary>
            <param name="constraintSetKey">Constraint group Key..</param>
            <returns>Return Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.GetConstraintSetKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Return the Constraint group Key to be applied to target entity. 
            </summary>
            <param name="hb">Target entity object</param>
            <returns>Return the Constraint key of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.ResetCache">
            <summary>
            Initialize cache information. 
            This function is used when cache needs to be initialized when cache information can be changed at a certain point. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.ResetConstraintSets">
            <summary>
            Initialize Bucket Constraint information.
            This function is used when constraint needs to be initialized when constraint information can be changed at a certain point. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.GetConstraints(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Returns the Constraint Bucket list of the target entity. 
            </summary>
            <param name="hb">Target entity object</param>
            <param name="now">Current time of Simulation</param>
            <returns>Return Constraint Bucket list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.AddMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Add actual output to Constraint Bucket that is required to applied to the entity. 
            </summary>
            <param name="hb">Target entity.</param>
            <param name="now">Current time of Simulation</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.CanMove(Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>
            Determine whether Bucketing is possible for the entity when constraint applied to the entity is considered. 
            </summary>
            <param name="hb">Target entity.</param>
            <param name="now">Current time of Simulation</param>
            <returns>When Bucketing is possible at determination, return <strong>true</strong>, 
            or else, return <strong>false</strong>. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.Rolling(System.DateTime)">
            <summary>
            Process Rolling for all Bucket under Bucket Manager management.
            The output of Bucket is initialized during Rolling in order to perform additional Bucketing during next Rolling cycle. 
            </summary>
            <param name="now">Rolling time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.IsBoundary(System.DateTime)">
            <summary>
            Determine whether the entered time is relevant to BucketRolling cycle.
            </summary>
            <param name="now">Target time. .</param>
            <returns>If the time is correspondent to Rolling cycle, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBucketManager.Compensate(System.DateTime,System.Single)">
            <summary>
            During initial Bucket configuration, when start time is different from Bucket Rolling, 
            the passed time should be handled that outputs already came out. For example if Rolling is performed for 8 hours starting from 06:00, 
            Simulation start time is 08:00, portion = 1/4(0.25) could be set to consider 1/4 Bucket Move has already occured.  
            </summary>
            <param name="now">Compensate handling time.</param>
            <param name="portion">Output handling portion.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightManager">
            <summary>
            The Method management class for Preset and to calculate Factor Value used by Weight based Dispatcher. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightManager.GetMethods(System.String)">
            <summary>
            Return value calculation method of Weight factor composing a specific preset. 
            </summary>
            <param name="preset">Target Preset ID. </param>
            <returns>Returns Factor Value calculation method. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WeightManager.GetEvaluator(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Returns the weight evaluator
            </summary>
            <param name="target">The target of weight evaluation</param>
            <returns>Returns the weight evaluator</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightManager.PresetInfo">
            <summary>
            Weight Preset information class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightManager.PresetInfo.Name">
            <summary>
            Preset name. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightManager.PresetInfo.Preset">
            <summary>
            Preset Data class.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightManager.PresetInfo.Map">
            <summary>
            WeightMethod Dictionary composing Preset. 
            Factor name is used as key. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WeightManager.FactorInfo">
            <summary>
            Weight Factor information class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightManager.FactorInfo.Factor">
            <summary>
            WeightFactor.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WeightManager.FactorInfo.Method">
            <summary>
            Value calculation method of the factor. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventExtensions">
            <summary>
            일정 시간을 주기로 반복해서 발생하는 이벤트를 처리하는 확장 메서드 클래스입니다.
            </summary>
            <summary>
            Provides the extension methods to handle events, which occurs repeatedly on a specified cycle during simulation.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventExtensions.MinPriority(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Simulation.ICalendarEvent})">
            <summary>
            모든 이벤트 중에서 가장 높은 우선순위(오름차순)의 값을 반환합니다.
            </summary>
            <param name="events">이벤트의 목록입니다.</param>
            <returns>가장 높은 우선순위의 값입니다. 목록이 비어 있거나 모든 이벤트의 우선순위가 int.MaxValue인 경우 0을 반환합니다.</returns>
            <summary>
            Returns the priority value of the specified event with the highest execution priority(in ascending order) in the list of the specified events.   
            </summary>
            <param name="events">The list of the events to seek for the event with highest execution priority.</param>
            <returns>
            <para>The priority value of the event with the highest execution priority.</para>
            <para>If the list is empty or if the priority property value of all the events in the lis is <em>int.MaxValue</em>, then 0.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventExtensions.MaxPriority(System.Collections.Generic.IEnumerable{Mozart.SeePlan.Simulation.ICalendarEvent})">
            <summary>
            모든 이벤트 중에서 가장 낮은 우선순위(오름차순)의 값을 반환합니다.
            </summary>
            <param name="events">이벤트의 목록입니다.</param>
            <returns>가장 낮은 우선순위 값입니다. 목록이 비어 있거나 모든 이벤트의 우선순위가 int.MinValue인 경우 0을 반환합니다.</returns>
            <summary>
            Returns the priority value of the specified event with the lowest execution priority(in ascending order) in the list of the specified events.   
            </summary>
            <param name="events">The list of the events to seek for the event with lowest execution priority.</param>
            <returns>
            <para>The priority value of the event with the lowest execution priority.</para>
            <para>If the list is empty or if the priority property value of all the events in the lis is <em>int.MinValue</em>, then 0.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventExtensions.InBoundary(Mozart.SeePlan.Simulation.ICalendarEvent,System.DateTime)">
            <summary>
            주어진 시간이 이벤트의 유효 기간 내에 있는지 여부를 반환합니다. 이벤트의 활성화 여부와는 관계가 없습니다.
            </summary>
            <param name="evt">확인 대상 이벤트입니다.</param>
            <param name="now">범위에 포함되는지 확인할 시간입니다.</param>
            <returns></returns>
            <summary>
            Determines whether the specified time is within the valid period of the event regardless whether the event is active or not,
            </summary>
            <param name="evt">The event to check valid period.</param>
            <param name="now">The time to check whether it is in the valid period of the event.</param>
            <returns>true if the specified time is within the valid period of the event; otherwise false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ICalendarEventManager">
            <summary>
            일정 시간을 주기로 반복해서 발생하는 이벤트를 관리하는 기능을 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Provides functionality to manange the event that occurs repeatedly on a specific cycle during simulation.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEventManager.Factory">
            <summary>
            최상위 공장 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the root factory object.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.Register(Mozart.SeePlan.Simulation.ICalendarEvent)">
            <summary>
            이벤트를 등록합니다.
            </summary>
            <param name="calendarEvent">등록할 이벤트입니다.</param>
            <summary>
            Registers the calendar event. 
            </summary>
            <param name="calendarEvent">The calendar event to register.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.UnRegister(Mozart.SeePlan.Simulation.ICalendarEvent)">
            <summary>
            이벤트를 등록 해제합니다.
            </summary>
            <param name="calendarEvent">등록 해제할 이벤트입니다.</param>
            <returns>이벤트를 등록 해제한 경우 true이고, 그렇지 않으면 false입니다.</returns>
            <summary>
            Unregisters the calendar event. 
            </summary>
            <param name="calendarEvent">The calendar event to unregister.</param>
            <returns><em>true</em> if the specified event is unregistered; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.GetEvent(System.String)">
            <summary>
            주어진 이름을 갖는 이벤트를 반환합니다.
            </summary>
            <param name="name">검색할 이벤트의 이름입니다.</param>
            <returns>주어진 이름을 갖는 이벤트입니다.</returns>
            <summary>
            Returns the calendar event of the specified name. 
            </summary>
            <param name="name">The string containing the name of the calendar event to seek.</param>
            <returns>The calendar eventt with the specified name.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.AllEvents">
            <summary>
            등록된 모든 이벤트의 목록을 반환합니다.
            </summary>
            <returns>모든 등록된 이벤트의 목록입니다.</returns>
            <summary>
            Returns the list of all the calendar events registered. 
            </summary>
            <returns>The list of all the calendar events registered.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.AtEndEvents">
            <summary>
            이벤트 발생 시점이 CalendarEventAt.AtEnd인 모든 등록된 이벤트의 목록을 반환합니다.
            </summary>
            <returns>이벤트 발생 시점이 CalendarEventAt.AtEnd인 모든 등록된 이벤트의 목록입니다.</returns>
            <summary>
            Returns the list of all calendar events registered to occur at <em>CalendarEventAt.AtEnd</em>.
            </summary>
            <returns>he list of all the events which <em>CalendarEventBase.Timing</em> is set as <em>CalendarEventAt.AtEnd</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEventManager.AtBeginEvents">
            <summary>
            이벤트 발생 시점이 CalendarEventAt.AtBegin인 모든 등록된 이벤트이 목록을 반환합니다.
            </summary>
            <returns>이벤트 발생 시점이 CalendarEventAt.AtBegin인 모든 등록된 이벤트의 목록입니다.</returns>
            <summary>
            Returns the list of all calendar events registered to occur at <em>CalendarEventAt.AtBegin</em>.
            </summary>
            <returns>he list of all the events which <em>CalendarEventBase.Timing</em> is set as <em>CalendarEventAt.AtBegin</em>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IFactoryMonitor">
            <summary>
            공장 내에서 발생하는 작업물 또는 설비 상태 변경 정보를 관찰하는 개체들을 관리하는 기능을 나타내는 인터페이스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IFactoryMonitor.EntityMonitors">
            <summary>
            등록된 작업물 상태 변경 관리 개체의 목록을 가져옵니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IFactoryMonitor.EquipmentMonitors">
            <summary>
            등록된 설비 상태 변경 관리 개체의 목록을 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.GetEntityMonitor``1">
            <summary>
            주어진 형식에 해당하는 작업물 상태 변경 관리 개체를 반환합니다.
            </summary>
            <typeparam name="TMonitor">작업물 상태 변경 관리 개체의 형식입니다.</typeparam>
            <returns>주어진 형식에 해당하는 작업물 상태 변경 관리 개체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.GetEquipmentMonitor``1">
            <summary>
            주어진 형식에 해당하는 설비 상태 변경 관리 개체를 반환합니다.
            </summary>
            <typeparam name="TMonitor">설비 상태 변경 관리 개체의 형식입니다.</typeparam>
            <returns>주어진 형식에 해당하는 설비 상태 변경 관리 개체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.Add(Mozart.SeePlan.Simulation.IEquipmentMonitor)">
            <summary>
            설비 상태 변경 관리 개체를 등록합니다.
            </summary>
            <param name="monitor">등록할 설비 상태 변경 관리 개체입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.Add(Mozart.SeePlan.Simulation.IEntityMonitor)">
            <summary>
            작업물 상태 변경 관리 개체를 등록합니다.
            </summary>
            <param name="monitor">등록할 작업물 상태 변경 관리 개체입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.Remove(Mozart.SeePlan.Simulation.IEquipmentMonitor)">
            <summary>
            주어진 설비 상태 변경 관리 개체를 제거합니다.
            </summary>
            <param name="monitor">제거할 설비 상태 변경 관리 개체입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IFactoryMonitor.Remove(Mozart.SeePlan.Simulation.IEntityMonitor)">
            <summary>
            주어진 작업물 상태 변경 관리 개체를 제거합니다.
            </summary>
            <param name="monitor">제거할 작업물 상태 변경 관리 개체입니다.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IWipGroup">
            <summary>
            작업물을 요소로 하는 IDataGroup의 인터페이스입니다.
            </summary>
            <summary>
            IDataGroup interface using entity(wafer,lot,batch) as its elements.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IWipManager">
            <summary>
            The interface to manage WIPs in Simulation as Tags. 
            The entire WIPs can be easily referred through Tags. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Register(Mozart.SeePlan.Simulation.IEntityTrackable)">
            <summary>
            Register WIP Tracking objective object. 
            </summary>
            <param name="trackable">WIP Tracking objective object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.UnRegister(Mozart.SeePlan.Simulation.IEntityTrackable)">
            <summary>
            Remove WIP Tracking objective object. 
            </summary>
            <param name="trackable">WIP Tracking objective object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.GetTrackables(System.String)">
            <summary>
            Return all WIP Tracking objective objects registered as specific Tag. 
            </summary>
            <param name="tag">WIP Tag to be collected.</param>
            <returns>Returns all Tracking objective objects from the Tag.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.GetTags">
            <summary>
            Return all WIP Tag list registered to WIPManager.
            </summary>
            <returns>Return WIP Tag list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.GetWips(System.String)">
            <summary>Return list of entities for input Tag. </summary>
            <param name="tag">Saech Tag information.</param>
            <returns>Return list of entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.GetWips">
            <summary>Return entire list of entities in trackables. </summary>
            <returns>Return entire list of entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.InTranfers">
            <summary>
            Return moving WIP list. 
            </summary>
            <returns>Returns moving WIP list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.InEqps(System.String,System.String)">
             <summary>
            Returns WIP of the tag from a specific equipment. 
             </summary>
             <param name="key">Target Equipment ID. </param>
             <param name="tag">Equipment WIP tag.</param>
             <returns>Returns list of WIPs.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Snapshot">
            <summary>Returns the entire list of each lot. </summary>
            <returns>Returns the entire list of each lot. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.GetGroup(System.String)">
            <summary>Return entity list from a specific group.</summary>
            <param name="name">WIP aggregation group key string. .</param>
            <returns>Return WIP group. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.AddGroup(System.String,System.String[])">
            <summary>Define group for WIP aggregation.</summary>
            <param name="name">View name.</param>
            <param name="fields">View composition Key column.</param>
            <returns>Return WIP group.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.AddGroup(System.String,Mozart.Data.Entity.IndexType,System.String[])">
            <summary>Define group for WIP aggregation.</summary>
            <param name="name">View name. </param>
            <param name="indexType">Index type. Able to use { BinaryTree, Hashtable, Trie }.</param>
            <param name="fields">View composition Key column.</param>
            <returns>Return WIP group.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Contains(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            	Checks if entities are registered to <em>WipManager</em>.</summary>
            <param name="entity">The entity information to search. </param>
            <returns>If entity is registered, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.In(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            	Add entity to <em>Wipmanager</em> .</summary>
            <param name="entity">Entity to add. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Out(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Delete entity from Wipmanager. 
            </summary>
            <param name="entity">Target entity to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Changing(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Call before WIP information is changed.  
            During WipGroup composition, Index of WipGroup(View) needs to be re-configured. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.Changed(Mozart.Simulation.Engine.ISimEntity)">
             <summary>
            Call after WIP information is changed.
             During WipGroup composition, Index of WipGroup(View) needs to be re-configured. 
             </summary>
             <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IWipManager.WriteStat">
            <summary>
            Write WipManager Log. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipTags">
            <summary>
            The Tag class of WIP state type. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipTags.Agent">
            <summary>
            The set of Tags of WIP information included to Queue(DispatchingAgent).
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Agent.Waiting">
            <summary>
            	The Tag of entities waiting in <em>DispatchingAgent</em>.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Agent.Holds">
            <summary>
            	The Tag of entities in Hold state in <em>DispatchingAgent</em>.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Agent.Waiting2">
            <summary>
            	The Tag of entities waiting in second queue in<em>DispatchingAgent</em>.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipTags.Eqp">
            <summary>
            The set of WIP tag currently loading to the equipment.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Eqp.Waiting">
            <summary>The tag of entities waiting in equipment.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Eqp.Working">
            <summary>The tag of entities currently processing in equipment.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Eqp.Buffered">
            <summary>The tag of entities currently loading to the buffer of the equipment.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipTags.Bucketer">
            <summary>
            The set of Tags of WIP currently processing/waiting in Bucketer. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Bucketer.Waiting">
            <summary>The tag of entities waiting for Bucketing.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Bucketer.Working">
            <summary>The tag of entities currently Bucketing. </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.WipTags.Transfer">
            <summary>The tag of entities currently being transferred.</summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WorkUpInfo">
            <summary>This is the equipment information class for additional loading during JobChangeAgent logic deployment.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkUpInfo.Target">
            <summary>
            The target equipment in Up state for additional loading.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkUpInfo.Setups">
            <summary>The list of Steps that require Setup from the Target equipment.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkUpInfo.NoSetups">
            <summary>The list of Steps that could be processed from the (<em>Target</em>) equipment with no setup.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WorkUpInfo.IsEmpty">
            <summary>
            	<para>Checks whether there are WIPS that could be processed through the (<em>Target</em>) equipment.</para>
            	<para>If there are no WIPs to be processed, return <em><strong>true</strong></em>, or else, return, <strong><em>false</em></strong>. </para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IDownEvents">
            <summary>
            설비 다운 정보를 관리하는 기능을 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Provides functionality to manage information of the "Down" state equipment. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDownEvents.GetSchedules(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            지정된 설비의 Down 정보 목록을 반환합니다.
            </summary>
            <param name="aeqp">대상 설비입니다.</param>
            <returns>지정된 설비의 Down 이벤트 목록입니다.</returns>
            <summary>
            Returns the Down event list of the specified equipment. 
            </summary>
            <param name="aeqp">The specified equipment to get Down event list.</param>
            <returns>The Down event list for the specifeid equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IDownEvents.OnEvent(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.DataModel.PeriodSection,Mozart.SeePlan.Simulation.DownEventType)">
            <summary>
            지정된 설비에서 다운 이벤트가 발생했을 때 호출되는 메서드입니다.
            </summary>
            <param name="aeqp">다운 이벤트가 발생한 설비입니다.</param>
            <param name="fs">설비 다운 정보입니다.</param>
            <param name="det">다운 이벤트의 유형입니다.</param>
            <summary>
            Called at equipment down event occurrence. Defines logics to handle when down event occurs. 
            </summary>
            <param name="aeqp">The specified equipment of down event occurrence.</param>
            <param name="fs">The down information of the specified equipment.</param>
            <param name="det">The down event type</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DownEventType">
            <summary>
            설비 다운(Down) 이벤트 유형을 나타냅니다.
            </summary>
            <summary>
            Specifies the type of down event. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DownEventType.Start">
            <summary>
            설비 다운이 시작되었음을 나타냅니다.
            </summary>
            <summary>
            Specifies that the down event has started. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DownEventType.End">
            <summary>
            설비 다운이 종료되었음을 나타냅니다.
            </summary>
            <summary>
            Specifies that the down event has ended.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ISecondResourceOwner">
            <summary>
            The interface of the object that could utilize SecondResource.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ISecondResourceOwner.LocationKey">
            <summary>
            The key string of the location. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LocationObject">
            <summary>
            The class that saves the location information of the object that utilizes SecondResource.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ISecondResourcePoolManager">
            <summary>
            The Interface that manages SecondResourcePool 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ISecondResourcePoolManager.GetResourcePools">
            <summary>
            Returns all regustered SecondResourcePool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ISecondResourcePoolManager.GetResourcePool(System.String)">
            <summary>
            Returns the SecondResourcePool of the Key.
            </summary>
            <param name="key">Target Key of SecondResource.</param>
            <returns>Returns the found SecondResult object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ISecondResourcePoolManager.AddResourcePool(Mozart.SeePlan.Simulation.SecondResourcePool)">
            <summary>
            Register ResourcePool.
            </summary>
            <param name="pool"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LocationKeys">
            <summary>
            Second resource location type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LocationKeys.EQP">
            <summary>
            This is used when the location of the Second Resource is the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LocationKeys.STOCK">
            <summary>
            This is used when the location of the Second Resource is in Stock. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventManager">
            <summary>
            The object to manange CalendarEvent.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventManager.AtBeginPriority">
            <summary>
            The priority of AtBegin Timing. -1000 is applied as default.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventManager.BeforeProcessPriority">
            <summary>
            The priority of BeforeProcess timing. -50 is applied as default.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventManager.AtEndPriority">
            <summary>
            The priority of AtEnd Timing. 1000 is applied as default.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.CalendarEventManager.Factory">
            <summary>
            Root Factory object. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.#ctor(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="factory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.Register(Mozart.SeePlan.Simulation.ICalendarEvent)">
            <summary>
            Registers CalendarEvent.
            </summary>
            <param name="calendarEvent">Target CalendarEvent</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.UnRegister(Mozart.SeePlan.Simulation.ICalendarEvent)">
            <summary>
            Unregister CalendarEvnet.
            </summary>
            <param name="calendarEvent">Target CalendarEvent to unregister.</param>
            <returns>true if the specified event is unresgistered; otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.GetEvent(System.String)">
            <summary>
            Get CalenderEvent with matching name.
            </summary>
            <param name="name">The name to seek the calendar event.</param>
            <returns>Return the matching CalendarEvent. If there is no matching result, return Null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.AllEvents">
            <summary>
            Returns the entire CalendarEvent list.
            </summary>
            <returns>The list of all registered events.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.AtEndEvents">
            <summary>
            Returns the CalendarEvent list of AtEnd Timing.
            </summary>
            <returns>The list of all the events which <em>CalendarEventBase.Timing</em> is set as <em>CalendarEventAt.AtEnd</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.BeforeProcessEvents">
            <summary>
            Returns the CalendarEvent list of BeforeProcess timing.
            </summary>
            <returns>The list of all events which occurence point is set as <em>CalendarEventAt.AtProcess</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.CalendarEventManager.AtBeginEvents">
            <summary>
            Returns the CalendarEvent list of AtBegin Timing.
            </summary>
            <returns>The list of all the events which <em>CalendarEventBase.Timing</em> is set as <em>CalendarEventAt.AtBegin</em>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityState">
            <summary>
            The type of initial entity(WIP) processing state. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.EntityState.HOLD">
            <summary>
            Entity process Hold state. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.EntityState.MOVE">
            <summary>
            Entity move state. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.EntityState.WAIT">
            <summary>
            Entity process Wait state. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.EntityState.RUN">
            <summary>
            Entity currently processing. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.EntityState.OUT_WAIT">
            <summary>
            Wait state after processing.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LotState">
            <summary>
            Determines whether entity is initial WIP, new release or created, but not released. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LotState.CREATE">
            <summary>
            Entity is created, but not released. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LotState.RELEASE">
            <summary>
            Released entity to the Factory during Simulation.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LotState.WIP">
            <summary>
            Initial WIP.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BatchInitiator">
            <summary>
            This is the class that created entity for input, included the target entities to AoBatchRelease and initializes the input targets. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchInitiator.SortLots">
            <summary>
            Determines sorting after creating input Lots. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchInitiator.Factory">
            <summary>
            Root Factory object. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.Run(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Establishes the Line release schedule of the created Lot and registers to AoBatchRelease.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.Reserve(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Registers target entities to AoBatchRelease and release the entites. 
            </summary>
            <param name="hb">Target entities..</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.Instancing">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit</para>
            	<para>Creates and returns Lot information to release. </para>
            </summary>
            <remarks>
            This FEAction plays a role creating Lots for releasing
            considering the Lot size and input Batch size of Input Target of the input Step
            which is the result of Backward Planning or Release Schedule.
            </remarks>
            <returns>Returns the created Lot list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.CompareLot(Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.ILot)">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit</para>
            	<para>Implement sorting logic to decide the release order of the created Lots. </para>
            </summary>
            <param name="x">Target Lot x for comparison.</param>
            <param name="y">Target Lot y for comparison.</param>
            <remarks>
            This is the comparison function returing result value type of IComparable.CompareTo method.
            </remarks>
            <returns>Returns the result value type of IComparable.CompareTo method.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.OnBeginReserve(System.Collections.Generic.List{Mozart.SeePlan.Simulation.ILot})">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit</para>
            	<para>This FEAction is called before proceeding release reservation for the created Lots. </para> 
            </summary>
            <param name="lots">The list of target Lots to be released.</param>
            <remarks>
            Can reserve release time of the created Lots and perform Batch composition.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.DoReserve(System.Collections.Generic.List{Mozart.SeePlan.Simulation.ILot})">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit</para>
            	<para>This FEAction releases the reserved Lots on the reserved time for release.</para>
            </summary>
            <param name="lots">The list of target Lots to be released.</param>
            <remarks>
            Release reservation is done through Reserve method of BatchRelease of Factory. 
            The default logic is to call ReserveOne method to make reservation per Lot. 
            If the logics are defined through this FEAction, ReserveOne method is not called.  
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.ReserveOne(System.Collections.Generic.List{Mozart.SeePlan.Simulation.ILot},System.Int32@)">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit/ReserveOne</para>
            	<para>This FEAction reserves release scheudle of the target Lots from the list that belongs to the index.</para> 
            </summary>
            <param name="lots">The entire list of target Lots to be released.</param>
            <param name="index">Shows Index of Lot to be released from the list.</param>
            <remarks>If ReserveOne logic is modified the index value needs to be increased.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchInitiator.OnEndReserve(System.Collections.Generic.List{Mozart.SeePlan.Simulation.ILot})">
            <summary>
            	<para>[FEAction] Entity/InputBatchInit</para>
            	<para>This FEAction is called when all reserverd Lots are released.</para>
            </summary>
            <param name="lots">The list of target Lots to be released.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatcherBase">
            <summary>
            The base class of Dispatcher.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.Factory">
            <summary>
            The root Simulation Model(Factory) object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.NowDT">
            <summary>
            Current time of Simulation.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.Log">
            <summary>
            Model Logger.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.Eqp">
            <summary>
            Target equipment object to perform Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.Comparer">
            <summary>
            Comparer used by Dispatcher to evaluate waiting WIPs .
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.WeightEval">
            <summary>
            Weight Evaluator
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatcherBase.FactorList">
            <summary>
            The list of functions used by Weight based Dispatcher to calculate Factor value. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatcherBase.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatcherBase.Initialize(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Initializes Dispatcher.
            </summary>
            <param name="ao">Target equipment object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatcherBase.BuildComparer">
            <summary>
            Comparer for each lower level Dispatcher requires to be developed. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatcherBase.Select(Mozart.Simulation.Engine.ActiveObject,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Selects target entities for loading, from the waiting WIPs through Dispatching logic. 
            </summary>
            <param name="ao">Equipment object.</param>
            <param name="list">The list of waiting WIPs to be selected for dispatching.</param>
            <param name="ctx">Context for Dispatching. </param>
            <returns>List of WIPs selectd for dispatching.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchingAgent">
            <summary>
            The class managing Queue and in charge of Dispatching.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.EnterEntityMore(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            작업물을 DispatchingAgent 에 들어올때 기본적인 처리와 상태별 예외처리를 수행합니다. 
            Hold 여부 파악 및 예외처리, Bucketing 여부등을 판별합니다. 
            </summary>
            <param name="entity">Target entity.</param>
            <summary>
            Performs basic handling and performs exception handling by the state of WIP, at the point the entity(wafer,lot,batch) of the WIP enters the <em>DispatchingAgent</em>. 
            </summary>
            <param name="entity">The entity to determine to be exception handled or bucketing.</param>
            <remarks>
                <para>When the specified entity is at the point to enter <em>DispatchingAgent</em>,</para>
                <para>this method determines if the state of entity has changed to <em>HOLD</em> under specified criteria and should be exception handled,</para>
                <para>or determines whether this entity should be stored in the Bucket for later purpose.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.EnterEntityBase(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            작업물이 예외처리 되지 않고 정상적으로 Queue 에 들어오는 경우 
            Queue 에 추가합니다. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetLotBatchType">
            <summary>
            Dispatching -> DispatcherControl -> GetLotBatchType에 설정된 LotBatch Type을 반환합니다.
            </summary>
            <returns>LotBatchType 을 반환합니다.</returns>
            <summary>
            Returns the type of the LotBatch specified in <em>Dispatching/DispatcherControl/GetLotBatchType FEAction</em>.
            </summary>
            <returns>The type of the LotBatch specified in <em>GetLotBatchType FEAction</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.OnNotFoundDestination(Mozart.SeePlan.Simulation.IHandlingBatch,System.Int32)">
            <summary>
            작업물을 작업할 수 있는 장비가 없는 경우 대상 작업물을 처리하는 함수입니다.
            </summary>
            <param name="hb">Target entity.</param>
            <param name="destCount">로딩가능한 장비의 수량입니다.</param>
            <summary>
                <para>Handles the specified entity(wafer,lot,batch) by the logics implemented in <em>Dispatching/QueueControl/OnNotFoundDefinition FEAction</em>,</para>
                <para>when the equipment to load the specified entity cannot be found.</para> 
            </summary>
            <param name="hb">The entity to handle when there is no equipment to load this entity.</param>
            <param name="destCount">The numbers of the equipment that could load the specified entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.ReserveToolSettings(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            Tool Set 정보를 예약합니다.
            </summary>
            <param name="aeqp">Target equipment..</param>
            <param name="batches">대상 작업물 리스트입니다.</param>
            <summary>
            Reserves tool setting information of the specified entities(wafer,lot,batch) to the specified equipment in order to process the specified entities.
            </summary>
            <param name="aeqp">The equipment to reserve the required tool setting information to process the specified entities.</param>
            <param name="batches">The array of the entities(wafer,lot,batch) that requires tool setting on the equipment to be processed.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.ReserveSetupCrews(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>SetupCrew 를 예약합니다.</summary>
            <param name="aeqp">Target equipment object</param>
            <param name="batches">작업물 목록입니다.</param>
            <summary>Reserves the setup crew to the specified equipment to perform setup in order to process the specifed array of entities(wafer,lot,batch).</summary>
            <param name="aeqp">The equipment active object to get the required numbers of crew members to perform setup and reserve the setup crew.</param>
            <param name="batches">The array of entities to find the consumtion time for setup of the specified equipment and reserve the setup crew.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.ClearWaitSecondResourceInfo(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            예약된 SecondResource 정보를 Clear 합니다.
            </summary>
            <param name="aeqp">Target equipment..</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.RemoveLotGroup(System.Object,Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.ISimEntity@)">
            <summary>
            DispatchingAgent로부터 지정된 Key의 LotGroup에서 대상 작업물을 제거 또는 LotGroup 자체를 제거할지 여부를 반환합니다. 
            </summary>
             <param name="key">
             	<em>LotGroup</em>의 <em>Key</em> 입니다.</param>
             <param name="entity">삭제하고자 하는 작업물 객체입니다.</param>
             <param name="lotGroup">DispatchingAgent에서 삭제하고자 하는 <em>LotGroup</em> 객체입니다.</param>
             <returns>작업물(<em>entity</em>)를 삭제했으면 <strong><em>true</em></strong>, 아닐 경우 <em><strong>false</strong></em> 를 반환합니다.</returns>
            <summary>
            Gets a value to indicate whether to remove the specified entity in the <em>LotGroup</em> of the specified key value, or the <em>LotGroup</em> itself, within the <em>DispatchingAgent</em>.
            </summary>
             <param name="key">The key to seek the <em>LotGroup</em> to remove the specified entity from.</param>
             <param name="entity">The entity to remove from the LotGroup. Also, this argument can be the <em>LotGroup</em> to remove from <em>DispatchingAgent</em>.</param>
             <param name="lotGroup">The <em>LotGroup</em> to remove from the <em>DispatchingAgent</em>. This could be either an empty <em>LotGroup</em> or <em>entity</em> argument.</param>
             <returns>true, if <em>entity</em> is removed from <em>LotGroup</em> or <em>LotGroup</em> is removed from <em>DispatchingAgent</em>; otherwise, false.</returns>
             <remarks>
                 <para>If the <em>entity</em> argument is an entity(wafer,lot,batch), it will be removed from the <em>LotGroup</em> matching the specified <em>key</em>.</para>
                 <para>In case the <em>LotGroup</em> of the specified <em>key</em> is empty after the specified entities are removed, the <em>LotGroup</em> is set as <em>lotGroup</em> argument</para>
                 <para>to be removed from the <em>DispatchingAgent</em> from this method.</para>
                 <para>Otherwise, if the <em>entity</em> argument is the <em>LotGroup</em>, it will be set as <em>lotGroup</em> to be removed from the <em>DispatchingAgent</em>.</para>
                 <para>True is returned if either the entity or LotGroup is removed, otherwise false.</para>
             </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.CloneLotGroup(System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            LotGroup을 복제합니다.
            </summary>
            <param name="wips">복제할 작업물 목록입니다.</param>
            <remarks>
            	<em>DispatchingAgent</em>에서 OnSelect 이전에 호출되어집니다.</remarks>
            <returns>복제한 작업물 목록을 돌려줍니다.</returns>
            <summary>
            Clones the items in <em>LotGroup</em> from the specified WIP.
            </summary>
            <param name="wips">The list of WIPs to get the <em>LotGroup</em> to clone. </param>
            <remarks>
            	<para>This method is called before <em>OnSelect</em> FEAction from the <em>DispatchingAgent</em>.</para>
            </remarks>
            <returns>The clone of the <em>LotGroup</em> in the specified list of WIP.</returns>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._equipments">
            <summary>
            Registered Equipment list. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._mappings">
            <summary>
            Dispatching Info per registered Equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._dict">
            <summary>
            The Queue information of per equipment available for loading for each entity on standby in Queue.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._fifo">
            <summary>
            The Queue information of all entities on standby.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._lotGroups">
            <summary>
            The entity information of registered entity. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent._wips">
            <summary>
            The list of entities on standby at DispatchingAgent.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.#ctor(System.String,Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Cosntructor. 
            </summary>
            <param name="key">DispatchingAgent Key.</param>
            <param name="ao">Root Factory object. </param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.UseSecondQueue">
            <summary>
            Determines whether to use Second Queue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.SecondStage">
            <summary>
            Determines whether the selected entities from Queue are considered to be placed at Second Queue. 
            If Second Queue stage, return <strong>true</strong>. If using default Queue, return <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.NewType">
            <summary>
            The Batch type in case entities are formed as Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.ForceBatching">
            <summary>
            Determines whether to form entities to Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.Factory">
            <summary>
            전체 공장에 대한 최상위 시뮬레이션 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the head simulation object of the entire factory.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.DispatchingKey">
            <summary>
            Routing Key of DispatchingAgent. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.Equipments">
            <summary>
            The list of equipment performing Dispatch through DispatchingAgent. .
            The key used here is the equipment key. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchingAgent.FifoQueue">
             <summary>
             The FIFO Queue of the entities waiting in DispatchingAgent(Queue). 
            Include waiting entities to Queue1 and Queue2. 
             </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchingAgent.DispatchHandler">
            <summary>
            	The Delegate performed when entity is selected from <em>DispatchingAgent</em>.</summary>
            <param name="sender">Equipment object.</param>
            <param name="queue">The list of entities waiting in Equipment's Queue.</param>
            <returns>Return selected entity array. </returns>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchingAgent.Select">
            <summary>
            The Delegate performed when entity is selected from DispatchingAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetEquipment(System.String)">
            <summary>
            Return entity with Key from the entities registered in DispatchingAgent. 
            </summary>
            <param name="key">Equipment Key.</param>
            <returns>Return the matching result AoEquipment(Equipment) object. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetDestinations">
            <summary>
            Return ther entire Dispatching Info(Queue info) for each equipment registered in DispatchingAgent.  
            </summary>
            <returns>Return the Queue information for each equipment. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetDestination(System.String)">
            <summary>
            Return the Queue information for a specific equipment. 
            </summary>
            <param name="key">Target Equipment Key. </param>
            <returns>Return the Queue information of the target equipment. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.SetStatsEnabled(System.Boolean)">
            <summary>
            Configure Queue statistics aggregation of DispatchingAgent.  
            </summary>
            <param name="value">The statistics aggregation value. The data is collected when value is true. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.ResetStats">
            <summary>
            Reset DispatchingAgent Queue statistics. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Add(Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean)">
            <summary>
            Input entity to DispatchingAgent. 
            </summary>
            <param name="hb">Target entity.</param>
            <param name="split">Determines whether to Split all entities of HandlingBatch during input. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Remove(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Remove entity already in Queue. 
            </summary>
            <param name="entity">Target entity.</param>
            <returns>Return removed entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.RemoveExcept(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Remove input entity from Equipment Queue besides from the Queue of designated Equipment. 
            </summary>
            <param name="entity">Target entity to remove. </param>
            <param name="eqp">Target equipment to skip removal. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.RebuildQueues(System.Predicate{Mozart.Simulation.Engine.ISimEntity})">
             <summary>
            Reset Queue for the Lot from the input entity list. 
             The entity of Predicate should be removed from DispatchingAgent and input again to recompose Queue.
             </summary>
             <param name="predicate">Target entities to reconfigure Queue. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.ReEnter(Mozart.Simulation.Engine.ISimEntity,System.Boolean)">
            <summary>
            Reinput entity in DispatchingAgent. 
            The state check of the entity should differ according to check parameter. 
            </summary>
            <param name="entity">Target entity.</param>
            <param name="check">If <strong>true</strong> check all state including exception hanling for the entity. 
            If <strong>false</strong>, included entity to Queue without chekcing exception handling. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Register(System.String,Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            Register equipment to DispatchingAgent. 
            </summary>
            <param name="regKey">Registration Key strings. </param>
            <param name="regObject">AoEquipment equipment object.</param>
            <param name="inPort">DispatchInport object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetEntity(Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            Return selected entities for Dispatching from the entities waiting in a specific Equipment Port. 
            </summary>
            <param name="inPort">Target Port. </param>
            <returns>Return selected entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Take(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Input entity to DispatchingAgent. 
            </summary>
            <param name="hb">Target entity for input. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetQueueLengthStats">
            <summary>
             Return  the statistics for the entities waiting to be dispatched from each equipment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetEntityCount(Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            Return the numbers of waiting entities from the Port connected to equipment. 
            </summary>
            <param name="inPort">Target Port. </param>
            <returns>Return the numbes of entities waiting. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetEntityCount(System.String,System.Boolean)">
             <summary>
            Return the numbers of entities in Queue searched through equipment Key. 
             </summary>
             <param name="key">Target Equipment Key. </param>
             <param name="q2">Determines whether entities are waiting in Queue2. </param>
             <returns>Return the numbes of entities waiting.  </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.RebuildQueues">
            <summary>
            Recompose Queue for all equipment. . 
            Reset Queue of equipment through DispatchingAgent
            and reinput entities to DispatchingAgent to reconfigure Queue. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.AddToBuffer(System.String,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Reserve entity to Equipment's Queue. 
            The Equipment performs Dispatching only if there are no entities reserved in Queue. 
            </summary>
            <param name="eqpID">Target Equipment ID. </param>
            <param name="entity">Entity to be included. </param>
            <returns>If entity is inserted to Equipment Buffer, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.AddHold(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Set entity to Hold state and not waiting in Queue of DispatchingAgent.  
            </summary>
            <param name="entity">Target entity to set as Hold state. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.LockFireEvent">
            <summary>
            Forbid Event occuring from DispatchingAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.UnlockFireEvent">
            <summary>
            Disables the Event restriction for DispatchingAgent. 
            Checks all Queue of the registered Equipment during disabling,
            and if there are entitis waiting in the Equipment, select entities after changing the equipment state. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Up(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.ICollection{Mozart.Simulation.Engine.ISimEntity},Mozart.SeePlan.Simulation.WorkStep)">
            <summary>
            Interlock with JobChangeAgent and include WIP in Queue to equipment in Up state. 
            If there is reference Equipment, add WIP to the reference Equipment Queue.
            or else, just add WIP in 'waits'. 
            </summary>
            <param name="aeqp">Target equipment to change the state to Up.</param>
            <param name="aref">Reference Equipment. </param>
            <param name="waits">Target entity to add to Queue. </param>
            <param name="wstep">Target Step of UP. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.Down(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            JobChangeAgent 와 연계하여 Down 대상 장비의 Queue에 있는 재공을 
            제거합니다. 
            </summary>
            <param name="aeqp">Target equipment to be Down. </param>
            <returns>Return the list of Waiting WIPs in the Equipment to be Down. </returns>
            <summary>
            Removes the WIPs from the queue of the specified equipment in which is to be <em>Down</em> state, by associating with <em>JobChangeAgent</em>.
            </summary>
            <param name="aeqp">Target equipment to be Down. </param>
            <returns>Return the list of waiting WIPs in the Equipment to be Down. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetHolds">
            <summary>
            Return WIP in Hold state that did not go to Queue of DispatchingAgent. 
            </summary>
            <returns>Return list of WIP in Hold state.  </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchingAgent.GetWaitings">
            <summary>
            Return list of WIP on standby. 
            </summary>
            <returns>Return list of WIP on standby. </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FailureEvents">
            <summary>
            The class to handle equipment Down Event due to Failure.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ICalendarEvent">
            <summary>
            일정 시간을 주기로 반복해서 발생하는 이벤트를 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Represents the event that occurs repeatedly on a specific cycle during simulation.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.Name">
            <summary>
            이벤트의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the calendar event. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.Priority">
            <summary>
            이벤트의 우선순위를 가져옵니다. 동일한 시간 및 동일 시점에 발생하는 이벤트들은 우선순위에 따라 오름차순으로 발생합니다.
            </summary>
            <summary>
            <para>Gets or sets the occurence order of this event.</para> 
            <para>When there are more than two event occurence with same specified time and same occurence time, the event will occur by the specified <em>Priority</em> in ascending order.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.Timing">
            <summary>
            이벤트 발생 시점을 가져옵니다.
            </summary>
            <summary>
            Gets the event occurrence time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.Duration">
            <summary>
            이벤트 발생 주기를 가져오거나 설정합니다.
            </summary>
            <summary>
            Gets or sets the event occurrence frequency. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.FireAtStart">
            <summary>
            시뮬레이션 시작 시간에 이벤트가 발생할지 여부를 가져옵니다.
            </summary>
            <summary>
            Gets a value to indicate whether the event should occur on simulation start time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.StartBoundary">
            <summary>
            이벤트가 유효한 기간의 시작 시간을 가져옵니다.
            </summary>
            <summary>
            Gets the starting time of the event valid period. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ICalendarEvent.EndBoundary">
            <summary>
            이벤트가 유효한 기간의 끝 시간을 가져옵니다.
            </summary>
            <summary>
            Gets the time the event valid period ends. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEvent.Initialize(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            이벤트를 초기화합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            Initializes this event. 
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEvent.Run(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            이벤트를 실행합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <returns>이벤트 활성화 여부입니다. 이벤트를 계속 활성 상태로 유지하는 경우 true입니다. 그 외의 경우 false입니다. 비활성화된 이벤트는 다시 활성화시킬 수 없습니다.</returns>
            <summary>
            Executes the event.
            </summary>
            <param name="cm">The calendar event manager object.</param>
            <returns>
            <para>Returns a value to indicate whether to maintain this event active or not.</para>
            <para><em>true</em> to maintain this event active; otherwise, false.</para>
            <para>Deactivated event cannot be activated again.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ICalendarEvent.Done(Mozart.SeePlan.Simulation.ICalendarEventManager)">
            <summary>
            시뮬레이션이 종료되는 시점에 이벤트를 종료 처리합니다.
            </summary>
            <param name="cm">이벤트 관리 개체입니다.</param>
            <summary>
            Handles to end the event when simulation ends. 
            </summary>
            <param name="cm">The calendar event manager object.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CalendarEventAt">
            <summary>
            이벤트 발생 시점의 유형을 나타냅니다.
            </summary>
            <summary>
            Specifies the type of the event occurrence point.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventAt.AtBegin">
            <summary>
            동일 시간의 이벤트 중 가장 빨리 발생합니다.
            </summary>
            <summary>
            Specifies that this event occurs first when scheduled with other events at the same time period. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventAt.BeforeProcess">
            <summary>
            동일 시간의 이벤트 중 설비 작업 이벤트보다는 빨리 발생합니다.
            </summary>
            <summary>
            Specifies that this event occurs before the event related to equipment processing, when scheduled with other events at the same time period.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.CalendarEventAt.AtEnd">
            <summary>
            동일 시간의 이벤트 중 가장 늦게 발생합니다.
            </summary>
            <summary>
            Specifies that this event occurs at last when scheduled with other events at the same time period.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IEntityTrackable">
            <summary>
            작업물 추적(Tracking) 기능을 정의하는 인터페이스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IEntityTrackable.Tags">
            <summary>
            추적 가능한 태그의 목록을 가져옵니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityTrackable.GetWips(System.String)">
            <summary>
            지정된 태그에 해당하는 작업물의 목록을 반환합니다.
            </summary>
            <param name="tag">검색할 태그입니다.</param>
            <returns>지정된 태그에 해당하는 작업물의 목록입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ILot">
            <summary>
            The Interface of the property of individual entities. This Interface basically embodies IHandlingBatch Interface.
            </summary>
            <remarks>ILot guarantees the it is an individual entity.</remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.LotID">
            <summary>
            작업물의 고유 식별자를 가져옵니다.
            </summary>
            <summary>
            The uniuqe ID of the specifeid entity(lot).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.Route">
            <summary>
            Step Flow(Process) information of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.Steps">
            <summary>
            The Step information Collection of the entity Route.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.PreviousPlan">
            <summary>
            Previous Step task(LoadInfo) information of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.CurrentPlan">
            <summary>
            Current Step task(LoadInfo) information of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.Plans">
            <summary>
            The entire Step task(LoadInfo) information from the initial Step(In case of WIP, the first Step of WIP, in case of release Lot, the first Step) to Current Plan. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.PreviousStep">
            <summary>
            The previous Step of the current Step of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.LotState">
            <summary>
            The property to show the WIP state and entity create/release.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.WeightInfo">
            <summary>
            The Weight Factor information of the entity for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.UnitQtyDouble">
            <summary>
            The number Units to form entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.IsStarted">
            <summary>
            Determines if current Step has begun. If <strong>true</strong>, Step has begun.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.IsFinished">
            <summary>
            Determines if current Step has ended. If <strong>true</strong>, Step has ended.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ILot.CurrentStep">
            <summary>
            The current Step of entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ILot.MoveFirst(System.DateTime)">
            <summary>
            Initialize entity and move to the first Step.
            </summary>
            <param name="now">Current time.</param>
            <returns>Returns the next Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ILot.CreateDummy">
            <summary>
            이 작업물과 동일한 정보를 갖지만 수량이 0인 더미 작업물을 생성합니다.
            </summary>
            <returns>더미 작업물입니다.</returns>
            <summary>
            Clones the sepcified lot as a dummy lot, which has the same information as the specified lot, but with 0 quantity.
            </summary>
            <returns>The created dummy lot.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ILot.SetToPlan(Mozart.SeePlan.DataModel.LoadInfo)">
            <summary>
            주어진 작업 정보를 작업물의 현재 작업 정보로 설정합니다.
            </summary>
            <param name="plan">작업물의 현재 작업 정보로 설정할 작업 정보입니다.</param>
            <summary>
            Sets the specified work plan of the lot to the current work plan.
            </summary>
            <param name="plan">The work plan of the specified lot to set as the current work plan </param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ISecondResource">
            <summary>
            Interface for SecondResource.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LotBatch`2">
            <summary>
            The root class for Batch type entity. 
            </summary>
            <typeparam name="TLot">The entity unit type that composes Batch.</typeparam>
            <typeparam name="TStep">The Step type that composes Batch.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.BatchID">
            <summary>
            LotBatch의 고유 식별자를 가져오거나 설정합니다. LotBatch 자체의 BatchID가 필요한 경우 설정할 수 있습니다. 기본값은 null입니다.
            </summary>
            <summary>
                <para>Gets or sets the unique ID for the LotBatch. This information can be set if LotBatch iteself requires batch ID.</para>
                <para>Default value is null.</para>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.Lot">
            <summary>
            The first entity to form Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.Sample">
            <summary>
            The first entity to form Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.CurrentStep">
            <summary>
            The current Step of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.NumOfUnits">
            <summary>
            The quantity of Batch. It is always set as 1.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.Count">
            <summary>
            The quantity of entity unit composing Batch. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.IsStarted">
            <summary>
            Determines whether to start processing the first entity. 
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.IsFinished">
            <summary>
            Determines whether all process is completed for the entity.
            It distinguished through Sample Lot state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.DispatchInTime">
            <summary>
            The start time(Queue input time) of Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.LotState">
            <summary>
            The state of Lot. The state is classified as CREATE, RELEASE, WIP.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.UnitQty">
            <summary>
            The Unit quantity of Batch. The Unit quantities of the entities in Contents are summed and returned. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.ReleaseTime">
            <summary>
            Batch release time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.CurrentState">
            <summary>
            The current state of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.StateTime">
            <summary>
            The beginning time of the current state of entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.#ctor">
            <summary>
            Consturctor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.MoveFirst(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the first Step. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return first Step information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.StepChange(System.DateTime)">
            <summary>
            Set all Steps of uniti entity of Batch to the next Step. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>List of entities set to the next Step. .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.StartTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Start processing the current Step of the Batch.
            </summary>
            <param name="now">Processing start time.</param>
            <param name="eqp">Target equipment for loading.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.EndTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Complete the process of the current Step of the Batch. 
            </summary>
            <param name="now">Processing end time. </param>
            <param name="eqp">Target equipment for loading.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.Apply(System.Action{Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            This is used to implement a specified logic for all entities in Batch. 
            </summary>
            <param name="action">The logic delegate to be applied to entity unit. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.Add(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Add entity unit to Batch. 
            </summary>
            <param name="hb">Target entity to add. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.Remove(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Remove target entity from the entities composing Batch. 
            </summary>
            <param name="hb">Target entity to remove. </param>
            <returns>If entity is properly removed, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.GetPreviousEffectiveEqpList">
            <summary>
            Return list of equipment that was available from previous Step. 
            </summary>
            <returns>Return equipment ID string list. </returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.ToolSettings">
            <summary>
            The Second Resource pool configured to the current Step of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.IsPartial">
            <summary>
            Determines if entity has been Split. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.IsPartialStart">
            <summary>
            Determines whether to start processing Split entities. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LotBatch`2.IsPartialEnd">
            <summary>
            Determines whether to processing is completed for the Split entities. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LotBatch`2.GetEnumerator">
            <summary>
            The section of IEnumerable where member is implemented. 
            Return list of entity unit composing Batch. 
            </summary>
            <returns>Return list of entity unit.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.PMEvents">
            <summary>
            The class to handle equipment down events due to PM.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DownManager">
            <summary>
            Manages the Down Event of the equipment such as equipment PM or Failure.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DownManager.Equipment">
            <summary>
            Equipment for manangement.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DownManager.ScheduleTable">
            <summary>
            Gets down schedule table.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.#ctor(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Constructor.
            </summary>
            <param name="eqp"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.Initialize">
            <summary>
            Create down event through registered DownEvent and registers the created down event to event handler.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.Register(Mozart.SeePlan.Simulation.IDownEvents)">
            <summary>
            Add Down Event handler.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.UnRegister(Mozart.SeePlan.Simulation.IDownEvents)">
            <summary>
            Remove Down Event handler.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.AddEvent(Mozart.SeePlan.DataModel.PeriodSection)">
            <summary>
            Register Down Event. 
            </summary>
            <param name="section">Target Down Event to register.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.CancelEvent(Mozart.Simulation.Engine.Time)">
            <summary>
            Cancel registered Down Event.
            </summary>
            <param name="startTime"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.CancelEvent(Mozart.Simulation.EnterpriseLibrary.AoScheduleItem)">
            <summary>
            Cancel registered Down Event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.AdjustEvent(Mozart.Simulation.Engine.Time,Mozart.SeePlan.DataModel.PeriodSection)">
            <summary>
            Adjust the time of the registerd Down Event.
            </summary>
            <param name="startTime">Target Down Event Time for ajustment.</param>
            <param name="section">Adjusted time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetNextStartScheduleItem">
            <summary>
            Returns the next Down Event to be performed from the registered Down Event. 
            </summary>
            <returns>Returns the next Down Event to be performed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetNextWorkingTime(Mozart.Simulation.Engine.Time)">
            <summary>
            기준 시간부터 작업이 가능한 시간을 반환합니다.
            </summary>
            <param name="now">기준 시간입니다.</param>
            <returns>
            기준 시간부터 작업이 가능한 시간입니다. 
            기준 시간이 작업 가능한 경우 기준 시간을 반환합니다. 
            기준 시간 이후로 더이상 작업 가능한 시간이 존재하지 않는 경우 Time.MaxValue를 반환합니다. 
            </returns>
            <summary>
            Returns the possible working time from the given time criteria. 
            </summary>
            <param name="now">The given time criteria to get the next working time.</param>
            <returns>
            The next possible working time from <em>now</em>. 
            Returns <em>now</em> if <em>now</em> is the next possible working time. 
            If no possible working time exists after <em>now</em>, <em>Time.MaxValue</em> is returned. 
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetNextNonWorkingTime(Mozart.Simulation.Engine.Time)">
            <summary>
            기준 시간부터 작업이 불가능한 시간을 반환합니다. 
            </summary>
            <param name="now">기준 시간입니다.</param>
            <returns>
            기준 시간부터 작업이 불가능한 시간입니다. 
            기준 시간에 작업이 불가능한 경우 기준 시간을 반환합니다. 
            기준 시간 이후로 더이상 작업이 불가능한 시간이 존재하지 않는다면 Time.MaxValue를 반환합니다.
            </returns>
            <summary>
            Returns the next nonworking(nonavailable) time from the given time criteria. 
            </summary>
            <param name="now">The given time criteria to get the next working time.</param>
            <returns>
            The next nonworking time from the given time critetria. 
            Returns <em>now</em> if <em>now</em> is the next  nonworking time. 
            If no possible nonworking time exists after <em>now</em>, <em>Time.MaxValue</em> is returned. 
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetNextWorkingTime(Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            기준 시간부터 지정된 작업을 완료한 이후 다음 작업이 가능한 시간을 반환합니다.
            </summary>
            <param name="now">기준 시간입니다.</param>
            <param name="work">작업 기간입니다.</param>
            <returns>기준 시간부터 지정된 작업을 완료한 이후 다음 작업이 가능한 시간입니다.</returns>
            <summary>
            Returns the next possible working time from the time specified work is completed since the given time criteria.  
            </summary>
            <param name="now">The given time criteria to get the next possible working time.</param>
            <param name="work">The time required to complete the work.</param>
            <returns>The next possible working time from the time specified work is completed since the given time criteria.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetLastestPMSchedule(System.Boolean)">
            <summary>
            Returns the last performed PM Event.
            </summary>
            <param name="containsExecuting">Decides whether to include the Event currently in progress.</param>
            <returns>Returns the last performed PM Event..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DownManager.GetStartScheduleItems(Mozart.Simulation.Engine.Time)">
            <summary>
            Returns the Down Events from the registered Down Event that starts within the input time/
            </summary>
            <param name="fence">The time range to search Down start Event.</param>
            <returns>Returns the list of Down Start Events within the input time.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EquipmentInitiator">
            <summary>
            The class that creates and initializes equipment and DispatchAgent.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.Run(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>The Main function to perform equipment initialization.</summary>
            <param name="factory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.CreateDispatchingAgents(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>Create <em>DispatchingAgent</em> to the root <em>Factory</em>. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.CreateDispatcher(Mozart.SeePlan.Simulation.AoEquipment,System.String)">
            <summary>Create Dispatcher to equipment entity.</summary>
            <param name="aeqp">The Equipment entity to created Dispatcher. </param>
            <param name="key">Dispatcher Key. Supports FIFO, WeightSum, WeightSorted method. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.CreateDefaultDispatcher(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>Create base Dispatcher. </summary>
            <param name="factory">Root Factory entity.</param>
            <param name="equipment">The Equipment entity to create Dispatcher.</param>
            <returns>Return base Dispatcher. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.GetEqpList">
            <summary>
            	<para>[FEAction] Factory/EqpInit</para>
            	<para>The FEAction to return list of Resource(Equipment) required to create and initialize Equipment. </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.GetDispatcherType(Mozart.SeePlan.DataModel.Resource)">
            <summary>
            	<para>[FEAction] Factory/EqpInit</para>
            	<para>The FEAction to return the name of dispatching rule used by each Equipment. </para>
            </summary>
            <param name="eqp">The specified <em>Resource</em>(equipment) object to get the dispatcher type set.</param>
            <returns>The dispatcher type of the specified <em>eqp</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.GetEqpSimType(Mozart.SeePlan.DataModel.Resource)">
            <summary>
            	<para>[FEAction] Factory/EqpInit</para>
            	<para>Returns the equipment simulation type string that will be used by the Equipment. </para>
            </summary>
            <param name="eqp">Target equipment type. </param>
            <returns>Return equipment simulation type string. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.GetEqpUpTime(Mozart.SeePlan.DataModel.Resource,System.DateTime)">
            <summary>
            	<para>
            		<strong>[FEAction] Factory/EqpInit</strong>
            	</para>
            	<para>Input the time to change the equipment entity state to UP..</para>
            </summary>
            <param name="resource">The equipment model to change the state to UP. </param>
            <param name="stateChangeTime">The last time of the equipement state change. It uses the StageChangeTime value of Resource. </param>
            <returns>Return the time when equipment state changed to UP. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.GetDispatchingGroupKey(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Factory/EqpInit</para>
            	<para>Return the DispatchingAgent Key where equipment belongs to. </para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <returns>Return DispatchingAgent key..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EquipmentInitiator.InitializeEquipment(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            	<para>[FEAction] Factory/EqpInit</para>
            	<para>Initialize equipment properties.</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IArrangeMap">
            <summary>
            작업물에 대한 설비 가용 정보를 관리하는 기능을 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Defines the methods to manage resource availability information for the specified entity(wafer/lot/batch,etc).  
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IArrangeMap.GetLoadableEqpList(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            지정된 작업물을 로딩할 수 있는 설비 이름의 목록을 반환합니다.
            </summary>
            <param name="entity">로딩 가능한 설비를 검색할 작업물입니다.</param>
            <returns>설비 이름이 목록입니다.</returns>
            <summary>
            Returns the list of the equipment that is able to load the specified entity(wafer/lot/batch,etc). 
            </summary>
            <param name="entity">The entity to seek all the equipment that could load this entity. </param>
            <returns>The list of possible equipment that is able to load the specified <em>entity</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IArrangeMap.GetLoadableTaskList(Mozart.SeePlan.DataModel.Resource,System.Object)">
            <summary>
            지정된 설비에서 처리 가능한 공정의 목록을 반환합니다.
            </summary>
            <param name="eqp">처리 가능한 공정을 검색할 설비입니다.</param>
            <param name="s">Second Resource와 같은 부가적인 조건입니다.</param>
            <returns>공정의 목록입니다.</returns>
            <summary>
            Returns the list of process step that the specified equipment can process the entities(wafer/lot/batch,etc).  
            </summary>
            <param name="eqp">The equipment to seek the process steps that this equipment can process. </param>
            <param name="s">Optional criteria of the specified equipment, such as second resource.</param>
            <returns>The list of process steps which the specified <em>eqp</em> can preform process operation.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IArrangeMap.GetProcessTimeInfo(Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.DataModel.Resource,System.Object)">
            <summary>
            지정된 설비에서 작업물을 처리할 때 소요되는 시간 정보를 반환합니다.
            </summary>
            <param name="lot">로딩 대상 작업물입니다.</param>
            <param name="eqp">작업물을 로딩하는 설비입니다.</param>
            <param name="s">Second Resource와 같은 부가적인 조건입니다.</param>
            <returns>작업물 처리 시간 정보입니다.</returns>
            <summary>
            Returns the consumption time to process the specified lot from the specified equipment.
            </summary>
            <param name="lot">The lot to load to the  specified equipment.</param>
            <param name="eqp">The equipment to load the specifed lot.</param>
            <param name="s">Optional criteria of the specified equipment, such as second resource.</param>
            <returns>The process time of the specified lot from the specified equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IArrangeMap.GetProcessTimeInfo(System.Object,Mozart.SeePlan.DataModel.Step,Mozart.SeePlan.DataModel.Resource,System.Object)">
            <summary>
            지정된 설비에서 작업물을 처리할 떄 소요되는 시간 정보를 반환합니다.
            </summary>
            <param name="prod">로딩 대상 작업물의 제품 정보입니다.</param>
            <param name="step">로딩 대상 작업물의 공정입니다.</param>
            <param name="eqp">작업물을 로딩하는 설비입니다.</param>
            <param name="s">Second Resource와 같은 부가적인 조건입니다.</param>
            <returns>작업물 처리 시간 정보입니다.</returns>
            <summary>
            Returns the consumption time to process the entity(wafer,lot,batch) of the specified product from the specified equipment in the specified process step.
            </summary>
            <param name="prod">The product information of the entity(wafer,lot,batch) to load to the specified equipment.</param>
            <param name="step">The process step of the entity(wafer,lot,batch) to load to the specified equipment.</param>
            <param name="eqp">The equipment to load the entity(wafer,lot,batch) of the specified product, in the specified process step.</param>
            <param name="s">Optional criteria of the specified equipment, such as second resource.</param>
            <returns>The process time of the entity(wafer,lot,batch) of the specified product, from the specified equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.GetNextStep(Mozart.SeePlan.DataModel.Step,Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Search the next Step of the current Step and return.
            </summary>
            <param name="orgNext"></param>
            <param name="entity"></param>
            <param name="crrent"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.GetPrevStep(Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Search the previous Step of the current Step and return.
            </summary>
            <param name="entity"></param>
            <param name="crrent"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.TrackOutSplit(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Checks if Lot requires to be Split at Track Out. If required, Split Lot. 
            </summary>
            <param name="hb"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.TrackOutMerge(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Checks if Lot requires to be Merged at Track Out. If required, merge Lot. 
            </summary>
            <param name="hb"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.IsSkip(Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.DataModel.Step)">
            <summary>
            Determines whether to skip Step.
            </summary>
            <param name="entity"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IBillofProcess.StepChange(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            It is called when entities in IHandlingBatch is moved to the next Step, Track Out from the equipment changed to CurrentStep.
            This is the point to include logic to Spplit/Merge Lots after Track Out. 
            </summary>
            <param name="hb"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IEntityMonitor">
            <summary>
            작업물의 상태 변경 정보를 수집하는 기능을 나타내는 인터페이스입니다.
            </summary>
            <summary>
            Provides methods to collect state change information of the entity(wafer,lot,batch).
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.TransferIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            TransferIn 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>TransferIn</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.TransferOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            TransferOut 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>TransferOut</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.TrackIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            TrackIn 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>TrackIn</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.TrackOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            TrackOut 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>TrackOut</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.HoldIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            HoldIn 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>HoldIn</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.HoldOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            HoldOut 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>HoldOut</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.CancelWait(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            CancelWait 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>CancelWait</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.DispatchIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            DispatchIn 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>DispatchIn</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.DispatchOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            DispatchOut 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>DispatchOut</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.OutWaitIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            WaitIn 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>WaitIn</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityMonitor.OutWaitOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            OutWaitOut 상태가 된 작업물의 정보를 수집합니다.
            </summary>
            <param name="entity">상태가 변경된 작업물입니다.</param>
            <summary>
            Collects the entity information of <em>OutWaitOut</em> state. 
            </summary>
            <param name="entity">The specified entity to be collected.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IEquipmentMonitor">
            <summary>
            The Interface model to collect data when equipment state is changed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEquipmentMonitor.StateChanged(Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            The function is called when state is changed. 
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="state">The changed state type.</param>
            <param name="entity">Target entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IHandlingBatch">
            <summary>
            The Interface for Entity/Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.BatchID">
            <summary>
            HandlingBatch ID. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.Sample">
            <summary>
            The Sample Lot of the Lot composing HanldingBatch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.CurrentStep">
            <summary>
            The current Step of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.UnitQty">
            <summary>
            The unit quantities included to the Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.IsStarted">
            <summary>
            Determines whether to start the first Step for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.IsFinished">
            <summary>
            Checks if all Steps are completed for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.Count">
            <summary>
            The number of entities to form a Batch.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.DispatchInTime">
            <summary>
            The start time of the final waiting of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.ReleaseTime">
            <summary>
            The release time of entity to the factory.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.StartTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Change the current state of entity to Start.
            </summary>
            <param name="now">Start time of task.</param>
            <param name="eqp">Equipment data processing entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.EndTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Change the current state of entity to End.
            </summary>
            <param name="now">End time of task.</param>
            <param name="eqp">Equipment data processing entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.GetPreviousEffectiveEqpList">
            <summary>
            Returns the list of equipments available from previous Step.
            </summary>
            <returns>The list of string containing the equipment ID from the previous step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.MoveFirst(System.DateTime)">
            <summary>
            Move the current Step of the entity to first Step.
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return first Step..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.StepChange(System.DateTime)">
            <summary>
            Set the current Step of the entity as the next Step to be moved. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>The list of unit entities set to next Step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IHandlingBatch.Apply(System.Action{Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            This is used to apply logics for a particular entity included in Batch. 
            </summary>
            <param name="action">This is the logic delegate to be applied to unit entity.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.IsPartial">
            <summary>
            Checks if entity has been Split.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.IsPartialStart">
            <summary>
            Determines whether to start processing for the Split entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.IsPartialEnd">
            <summary>
            Checks if the Split entity processing is completed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.CurrentState">
            <summary>
            The current WIP state of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.StateTime">
            <summary>
            The beginning time of the current WIP state of the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.IHandlingBatch.ToolSettings">
            <summary>
            The Second Resource pool configured to the current Step of the entity.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoBatchRelease">
            <summary>This is the Simulation object responsible for releasing Batches.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBatchRelease.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Simulation engin coordinator.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBatchRelease.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Root Factory object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBatchRelease.Entity">
            <summary>
            Target entities for release.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoBatchRelease.ReleasedCount">
            <summary>
            Total Lots released. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBatchRelease.Output">
            <summary>Output port of AoBatchRelease.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBatchRelease.Exit">
            <summary>The Delegate to be executed when entity is unloaded. </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBatchRelease.AddEntity(Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Add additional entity for release.  
            The target entities included are to be  released at the suggested time. 
            </summary>
            <param name="time">Entity release time.</param>
            <param name="entity">Target entity to be released.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket">
            <summary>
            The class of entity set to be released at same period.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket.Time">
            <summary>
            The designated time to release.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket.List">
            <summary>
            The list of entities to be released at the designated time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket.#ctor(Mozart.Simulation.Engine.Time,System.Collections.Generic.List{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            Constructor.
            </summary>
            <param name="time">Entity release time.</param>
            <param name="list">The list of entities to be released at the designated time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket.CompareTo(Mozart.SeePlan.Simulation.AoBatchRelease.ReleaseBucket)">
            <summary>
            Compares the current <em>ReleaseBucket</em> instance with another <em>ReleaseBucket</em> object and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">The <em>ReleaseBucket</em> object to compare with this instance.</param>
            <returns>
                <para>A value that indicates the relative order of the objects being compare. The return value has these meanings.</para>
                <para>Less than zero : This instance preceds <em>other</em> in the sort order.</para>
                <para>Zero : This instance occurs in the same position in the sort order as <em>object</em>.</para>
                <para>Greater than zero : This instance follows <em>object</em>.</para>
            </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc">
            <summary>The Process model of Chamber equipment.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.#ctor(Mozart.Simulation.Engine.Coordinator,System.Int32)">
            <summary>Constructor.</summary>
            <param name="co">Coordinator entity.</param>
            <param name="capacity"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.#ctor(Mozart.Simulation.Engine.ActiveObject,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Target equipment entity.</param>
            <param name="capacity"></param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc.Capacity">
            <summary>
            Capacity of Process.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.CanEnter">
            <summary>
            Checks the possibility of loading.
            </summary>
            <returns>If loading is possible, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.UpdateStats">
            <summary>
            Updats statistics.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.Break(Mozart.Simulation.Engine.Time)">
            <summary>
            Suspends Process.
            </summary>
            <param name="breakTime">The time to suspend Process.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            Determines whether to TrackOut after initializing initial Wip.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">Start time of target entity.</param>
            <param name="force">This is used to decide to load entities to equipment when initial entities are processed longer than the configured time. If the entities are to be loaded to the equipment, set as true, or else, set as false.</param>
            <returns>If force is false and initial entities are processed longer than configured time, return false, or else, return true.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.GetNextInTime">
            <summary>
            Calculates the time when the next entity could be loaded. 
            </summary>
            <returns>Returns the time when the entity could be processed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.GetRemainTimeToEnd(Mozart.Simulation.Engine.ISimEntity,System.Int32)">
            <summary>
            Calculates the remaining time for the entity to complete processing.
            </summary>
            <param name="entity">Target entity</param>
            <param name="position">Target Unit location.</param>
            <returns>Returns the processing remaining time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.GetUnloadingTime(Mozart.Simulation.Engine.ISimEntity,System.DateTime)">
            <summary>
            작업물이 투입되었을 때 Unloading되는 시간을 계산하여 반환
            </summary>
            <param name="entity">작업물</param>
            <param name="inTime">투입시간</param>
            <returns></returns>
            <summary>
            Calculates the unloading time of the specified lot when loaded to this equipment.
            </summary>
            <param name="entity">The lot to load to calculate the unloading time from this equipment.</param>
            <param name="inTime">The time the specified lot is loaded in reference to calculate the unloading time.</param>
            <returns>The simulation date and time specifying the unloading time of the specified lot from this equipment.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2">
            <summary>
            The entity information sent to AoChamberProc.
            The information of trigger time per event and the next event trigger could be inquired.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.TactTime0">
            <summary>
            TactTime.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.StartingIndex">
            <summary>
            Start Index.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.EndingIndex">
            <summary>
            End Index.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.#ctor(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,System.Int32,Mozart.Simulation.Engine.Time,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Target entity</param>
            <param name="inTime">The input time of entity.</param>
            <param name="waitSetupTime">Setup standby time..</param>
            <param name="setupTime">Setup time.</param>
            <param name="tactTime">TactTime time.</param>
            <param name="numOfLoads">Unit quantity of entity.</param>
            <param name="t0">The remaining time until Unloading StartingIndex.</param>
            <param name="startingIndex">Start Index.</param>
            <param name="endingIndex">End Index.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.GetRemainTimeToUnload(Mozart.Simulation.Engine.Time)">
            <summary>
            The remaining time until Last Unload.
            </summary>
            <param name="now">Current time.</param>
            <returns>Returns the remaining Last Unload time in Time format.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc.EntityInfo2.GetTactTime(System.Int32)">
            <summary>
            Calculates TactTime.
            </summary>
            <param name="n">Numbers of Unit.</param>
            <returns>Returns the TactTime in Time format.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2">
            <summary>This is the Process model used for Parellal Chamber equipment type.</summary>
            <remarks>This is used only when SymType is Parallel Chamber.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.GetLoadableChambersHandler">
            <summary>
            This is the Delegate to get Chamber that could process.
            </summary>
            <param name="sender">Target AoChamberProc2 object.</param>
            <returns>Returns the list of Chamber Lable that could load.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.GetNeedSetupChamberHandler">
            <summary>
            This is the Delegate to get Chamber that could process.
            </summary>
            <param name="sender">Target AoChamberProc2 object.</param>
            <returns>Returns the list of Chamber Lable that could load.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.ChamberNotifyHandler">
            <summary>
            This is the Delegate to notice whether the Chamber is available or not. 
            </summary>
            <param name="sender">Target AoChamberProc2 object</param>
            <param name="chamber">Target Chamber Label.</param>
            <param name="toLoad">Information of loaded entities.</param>
            <param name="state">변경될 챔버의 상태입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.#ctor(Mozart.Simulation.Engine.Coordinator,System.String[])">
            <summary>
            Initializes a new instance of the <em>AoChamberProc2</em> class, specifying the coordinator that drives the simulation module execution and the list of chamber label information.
            </summary>
            <param name="co">Simulation Coordinator.</param>
            <param name="labels">The list of Chamber Label information.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.#ctor(Mozart.Simulation.Engine.ActiveObject,System.String[])">
            <summary>
            Initializes a new instance of the <em>AoChamberProc2</em> class with the specified active object used in simulation and the list of chamber label information.
            </summary>
            <param name="ao">Simulation object..</param>
            <param name="labels">The list of Chamber Label information.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc2.Capacity">
            <summary>
            The numbers of Chamber in equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc2.AvailableCapacity">
            <summary>
            Available numbers of Chamber of the equipment.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.ChamberEntityLoading">
            <summary>
            The EventHandler that is called when entity is loaded to Chamber
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc2.Chambers">
            <summary>
            Returns the Chamber information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc2.LoadingChambersCountValue">
            <summary>
            Returns the numbers of Chambers that could be loaded.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoChamberProc2.LoadingChambersValue">
            <summary>
            Returns the numbers of Chambers that could be loaded.
            Calls and returns [FEAction] Equipment/ProcessControl/GetLoadableChambers
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.LoadableChambers">
            <summary>
            로딩 가능한 Chamber 를 반환하는 EventHandler 입니다.
            </summary>
            <summary>
            An event handler that returns the chamber that is able to load the lot.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.Die(System.String,Mozart.Simulation.Engine.Time)">
            <summary>
            지정된 챔버를 비활성화 시키고, 챔버가 활성화되는 시간을 설정합니다. 
            만약 지정된 시간이 과거 시간인 경우 챔버는 비활성화되지 않습니다. 
            만약 챔버에 로딩된 작업물이 존재한다면 해당 작업물의 챔버 내 작업 시간은 비활성된 기간 만큼 지연됩니다. 
            이미 비활성 상태인 챔버는 이 메서드의 로직이 적용되지 않습니다.
            </summary>
            <param name="chamber">상태를 변경할 챔버의 이름입니다.</param>
            <param name="ttl">챔버가 활성화될 시간입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.Live(System.String)">
            <summary>
            지정된 챔버를 활성화 시킵니다. 
            이미 활성 상태인 챔버는 이 메서드의 로직이 적용되지 않습니다.
            </summary>
            <param name="chamber">활성화 시킬 챔버입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.CanEnter">
            <summary>
            Checks if entities could be input.
            </summary>
            <returns>If entities are able to be input, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.UpdateStats">
            <summary>
            Update statistics information.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.Break(Mozart.Simulation.Engine.Time)">
            <summary>
            Suspend Process
            </summary>
            <param name="breakTime">Time to suspend Process.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            Determines whether to TrackOut after initializing initial Wip.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">Start time of target entity.</param>
            <param name="force">This is used to decide to load entities to equipment when initial entities are processed longer than the configured time. If the entities are to be loaded to the equipment, set as true, or else, set as false.</param>
            <returns>If force is false and initial entities are processed longer than configured time, return false, or else, return true.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.GetNextInTime">
            <summary>
            Calculates the time when the next entity could be loaded.
            </summary>
            <returns>Returns the time when the entity could be processed.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.GetRemainTimeToEnd(System.String)">
            <summary>
            Returns the remaining time to complete the work of the entity currently processing in target chamber. 
            </summary>
            <param name="chamber"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.SectionInfo">
            <summary>
            작업물을 로딩할 수 있는 챔버의 수를 포함하는 시간 구간을 나타내는 클래스입니다. 
            가용한 챔버의 수가 변경되는 시점이 이전 구간의 끝 시간이고, 다음 구간의 시작 시간이 됩니다. 
            마지막 구간의 끝 시간은 Time.MaxValue입니다.
            </summary>
            <summary>
            <para>Specifies the time section containing the available numbers of chambers to load the lot.</para>
            <para>The time when the available numbers of chambers are changed, is the end of the previous time section and start of the next time section.</para>
            <para>The time of the last time section is <em>Time.MaxValue</em>.</para>
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.SectionInfo.Fence">
            <summary>
            현재 구간의 끝 시간입니다.
            </summary>
            <summary>
            The end time of the current time section. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.SectionInfo.Number">
            <summary>
            현재 구간에서 작업물을 로딩할 수 있는 챔버의 수입니다.
            </summary>
            <summary>
            The numbers of chambers available to load the lots in the current time section.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo">
            <summary>
            The information of entity processed in Chamber.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.Entity">
            <summary>
            Entity information..
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.InTime">
            <summary>
            The processing in time of entity.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.Time">
            <summary>
            The processing end time of entity.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.Units">
            <summary>
            The number processing units of entity.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.SetupStartTime">
            <summary>
            SetUp start time.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.WorkInfo.SetupEndTime">
            <summary>
            SetUp end time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.GetUnloadingTime(Mozart.Simulation.Engine.ISimEntity,System.DateTime)">
            <summary>
            작업물이 투입되었을 때 Unloading되는 시간을 계산하여 반환
            </summary>
            <param name="entity">작업물</param>
            <param name="inTime">투입시간</param>
            <returns></returns>
            <summary>
            Returns the unloading time when the lot is released to the chamber. 
            </summary>
            <param name="entity">The specified lot to calculate the unloading time after release.</param>
            <param name="inTime">The date and time when the specifeid lot is released.</param>
            <returns>The unloading time of the specified lot from the chamber.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2">
            <summary>
            The entity information sent to AoChamberProc2. The information of trigger time per event and the next event trigger could be inquired.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.FU">
            <summary>
            First Unloading time.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.LL">
            <summary>
            Last Loading time.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.LU">
            <summary>
            Last Unloading time.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.LoadingTime">
            <summary>
             Loading time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.#ctor(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,System.Int32,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Constructor
            </summary>
            <param name="entity">Target entity.</param>
            <param name="inTime">Entity input time.</param>
            <param name="waitSetupTime">Setup standby time.</param>
            <param name="setupTime">Setup time.</param>
            <param name="tactTime">TactTime time.</param>            
            <param name="numOfUnits">Unit quantity of target entity.</param>
            <param name="loadingTime">Loading time</param>
            <param name="fu">First Unloading time.</param>
            <param name="ll">Last Loading time.</param>
            <param name="lu">Last Unloading time.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.GetRemainTimeToUnload(Mozart.Simulation.Engine.Time)">
            <summary>
            Return the remaining time until LastUnloading
            </summary>
            <param name="now"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoChamberProc2.EntityInfo2.GetTactTime(System.Int32)">
            <summary>
            Return TactTime
            </summary>
            <param name="n">The Unit time to calculate TactTime.</param>
            <returns>TactTime value in Time type format.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChamberInfo">
            <summary>Individual Chamber information.</summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ChamberInfo.Label">
            <summary>
            Chamber Label.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ChamberInfo.Active">
            <summary>
            Shows if Chamber state is Active.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ChamberInfo.TimeToLive">
            <summary>
            Shows the time when Chamber became Active.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.List">
            <summary>
            The list of entities in process or standby in the Chamber.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.Current">
            <summary>
            Entities cuurently in process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.OutTime">
            <summary>
            The processing end time of current entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.CurrentUnits">
            <summary>
            The Unit quantities of current entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.Next">
            <summary>
            Next entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.NextOutTime">
            <summary>
            The processing end time of next entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.NextUnits">
            <summary>
            The Unit quantities of next entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.Last">
            <summary>
            The last entity on standby (Wait state) from the entity list.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.LastOutTime">
            <summary>
            The processing end time of the last entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.LastUnits">
            <summary>
             The Unit quantities of the last entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChamberInfo.IsReserved">
            <summary>
            Checks if there are any jobs registered in Chamber.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChamberInfo.ToString">
            <summary>
            Convert and return as string data type.
            </summary>
            <returns> Return data as Label + :J=Numbers of Job on standby, Current = Current entities  .</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChamberInfo.GetEventTime(Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            Returns the next Event trigger time.
            </summary>
            <returns>Returns the next Event trigger time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChamberInfo.GetAvailableTime(System.Boolean)">
            <summary>
            Returns the time when job can start.
            </summary>
            <returns>Return the completed time of the reserverd entitie's processing.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoCustom">
            <summary>
            Custom Process Model.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Coordinator object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Target equipment object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.Entity">
            <summary>
            The information entity of the last event triggerd. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.Capacity">
            <summary>
            Gets and sets the capacity of the custom process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.StatsEnabled">
            <summary>
            This determines whether to use statistics. If statistics is used, the value is true, or else, the value is false.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.StatsSize">
            <summary>
            The statistics information for Process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.Contents">
            <summary>
            Returns the entities currently in processing from Process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoCustom.Count">
            <summary>
            Returns the number of entities processing in Process. (Returned as Entity numbers.)
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.Get(System.Int32)">
            <summary>
            Returns the entities located in Index of ConetentList. 
            </summary>
            <param name="index">index information.</param>
            <returns>Returns the target entities in index location</returns>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoCustom.Input">
            <summary>
            Input Port of AoProcess.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoCustom.Output">
            <summary>
            Output Port of AoProcess.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoCustom.Enter">
            <summary>
            The Event Handler triggered when entity is input from AoProcess. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoCustom.Exit">
            <summary>
            The Event Handler triggered when processing entity is completed from AoProcess. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.ResetStats">
            <summary>
            Initializes statistics information. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.Add(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Add entity to Process.
            </summary>
            <param name="entity">Target entity.</param>
            <returns>Return NULL when entity is added, or else, return entity</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.RemoveAt(System.Int32)">
            <summary>
            Delete the entities belonging to Index. 
            </summary>
            <param name="index">Target Index information.</param>
            <returns>Returns the entities in Index. If Index value is equal or larger than the registered entitiy number, Exception is occured.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.Remove(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Delete entity from Contents. 
            </summary>
            <param name="entity">Target entity.</param>
            <returns>Returns the deleted entity information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.TakeOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            End processing and send entities to Output Port.
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoCustom.CanEnter">
            <summary>
            Checks if new entity could be entered. 
            </summary>
            <returns>If it entity could be entered, return true, or else, return false. </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoDispatch">
            <summary>
            The abstract class to manange entity queue and supervise Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoDispatch.Entity">
            <summary>
            This is the entity object entering AoDispatch for Dispatching. 
            These entities are considered as target entities for Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoDispatch.Count">
            <summary>
            The WIP quantities of the current point in DispatchingAgent
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>The constructor to create Dispatch</summary>
            <param name="co">Simulation engine <em>Coordinator</em> object.</param>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoDispatch.Input">
            <summary>
            Input Port of AoDispatch.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoDispatch.Output">
            <summary>
            Output Port of AoDispatch.  
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.GetEntity(Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            This is called when linked Resource object requests for target Entity for processing. 
            Returns the Entitiy on standby to be processed by the target Resource.
            </summary>
            <param name="inPort">The Port object to be linked with the equipment.</param>
            <returns>Returns the selected entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.GetEntityCount(Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            Returns the number of Entities on standby for the Port linked to the equipment.  
            </summary>
            <param name="inPort">The Port object to be linked with the equipment.</param>
            <returns>Returns the numbers of entities on standby.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.Register(System.String,Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.DispatchInPort)">
            <summary>
            Registers equipment to DispatchAgent. 
            </summary>
            <param name="regKey">Registeration Key string</param>
            <param name="regObject">AoEquipment equipment object.</param>
            <param name="inPort">DispatchInPort object.</param>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoDispatch.Enter">
            <summary>
            The Delegate handled at the point entering to DispatchingAgent.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoDispatch.Exit">
            <summary>
            The Delegate handled during outgoing from DispatchAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.CanEnter">
            <summary>
            QDetermines and returns the result if additional entities could be accepted to Queue. 
            </summary>
            <returns>If entities could be added to Queue, return <strong>true</strong>, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.Block">
            <summary>
            Sets to block additional input to DispatchAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.Unblock">
            <summary>
            Disable input block for DispatchAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoDispatch.IsBlocked">
            <summary>
            Checks whether DispatchAgent is input block state. 
            </summary>
            <returns>If DispatchAgent is input block state, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoEquipment">
            <summary>
            작업물을 로드하여 작업 유형에 따라 정해진 시간 동안 작업물 가공 후 언로드하는 설비를 나타내는 클래스입니다.
            설비 개체는 각각 하나의 AoLoader와 AoUnloader, 그리고 한 개 이상의 프로세스를 갖고 있습니다.
            AoFactory 개체는 각각의 Resource 개체로부터 설비 개체를 생성합니다.
            </summary>
            <summary>
                <para>Represents the equipment that loads the entity, processes the entity by the process type and given process time, and unloads the entity.</para>
                <para><em>AoEquipment</em> object has one <em>AoLoader</em> and AoUnloader, and at least one process type active object.</para>
                <para><em>AoFactory</em> object creates <em>AoEquipment</em> object from <em>Resource</em> class.</para> 
            </summary>
            <summary>
            Provides the extension methods of the <em>AoEquipment</em> class.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoEquipment.DispatchingData">
            <summary>
            The target queue information for Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.UseProcessingTime">
            <summary>
            Gets or sets whether the equipment use processing time for calcuating event time. Default value is true.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.#ctor(Mozart.SeePlan.DataModel.Resource,Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Equipment Constructor.
            </summary>
            <param name="eqp">Equipment data object.</param>
            <param name="ao">Root Factory object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Input">
            <summary>
            Input Port of equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Output">
            <summary>
            Output Port of equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Factory">
            <summary>
            The Factory information registered with equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Loader">
            <summary>
            The object to handle entity loading to the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Unloader">
            <summary>
            The object to handle entity unloading to the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Processes">
            <summary>
            The process object to handle processing of the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Target">
            <summary>
            Equipment data including equipment property information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.EqpID">
            <summary>
            Equipment ID string.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Dispatcher">
            <summary>
            Dispatcher for equipment's Dispatching 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.DispatchingAgent">
            <summary>
            DispatchAgent of equipment. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.SetupTime">
            <summary>
            The equipment SetupTime. The SetupTime is generated at the point when entity is loaded to the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.SetupCrewTime">
            <summary>
            설비 셋업 중 셋업 크루가 필요한 기간을 가져옵니다.
            </summary>
            <summary>
            Gets the time setup crew is required out of the entire setup time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.WaitSetupTime">
            <summary>
            Equipment SetUp Wait time. Returns the Wait time including the Second Resource available time for SetUp.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.RequiredCrews">
            <summary>
            The numbers of SetupCrew Resource for equipment Setup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.SetupCrew">
            <summary>
            Setupcrew object for equipment Setup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.ReservedSetupCrew">
            <summary>
            Setupcrew  object for reserved equipment Setup.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.CurrentToolSettings">
            <summary>
            The Equipment's SecondResource set utilization to process entities.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.ReservedToolSettings">
            <summary>
            The reserved SecondResource set to process entities. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.CurrentProcTime">
            <summary>
            The information of the processing time of the current target entity to load. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.IsAvailable">
            <summary>
            Equipment availability. If <strong>false</strong> is returned, additional loading could not be done. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.IsProcessing">
            <summary>
            Checks if the current entity is processing in the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.IsStartSetup">
            <summary>
            Returns the current Setup state.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.LastPlan">
            <summary>
            The information of the last job done from the equipment.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.WaitToolSettings">
            <summary>
            Information of Tool Set on standby.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.WaitSetupCrews">
            <summary>
            Information of SetupCrew on standby.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.DownManager">
            <summary>
            The object that manages equipment Down state, such as PM/Failure. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.EqpDispatchInfo">
            <summary>
            장비 Dispatching 시 로그저장정보입니다.
            </summary>
            <summary>
            Save log information of Equipment at Dispatching. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetWaitDownTime">
            <summary>
            Returns the remaining time until next Down schedule. 
            </summary>
            <returns>
            Returns the remaining time until the next Down schedule. 
            If no event exits for the next Down state, reuturn Time.MaxValue.
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetRemainTimeToEnd">
            <summary>
            Returns the remaining time to complete the work of the entity currently processing. 
            </summary>
            <returns>Returns the remaining time until work is complete.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetRemainTimeToEnd(System.String)">
            <summary>
            공장의 현재 시간 기준으로 Parallel Chamber 설비에서 주어진 이름의 챔버가 가용해질 때까지 남은 시간을 반환합니다. 
            만약 이 설비가 Parallel Chamber가 아닌 경우 GetRemainTimeToEnd() 함수의 반환값을 반환합니다.
            만약 이 설비가 Parallel Chamber이지만 주어진 챔버의 이름이 null이거나 String.Empty 문자열인 경우 설비의 모든 챔버가 가용해질 때까지 남은 시간을 반환합니다.
            </summary>
            <param name="component">챔버의 이름입니다.</param>
            <returns>챔버가 가용해질 때까지 남은 시간입니다. 즉시 가용한 경우 반환값은 Time.Zero입니다.</returns>
            <summary>
            <para>Returns the time remained in order for the specified chamber of the parallel chamber type equipment to be available to load the entity based on the current time of the factory.</para>
            <para>If the <em>AoProcess</em> in this equipment is not a parallel chamber type, the <em>Time</em> returned from <see cref="M:Mozart.SeePlan.Simulation.AoEquipment.GetRemainTimeToEnd"/> is returned.</para> 
            <para>If the <em>AoProcess</em> in this equipment is a parallel chamber type, but the specfied chamber is null or <em>String.Empty</em>, the reamined time for all the chambers to be avialable is retunred. </para>
            </summary>
            <param name="component">The name of the chamber to seek for.</param>
            <returns>The remained time for the specified <em>component</em> to be available. If the <em>component</em> is available at instant, returns <em>Time.Zero</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.IsBlocked(System.String)">
            <summary>
            Parrallel Chamber 설비에서 주어진 이름의 챔버가 현재 Active 상태인지 여부를 반환합니다.
            </summary>
            <param name="component">챔버의 이름입니다.</param>
            <returns>챔버가 Active 상태인 경우 true입니다. 그 외의 경우 false입니다.</returns>
            <summary>
            Returns a value to indicate whether the specified chamber of the parallel chamber type equipment is active. 
            </summary>
            <param name="component">The name of the chamber to seek for.</param>
            <returns><em>true</em> if the specified chamber is active; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetRemainTimeToLoading">
            <summary>
            Returns the remaining time until the next loading start time.  
            In general, the remaining time of process complete and next loading time is same for Table, LotBatch, WaferBatch SimType equipment.
            However, these time can be different for Inline, BatchInline, Chamber type equipment.
            </summary>
            <returns>Returns the remaining time until next loading.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetNextInTime(System.Boolean,System.Boolean)">
            <summary>
            The expected time when the next entity could be loaded. 
            이 함수는 투입된 작업물을 순차적으로 처리하는 설비 유형에 대해서만 유효합니다.
            </summary>
            <param name="outTime">설비에 작업대기중인 작업물이 끝나는 시간</param>
            <param name="withBuffer">설비 버퍼에 포함된 작업물의 고려할지 여부입니다.</param>
            <param name="withDownSchedule">설비 다운 계획을 고려할지 여부입니다. 계획 조정을 고려하지 않고, 단순히 시간만 더합니다.</param>
            <returns>Returns the time available for loading.</returns>
            <summary>
            <para>The expected time when the next entity could be loaded.</para>
            <para>This method is valid on equipment types that could sequentially processes(produces) entities(wafer,lot,batch).</para> 
            </summary>
            <param name="withBuffer">Specifies whether the entities in the buffer of the equipment should be considered.</param>
            <param name="withDownSchedule">Specifies whether to consider equipment down(PM) plan. <em>true</em> to add down time; otherwise, false.</param>
            <returns>Returns the time available for loading.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetTactTime(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Returns the Tact Time which is one of the information of time that takes for a equipment process entities. 
            The time elapsed to process entity in a unit. 
            </summary>
            <param name="hb">Target entity</param>
            <returns>Returns Tact Time information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetTactTime(Mozart.SeePlan.Simulation.IHandlingBatch,System.Double)">
            <summary>
            Returns the Tact Time which is one of the information of time that takes for a equipment process entities. 
            The time elapsed to process entity in a unit. 
            </summary>
            <param name="hb">Target entity</param>
            <param name="units">unit qty</param>
            <returns>Returns Tact Time information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.CanEnter(System.Object)">
            <summary>
            Checks and returns if the equipment is available to load new entity.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.OnLoad(System.Object)">
            <summary>
            This is called at the point when the equipment is loading entity.
            Loader.Load --> OnLoad
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.OnEnter(System.Object)">
            <summary>
            This is called at the point when equipment starts to processing.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.StartTask(Mozart.SeePlan.Simulation.AoProcess,Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            
            </summary>
            <param name="proc"></param>
            <param name="hb"></param>
            <param name="initial"></param>
            <param name="dummy">true = The entity is not actully processed, but to start/end processing of entity.</param> 
            <param name="start"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.StartEntity(Mozart.SeePlan.Simulation.AoProcess,Mozart.SeePlan.Simulation.IHandlingBatch,System.DateTime)">
            <summary>Changes the entity state to Start</summary> 
            <param name="proc"></param>
            <param name="hb">Target entity.</param>
            <param name="startTime">The start time of entity processing.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.SetupEqp(Mozart.SeePlan.Simulation.AoProcess,Mozart.SeePlan.Simulation.IHandlingBatch,System.Boolean,System.DateTime)">
            <summary>
            Determine whether Setup is required and sets Setup/WaitSetup time. 
            Allocate Resource required for Setup
            </summary>
            <param name="proc"></param>
            <param name="hb"></param>
            <param name="initial"></param>
            <param name="start"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetSetupCrew(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Gets the SetupCrew required to process entity.
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Returns SetupCrew information. In case there is not SetupCrew registered to ResourcePool or SetupCrew is not requried, return NULL.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.OnEntered(System.Object)">
            <summary>
            This is called right after the entity starts to process in the equipment. 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.OnExit(System.Object)">
            <summary>
            Unloader.Exit ==> Equipment.OnExit
            This is called at the point entity is unloaded from the equipment after processing.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.SeizeToolSettings(Mozart.SeePlan.Simulation.IHandlingBatch[])">
            <summary>
            Utilizes Tool Set.
            </summary>
            <param name="batches">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.AddInBuffer(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
             Set <strong><em>entity</em></strong> on standby to be loaded to the equipment. </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.AddOutBuffer(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Set target entity to standy in Out Buffer of equipment.
            Unloading is handled at the same time entity starts to be processed. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.WriteHistory(Mozart.SeePlan.Simulation.LoadingStates)">
            <summary>
            Leave logs at the point equipment changes its state.
            </summary>
            <param name="state">변경된 설비의 상태입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.WriteHistory(Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            설비의 상태 변경 이력을 기록합니다.
            </summary>
            <param name="state">변경된 설비의 상태입니다.</param>
            <param name="entity">설비의 상태 변경을 야기한 작업물입니다.</param>
            <summary>
            Writes the state change history of this equipment. 
            </summary>
            <param name="state">The changed state of this instance.</param>
            <param name="entity">The entity that caused the equipment to change its state.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.ActivateInBuffer">
            <summary>
            Change the equipment state ti select entities, in case entities on standby exist in equipment's Loader. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.WakeUp">
            <summary>
            This is used to inflow entity to Loader when equipment is able to load. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.Preset">
            <summary>
            The weight preset
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.LocationKey">
            <summary>
            The Key string to indicate the equipment location
            Returns LocationKeys type, for equipment, LocationKeys.EQP is always returned.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.ProcFirst``1">
            <summary>
            Returns the first Process of equipment's process.
            </summary>
            <typeparam name="TProc">The Process class type correspondent to Equipment type.</typeparam>
            <returns>Returns the process object of the designated Process type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.ProcArray``1">
            <summary>
            Returns the entire list of Process of Equipment.
            </summary>
            <typeparam name="TProc">The Process class type correspondent to Equipment type.</typeparam>
            <returns>Returns the process list of the designated Process type</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.ModifiyDownScheduleBeforeStart(System.DateTime)">
            <summary>
            Checks if Down Schedule needs to be fixed. This is called before job starts. 
            </summary>
            <param name="now">Current time</param>
            <returns>Returns whether entity should not be processed and inserted to InBuffer.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.IsBatchType">
            <summary>
            장비가 batch processing type 장비인지 여부입니다. 
            </summary>
            <returns>Batch processing 장비인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <remarks>Equipment/Misc/IsBatchType FEAction 을 호출합니다.</remarks>
            <summary>
            Determines whether the specified equipment is a batch processing type. 
            </summary>
            <returns><strong>true</strong> if the specified equipment is a batch processing type; otherwise <em>false</em>.</returns>
            <remarks>Calls Equipment/Misc/IsBatchType FEAction.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.IsNeedSetup(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물을 처리하기 위해 Setup이 필요한지 여부입니다.
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Setup이 필요한 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>
            Determines whether the specified equipment requires setup to process the spcified entity(wafer,lot,batch).
            </summary>
            <param name="hb">The entity to determine whether the equipment requires setup to load and process this entity.</param>
            <returns><strong>true</strong> if setup is required; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.IsNeedSetupCrew(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물의 Setup 처리시 Setup crew 가 필요한지 여부입니다.
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Setup crew 가 필요한 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>
            Determines whether setup crew is required to perform setup on the equipment to process the specified entity(wafer,lot,batch). 
            </summary>
            <param name="hb">The entity to determine whether the setup crew is required for setup on the equipment that process this entity.</param>
            <returns><strong>true</strong> if setup crew is required to perform setup;otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetSetupCrewKey(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물의 Setup 을 처리하기 위한 setup crew 의 ID 입니다. 
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Setup crew 의 검새 key 문자열입니다.</returns>
            <summary>
            The ID of the setup crew to perform setup on the equipment to process the specified entity(wafer,lot,batch). 
            </summary>
            <param name="hb">The entity that requires setup on the equipment to process this entity and setup crew to perform setup on the equipment.</param>
            <returns>The string containing the key value of the setup crew.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.FindSetupTime(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            대상 작업물의 Setup 시간을 반환합니다.
            </summary>
            <param name="hb">Target entity.</param>
            <returns>Setup 시간입니다.</returns>
            <summary>
            Returns the consumption time of the setup on the equipment.
            </summary>
            <param name="hb">The entity in which the specified equipment requires setup to process.</param>
            <returns>The cosumption time for setup on the equipment processing this <em>hb</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.FindSetupCrewTime(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.SecondResource,System.Int32,Mozart.Simulation.Engine.Time)">
            <summary>
            설비 셋업 중 셋업 크루가 필요한 기간을 가져옵니다.
            </summary>
            <param name="aeqp">셋업이 진행되는 설비입니다.</param>
            <param name="hb">셋업을 유발한 작업물입니다.</param>
            <param name="crew">셋업을 수행할 크루 정보입니다.</param>
            <param name="count">셋업을 수행할 크루의 수입니다.</param>
            <param name="setupTime">전체 셋업 시간입니다.</param>
            <returns>전체 셋업 시간과 같거나 전체 셋업 시간보다 짧은 시간입니다.</returns>
            <summary>
            Returns the date and time indicating the time setup crew is required out of the entire setup time to perform setup on the specified equipment.
            </summary>
            <param name="aeqp">The equipment in which setup is in process.</param>
            <param name="hb">The entity(wafer,lot,batch) that caused setup.</param>
            <param name="crew">The information of the setup crew to perform setup on this equipment.</param>
            <param name="count">The number of setup crews to perform setup.</param>
            <param name="setupTime">The entire time to complete setup.</param>
            <returns>The time same as the entire setup time or less than the entire setup time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetProcessTime(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            작업물을 장비에서 작업할때 사용될 ProcTime, TactTime 정보 설정을 위한 구현 Point
            </summary>
            <param name="hb"></param>
            <summary>
            The method to implement logic to set process time and tact time information to process the specified entity from this equipment.
            </summary>
            <param name="hb">The entity to set the process time and tact time to process from this equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetProcessUnitSize(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            해당 작업물을 장비에서 처리할 때 Processing 처리 Unit 수
            예) Lot 당 작업물수
            </summary>
            <param name="hb"></param>
            <returns></returns>
            <summary>
            Returns the processing unit size to process the specified entity(wafer,lot,batch) from this equipment. 
            </summary>
            <param name="hb">The entity to get the processing unit size.</param>
            <returns>The processing unit size to process the specified entity from this equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetRequiredSetupCrews">
            <summary>
            필요한 setup crew 의 수를 반환합니다.
            </summary>
            <returns></returns>
            <summary>
            Returns the numbers of set crews required to perform setup.
            </summary>
            <returns>The required number of setup crews to perform setup. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.SeizeSecondResources(Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            장비에서 Setup Resource를 Seize 처리 
            </summary>
            <param name="proc"></param>
            <summary>
            Enables to seize the setup resource for this equipment. 
            </summary>
            <param name="proc">The process object to handle the processing operation of this equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.OnEndSetup(Mozart.SeePlan.Simulation.AoProcess)">
            <summary>
            장비의 Setup Resource 를 Release 처리 
            </summary>
            <param name="proc"></param>
            <summary>
            Releases the setup resource from this equipment.
            </summary>
            <param name="proc">The process object to handle the processing operation of this equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.AddRun(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            설비에 초기 RUN 재공(WIP)을 추가합니다. 
            설비가 작업물을 로드할 수 있는 경우 초기 RUN 재공은 재공에 기록된 작업 시작 시간부터 작업을 시작한 것으로 처리됩니다. 
            로드된 초기 RUN 재공의 작업 완료 시간이 시뮬레이션 시작 시간보다 이른 경우 초기 RUN 재공은 시뮬레이션 시작 시간 기준으로 설비에서 언로드됩니다. 
            설비의 초기 상태 또는 이미 추가된 다른 초기 RUN 재공으로 인해 설비가 현재 작업물을 로드할 수 없는 상태인 경우 초기 RUN 재공은 재공 정보와 다르게 설비에 로드되지 않고, 설비의 InBuffer에 추가됩니다.
            </summary>
            <param name="hb">초기 RUN 재공입니다.</param>
            <summary>
            Adds the WIP in which the initial state is "RUN" to this equipment. 
            If the equipment can load the WIP, the initial RUN WIP is treated as if the processing was started from this equipment according to the start time recorded in WIP data.
            In case the process end time of the loaded initial RUN WIP is earlier than the simulation start time, this initial RUN WIP unloaded from this equipment when simulation starts. 
            In case this equipment is unable to load the specified initial RUN WIP due to its initial state or another initial RUN WIP is already loaded to this equipment, the specified initial RUN WIP will be added to the <em>InBuffer</em> of this equipment instead of being loaded to the equipment specified in the WIP data.
            </summary>
            <param name="hb">The initial RUN WIP.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetChamberCapacity">
            <summary>
            이 Parallel Chamber 설비가 갖는 챔버의 수를 반환합니다.
            </summary>
            <returns>챔버의 수입니다.</returns>
            <summary>
            Returns the number of chambers that this parallel chamber type equipment has.
            </summary>
            <returns>The number of chambers in this parallel chamber equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetChamberIDs">
            <summary>
            이 Parallel Chamber 설비가 갖는 각 챔버의 이름 목록을 반환합니다.
            </summary>
            <returns>챔버 이름의 목록입니다.</returns>
            <summary>
            Returns the array of each of the chamber names in which belongs to this parallel chamber equipment.
            </summary>
            <returns>The array of the chamber names belonging to this prallel chamber equipment.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.FixBatch(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            초기 RUN 재공이 BATCH 작업 방식의 설비에 로드하기 적절하지 않은 형태인 경우 이를 바로잡는 사용자 정의 로직을 실행합니다.
            </summary>
            <param name="entity">초기 RUN 재공입니다.</param>
            <summary>
            Corrects the specified initial RUN WIP to a proper batch form by the logics defined within the Entity/WipInit/FixtBatch FEAction, in case the specified initial RUN WIP cannot be loaded to a batch processing type equipment.
            </summary>
            <param name="entity">The initial RUN WIP to correct.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.FixStartTime(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            초기 Run Wip 의 시작시각 정보가 정합하지 않은 경우 이를 처리합니다. 
            </summary>
            <param name="hb">Target entity.</param>
            <summary>
            Corrects the process start time of the initial RUN WIP in this equipment by the logics defined within Entity/WipInit/FixStartTime. 
            </summary>
            <param name="hb">The initial RUN WIP to correct the time in which processing has started from this equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.FirstProcess``1">
            <summary>
            설비에 등록된 AoProcess 개체를 주어진 형식으로 변환해서 반환합니다. 
            만약 설비에 두 개 이상의 AoProcess 개체가 등록된 경우 첫 번째 개체를 대상으로 로직을 수행합니다.
            </summary>
            <typeparam name="TProc">변환할 형식입니다.</typeparam>
            <returns>설비에 등록된 AoProcess 개체입니다.</returns>
            <summary>
            Converts the <em>AoProcess</em> object in this equipment to the given type and returns it.
            In case there are more than two <em>AoProcess</em> objects in this instance, then the first one is going to be converted.
            </summary>
            <typeparam name="TProc">The type to convert.</typeparam>
            <returns>The converted <em>AoProcess</em> object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.GetAvailableCapacity">
            <summary>
            설비에 등록된 AoProcess 개체의 가용 Capacity를 반환합니다. 
            가용 Capacity가 의미하는 바는 AoProcess의 형식에 따라 다릅니다.
            만약 설비에 두 개 이상의 AoProcess 개체가 등록된 경우 첫 번째 개체를 대상으로 로직을 수행합니다.
            </summary>
            <returns>설비에 등록된 AoProcess 개체의 가용 Capacity입니다.</returns>
            <summary>
            Returns the available capacity of the <em>AoProcess</em> in this equipment. 
            The meaning of the available capacity can differ according to the type of the <em>AoProcess</em>.
            In case there are more than two <em>AoProcess</em> objects in this instance, then the available capacity will be returned from the first <em>AoProcess</em>.
            </summary>
            <returns>The available capacity of the <em>AoProcess</em> in this equipment.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoEquipment.IsParallelChamber">
            <summary>
            설비가 Parallel Chamber 형식인지 여부를 가져옵니다.
            만약 설비에 두 개 이상의 AoProcess 개체가 등록된 경우 첫 번째 개체가 Parallel Chamber 형식인지 여부를 가져옵니다.
            </summary>
            <summary>
            Gets a value to indicate whether the <em>AoProcess</em> of this equipment is a parallel chamber type or not. 
            In case there are more than two <em>AoProcess</em> objects in this instance, then only the first <em>AoProcess</em> will be determined.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.IsParallelChamberLoadable(System.String[],System.String)">
            <summary>
            공장의 현재 시간 기준으로 Parallel Chamber 형식의 설비에서 주어진 챔버 중 현재 가용한 챔버가 있는지 여부를 반환합니다.
            </summary>
            <param name="chambers">가용 여부를 확인할 챔버 이름의 목록입니다.</param>
            <param name="prevents">가용 여부를 확인하지 않을 챔버 이름의 목록입니다.</param>
            <returns>현재 가용한 챔버가 존재한다면 true입니다. 그 외의 경우 false입니다.</returns>
            <summary>
            Determines whether there are any available chambers to load the entity from the specified chamber array in a parallel chamber type equipment based on the current time of the factory.
            </summary>
            <param name="chambers">The array of chamber names to check availability.</param>
            <param name="prevents">The list of chamber names not check availability.</param>
            <returns><em>true</em> if chamber available to load the lot exists from this equipment; otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.SetParallelChamberPM(Mozart.SeePlan.DataModel.PMSchedule,Mozart.SeePlan.Simulation.DownEventType)">
            <summary>
            Parallel Chamber 설비에 주어진 PM 이벤트를 반영합니다. 
            PM 시작 이벤트인 경우 설비 또는 챔버가 비활성화 됩니다. 
            PM 끝 이벤트인 경우 설비 또는 챔버가 활성화됩니다.
            </summary>
            <param name="pm">적용할 PM 계획입니다</param>
            <param name="det">PM 이벤트 유형입니다.</param>
            <returns>PM 이벤트가 설비에 적용된 경우 true입니다. 그 외의 경우 false입니다.</returns>
            <summary>
            <para>Gets a value to indicate whether the specified PM event has occured to this parallel chamber equipment.</para>
            <para>The chamber or the equipment is deactivated if the specified PM is an event to start.</para>
            <para>The chamber or the equipment is activated if the specified PM is an event to end.</para>
            </summary>
            <param name="pm">The PM schedule to apply.</param>
            <param name="det">The type of the PM event.</param>
            <returns><em>true</em> if the specified PM event is applied to this equipment; otherwise, <em>false.</em></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.SetChamberPM(Mozart.SeePlan.DataModel.PMSchedule,Mozart.SeePlan.Simulation.DownEventType)">
            <summary>
            Chamber 설비에 주어진 PM 이벤트를 반영합니다. 
            PM 시작 이벤트인 경우 정해진 수 만큼의 챔버가 비활성화 됩니다. 
            PM 끝 이벤트인 경우 정해진 수 만큼의  챔버가 활성화됩니다.
            </summary>
            <param name="pm">적용할 PM 계획입니다</param>
            <param name="det">PM 이벤트 유형입니다.</param>
            <returns>PM 이벤트가 설비에 적용된 경우 true입니다. 그 외의 경우 false입니다.</returns>
            <summary>
            <para>Gets a value to indicate whether the specified PM event has occured to this chamber equipment.</para>
            <para>The specified numbers of chamber is deactivated if the specified PM is an event to start.</para>
            <para>The specified numbers of chamber or is activated if the specified PM is an event to end.</para>
            </summary>
            <param name="pm">The PM schedule to apply.</param>
            <param name="det">The type of the PM event.</param>
            <returns><em>true</em> if the specified PM event is applied to this equipment; otherwise, <em>false.</em></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.WriteHistoryAfterBreak">
            <summary>
            PM이 끝나 설비 또는 챔버가 가용한 상태로 변경되었을 때 설비의 상태 변경 정보를 기록합니다.
            </summary>
            <summary>
            Writes the state change information of the equipment or the chamber when their state has changed to be available to load lots after PM is completed.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoEquipment.CheckParallelChamberState(System.Int32,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity,Mozart.SeePlan.Simulation.ChamberInfo@)">
            <summary>
            Parallel Chamber 설비에서 지정된 인덱스의 챔버가 주어진 정보의 상태에 해당하는지 여부를 반환합니다. 
            </summary>
            <param name="index">챔버의 인덱스입니다.</param>
            <param name="state">챔버의 상태입니다.</param>
            <param name="entity">지정된 인덱스에 해당하는 챔버 정보입니다.</param>
            <returns>챔버가 주어진 정보의 상태에 해당한다면 true입니다. 그 외의 경우 false입니다.</returns>
            <remarks>
            주어진 챔버의 상태가 LoadingStates.BUSY인 경우 챔버에서 현재 주어진 작업물을 처리하고 있는지 또는 다음에 처리할 작업물인지를 확인합니다.
            주어진 챔버의 상태가 LoadingStates.IDLE 또는 LoadingStates.IDLERUN인 경우 챔버가 활성화 상태인지 또는 현재 처리하고 있는 작업물이 존재하는지를 확인합니다.
            주어진 챔버의 상태가 LoadingStates.PM인 경우 챔버의 활성화 여부 또는 AoLoader의 활성화 여부를 확인합니다.
            주어진 챔버의 상태가 LoadingStates.SETUP인 경우 챔버의 활성화 여부 또는 챔버에서 현재 주어진 작업물을 처리하고 있는지를 확인합니다.
            </remarks>
            <summary>
            Gets a value to indicate whether the state of the chamber at the specified index of the parallel chamber equipment corresponds to the given state.  
            </summary>
            <param name="index">The zero-based index to search the chamber. </param>
            <param name="state">The state of the chamber.</param>
            <param name="entity">The chamber information of the specified index.</param>
            <returns><em>true</em> if the state of the chamber at the specified <em>index</em> corresponds to the given <em>state</em>.</returns>
            <remarks>
            The following criteria are checked to see if the state of the specified chamber is correspondent to the given state. 
                <para>LoadingStates.BUSY : Checks whether the specified <em>entity</em> is currently being process by the chamber at the specified index or to be processed next.</para>
                <para>LoadingStates.IDLE or LoadingStates.IDLERUN : Checks whether the chamber at the specified index is active or if processing an entity.</para>
                <para>LoadingStates.PM : Checks the activation status of the chamber at the specified index or the activation status of the <em>AoLoader</em>.</para>
                <para>LoadingStates.SETUP : Checks the activation status of the chamber at the specified index or if this chamber is currently processing the specified <em>entity</em>.</para>
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoFactory">
            <summary>
            The root model class for manufacturing simulation.    
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoFactory.LostDestinationKey">
            <summary>
            This is the Routing Key character for default Queue used by Router. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Simulation Coordinator object..</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Simulator">
            <summary>
            Simulator object
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Context">
            <summary>
            Model Context. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Logger">
            <summary>
            Default Logger of Model. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.TimerAgent">
            <summary>
            Default Event Timer. Time out event could be included through TimerAgent.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.BatchRelease">
            <summary>This is the <em>AoBatchRelease</em> object to input Batch at the suggested period. </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Router">
            <summary>
            This is the Active Obect to route entity to Queue. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Sink">
            <summary>
            Active Obect to destroy entity once the all Steps of the entities are completed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.DispatchingAgents">
            <summary>
            The DispatchingAgent Dictionary reponsible for Queue and Dispatching.
            key : DispatchingKey
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Equipments">
            <summary>
            The Equipment(AoEquipment) Dictionary registered inside Factory.
            key : Equipment ID string.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Transfer">
            <summary>
            The Active Object responsible for transferring entities. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.BucketAgent">
            <summary>The object to handle entity through Bucketing method.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.EntityFilterMgr">
            <summary>
            The Control object to handle Filtering before Dispatching entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Monitor">
            <summary>
            Factory Monitor object to manage Simulation Monitor object. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.WipManager">
            <summary>
            Manager object to manage WIP information during Simulation.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.StatManager">
            <summary>
            Statistic management object to manage entity based statistics information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Weights">
            <summary>
            The object to manage Weight Factor information used during Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.Filters">
            <summary>
            The object to manage Entify Filter information used during Dispatching.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.CalendarEvents">
            <summary>
            The object to manange Event triggered by Schedule during Simulation. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoFactory.JobChangeManger">
            <summary>
            The object to perform Job Change decision making for Simulation operation.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.AddToBucketer(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>Input entity to <em>BucketAgent</em> to handle target entity through Bucketing. </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.AddToInOutAgent(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Input entity to <em>InOutAgent</em>.</summary>
            <param name="hb">Target entity object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.ReleaseToDispatchingAgent(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>Sends released entity to <em>DispatchingAgent</em></summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.OnReleaseBatch(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Handles all works before Lot is released. 
            This is called before lot moves to the first Step to be released. 
            </summary>
            <param name="hb"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.In(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>Registers target entity to <em>WipManager</em>  </summary>
            <param name="hb">Target entity.</param>
            <remarks>
            	<para>If user modifies the default logic, the entities may not be registered to WipManager automatically. </para>
            	<para>In this case, the corresponding function should be called and registered.</para>
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.Out(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Unregister target entity from Factory.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetResourcePools">
            <summary>
            Returns the SecondResourcePool list registered in Factory.
            </summary>
            <returns>Returns the entire list of registered SecondResourcePool</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.AddResourcePool(Mozart.SeePlan.Simulation.SecondResourcePool)">
            <summary>
            Registers <em>SecondResourcePool</em> to the <em>AoFactory</em>.</summary>
            <param name="pool">Target SeconResourcePool object for registration.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetResourcePool(System.String)">
            <summary>Search and return <em>SecondResourcePool</em> object through a sepecific <em>Key</em>.</summary>
            <param name="key">
            	<em>SecondResourcePool</em>
            	<em>key</em> string.</param>
            <returns>
            Return <em>SecondResourcePool</em> object. If there is no object from the corresponding <em>Key</em>, return NULL.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetInOutAgents">
            <summary>AReturns the list of <em>InOutAgent</em> registered in AoFactory</summary>
            <returns>Returns the entire list of registered <em>InOutAgent</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.AddInOutAgent(Mozart.SeePlan.Simulation.InOutAgent)">
            <summary>
            Registers <em>InOutAgent</em> to the <em>AoFactory</em>.</summary>
            <param name="agent">Target InOutAgent object for registration.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetInOutAgent(System.String)">
            <summary>
             <para>
             Return InOutAgent object of the corresponding <em>Key</em>.</para>
            </summary>
            <param name="key">InOutAgent key string.</param>
            <returns>InOutAgent object. If there is no object from the corresponding <em>Key</em>, return <em><strong>NULL</strong></em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.RegisterEquipment(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Register Equipment(AoEquipment) to Factory.
            </summary>
            <param name="equipment">Target equipment object for registration.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetEquipment(System.String)">
            <summary>Search and return equipment object.</summary>
            <param name="key">The key string used to search equipment.</param>
            <returns>Returns Equipment object. If there is no object, return <strong><em>Null</em></strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.GetDispatchingAgent(System.String)">
            <summary>Search and return <em>Dispatchingl</em> object through a sepecific <em>Key</em>.</summary>
            <param name="key">
            	<em>DispatchingAgent</em> key string.</param>
            <returns>
            Returns <em>DispatchingAgent</em> object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.FindDispatchingAgent(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>Returns <em>DispatchingAgent</em> responsible for certain equipment's Dispatching</summary>
            <param name="aeqp">Target equipment object.</param>
            <returns>
            	<em>DispatchingAgent</em> object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.FindDispatchingAgent(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>Returns <em>DispatchingAgent</em> responsible for certain entitiy's Dispatching</summary>
            <param name="hb">Target entity object.</param>
            <returns>DispatchingAgent object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.SendToDispatchingAgent(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Sends a specific entity to DispatchingAgent without going through Router.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoFactory.Merge(Mozart.SeePlan.Simulation.IHandlingBatch,System.Object[])">
            <summary>
            작업물에 대한 Merge를 수행합니다.
            </summary>
            <param name="hb">대상 작업물입니다.</param>
            <param name="args"></param>
            <returns></returns>
            <summary>
            Merges the specified entity into the <em>List&lt;ISimEntity&gt;</em>. 
            </summary>
            <param name="hb">The entity to be merged.</param>
            <param name="args">An array of object that contains the argument to perform merge operation.</param>
            <returns>The list of merged <em>hb</em>.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoInlineProc">
            <summary>The Process Model used from Inline type equipment.</summary>
            <remarks>This is used only when SymType is Inline.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Target Coordinator engine object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Target equipment object</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoInlineProc.Capacity">
            <summary>
            Returns Capacity. If Inline equipment is Active state, return 1, if not, return 0.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoInlineProc.FlowTimeValue">
            <summary>
            FlowTime value.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoInlineProc.FlowTime">
            <summary>
            Event Handler that returns FlowTime.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.CanEnter">
            <summary>
            Checks availability for loading. 
            </summary>
            <returns>If available for loading, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.UpdateStats">
            <summary>
            Updates statistics information.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.Break(Mozart.Simulation.Engine.Time)">
            <summary>
            Suspend Process
            </summary>
            <param name="breakTime">Time to suspend Process.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            Determines whether to TrackOut after initializing initial Wip.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">Start time of target entity.</param>
            <param name="force">This is used to decide to load entities to equipment when initial entities are processed longer than the configured time. If the entities are to be loaded to the equipment, set as true, or else, set as false.</param>
            <returns>If force is false and initial entities are processed longer than configured time, return false, or else, return true.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.GetNextInTime">
            <summary>
            Calculates the available time to input next entity.
            </summary>
            <returns>Returns the available time to input next entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.SplitAt(System.Int32,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Split work.
            </summary>
            <param name="index">The Unit Index for splitting.</param>
            <param name="minTime">he minimum processing time. </param>
            <param name="f">Flow Time </param>
            <param name="t">Tact Time </param>
            <returns>Returns Split result. If job is split, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoInlineProc.EntityInfo2">
            <summary>
            The entity information sent to AoInlineProc. The information of trigger time per event and the next event trigger could be inquired. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoInlineProc.EntityInfo2.FlowTime">
            <summary>
            Flow Time.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.EntityInfo2.#ctor(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,System.Int32,Mozart.Simulation.Engine.Time)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="inTime">Job</param>
            <param name="waitSetupTime"></param>
            <param name="setupTime"></param>
            <param name="tactTime"></param>
            <param name="numOfUnits"></param>
            <param name="flowTime"></param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoInlineProc.EntityInfo2.IsFlowTimeLong">
            <summary>
            Checks whether FlowTime is longer than TactTime. If FlowTime is longer, return true, or else, return false. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoInlineProc.EntityInfo2.GetEventTime(Mozart.SeePlan.Simulation.ProcessStates)">
            <summary>
            Returns the event triggered time according to Process state type.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoLoaderType">
            <summary>
            The type of  Loader Type 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoaderType.Unit">
            <summary>
            Processes entity in Units.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoaderType.Unbatch">
            <summary>
            Break down Batch type entities and process. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoaderType.Custom">
            <summary>
            Load according to user defined logic. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoLoader">
            <summary>
            Simulation object responsible to load entity to equipment. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoLoader.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor
            </summary>
            <param name="co">Simulation engine Coordinator object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoLoader.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor
            </summary>
            <param name="ao">The default object of Simulation.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoLoader.Container">
            <summary>
            Batches sent to Loader. Used for Unbatch Type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoLoader.Entity">
            <summary>
            Entity sent to Loader.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoLoader.Position">
            <summary>
            <para>Gets the quantities of the entity in the container.</para>
            <para>This property is no longer in use.</para>
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoLoader.Type">
            <summary>
            Gets and sets the type of the Loader type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.Input">
            <summary>
            Input Port
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.Output">
            <summary>
            Output Port 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoLoader.Unblock">
            <summary>
            Disable additional input block for Loader. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoLoader.IsBlocked">
            <summary>
            Checks whether Loader is input block state. 
            </summary>
            <returns>If Loader is input block state, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoLoader.Take(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Send entity to Outport
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoLoader.TypeResolved">
            <summary>
            Return LoaderType.
            </summary>
            <remarks>If LoaderType is set as Custom, Load Delegation needs to be implemented.</remarks>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.Enter">
            <summary>
            The Event Handler that is triggered when entity enters Loader. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.Exit">
            <summary>
            Event Handler that is triggered when entity goes out from Loader.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.NewContainer">
            <summary>
            Batch
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.TestInput">
            <summary>
            The Event Handler to test if entity could be input to Loader. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoLoader.Load">
            <summary>
            The Event Handler that is triggered when entity is loaded to Loader. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoMerger">
            <summary>
            Simulation object responsible for merging entities. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoParallelProc">
            <summary>
            Process Model to create N Parallel processes. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Coordinator object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Equipment object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoParallelProc.Capacity">
            <summary>
            Current available Capacity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoParallelProc.Buffers">
            <summary>
            The list of entities inside Buffer. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.AddBuffer(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Add entity to Buffer. 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.CanEnter">
            <summary>
            Checks whether additional entities could be loaded.
            </summary>
            <returns>If entities could be loaded additionally, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.UpdateStats">
            <summary>
            Update statistics state. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            This is used to initialize when WIP is in Run state. 
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">Start time of target entity..</param>
            <param name="force"></param>
            <returns></returns>
            <remarks>In case of WIP in Run state, the passed time during Run should be removed from Process Time.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoParallelProc.SplitAt(System.Int32,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Split work.
            </summary>
            <param name="index">The Unit Index for splitting.</param>
            <param name="minTime">he minimum processing time. </param>
            <param name="f">Flow Time </param>
            <param name="t">Tact Time </param>
            <returns>Returns Split result. If job is split, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoProcess">
            <summary>
            The default Process Model used by Equipment object. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.Capacity">
            <summary>
            The capacity of process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.AvailableCapacity">
            <summary>
            The available capacity of process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.Performance">
            <summary>
            The operation ratio of Process.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.Contents">
            <summary>
            Returns the entity currently processing in Process. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.Count">
            <summary>
            Returns the numbers of entities currently processing in Process. Returned as numbers of Entity. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.Get(System.Int32)">
            <summary>
            Returns the entities located in Index of ConetentList. 
            </summary>
            <param name="index">index information.</param>
            <returns>Returns the target entities in index location</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.Entity">
            <summary>
            he information entity of the last event triggerd. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.TactTimeValue">
            <summary>
            Sets Processing time or returns the configured value. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.LoadingTimeValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.UnloadingTimeValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.SetupTimeValue">
            <summary>
            Sets Setup Time or returns the configured value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.WaitSetupTimeValue">
            <summary>
            Sets SetUp Wait time or returns the configured value.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.StatsEnabled">
             <summary>
            Determines whether to use Statistics. If used, return true, or else, return false.
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.StatsUtilization">
            <summary>
            The Statistics information for Process. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.LoadingState">
            <summary>
            Equipment state type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.EntityState">
            <summary>
            Processor state type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.Enter">
            <summary>
            The Event Handler that is triggered when entity enters to AoProcess. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.Entered">
            <summary>
            The Event Handler that is triggered when input to AoProcess is completed. Unlike Enter, this is performed after Processing procedure.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.Exit">
            <summary>
            The Event Handler that is triggered when entity processing is completed from AoProcess. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.TactTime">
            <summary>
            The Event Handler to configure TactTime of the entity. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.LoadingTime">
            <summary>
            The Event Handler to configure Loading Time of the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.UnloadingTime">
            <summary>
            The Event Handler to configure Unloading Time of the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.NeedSetup">
            <summary>
            The Event Handler to configure NeedSetup of the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.SetupTime">
            <summary>
            The Event Handler to configure Setup Time of the equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.WaitSetupTime">
            <summary>
             The Event Handler to configure required Waite time to perform Setup of the equipment.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.UnitsInEntity">
            <summary>
             The Event Handler to configure Unit size of the entity.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.LoadingStateChanged">
            <summary>
            The Event Handler triggered when equipment LoadingState is changed. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.EntityStateChanged">
            <summary>
            The Event Handler triggered when equipment Entity state is changed. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.Input">
            <summary>
            Input Port of AoProcess.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoProcess.Output">
            <summary>
            Output Port of AoProcess..
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.UpdateStats">
            <summary>
            Update statistics information.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.ResetStats">
            <summary>
            Reset statistics information. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.Block">
            <summary>
            Blocks Process. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.Unblock">
            <summary>
            Disable Process Block.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.IsBlocked">
            <summary>
            Checks the Block state of Block. 
            </summary>
            <returns>If Process is Block state, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.IsProcessing">
            <summary>
            Checks if there are any entities being processed. 
            </summary>
            <returns><em>true</em> if there are any entities being processed; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.IsEntryOpen">
            <summary>
            Checks if entity could be input to Process. 
            </summary>
            <returns>If entity could be input to Process, return true, or else if Process is Block state, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.CanEnter">
            <summary>
            Checks if new entity could be entered. 
            </summary>
            <returns>If it entity could be entered, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            Determines whether to TrackOut after initializing initial Wip.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">Start time of target entity.</param>
            <param name="force">This is used to decide to load entities to equipment when initial entities are processed longer than the configured time. If the entities are to be loaded to the equipment, set as true, or else, set as false.</param>
            <returns>If force is false and initial entities are processed longer than configured time, return false, or else, return true.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.AddInitial(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time)">
            <summary>
            Decides whether to perform TrackOut right after intial WIP is initialized. 
            AddInitial is called and force should be set as true.
            </summary>
            <param name="entity">Target entity.</param>
            <param name="startTime">대상 작업물의 시작 시간입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.Break(Mozart.Simulation.Engine.Time)">
            <summary>
            Suspend Process
            </summary>
            <param name="breakTime">Time to suspend Process.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.GetRemainTimeToEnd">
            <summary>
            Calculates the remaining time until entity processing is finished.
            </summary>
            <returns>Returns the remaining time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.GetRemainTimeToLoading">
            <summary>
            Calculates the remaining time until loading. 
            </summary>
            <returns>Returns the remaining time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.GetEntityOutTime(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Returns the target entity Out time. 
            </summary>
            <param name="entity">Target entity.</param>
            <returns>Returns the Out time of the target entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.GetNextInTime">
            <summary>
            Calculates the available time to input next entity.
            </summary>
            <returns>Returns the available time to input next entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.SplitAt(Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Split work.
            </summary>
            <param name="minTime">he minimum processing time. </param>
            <param name="f">Flow Time </param>
            <param name="t">Tact Time </param>
            <returns>Returns Split result. If job is split, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.SplitAt(System.Int32,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Split work.
            </summary>
            <param name="index">The Unit Index for splitting.</param>
            <param name="minTime">he minimum processing time. </param>
            <param name="f">Flow Time </param>
            <param name="t">Tact Time </param>
            <returns>Returns Split result. If job is split, return true, or else, return false.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoProcess.EntityInfo">
            <summary>
            The entity information sent to AoProcess. The information of trigger time per event and the next event trigger could be inquired. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.#ctor(Mozart.Simulation.Engine.ISimEntity,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="entity">Target entity.</param>
            <param name="inTime">Job start time..</param>
            <param name="waitSetupTime">Setup Wait time.</param>
            <param name="setupTime">Setup time.</param>
            <param name="tactTime">Tact Time.</param>
            <param name="numOfUnits">Unit quantity.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.IsSingleUnit">
            <summary>
            Checks if entity is a single unit. Checks if NumofUnits =1. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.SetupNextEvent">
            <summary>
            Set next Event.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.GetTactTime(System.Int32)">
            <summary>
            Calculates TactTime.
            </summary>
            <param name="n">Unit quantity.</param>
            <returns>Returns TactTime</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.GetEventTime(Mozart.SeePlan.Simulation.ProcessStates)">
            <summary>
            Returns the Event time of the Process state.
            </summary>
            <param name="state">Target Process state.</param>
            <returns>Return Event time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoProcess.EntityInfo.GetNextState(Mozart.SeePlan.Simulation.ProcessStates)">
            <summary>
            Return the next state of the input Process state.
            </summary>
            <param name="state">Target Process state.</param>
            <returns>Return next Process state.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SeizeInfo">
            <summary>
            	The class of <em>SecondResource</em> utilization information.
            	The information includes the object utilizing SecondResource, utilized Capacity, expected Release time.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SeizeInfo.Owner">
            <summary>
            The object utilizing Resource.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SeizeInfo.Location">
            <summary>
            The loaction of the object utilizing the Resource.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SeizeInfo.ReleaseTime">
            <summary>
            The expected Release time of the utilized Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SeizeInfo.Count">
            <summary>
            The numbers of used Resource. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IToolData">
            <summary>
            ToolData Interface.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ToolSettings">
            <summary> 
            The class to control Second Resource Set used by entity and equipment. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.#ctor(Mozart.SeePlan.Simulation.IToolData)">
            <summary>
            Constructor. 
            </summary>
            <param name="data">The Second Resource data to configure ToolItem.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolSettings.Data">
            <summary>
            The data to configure Tool Item. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolSettings.Items">
            <summary>
            The list of Tool Item by Second Resource type required to perform task..
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolSettings.ItemCount">
            <summary>
            Tool Item quantity..
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Equals(System.Object)">
            <summary>
            Determine if input ToolSetting is identical to the target ToolSettings. 
            </summary>
            <param name="obj">Target ToolSetting for comparison. .</param>
            <returns>If the two ToolSettings are identical, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.GetHashCode">
            <summary>
            Return HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.ToString">
            <summary>
            Return the expression string for ToolSettings. 
            </summary>
            <returns>Return the expression string for ToolSettings.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Clone">
            <summary>
            Replicate ToolSetting information and return.
            </summary>
            <returns>Return ToolSetting clone object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.GetItems(Mozart.SeePlan.Simulation.ToolItemType)">
            <summary>
            Return ToolItem list from the Item registered in ToolSettings where type is input type. . 
            </summary>
            <param name="type">ToolItem type to be searched for. .</param>
            <returns>Return ToolItem list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.IsReady(Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            Estimate the configuration of all ToolItem in ToolSettings and the availability of the selected Second Resource. 
            </summary>
            <param name="last">The ToolSetting information used from previous equipment.</param>
            <returns>ToolSettings are configured properly, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolSettings.IsValid">
            <summary>
            Check the relationship among equipment of ToolSettings with multiple ToolItems,
            check if valid ToolItem set has been selected and return the verification result. 
            If selected information is valid, return <strong>true</strong>, or else, return <strong>false</strong>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Attach(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            Mount actual Second Resource to ToolItem of the configured ProductSide.
            </summary>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Detach(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            ProductSide Type의 <em>ToolItem</em> 들을 <em>SecondResource</em>를 탈착합니다.
            </summary>
            <param name="hb">Target entity.</param>
            <summary>
            Removes(detach) the <em>SecondResource</em> from the <em>ToolItemType.ProductSide</em>.
            </summary>
            <param name="hb">The entity to detach second resource.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Seize(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>Utilize MachineSide Type <em>SecondResource</em> set by <em>ToolSettings</em> from the target equipment.</summary>
            <param name="eqp">Target equipment object</param>
            <param name="last">The last <em>ToolSettings</em> information of the target equipment.</param>
            <remarks>Register the utilized <em>ToolSettings</em> to the <em>CurrentToolSettings</em> of the target equipment object.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Release(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolSettings)">
            <summary>
            Disable MachineSide Type SecondResource set by ToolSettings from the target equipment.
            </summary>
            <param name="eqp">Target equipment.</param>
            <param name="chg">Changed Toolsettings.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.ReserveMachineSide(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Register MachineSide Type SecondResource set by ToolSettings from the target equipment.
            </summary>
            <param name="eqp">Target equipment..</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.RegisterWaits(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Register target equipment to standby to ToolSettings.
            The Event to activate equipment is triggered when ToolSettings is available.
            </summary>
            <param name="eqp">Target equipment..</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.UnRegisterWaits(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>Disalbe standy from <em>ToolSettings</em> for the target equipment. </summary>
            <param name="eqp">Target equipment object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Update(Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.ToolSettings,System.Boolean)">
            <summary>
            Configure ToolSetting informatio of target lot by comparing the final ToolSetting information from the equipment to be loaded. 
            Select and allocate SecondResource to ToolItem of ToolSettings.
            </summary>
            <param name="lot">Target entity.</param>
            <param name="aeqp">Target equipment.</param>
            <param name="last">The last ToolSettings information of the target equipment.</param>
            <param name="canAlt"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolSettings.Reset">
            <summary>
            Initialize configuration information of all ToolItem in ToolSettings. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SecondResourceKeys">
            <summary>
            The Key class of SecondResource type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.SecondResourceKeys.SetupCrew">
            <summary>
            The key to mark Setup Crew. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ToolItemType">
            <summary>
            Second Resource Type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ToolItemType.MachineSide">
            <summary>
            The Second Resource Type utilized from equipment. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ToolItemType.ProductSide">
            <summary>
            The Resource Type like a container to store entity to mount resourece or to process the entity. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ToolItem">
            <summary>
            The Simulation class to utilize Second Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.ResourceType">
            <summary>
            SecondResourcePool name.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.ResourceUses">
            <summary>
            The used counts of the selected Second Resource.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.ResourceKey">
            <summary>
            The key of Second Resource selected at a certain point.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.SeizedResource">
            <summary>
            선택된 Second resource 객체입니다.
            </summary>
            <summary>
            Gets the selected <em>SecondResource</em> object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.ReservedResource">
            <summary>
            The reserved Second Resource object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ToolItem.Type">
            <summary>
            Second Resource type.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolItem.#ctor(System.String,System.Int32,Mozart.SeePlan.Simulation.ToolItemType)">
            <summary>
            Constructor.
            </summary>
            <param name="resourceType">SecondResourcePool name.</param>
            <param name="resouceUses">The used counts of the selected Second Resource.</param>
            <param name="type">Second resource tpye. If there is no input, it is set as MachineSide.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ToolItem.Reset">
            <summary>
            Initialize configure resource information.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoRouter">
            <summary>
            This the model for handling entity  to branch out to the appropriate AoDispatch of the current Step and wait in the equipment.  
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoRouter.OutputData">
            <summary>
            Output Queue data of Router. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.OutputData.Source">
            <summary>
            The DispatchingAgent to be linked with Output of Router. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.OutputData.Port">
            <summary>
            The port object responsible to link with DispatchingAgent. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.OutputData.Queue">
            <summary>
            The entity queue waiting to be input to DispatchingAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.OutputData.#ctor(Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.RouterInPort)">
            <summary>
            Output Queue data Constructor.
            </summary>
            <param name="src">DispatchingAgent object.</param>
            <param name="port">RouterInPort object handling link to DispatchingAgent .</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Constructor.
            </summary>
            <param name="co">Simulation engine coordinator.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor
            </summary>
            <param name="ao">AoFactory object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoRouter.RouteKey">
            <summary>
            The key string of the next route of the entity going to Router. 
            This is the DispatchAgent Key to be used for Queue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoRouter.LostDestinationKey">
            <summary>
            The default key string when RouteKey is not configured. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoRouter.IsDone">
            <summary>
            Checks if the entity has next Route or to be dropped. 
            If all processes of the entity is completed and is the target to Sink, return <strong>true</strong>, or else, <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoRouter.Entity">
            <summary>
            The target entity currently to be routed. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoRouter.Destinations">
            <summary>
            The Dictionary of the Output queue(DispatchAgent) registered to Router.  
            key : dispatchingkey
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.Input">
            <summary>
            Input Port of Router.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.Output">
            <summary>
            Output Port of Router. This is the Dispatching link port. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.OutputDone">
            <summary>
            This is the Output port of the Router, which is the AoSink link port used to handling entity completion. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.Advance">
            <summary>
            The Delegate to determine if next route exists. 
            If there is next route, return <strong>true</strong>, or else, return <strong>false</strong>.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.Exit">
            <summary>
            The Event Handler handled at the point entity moves out from Router. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoRouter.DoneExit">
            <summary>
            The Event Handler that is called at the point entity completion is handled at Router.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.Block">
            <summary>
            Blocks additional input of enitity to Router. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.Unblock">
            <summary>
            Disables entity input Block of Router. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.IsBlocked">
            <summary>
            Checks whether Router is input block state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.Register(System.String,Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.RouterInPort)">
            <summary>
            Registers Output Queue information to Router. 
            </summary>
            <param name="regKey">Key string for Queue(DispatchingAgent).</param>
            <param name="regObject">DispatchingAgent object.</param>
            <param name="inPort">RouterInPort to be linked to DispatchingAgent.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.GetEntity(Mozart.SeePlan.Simulation.RouterInPort)">
            <summary>
            Returns the entity that is queued in Port linked to Router. 
            </summary>
            <param name="inPort">Queue that is linked to DispatchingAgent.</param>
            <returns>Returns the selected entity</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.GetEntityCount(Mozart.SeePlan.Simulation.RouterInPort)">
            <summary>
            Returns the total quantities of entities waiting in a specific Router Out Queue.
            </summary>
            <param name="inPort">Target InPort.</param>
            <returns>Returns the total quantities WIP waiting in Queue to be input. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.AddInitial(Mozart.Simulation.Engine.ISimEntity,System.Boolean)">
            <summary>
            The function to input initial WIP to Router.      
            </summary>
            <param name="entity">The target WIP to be initialized.</param>
            <param name="isFinished">Determines whether the target WIP is completed in current Step.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoRouter.Take(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Input entity to Router. 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoTransfer">
            <summary>
            The Simulation entity to handle entity transfer. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoTransfer.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            AoTransfer Constructor.
            </summary>
            <param name="ao">Root Factory object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoTransfer.Entity">
            <summary>
            The entity inserted to Transfer for tranferring. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoTransfer.TransferTimeValue">
            <summary>
            The transfer time of the target entity to be transferred. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoTransfer.Input">
            <summary>
            Input Port of AoTransfer. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoTransfer.Output">
            <summary>
            Output Port of AoTransfer.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoTransfer.Enter">
            <summary>
            The Delegate handled at the point entity is entered to AoTransfer. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoTransfer.Exit">
            <summary>
            The Delegate handled at the point entity is moving out from AoTransfer.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoTransfer.TransferTime">
            <summary>
            The Delegate called to calculate transfer time at the point entity is about to be transferred from AoTransfer. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoTransfer.Attach(Mozart.SeePlan.Simulation.ITransferEvents)">
            <summary>
            Includes Transfer Event. 
            </summary>
            <param name="evt">The management entity to add Transfer Event.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoTransfer.Detach(Mozart.SeePlan.Simulation.ITransferEvents)">
            <summary>
            Remove Transfer Event. 
            </summary>
            <param name="evt">The management object to remove entity.</param>
            <returns>If Transfer Event is removed properly, return true, or else, if target Transfer Event is not found, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoTransfer.Take(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Input entity to Transfer.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoTransfer.TakeOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Send out entity from Output Port of Transfer.
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoUnloaderType">
            <summary>
            Enum Class regarding Unloader Type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoUnloaderType.Unit">
            <summary>
            Unload entity in Units. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoUnloaderType.Batch">
            <summary>
            Unload entities in Batches. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoUnloaderType.Unbatch">
            <summary>
            Unload Batches as individuals. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.AoUnloaderType.Custom">
            <summary>
            Unload through user defined logic.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.AoUnloader">
            <summary>
            The object responsible for Unloading from equipment. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.#ctor(Mozart.Simulation.Engine.Coordinator)">
            <summary>
            Initializes a new instance of the class <em>AoUnloader</em> with the specified <em>Coordinator</em> object of the simulation.
            </summary>
            <param name="co">Simulation Coordinator object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Simulation object</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.QueueType">
            <summary>
            Defines QueueType of Unloader. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Capacity">
            <summary>
            Queue Capacity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Count">
            <summary>
            Numbers of Queue.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.StatsEnabled">
            <summary>
            Determines whether to use Statistics of Queue. If used, return true, or else, return false. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.BatchSize">
            <summary>
            작업물 언로드 시 배치로 구성할 작업물의 수 입니다. 이 속성은 Type이 AoUnloaderType.Batch인 경우에만 유효합니다.
            </summary>
            <summary>
            Gets the number of entities(wafer,lot) to form a batch when entities are unloaded. 
            This property is valid only when <em>AoUnloaderType</em> is set as batch (<em>AoUnloaderType.Batch</em>).
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Type">
            <summary>
            The type information of Unloader type. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Entity">
            <summary>
            Entity information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Position">
            <summary>
            In case of Batch type entity, return the Position information of the Batches currently unloading. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.Take(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Send entity to Outport. 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.Get(System.Int32)">
            <summary>
            Get entity from Queue. 
            </summary>
            <param name="i">Index information to bring.</param>
            <returns>Return entity of Index. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.Remove(System.Int32)">
            <summary>
            Remove Entity from index i in Queue. 
            </summary>
            <param name="i">Index to be removed.</param>
            <returns>Returns the removed entity.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.CanEnter">
            <summary>
            Checks if Queue is available for input. 
            </summary>
            <returns>If Queue is available for input, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.AoUnloader.ResetStats">
            <summary>
            Resets Statistics information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.Contents">
            <summary>
            Returns list of entities in Queue.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.AoUnloader.TypeResolved">
            <summary>
            Returns Unloader Type. If type is set as Custom Type or Unload Handler is not implemented,
            Type is set as Unit Type.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ChangeHistory`3">
            <summary>
            설비들의 상태 변경 이력을 관리하는 클래스입니다.
            </summary>
            <typeparam name="TEqp">설비의 형식입니다.</typeparam>
            <typeparam name="TStat">설비의 상태 변경 이력을 관리 개체의 형식입니다.</typeparam>
            <typeparam name="TChangeInfo">설비의 상태 변경 정보 형식입니다.</typeparam>
            <summary>
            Manages the history of equipment state changes.
            </summary>
            <typeparam name="TEqp">The type of the equipment.</typeparam>
            <typeparam name="TStat">The type of the object which manages the history of the equipment state changes. </typeparam>
            <typeparam name="TChangeInfo">The type of equipment state change information.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ChangeHistory`3.Stats">
            <summary>
            설비별 상태 변경 이력의 목록을 가져옵니다.
            </summary>
            <summary>
            Gets the list of state change history per equipment.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            주어진 ActiveObject를 부모로 하는 새로운 ChangeHistory를 생성합니다.
            </summary>
            <param name="ao">부모로 설정할 ActiveObject 개체입니다.</param>
            <summary>
            Initializes a new instance of the class <em>ChangeHistory</em> with specified <em>ActiveObject</em> as its parent.
            </summary>
            <param name="ao">The <em>ActiveObject</em> object to set as parent of this instance.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.StateChanged(Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            설비의 상태가 변경될 때 호출되는 메서드입니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <param name="state">변경된 설비 상태입니다.</param>
            <param name="entity">상태 변경을 야기한 작업물입니다.</param>
            <summary>
                <para>Called when the state of the equipment is changed.</para> 
                <para>This method calls <em>ChangeHistory.Insert</em> to write the state change log when the state of the equipment changes.</para>
            </summary>
            <param name="eqp">The equipment that changed state.</param>
            <param name="state">The changed state of the equipment.</param>
            <param name="entity">The entity(wafer, lot, batch) that caused state change of the equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.Insert(`0,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            주어진 설비에 대한 상태 변경 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <param name="state">변경된 설비 상태입니다.</param>
            <param name="entity">상태 변경을 야기한 작업물입니다.</param>
            <summary>
                <para>Writes the changed state information of the specified equipment.</para>
                <para>This method is called from <em>ChangeHistory.StateChanged</em>.</para>
            </summary>
            <param name="eqp">The equipment that changed state.</param>
            <param name="state">The changed state of the equipment.</param>
            <param name="entity">The entity(wafer, lot, batch) that caused state change of the equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertBusy(`0,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            지정된 설비에 대한 Busy 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <param name="entity">상태 변경을 야기한 작업물입니다.</param>
            <summary>
            Writes the state, "Busy", information for the specified equipment. 
            </summary>
            <param name="eqp">The equipment that changed state.</param>
            <param name="entity">The entity(wafer, lot, batch) that caused state change of the equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertIdleRun(`0)">
            <summary>
            지정된 설비에 대한 IdleRun 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <summary>
            Writes the state, "IdleRun", information for the specified equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertIdle(`0)">
            <summary>
            지정된 설비에 대한 Idle 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <summary>
            Writes the state, "Idle", information for the specified equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertSetup(`0,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            지정된 설비에 대한 Setup 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <param name="entity">상태 변경을 야기한 작업물입니다.</param>
            <summary>
            Writes the state, "Setup", information for the equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
            <param name="entity">The entity(wafer, lot, batch) that caused state change of the equipment.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertPM(`0)">
            <summary>
            지정된 설비에 대한 PM 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <summary>
            Writes the state, "PM", information for the specified equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.InsertDown(`0)">
            <summary>
            지정된 설비에 대한 Down 상태 정보를 기록합니다.
            </summary>
            <param name="eqp">상태가 변경된 설비입니다.</param>
            <summary>
            Writes the state, "Down", information for the specified equipment.
            </summary>
            <param name="eqp">The equipment that changed state.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ChangeHistory`3.GetLastState(`0)">
            <summary>
            지정된 설비에 대해 기록된 마지막 상태 정보를 반환합니다.
            </summary>
            <param name="eqp"></param>
            <returns></returns>
            <summary>
            Returns the last written state change information of the specified equipment.
            </summary>
            <param name="eqp">The equipment to seek for the state information.</param>
            <returns>The last written state information of the specied equipment.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchInPort">
            <summary>
            연결된 AoDispatch로부터 작업물 받아 이 개체를 소유하고 있는 설비에 전달해주는 포트(Port) 클래스입니다.
            </summary>
            <summary>
            The port to receive the entity(wafer,lot,batch) from <em>AoDispatch</em> and sends the entity to the owner(equipment) of this class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            지정된 ActiveObject를 소유자로 하는 새로운 DispatchInPort를 생성합니다.
            </summary>
            <param name="ao">이 개체를 소유하는 ActiveObject입니다.</param>
            <summary>
            Initializes a new instance of <em>DispatchInPort</em> class with specified <em>ActiveObject</em> as the owner. 
            </summary>
            <param name="ao">The owner of this object to be created.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.Register">
            <summary>
            소유자 정보를 등록합니다.
            </summary>
            <summary>
            Registers the information of the owner. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.Register(System.String,Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            지정된 ActiveObject를 소유자로 등록합니다.
            </summary>
            <param name="regKey">소유자로 등록할 ActiveObject의 키입니다.</param>
            <param name="regObject">소유자로 등록할 ActiveObject입니다.</param>
            <summary>
            Register the specified <em>ActiveObject</em> as the owner of this instance.
            </summary>
            <param name="regKey">The key value of the specified <em>ActiveObject</em>.</param>
            <param name="regObject">The <em>ActiveObject</em> to register as the owner.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.GetEntity">
            <summary>
            연결된 AoDispatch로부터 작업물을 받아 반환합니다.
            </summary>
            <returns>연결된 AoDispatch로부터 받은 작업물입니다.</returns>
            <summary>
            Returns the entity received from the connected <em>AoDispatch</em>
            </summary>
            <returns>The entity recieved from <em>AoDeispatch</em></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.IsEntityReady">
            <summary>
            연결된 AoDispatch에서 전달 받을 작업물이 존재하는지 여부를 반환합니다.
            </summary>
            <returns>연결된 AoDispatch에 전달 받을 작업물이 존재하는지 여부입니다.</returns>
            <summary>
            Returns the value to indicate whether there are any entities to receive from the connected <em>AoDispatch</em>.
            </summary>
            <returns>true if there entity to receive exists in <em>AoDispatch</em>; otherwise, false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchInPort.EntityIsReady">
            <summary>
            이 개체를 소유한 ActiveObject에 전달할 작업물이 존재하는 것을 알립니다.
            </summary>
            <summary>
            Notifies the owner <em>ActiveObject</em> of this port, that the entities to send to the owner exists. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatchInPort.HaveEntity">
            <summary>
            이 개체를 소유한 ActiveObject에 전달할 작업물이 존재하는 것을 알릴 때 호출하는 메서드입니다.
            </summary>
            <summary>
            <para>The delegate that represents the method to handle notfication using the specified <em>object</em> as sender.</para>
            <para>Called from <em>EntityIsReady</em>.</para>
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatchOutPort">
            <summary>
            AoDispatch와 설비를 연결하는 포트(Port) 클래스입니다.
            </summary>
            <summary>
            The port that connects <em>AoDispatch</em> and <em>AoEquipment.Loader(the equipment to load the entitiy sent from <em>>DispatchOutPort</em>)</em>.
            The port connection is made with <em>DispatchInPort</em>. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.DispatchOutPort.#ctor(Mozart.SeePlan.Simulation.AoDispatch)">
            <summary>
            지정된 AoDispatch를 소유자로 하는 새로운 DispatchOutPort를 생성합니다.
            </summary>
            <param name="ao">이 개체를 소유하는 ActiveObject입니다.</param>
            <summary>
            Initializes a new instance of the <em>DispatchOutPort</em> with the specified active object, AoDispatch, as the owner.
            </summary>
            <param name="ao">The owner active object of this created instance.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.DispatchOutPort.Source">
            <summary>
            이 개체를 소유한 AoDispatch를 가져옵니다.
            </summary>
            <summary>
            Gets the owner AoDispatch of this instance. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityFilterBase">
            <summary>
            This is the class to remove target WIPs for Dispatching by dertermining the conditions of entities waiting in Queue for Dispatching. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterBase.Initialize(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            클래스를 초기화합니다. 
            </summary>
            <param name="ao"></param>
            <summary>
            Initializes the class <em>EntityFilterBase</em> with the specified active object, and creates a <em>DispatchFilterControl</em> instance.
            </summary>
            <param name="ao"></param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterBase.Filter(Mozart.Simulation.Engine.ActiveObject,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Filters the WIPs on standby in the equipment and return the unfiltered entites. 
            </summary>
            <param name="ao">Target equipment object.</param>
            <param name="list">The list of waiting entity.</param>
            <param name="ctx">The Context object used by Filtering logic.</param>
            <returns>Returns the final target entity list for Dispatching.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterBase.SetFilterContext(Mozart.SeePlan.Simulation.AoEquipment,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Define configuration information in advance for Filtering. 
            </summary>
            <param name="eqp">Target equipment object</param>
            <param name="list">Target entity list.</param>
            <param name="ctx">Dispatch Context</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterBase.SetLotCondition(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Configures the information to the Lot at the designated equipment before Filtering. 
            </summary>
            <param name="eqp"></param>
            <param name="hb"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.EntityFilterManager">
            <summary>
            The class that manages and registers entity Filter class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterManager.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.
            </summary>
            <param name="ao">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.EntityFilterManager.Filter(Mozart.Simulation.Engine.ActiveObject,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Executes all Filters of the registered Filter class.
            </summary>
            <param name="ao">Target equipment..</param>
            <param name="list">The list of waiting entity.</param>
            <param name="ctx">The Context object used by Filtering logic.</param>
            <returns>Returns the final target entity list for Dispatching.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.FactoryMonitor">
            <summary>
            This is the class to manipulate statistics data during entity and equipment state change from Factory. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.FactoryMonitor.EntityMonitors">
            <summary>
            The list of entity statistics monitor object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.FactoryMonitor.EquipmentMonitors">
            <summary>
            The list of equipment statistics monitor object.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.GetEntityMonitor``1">
            <summary>
            Return a specific type of entity statistics monitor object(IEntityMonitor class object).
            </summary>
            <typeparam name="TMonitor">The target monitor type to return.</typeparam>
            <returns>Return entity statistics monitor object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.GetEquipmentMonitor``1">
            <summary>
            Return a specific type of equipment statistics monitor object(IEquipmentMonitor class object)
            </summary>
            <typeparam name="TMonitor">The target monitor type to return.</typeparam>
            <returns>Return equipment statistics monitor object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.Add(Mozart.SeePlan.Simulation.IEntityMonitor)">
            <summary>
            Add entity monitor.
            </summary>
            <param name="monitor">The entity statistics monitor to add.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.Remove(Mozart.SeePlan.Simulation.IEntityMonitor)">
            <summary>
            Remove entity monitor.
            </summary>
            <param name="monitor">The entity statistics monitor to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.Add(Mozart.SeePlan.Simulation.IEquipmentMonitor)">
            <summary>
            Add equipment monitor.
            </summary>
            <param name="monitor">The equipment statistics monitor object to add.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.Remove(Mozart.SeePlan.Simulation.IEquipmentMonitor)">
            <summary>
            Remove equipment monitor.
            </summary>
            <param name="monitor">The equipment statistics monitor object to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.TransferIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor entity transfer start Event. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.TransferOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor entity transfer end Event.
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.HoldIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor Event of entity Hold queue state. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.HoldOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor Event of entity Hold end state.
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.CancelWait(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Cancel entity wait state Event. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.DispatchIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor Event of entity in Dispatching standby state. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.DispatchOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor Event of entity Dispatching complete event. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.TrackIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor equipment loading state event of entity.
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.TrackOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor equipment unloading state event of entity. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.OutWaitIn(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor entity wait start event after Out. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.OutWaitOut(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor entity wait end state event after Out. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.FactoryMonitor.StateChanged(Mozart.Simulation.Engine.ActiveObject,Mozart.SeePlan.Simulation.LoadingStates,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Monitor equipment state change event. 
            </summary>
            <param name="eqp">Target equipment..</param>
            <param name="state">Changed state.</param>
            <param name="entity">Target entity.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DispatcherType">
            <summary>
            Dispatcher type.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatcherType.Fifo">
            <summary>
            This is the FIFO type Dispatcher. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatcherType.WeightSorted">
            <summary>
            Weight Factor priority sorting type Dispatcher. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.DispatcherType.WeightSum">
            <summary>
            The Weighted Sum per Weight Factor sorting type Dispatcher. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IEntityDispatcher">
            <summary>
            The interface of the Dispatcher.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityDispatcher.Initialize(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Initializes Dispatcher.
            </summary>
            <param name="ao">Target equipment object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityDispatcher.Select(Mozart.Simulation.Engine.ActiveObject,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
             Select entity from the list.
            </summary>
            <param name="ao"></param>
            <param name="list">Target entity list..</param>
            <param name="ctx">Dispatch Context.</param>
            <returns>Returns the selected entity list.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.IEntityFilter">
            <summary>
            The Interface of Entity Filter.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityFilter.Initialize(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Initializes class.
            </summary>
            <param name="ao">Target equipment object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.IEntityFilter.Filter(Mozart.Simulation.Engine.ActiveObject,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch},Mozart.SeePlan.Simulation.IDispatchContext)">
            <summary>
            Filters the WIP on standby in the equipment and returns the unfiltered entities. 
            </summary>
            <param name="ao">Target equipment object.</param>
            <param name="list">The list of waiting entity.</param>
            <param name="ctx">Context object to be used by Filtering logic.</param>
            <returns>Returns the final target entity list for Dispatching.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ISimulationExtension">
            <summary>
            시뮬레이션 확장 기능 인터페이스입니다.
            </summary>
            <summary>
            Simulation extension interface
            This interface is obslete and no longer in use. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.ISimulationExtension.Name">
            <summary>
            확장 기능의 이름을 가져옵니다.
            </summary>
            <summary>
            Gets the name of the extension function.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ISimulationExtension.Initialize(Mozart.SeePlan.Simulation.LoadingSimulator)">
            <summary>
            확장 기능을 초기화합니다.
            </summary>
            <param name="ls">시뮬레이션 실행기입니다.</param>
            <summary>
            Initializes the extension function.
            </summary>
            <param name="ls">The simulator.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ISimulationExtension.Dispose(Mozart.SeePlan.Simulation.LoadingSimulator)">
            <summary>
            확장 기능을 Dispose시킵니다.
            </summary>
            <param name="ls">시뮬레이션 실행기입니다.</param>
            <summary>
            Disposes the extension function.
            </summary>
            <param name="ls">The simulator.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.DeliveredDelegate">
            <summary>
            entity delivered response delegate
            </summary>
            <param name="t"></param>
            <param name="key"></param>
            <param name="sourceLocation"></param>
            <param name="targetLocation"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ITransportSystem">
            <summary>
            외부 물류 시뮬레이션 시스템 인터페이스입니다. 
            사용되는 곳이 없어 정확한 기능을 알 수 없습니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITransportSystem.MoveRequest(Mozart.Simulation.Engine.Time,System.String,System.String,System.String)">
            <summary>
            작업물 운송을 요청합니다.
            </summary>
            <param name="t">운송 요청 시간입니다.</param>
            <param name="key"></param>
            <param name="sourceLocation">출발지 정보입니다.</param>
            <param name="targetLocation">도착지 정보입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITransportSystem.Start">
            <summary>
             start transport system
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITransportSystem.Stop">
            <summary>
             stop transport system
            </summary>
        </member>
        <member name="E:Mozart.SeePlan.Simulation.ITransportSystem.Delivered">
            <summary>
            작업물 운송이 완료되었을 때 호출되는 이벤트입니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.CstResponseDelegate">
            <summary>
            Cst response delegate
            </summary>
            <param name="t"></param>
            <param name="command"></param>
            <param name="args"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ITransportSystem2">
            <summary>
            카세트 반송 기능이 포함된 외부 물류 시뮬레이션 시스템 인터페이스입니다.
            사용되는 곳이 없어 정확한 기능을 알 수 없습니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITransportSystem2.CstRequest(Mozart.Simulation.Engine.Time,System.String,System.Object)">
            <summary>
            카세트 반송을 요청합니다.
            </summary>
            <param name="t">카세트 반송 시작 시간입니다.</param>
            <param name="command">카세트 반송 명령입니다.</param>
            <param name="args">카세트 반송에 사용되는 추가 정보입니다.</param>
        </member>
        <member name="E:Mozart.SeePlan.Simulation.ITransportSystem2.CstResponse">
            <summary>
            카세트 반송 요청 시 호출되는 이벤트입니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LoadingSimulator">
            <summary>
            Model 의 Input을 기반으로 Simulation을 실행시키는 객체
            </summary>
            <summary>
            The object to execute the simulation based on the inputs of the model.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.#ctor">
            <summary>
            새로운 LoadingSimulator를 생성합니다.
            </summary>
            <summary>
            Initializes a new instance of the <em>LoadingSimulationEvents</em> class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.OnFinished(Mozart.Simulation.Engine.Coordinator,System.Int32)">
            <summary>
            시뮬레이션 수행이 끝난 시점에 호출되는 메서드입니다.
            </summary>
            <param name="c">시뮬레이션 엔진입니다.</param>
            <param name="run">0부터 시작하는 시뮬레이션 반복 실행 횟수입니다.</param>
            <returns>완료 처리 여부입니다.</returns>
            <summary>
            Called at the end of simulation. Currently, nothing is done through this class. 
            </summary>
            <param name="c">The simulation engine.</param>
            <param name="run">The zero-based count that specifies the repeat count of the simulation. </param>
            <returns>The value to indicate whether the simulation is finished.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.ContinueRunning(System.Int32)">
            <summary>
            시뮬레이션을 다시 수행할지 여부를 반환합니다.
            </summary>
            <param name="run">0부터 시작하는 시뮬레이션 반복 실행 횟수입니다.</param>
            <returns>시뮬레이션을 다시 수행하는 경우 true이고, 그 외의 경우 false입니다.</returns>
            <summary>
            Returns a value to indicate whether to rerun the simulation.
            </summary>
            <param name="run">The zero-based count that specifies the repeat count of the simulation.</param>
            <returns><em>true</em> to rerun simulation; otherwise <em>false</em>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LoadingSimulator.Events">
            <summary>
            사용되는 곳이 없어 용도를 알 수 없습니다.
            </summary>
            <summary>
            No longer in use. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LoadingSimulator.Extensions">
            <summary>
            시뮬레이션 확장 기능의 목록입니다.
            </summary>
            <summary>
            The list of simulation extensions. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LoadingSimulator.Context">
            <summary>
            모델 실행 컨텍스트를 가져옵니다.
            </summary>
            <summary>
            Gets the model execution context.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.LoadingSimulator.Logger">
            <summary>
            모델 실행 로그를 기록하는 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the object to write model execution log. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.Initialize(Mozart.Task.Execution.ModelContext)">
            <summary>
            시뮬레이션 실행기를 초기화합니다.
            </summary>
            <param name="context">모델 실행 컨텍스트입니다.</param>
            <summary>
            Initializes the simulator. 
            </summary>
            <param name="context">The model execution context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.Execute(Mozart.Task.Execution.ModelContext)">
            <summary>
            시뮬레이션을 실행합니다.
            </summary>
            <param name="context">모델 실행 컨텍스트입니다.</param>
            <summary>
            Executes simulation.
            </summary>
            <param name="context">The model execution context.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.LoadingSimulator.Reset">
            <summary>
            시뮬레이션 실행기를 초기 설정 상태로 되돌립니다.
            </summary>
            <summary>
            Resets the simulator to its initial state. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.LoadingStates">
            <summary>
            Equipment state type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.SETUP">
            <summary>
            Setup state
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.BUSY">
            <summary>
            Processing state.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.IDLERUN">
            <summary>
             Entities not loaded to equipment even though the equpment is available. (For equipment types that could load continously). 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.IDLE">
            <summary>
            The equipment is UP, but no entities are being processed. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.PM">
            <summary>
            Equipment unavailable due to PM. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.DOWN">
            <summary>
            Equipment unavailable due to Failure. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.LoadingStates.WAIT_SETUP">
            <summary>
            Equipment on standby for SetUp
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.BatchEntity">
            <summary>
            This is the Batch entity class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchEntity.Contents">
            <summary>
            An entity may contain other entities. 
            For example, the entity Bus may contain the entities of type Passenger. 
            There are objects that allow you to work with the entity contents
            </summary>
            <value>Returns the list of entities.</value>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchEntity.HasContents">
            <summary>This checks if there are any existing entity units that could be formed to Batch type.</summary>
            <value>If entities could be formed more than a single unit, return <strong><em>true</em></strong>, or else, return <strong><em>false</em></strong>.</value>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchEntity.First">
            <summary>The first entity from the entities to be formed as Batch.</summary>
            <value>Returns the first entity where Index is 0.</value>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.BatchEntity.Last">
            <summary>The last entity from the entities to be formed as Batch.</summary>
            <value>Returns the last entity where Index is Count -1.</value>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchEntity.ToString">
            <summary>
            The string to express Batch entities. 
            </summary>
            <returns>Returns the Batch expression string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.BatchEntity.CreateDummy">
            <summary>
            이 작업물과 동일한 정보를 갖지만 수량이 0인 더미 작업물을 생성합니다.
            </summary>
            <returns>더미 작업물입니다.</returns>
            <summary>
            Clones the sepcified entity(wafer,lot,batch) as a dummy entity, which has the same information as the specified entity, but with 0 quantity.
            </summary>
            <returns>The created dummy entity </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.Entity">
             <summary>
            Entity is a base class for all entities that are generated, access resources,
            and take part in the process flow in process-centric models
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.Priority">
            <summary>
            Event priority.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.Resources">
            <summary>
            The list of Seized Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.HasResources">
            <summary>
            if one or more seized resources, then true otherwise false
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.Contents">
            <summary>
            An entity may contain other entities. For example, 
            the entity Bus may contain the entities of type Passenger. 
            There are objects that allow you to work with the entity contents
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.HasContents">
            <summary>
            Tests other entities. always false 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.Entity.NumOfUnits">
            <summary>
            Uesed in AoProcess
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ProcessStates">
            <summary>
            Equipment Processer state type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.WaitSetup">
            <summary>
            Standby for Setup. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.StartSetup">
            <summary>
             Setup start. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.EndSetup">
            <summary>
            Completed Setup.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.FirstLoading">
            <summary>
            First entity loaded.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.LastLoading">
            <summary>
            Last entity loaded.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.FirstUnloading">
            <summary>
            First entity unloaded. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.ProcessStates.LastUnloading">
            <summary>
            Last entity unloaded. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.RegistrationMessage">
            <summary>
            Port와 ActiveObject의 연결 관계 정보를 포함하는 메시지 클래스입니다.
            </summary>
            <summary>
            The message containing the connection information among the port and <em>ActiveObject</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.RegistrationMessage.Key">
            <summary>
            등록할 ActiveObject의 Key를 가져옵니다.
            </summary>
            <summary>
            Gets the key value of the target <em>ActiveObject</em> to register to the source <em>ActiveObject</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.RegistrationMessage.Target">
            <summary>
            등록할 ActiveObject를 가져옵니다.
            </summary>
            <summary>
            Gets the target <em>ActiveObject</em> to register to the source <em>ActiveObject</em>. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.RegistrationMessage.Port">
            <summary>
            등록할 Port를 가져옵니다.
            </summary>
            <summary>
            Gets the port of the target <em>ActiveObject</em> to register to the source <em>ActiveObject</em>
            The port is used to send and recieve messages among source and target <em>ActiveObject</em>.
            When registered, the source <em>ActiveObject</em> will know which port to use to send to the target <em>ActiveObject</em>.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.RegistrationMessage.#ctor(System.String,Mozart.Simulation.Engine.ActiveObject,Mozart.Simulation.Engine.Port)">
            <summary>
            지정된 ActiveObject와 Port의 연결관계 정보를 갖는 RegistrationMessage를 생성합니다.
            </summary>
            <param name="regKey">등록할 ActiveObject의 Key입니다.</param>
            <param name="regObject">등록할 ActiveObject입니다.</param>
            <param name="regPort">등록할 Port입니다.</param>
            <summary>
            Initializes a new instance of the <m>RegistrationMessage</m> class with the connection information of the target <em>ActiveObject</em> and <em>Port</em>.
            </summary>
            <param name="regKey">The key of target <em>ActiveObject</em> to register to the source <em>ActiveObject</em>.</param>
            <param name="regObject">The target <em>ActiveObject</em> to register the source.</param>
            <param name="regPort">The port for the source <em>ActiveObject</em> to refer.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.RouterInPort">
            <summary>
            The Inport of AoRouter. It is used to connect with AoBatchRelease, AoTransfer entity. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.RouterInPort.Register">
            <summary>
            Registers the information of the owner. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.RouterInPort.Register(System.String,Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Register the specified <em>ActiveObject</em> as the owner of this instance.
            </summary>
            <param name="regKey">The key value of the specified <em>ActiveObject</em>.</param>
            <param name="regObject">The <em>ActiveObject</em> to register as the owner.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.RouterOutPort">
            <summary>
            OutPort of AoRouter. It is used to connect with DispatchingAgent. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.RouterOutPort.#ctor(Mozart.SeePlan.Simulation.AoRouter)">
             <summary>
            Outport constructor of AoRouter. 
             </summary>
             <param name="ao"></param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.RouterOutPort.Router">
            <summary>
            AoRouter information of OutPort.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SecondResourceStatus">
            <summary>
            The Second Resource state type. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.SecondResourceStatus.Wait">
            <summary>
            Standby for use. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.SecondResourceStatus.Busy">
            <summary>
            SecondResource currently in use. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.SecondResourceStatus.Maintenance">
            <summary>
            Unavaiable for use due to maintenance. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.SecondResourceStatus.Disabled">
            <summary>
            Unable to use. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SecondResource">
            <summary>
            The class of additional resource for the equipment/entity to process from the specified step. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.#ctor(System.String,System.Object)">
            <summary>
            	Create <em>SecondResource</em>.</summary>
            <param name="id">
            	Input <em>SecondResource</em> ID.</param>
            <param name="data">
            	Input additional data required for <em>SecondResource</em>.</param>
            <returns>
            	Retun <em>SecondResource</em>.</returns>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.ResourceID">
            <summary>
            Resource ID. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Data">
            <summary>
            	Additional data of <em>SecondResouce</em>.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Capacity">
            <summary>
            	The total Capacity available in <em>SecondResource</em>.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Availables">
            <summary>
            	The current Capacity available in <em>SecondResource</em>.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Uses">
            <summary>
            Number of Resource in use. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Reserved">
            <summary>
            The list of entities that reserved to use Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Reserves">
            <summary>
            The reserved Capacity of Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Status">
            <summary>
            Current Resource state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.LastLocation">
             <summary>
            Current location information. 
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.MinReleaseTime">
            <summary>
            The next Release hour of the target Resource. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.NextAvailables">
            <summary>
            The available Capacity for the target Resource for next release.  
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResource.Pool">
            <summary>
            The Pool object information property of the SecondResource. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.IsSeized(Mozart.SeePlan.Simulation.ISecondResourceOwner)">
            <summary>
            Check if the target(Owner) is currently utilizing the Resource.
            </summary>
            <param name="owner">The subject utilizing Second Resource. It is either entity or equipment. </param>
            <returns>If 'owner' is currently utilizing Resource, return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.Seize(Mozart.SeePlan.Simulation.ISecondResourceOwner,Mozart.Simulation.Engine.Time,System.Int32)">
            <summary>
            Change state of Resource to be utilized by 'owner'. 
            </summary>
            <param name="owner">The target object to utilize resource. </param>
            <param name="releaseTime">The expected time for Release. </param>
            <param name="count">The amount of target Capacity to be utilized. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.Reserve(Mozart.SeePlan.Simulation.ISecondResourceOwner,System.Int32,Mozart.Simulation.Engine.Time)">
             <summary>
            Resource is reserved by 'owner'. 
             </summary>
             <param name="owner">Target object for reservation. </param>
             <param name="count">Target Capacity for reservation. </param>
             <param name="rtime">The expected time for the 'owner' to utilize Resource. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.IsReserved(Mozart.SeePlan.Simulation.ISecondResourceOwner)">
            <summary>
            Checks if Resource is reserved by 'owner'.
            </summary>
            <param name="owner">Target object for reservation. </param>
            <returns>If Resource is reserved by 'owner', return <strong>true</strong>, or else, return <strong>false</strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.Release(Mozart.SeePlan.Simulation.ISecondResourceOwner,System.Int32)">
            <summary>
            Change the state of Second Resource utilized by equipment, entity to be available again. 
            </summary>
            <param name="owner">The object currently utilizing Resource. </param>
            <param name="count">The Capacity utilized by the corresponding object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.IsAvailable(Mozart.SeePlan.Simulation.ISecondResourceOwner)">
             <summary>
            Checks if Resource is currently available. 
             </summary>
             <param name="owner">The target object to use Resource. </param>
             <returns>If Resource is available, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.GetNextAvailableTime(Mozart.SeePlan.Simulation.ISecondResourceOwner,System.Int32,Mozart.Simulation.Engine.Time)">
            <summary>
            Return the next available time of the Resource.  
            </summary>
            <param name="owner">The object to utilize Resource. </param>
            <param name="count">Required Capacity of Resource.</param>
            <param name="now">Current time.</param>
            <returns>Return the next avaiable time of Resource. If the Resource can be used immediately, return now.
            Or else, if the requested Resource is unavailable, return Time.Infinity. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.RegisterWait(Mozart.SeePlan.Simulation.ISecondResourceOwner)">
            <summary>
            Register 'owner' to queue for activation when Resource is available. 
            Registration/Activation is possivle only when 'owner' is AoEquipment type. 
            </summary>
            <param name="owner">The object to utilize Resource. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.WakeUpWaits">
            <summary>
            Activate 'owner(s)' that are waiting for the Resource to be available. 
            Registration/Activation is possivle only when 'owner' is AoEquipment type.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.UnRegisterWait(Mozart.SeePlan.Simulation.ISecondResourceOwner)">
            <summary>
            Unregister waiting 'owner' from the list. 
            </summary>
            <param name="owner">The information of owner to be unregistered. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.ExecutePM(Mozart.SeePlan.Simulation.AoEquipment,System.TimeSpan)">
            <summary>
            Perform Prevent Management as long as the designated time. 
            </summary>
            <param name="eqp">Target equipment object.</param>
            <param name="duration">PM duration.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResource.DoScrap(Mozart.SeePlan.Simulation.AoEquipment)">
            <summary>
            Dispose SceondResource as Scrap.
            </summary>
            <param name="eqp">Target equipment object.</param>
            <remarks>Changes the state of SecondResource to Disabled.</remarks>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SecondResourcePool">
            <summary>동일한 <em>SecondResource</em> 를 관리하기 위한 클래스입니다.</summary>
            <summary>Provides collection of same <em>SecondResource</em> objects.</summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResourcePool.Key">
            <summary>
            Second resource pool 에 대한 Key 문자열입니다.
            </summary>
            <summary>
            Gets the string that indicates the key of the second resource pool. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResourcePool.Factory">
            <summary>
            Root Factory model object. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResourcePool.Resources">
            <summary>
            등록된 second resource dictionary 입니다. 
            key : Second resource key 문자열입니다.
            </summary>
            <summary>
            Represents a nongeneric collection of key/value pairs of the second resource. 
            key : The string representing the unique key of the second resource collections. 
            value : The <em>SecondResource</em> object of the specified key.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.#ctor(Mozart.SeePlan.Simulation.AoFactory,System.String)">
            <summary>
            생성자입니다.
            </summary>
            <param name="factory">Root Factory object. </param>
            <param name="key">SecondResource Pool key 문자열입니다.</param>
            <summary>
            Initializes a new instance of the class <em>SecondResourcePool</em> with the specified factory model object and the key of the second resource pool.
            </summary>
            <param name="factory">Root Factory object. </param>
            <param name="key">SecondResource Pool key 문자열입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.Add(Mozart.SeePlan.Simulation.SecondResource)">
            <summary>
            	<em>SecondResourcePool</em> 에 대상 <em>SecondResource</em> 를 추가합니다.</summary>
            <param name="item">추가 할 <em>SecondResource</em> 입니다.</param>
            <summary>Adds the specified <em>SecondResource</em> to <em>SecondResourcePool</em>.</summary>
            <param name="item">The <em>SecondResource</em> object to add to the <em>SecondResourcePool</em>.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.Clear">
            <summary>등록된 모든 <em>SecondResource</em> 를 초기화합니다.</summary>
            <summary>Removes all keys and SecondResource from the <em>Dictionary&lt;string,SecondResource&gt;</em>.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.Contains(Mozart.SeePlan.Simulation.SecondResource)">
            <summary>등록된 <em>SecondResource</em> 중 검색 대상이 포함되어 있는지 여부를 반환합니다.</summary>
            <param name="item">검색대상 <em>SecondResource</em> 입니다.</param>
            <returns>
            	<em>SecondResource</em> 가 포함되어 있는 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>
            <para>Determines whether the <em>Dictionary&lt;string,SecondResource&gt;</em> contains the key of the specified <em>SecondResource</em>.</para>
            <para>The <em>SecondResource.ResourceID</em> is used as the key to search.</para>
            </summary>
            <param name="item">The <em>SecondResource</em> object to use <em>SecondResource.ResourceID</em> as the key to locate in the <em>Dictionary&lt;string,SecondResource&gt;</em> </param>
            <returns><em>true</em> if the <em>Dictionary&lt;string,SecondResource&gt;</em> contains an element with the specified <em>SecondResource.ResourceID</em>;otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.CopyTo(Mozart.SeePlan.Simulation.SecondResource[],System.Int32)">
            <summary>등록된 <em>SecondResource</em> Collection 에서 지정한 배열 index 에서 시작하여 복사대상 배열에 복사합니다.</summary>
            <param name="array">복사대상 배열입니다.</param>
            <param name="arrayIndex">복사시작 배열 index 입니다.</param>
            <summary>Copies the <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em> elements into the given array, starting at the specified array index.</summary>
            <param name="array">The one-dimensional array that is the desination of the elements copied from <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <em>array</em> at which copying begins. </param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResourcePool.Count">
            <summary>
            등록된 SecondResource 수량입니다.
            </summary>
            <summary>
            Gets the number of <em>SeconResource</em>(key/value pairs) contained in the <em>Dictionary&lt;string,SecondResource&gt;</em>.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SecondResourcePool.IsReadOnly">
            <summary>
            읽기전용 여부입니다. 항상 false 값을 반환합니다.
            </summary>
            
            <summary>
            <para>Gets a value indicating whether the <em>SecondResourcePool</em> is read-only.</para>
            <para><em>false</em> is always returned.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.Remove(Mozart.SeePlan.Simulation.SecondResource)">
            <summary>등록된 <em>SecondResource</em> Collection 에서 입력된 <em>SecondResource</em> 를 제거합니다.</summary>
            <param name="item">제거대상 <em>SecondResource</em> 입니다.</param>
            <returns>정상 삭제여부입니다. 삭제 됐을 경우 <strong><em>true</em></strong>, 아닐 경우 <strong><em>false</em></strong> 를 반환합니다.</returns>
            <summary>
            <para>Removes the <em>SecondResource</em> value with the specified key of the <em>SecondResource</em> from the <em>Dictionary&lt;string,SecondResource&gt;</em></para>.
            <para>The <em>SecondResource.ResourceID</em> is used as the key to search.</para>
            </summary>
            <param name="item">The <em>SecondResource</em> object to use <em>SeconResource.ResourceID</em> as the key of the element to remove.</param>
            <returns><em>true</em> if the element is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.GetEnumerator">
            <summary>
            등록된 Second Resource Collection 을 IEnumerable 형으로 반환합니다.
            </summary>
            <returns></returns>
            <summary>
            Returns an enumerator that iterates through the <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em>
            </summary>
            <returns>
            <para><em>Dictionary&lt;string,SecondResource&gt;.ValueCollection.Enumerator</em></para>
            <para>A <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection.Enumerator</em> for <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em>.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em>
            </summary>
            <returns>
            <para><em>Dictionary&lt;string,SecondResource&gt;.ValueCollection.Enumerator</em></para>
            <para>A <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection.Enumerator</em> for <em>Dictionary&lt;string,SecondResource&gt;.ValueCollection</em>.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.IsAvailable(System.Object,Mozart.SeePlan.Simulation.ISecondResourceOwner,Mozart.Simulation.Engine.Time,System.Int32)">
            <summary>요청한 <em>SecondResource</em>의 가용여부를 반환합니다.</summary>
            <param name="resourceKey">
            	<em>SecondResource</em> key 입니다.</param>
            <param name="owner">
            	<em>SecondResource</em> 를 사용할 객체입니다. 장비와 ToolSettings 가 가능합니다.</param>
            <param name="requirements">대상 <EM>SecondResource</EM> 에 대한 요구 수량입니다. 기본값은 1입니다.</param>
            <param name="now">Current time.</param>
            <returns>owner 에 대해 가용한 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>입니다.</returns>
            <summary>Indicates whether the requested <em>SecondResource</em> is available to use.</summary>
            <param name="resourceKey">The key of the <em>SecondResource</em>.</param>
            <param name="owner">The owner of this <em>SecondResource</em>. The owner can be either equipment or <em>ToolSettings</em>.</param>
            <param name="requirements">Requested number to use the specified <em>SecondResource</em>. Default is set to 1.</param>
            <param name="now">The date and time set to the current date and time of the simulation.</param>
            <returns><em>true</em> if the <em>SecondResource</em> is available for the <em>owner</em>; otherwise, false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.GetResource(System.Object,Mozart.SeePlan.Simulation.ISecondResourceOwner)">
            <summary>요청하는 <em>SecondResource</em> 찾아 반환합니다.</summary>
            <param name="resourceKey">
            	<em>SecondResource</em> ID 입니다.</param>
            <param name="owner">
            	The target object to utilize <em>SecondResource</em> . </param>
            <returns>
            	<em>SecondResource</em> 입니다.</returns>
            <summary>Gets the <em>SecondResource</em> associated with the specified key.</summary>
            <param name="resourceKey">The key(<em>SecondResource.ResourceID</em> of the value to get</param>
            <param name="owner">
            	The target object to utilize <em>SecondResource</em> . </param>
            <returns>The <em>SecondResource</em> that matches the specified <em>resourceKey</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SecondResourcePool.FireAvailableEvent(Mozart.SeePlan.Simulation.SecondResource)">
            <summary>
            SecondResource 가 가용해지는 시점에 이벤트를 발생시킵니다. 
            </summary>
            <param name="secondResource">event 대상 SecondResource 입니다.</param>
            <summary>
            Event to occur when the specified <em>SecondResource</em> is available.
            </summary>
            <param name="secondResource">The <em>SecondResource</em> object to trigger the event.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.SingleRoutedEntity`2">
            <summary>
            This is the Entity class with single Step. This is the Base Class to create DomainLot.
            </summary>
            <typeparam name="TStep">Step type.</typeparam>
            <typeparam name="TLoadInfo">The Class Type that contains job information.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.Route">
            <summary>
            The Step route of the entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.LotID">
            <summary>
            ID of entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.UnitQty">
            <summary>
            The Unit quantity forming entity. The value is the ceiling of UnitQtyDouble.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.UnitQtyDouble">
            <summary>
            The number Units to form entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.Steps">
            <summary>
            The Step collection composing entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.PreviousPlan">
            <summary>
            The job information of previous Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.CurrentPlan">
            <summary>
            The job information of current Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.Plans">
            <summary>
            The job list of the entity from inital Step to current Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.IsStarted">
            <summary>
            Determines whether to start processing the first entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.IsFinished">
            <summary>
            Determines whether all processing is completed for the entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.PreviousStep">
            <summary>
            The previous Step of the entity. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.CurrentStep">
            <summary>
            The current Step of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.WeightInfo">
            <summary>
            The Dispatching Weight Factor information of the entity. The Weight Factor is updated on each Dispatching. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.ToolSettings">
            <summary>
            The Second Resource set information to process entity from the current Step. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.DispatchInTime">
            <summary>
            The Wait start time of the entity in current Step.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.ReleaseTime">
            <summary>
            The release time of entity. .
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.LotState">
            <summary>
            The type for entity's creation and Release state. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.CurrentState">
            <summary>
            The current state of entity.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.StateTime">
            <summary>
            The beginning time of the current state of entity.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.MoveFirst(System.DateTime)">
             <summary>
            Set the current Step of the entity as the first Step.          
             </summary>
             <param name="now">Current time of Simulation.</param>
             <returns>The step that is set as the first step.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.MoveNext(System.DateTime)">
            <summary>
            Set the current Step of the entity as the next Step. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>The next step for the entity to move.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.GetFirstStep">
            <summary>
            Return the first Step of the Route. 
            </summary>
            <returns>Return the first Step..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.GetNextStep(`0)">
            <summary>
            Return the next Step of the entity.
            </summary>
            <param name="current">Current Step.</param>
            <returns>Return the next Step of the current Step..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.GetNextStep(`1,`0,System.DateTime)">
            <summary>
            Return the next Step based on the target job information.
            </summary>
            <param name="cinfo">The job information of the current Step..</param>
            <param name="cstep">Current Step.</param>
            <param name="now">Current time of Simulation</param>
            <returns>Return the next Step of the current Step..</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.StartTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            Start the work of current Step.
            </summary>
            <param name="now">Start time.</param>
            <param name="eqp">The equipment performing the job.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.EndTask(System.DateTime,Mozart.SeePlan.DataModel.Resource)">
            <summary>
            End work of the current Step.
            </summary>
            <param name="now">End time. </param>
            <param name="eqp">The equipment performing the job.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.GetPreviousEffectiveEqpList">
            <summary>
            Return list of equipment that was available from previous Step. 
            </summary>
            <returns>Return equipment ID string list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.SetCurrentPlan(`1,`1)">
            <summary>
            Configure the CurrentPlan of the Lot with input information.
            </summary>
            <param name="currentPlan">The Plan information of the current Step of the entity.</param>
            <param name="prevPlan">The Plan information of the previous Step of the entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.StepChange(System.DateTime)">
            <summary>
            Set the current Step of the entity to the next Step to be moved. 
            </summary>
            <param name="now">Current time of Simulation.</param>
            <returns>Return the list of entity unit set to the next Step. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.Apply(System.Action{Mozart.SeePlan.Simulation.ILot,Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            This is used to implement a specified logic for all entities in Batch. 
            </summary>
            <param name="action">The logic delegate to be applied to entity unit. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.CreateDummy">
            <summary>
            이 작업물과 동일한 정보를 갖지만 수량이 0인 더미 작업물을 생성합니다.
            </summary>
            <returns>더미 작업물입니다.</returns>
            <summary>
            Clones the sepcified lot as a dummy lot, which has the same information as the specified lot, but with 0 quantity.
            </summary>
            <returns>The created dummy lot.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.SingleRoutedEntity`2.SetToPlan(Mozart.SeePlan.DataModel.LoadInfo)">
            <summary>
            주어진 작업 정보를 작업물의 현재 작업 정보로 설정합니다.
            </summary>
            <param name="plan">작업물의 현재 작업 정보로 설정할 작업 정보입니다.</param>
            <summary>
            Sets the specified work plan of the lot to the current work plan.
            </summary>
            <param name="plan">The work plan of the specified lot to set as the current work plan </param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TimeAgentHandler">
            <summary>
            The delegate of TimeAgent.
            </summary>
            <param name="sender">TimeAgent object.</param>
            <param name="state">State object.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.ITimerAgent">
            <summary>
            The Interface to include/delete user events. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITimerAgent.Add(System.Object,Mozart.SeePlan.Simulation.TimeAgentHandler,Mozart.Simulation.Engine.Time,System.Int32)">
            <summary>
            	Add user Event to <em>TimerAgernt</em>.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.ITimerAgent.Cancel(System.Object)">
            <summary>
            	Cancel registered Event in <em>TimerAgent</em></summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TimerAgent">
            <summary>A manangement Agent to add/cancel/trigger user event.</summary>
            <remarks>
            	<list type="number">
            		<item>User cannot create <em>TimerAgent</em> directly. If TimerAgent is required, <em>AoFactory.TimerAgent</em> can be used.</item>
            		<item>TimerAgent can register on event per State.</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.Count">
            <summary>
            The numbers of registered State.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.Keys">
            <summary>
            The list of registered Key.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            Constructor.The priority is set as -1000 as default.
            </summary>
            <param name="ao">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.Add(System.Object,Mozart.SeePlan.Simulation.TimeAgentHandler,Mozart.Simulation.Engine.Time,System.Int32)">
            <summary>
            	Add user event to <em>TimerAgent</em>.</summary>
            	<param name="state">The state information to include.</param>
            	<param name="handler">The TimeAgentHandler to include.</param>
            	<param name="delay">Event trigger cycle.</param>
            	<param name="priority">Priority. If there is no input, it is set as 0.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.Cancel(System.Object)">
            <summary>
            	Cancel Event registered to <em>TimerAgent</em></summary>
            	<param name="state">The state to cancel.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo">
            <summary>
            Event information registered to TimerAgent.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Owner">
            <summary>
            TimerAgent object.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.State">
            <summary>
            State information.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.DelayTime">
            <summary>
            Event trigger cycle.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Handler">
            <summary>
            Event Handler
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Priority">
            <summary>
            Priority.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.ReadyTime">
            <summary>
            Event trigger standby time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Mozart#Simulation#Engine#Collections#INodeCache#NodeId">
            <summary>
            Node ID for splay tree q.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.RestTime">
            <summary>
            The remaining time until Event tirgger.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Engine">
            <summary>
            Coordinator object.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.Now">
            <summary>
            Current time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.IsOneshot">
            <summary>
            Determine whether to trigger Event only once. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.#ctor(Mozart.Simulation.Engine.ActiveObject,System.Object,Mozart.SeePlan.Simulation.TimeAgentHandler,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Constructor
            </summary>
            <param name="owner">TimerAgent object.</param>
            <param name="state">Target State.</param>
            <param name="handler">Event Handler to enable. .</param>
            <param name="now">Current time.</param>
            <param name="initial">The delay time of the initial event.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.#ctor(Mozart.Simulation.Engine.ActiveObject,System.Object,Mozart.SeePlan.Simulation.TimeAgentHandler,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            Constructor
            </summary>
            <param name="owner">TimerAgent object.</param>
            <param name="state">Target State.</param>
            <param name="handler">Event Handler to enable. .</param>
            <param name="now">Current time.</param>
            <param name="initial">The delay time of the initial event.</param>
            <param name="delay">Event trigger cycle.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TimerAgent.TimeInfo.CompareTo(System.Object)">
            <summary>
            Compare priority with the next Event.
            </summary>
            <param name="obj">Target Event.</param>
            <returns>If negative number is returned, either the this.ReadyTime is fast or priority factore is low. 
            In the other hand, if positive number is returned, this.ReadyTime is slow or Priority number is large.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TransportAdapter">
            <summary>
            외부 물류 시뮬레이션 시스템과 연동하기 위한 어뎁터 클래스입니다.
            </summary>
            <summary>
            Represents an adapter to interlock with external logistics(transport) simulation system application.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.TransportAdapter.Destination">
            <summary>
            물류 도착지 정보 클래스입니다.
            </summary>
            <summary>
            A class that contains the destination information of the transport.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TransportAdapter.Destination.Target">
            <summary>
            도착지에 해당하는 실제 ActiveObject입니다.
            </summary>
            <summary>
            Active object of the <em>Destination</em>.  
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.Simulation.TransportAdapter.Destination.Queue">
            <summary>
            이 도착지로 이동 가능한 대기 작업물의 목록입니다.
            </summary>
            <summary>
            The list of entity(wafer,lot,batch) that could be transferred to this destination. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransportAdapter.Destination.#ctor(Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            지정된 ActiveObject을 사용하여 새로운 Destination을 생성합니다.
            </summary>
            <param name="target">도착지에 해당하는 실제 ActiveObject입니다.</param>
            <summary>
            Intializes a new instance of the <em>Destination</em> class with the specified active object.
            </summary>
            <param name="target">The <em>Destination</em> active object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransportAdapter.#ctor(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            주어진 공장 모델로부터 새로운 TransportAdapter를 생성합니다. 
            ServiceLocator에 ITransportSystem 형식의 외부 물류 시뮬레이션 시스템이 등록되어 있어야 합니다.
            </summary>
            <param name="factory">공장 모델입니다.</param>
            <summary>
            Initializes a new instance of the <em>TransportAdapter</em> class with the specified factory model object.  
            The external transport simulation system should be registered to <em>ServiceLocator</em> as <em>ITransportSystem</em> format. 
            </summary>
            <param name="factory">The factory model active object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.IsActive">
            <summary>
            외부 물류 시뮬레이션 시스템이 존재하는지 여부입니다.
            </summary>
            <summary>
            Gets a value to determine whether an external transport system exists or not. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.Factory">
            <summary>
            전체 공장에 대한 최상위 시뮬레이션 개체를 가져옵니다.
            </summary>
            <summary>
            Gets the root simulation object of the entire factory. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.TransportSystem">
            <summary>
            외부 물류 시뮬레이션 시스템을 가져옵니다.
            </summary>
            <summary>
            Gets the external transport systmem. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.TransportSystem2">
            <summary>
            카세트 반송 기능이 포함된 외부 물류 시뮬레이션 시스템을 가져옵니다.
            </summary>
            <summary>
            Gets the external transport system that could return wafer cassette. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.Destinations">
            <summary>
            등록된 목적지 정보의 목록을 가져옵니다. 
            Key는 목적지의 이름입니다. 
            Value는 목적지 정보입니다.
            </summary>
            <summary>
            Gets the list of registered destinations. 
            Key : Name of the destination. 
            Value : Information of the destination. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.TransportAdapter.Fifo">
            <summary>
            도착 순서대로 정렬한 대기 중인 작업물의 목록을 가져옵니다.
            </summary>
            <summary>
            Gets the list of entities(wafer,lot,batch) sorted by arrival.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransportAdapter.Register(System.String,Mozart.Simulation.Engine.ActiveObject)">
            <summary>
            목적지 정보를 등록합니다.
            </summary>
            <param name="key">목적지의 이름입니다.</param>
            <param name="target">목적지에 해당하는 ActiveObject입니다.</param>
            <summary>
            Registers the destination. 
            </summary>
            <param name="key">Name of the destination</param>
            <param name="target">The active object of the destination.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransportAdapter.RebuildQueues">
            <summary>
            대기 중인 작업물들의 이동 가능한 목적지 정보를 재구성합니다.
            </summary>
            <summary>
            Reconfigures the destination information in which the entities on standby for transport can move to.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.TransportAdapter.Enter(Mozart.SeePlan.Simulation.AoTransfer,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            작업물이 작업물이 Transfer(AoTransfer) 에 들어오는 시점에 호출됨
            </summary>
            <param name="at"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipInitiator">
            <summary>
            This is the class to initialize according to the initial entity(WIP) during Simulation. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.Run(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Perform initialization of Simulation WIP. 
            </summary>
            <param name="factory">Root Factory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.LocateWips">
            <summary>
            This is the Main function which is not modified and uses internal function for development.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.GetWips">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>Return target WIP list to be entirely initialized.</para>
            </summary>
            <returns>Return initial WIP list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.OnBeginInit(Mozart.SeePlan.Simulation.AoFactory,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            [FEAction] Entity/WipInit
            This Action is called at the point initialization started.
            </summary>
            <remarks>
            It is used to update necessary property during initialization.
            </remarks>
            <param name="factory">Factory object.</param>
            <param name="wips">Target wips.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.CompareWip(Mozart.SeePlan.Simulation.IHandlingBatch,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            [FEAction] Entity/WipInit
            Return the Compare result to sort WIP by state/time property data during initialization.
            </summary>
            <param name="x">Target entity 'x' for comparison.</param>
            <param name="y">Target entity 'y' for comparison.</param>
            <returns>If 'x' is larger than 'y', return 1, if 'x','y' are equal, return 0, if 'x' is smaller than 'y'. return. -1. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.IsSkipWipLocating(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>
            		<strong>[FEAction] Entity/WipInit</strong>
            	</para>
            	<para>Evaluate the initial entity and decide whether to include it through Simulation.</para>
            </summary>
            <param name="hb">Target entity for evaluation.</param>
            <remarks>
            In case there are WIPs not be reflected to Simulation, skip initialization.
            </remarks>
            <returns>If WIP is not included to Simulation, return <strong><em>true</em></strong>, or else, return <strong><em>false</em></strong>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.LocateForOthers(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>This FEAction is used to handle WIP as Hold, Bucketing, Merge instead of initializing the state to WAIT, MOVE, RUN. </para>
            	
            </summary>
            <param name="factory">Factory object.</param>
            <param name="hb">Target entity object</param>
            <returns><em>true</em> if the specified <em>hb</em> is to handle as  HOLD, bucketing; otherwise, <em>false</em>.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.OnBeginLocateWip(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            [FEAction] Entity/WipInit
            This Action is called at the point initialization starts normally for the entity.
            </summary>
            <remarks>
            It is used to update necessary property during initialization.
            </remarks>
            <param name="factory">Factory object.</param>
            <param name="hb">Target entity object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.LocateForDispatch(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>The Action to handle entity to Wait state.</para>
            </summary>
            <param name="factory">Factory object.</param>
            <param name="hb">Target entity object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.LocateForRun(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>The FEAction to handle entity during Run state.</para>
            </summary>
            <param name="factory">Factory object.</param>
            <param name="hb">Target entity object</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.GetLoadingEquipment(Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>The FEAction is to return the equipment ID if the entity in initial WIP is either loaded or currently being processed.</para>
            </summary>
            <param name="hb">Target entity object</param>
            <remarks>
            In initial WIP information, WIP state information is included. 
            If the state is RUN, the processing start time and processing equipment information is included.  
            The corresponding FEAction extracts and returns valid equipment information from the WIP.
            If entity is processing, this FEAction must be implemented for proper handling.  
            </remarks>
            <returns>Return Equipment ID string. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.CheckTrackOut(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>Checks if entity processing is completed even though the entity state is Processing. </para>
            </summary>
            <param name="factory">Factory object.</param>
            <param name="hb">Target entity object</param>
            <remarks>
            Even though the information in WIP may show entity is processing, 
            but depending on the information update period, the actual processing may already have been completed and sent to Output Buffer.
            Through this FEAction, the logic should be implemented to determine whether equipment Processing is completed and entity is in Output Buffer
            using the information of processing start time and other state information. 
            </remarks>
            <returns>If Processing is completed, reutnr true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.FixBatch(Mozart.SeePlan.Simulation.AoEquipment,Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            	<para>
            		<strong>[FEAction] Entity/WipInit</strong>
            	</para>
            	<para>This FEAction is used in case entity in Run state does not match with equipment processing type(Batch).</para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="entity">Target entity object</param>
            <returns>Return Batch type entity.</returns>
            <remarks>
            This is used if equipment is Batch type but the entity is in units or vice versa. 
            In this case, a logic to create valid data in order for the system to handle initialization. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.FixStartTime(Mozart.SeePlan.Simulation.AoEquipment,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            	<para>[FEAction] Entity/WipInit</para>
            	<para>This FEAction is used if the the Run start time of initial WIP is inconsistent. </para>
            </summary>
            <param name="aeqp">Target equipment object</param>
            <param name="hb">Target entity object</param>
            <remarks>
            If the difference between processing start time in entity and current time (Simulation start time) is out of 
            entity's current Step processing time and normal processing time range, it is considered the start time or state information 
            is abnormal. In this case, a logic should be implemented to redefine the equipment and entity initial State according to the Rule. 
            </remarks>
            <returns>Return the actual processing start time of the entity. The information in WIP is returned.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.OnEndLocateWip(Mozart.SeePlan.Simulation.AoFactory,Mozart.SeePlan.Simulation.IHandlingBatch)">
            <summary>
            The FEAction that is calle after initialization is completed. 
            </summary>
            <param name="factory">Root Factory object. </param>
            <param name="hb">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipInitiator.OnEndInit(Mozart.SeePlan.Simulation.AoFactory,System.Collections.Generic.IList{Mozart.SeePlan.Simulation.IHandlingBatch})">
            <summary>
            [FEAction] Entity/WipInit
            This Action is called at the point initialization end.
            </summary>
            <remarks>
            It is used to update necessary property during initialization.
            </remarks>
            <param name="factory">Factory object.</param>
            <param name="wips">Target wips.</param>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipManager">
            <summary>
            The class to manage WIPs in Simulation as Tags. 
            The entire WIPs can be easily referred through Tags. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.#ctor(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Consturctor..
            </summary>
            <param name="f">Root AoFactory object. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Register(Mozart.SeePlan.Simulation.IEntityTrackable)">
            <summary>
            Register WIP Tracking objective object. 
            WIP tracking objects are Equipment, Bucketer, Transfer, DispatchAgent. 
            </summary>
            <param name="trackable">WIP Tracking object.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.UnRegister(Mozart.SeePlan.Simulation.IEntityTrackable)">
            <summary>
            Remove WIP Tracking objective object.        
            </summary>
            <param name="trackable">WIP Tracking object to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.GetTrackables(System.String)">
            <summary>
            Return all WIP Tracking objective objects registered as specific Tag.
            </summary>
            <param name="tag">WIP Tag to be collected.</param>
            <returns>Returns all Tracking objective objects from the Tag.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.GetTags">
            <summary>
            Return all WIP Tag list registered to WIPManager.
            </summary>
            <returns>Return WIP Tag list.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.GetWips(System.String)">
            <summary>Return list of entities for input Tag. </summary>
            <param name="tag">Saech Tage information.</param>
            <returns>Return list of entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.GetWips">
            <summary>Return list of entities </summary>
            <returns>Return list of entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.InTranfers">
            <summary>
            Return moving WIP list.  
            </summary>
            <returns>Returns moving WIP list. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.InEqps(System.String,System.String)">
             <summary>
            Returns WIP of the tag from a specific equipment.  
             </summary>
             <param name="key">Target Equipment ID. </param>
             <param name="tag">Equipment WIP tag.</param>
             <returns>Returns list of WIPs.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Snapshot">
            <summary>Returns the entire list of entities. </summary>
            <returns>Returns the entire list of entities. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.GetGroup(System.String)">
            <summary>Return entity list from a specific group.</summary>
            <param name="name">WIP aggregation group key string. .</param>
            <returns>Return WIP group. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.AddGroup(System.String,System.String[])">
            <summary>Define group for WIP aggregation.</summary>
            <param name="name">View name.</param>
            <param name="fields">View composition Key column.</param>
            <returns>Return WIP group.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.AddGroup(System.String,Mozart.Data.Entity.IndexType,System.String[])">
            <summary>Define group for WIP aggregation.</summary>
            <param name="name">View name. </param>
            <param name="indexType">Index type. Able to use { BinaryTree, Hashtable, Trie }.</param>
            <param name="fields">View composition Key column.</param>
            <returns>Return WIP group.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Contains(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            	Checks if entities are registered to <em>WipManager</em>.</summary>
            <param name="entity">The entity information to search. </param>
            <returns>If entity is registered, return true, or else, return false. </returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.In(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            	Add entity to <em>Wipmanager</em> .</summary>
            <param name="entity">Entity to add. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Out(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Delete entity from Wipmanager. 
            </summary>
            <param name="entity">Target entity to remove.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Changing(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Call before WIP information is changed.  
            During WipGroup composition, Index of WipGroup(View) needs to be re-configured. 
            </summary>
            <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.Changed(Mozart.Simulation.Engine.ISimEntity)">
             <summary>
            Call after WIP information is changed.
             During WipGroup composition, Index of WipGroup(View) needs to be re-configured. 
             </summary>
             <param name="entity">Target entity.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WriteStat">
            <summary>
            Write WipManager Log. 
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipManager.WipGroup">
            <summary>
            Wip data view class. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WipGroup.#ctor(System.String,Mozart.Data.Entity.IndexType,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">WipGroup name.</param>
            <param name="indexType">IndexType information.</param>
            <param name="fields">WipGroup field information.</param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WipGroup.Build(Mozart.Data.Entity.EntityTable{Mozart.Simulation.Engine.ISimEntity})">
            <summary>
            Create View.
            </summary>
            <param name="table">Target table. </param>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WipGroup.Find(System.Object[])">
            <summary>
            Search for the subject entity.
            </summary>
            <param name="keys">The Key information to be searched.</param>
            <returns>Returns the list of target entities.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WipGroup.UniqueValues">
            <summary>
            Returns the list of unique value per Key of WipGroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.WipGroup.Find(Mozart.Simulation.Engine.ISimEntity)">
            <summary>
            Return list of entities with the same Key as the subject entity. 
            </summary>
            <param name="sample">Target entity.</param>
            <returns>Return list of entities with the same Key as the subject entity. </returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipManager.EqpWipTracking">
            <summary>
            Class for equipment WIP trakcing. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.EqpWipTracking.#ctor(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Constructor. 
            </summary>
            <param name="f">Root <em>AoFactory</em> object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WipManager.EqpWipTracking.Tags">
            <summary>
            The WIP Tag list uesd from equipment.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.EqpWipTracking.GetWips(System.String)">
            <summary>
            Return WIP information from the target tag. 
            </summary>
            <param name="tag">Target tag.</param>
            <returns>Returns list of WIPs.</returns>
        </member>
        <member name="T:Mozart.SeePlan.Simulation.WipManager.BucketerWipTracking">
            <summary>
            Class for Bucketer WIP tracking. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.BucketerWipTracking.#ctor(Mozart.SeePlan.Simulation.AoFactory)">
            <summary>
            Consturctor.
            </summary>
            <param name="f">Factory object.</param>
        </member>
        <member name="P:Mozart.SeePlan.Simulation.WipManager.BucketerWipTracking.Tags">
            <summary>
            WIP Tag list used from Bucketer. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Simulation.WipManager.BucketerWipTracking.GetWips(System.String)">
            <summary>
            Returns the WIP information from target tag.  
            </summary>
            <param name="tag">Target tag.</param>
            <returns>Returns list of WIPs.</returns>
        </member>
        <member name="T:Mozart.SeePlan.StringBuilderExtensions">
            <summary>
            This is StringBuilderExtension class providing extension to combine strings to a particular format. 
            </summary>
            <remarks>
            Provides the following extension functions.  
            1. Features string type entity of modifiable charcters with sequence value. 
            2. Able to add, delete, change, insert logs and modify them.
            3. Helpful to use for making a single sentence by connecting consecutive strings in sequence. 
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Mozart.SeePlan.StringBuilderExtensions.StringDoubleLine80" -->
        <member name="F:Mozart.SeePlan.StringBuilderExtensions.StringSingleLine80">
            <summary xml:lang="ko-kr">
            한 줄을 구분하기 위해 길이 80인 '-' 문자열 변수 입니다.
            </summary>
            <summary>
            A string varibale to express single line string('-'). This will express 80 characters for '-'.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.AppendDoubleLine(System.Text.StringBuilder)">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 두 줄 라인 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 변수 buffer 입니다.</param>
            <summary>
            Affix double line to the target string buffer. 
            </summary>
            <param name="buffer">StringBuilder type string variable.</param>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.AppendSingleLine(System.Text.StringBuilder)">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 한 줄 라인 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 변수 buffer 입니다.</param>
            <summary>
            Affix single line to the target string buffer.
            </summary>
            <param name="buffer">StringBuilder type string variable.</param>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 문자열 buffer에 대상 format 형식으로 문자열을 덧붙입니다.
            </summary>
            <param name="buffer">대상 문자열 buffer 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">대상 객체 args 변수 입니다.</param>
            <remarks>
            대상 format형식으로 문자열이 조합됩니다.
            대상 format으로 문자열을 덧붙인후, 한줄 띄워쓰기가 적용됩니다.
            </remarks>
            <summary>
            Affix string type format to the target string buffer.
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Target object args variable.</param>
            <remarks>
            Strings are combined as target format. 
            After combining strings to the target format, new line is applied. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.InsertLine(System.Text.StringBuilder,System.Int32,System.String)">
            <summary xml:lang="ko-kr">
            대상 index 위치의 다음 줄에 대상 text를 이어붙입니다.
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="text">이어붙일 문자열 변수 text 입니다.</param>
            <summary>
            Insert target text to to the next line of target index. 
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">Variable to designate location to insert.</param>
            <param name="text">Target text variable to insert.</param>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.InsertLine(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 index 위치의 다음 줄에 대상 format 형식으로 문자열을 이어붙입니다.
            </summary>
            <param name="buffer">대상 문자열 buffer 변수 입니다.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">대상 객체 args 변수 입니다.</param>
            <remarks>
            한줄 띄어쓰기후에, 대상 format형식으로 문자열 buffer에 이어붙입니다.
            </remarks>
            <summary>
            Insert string as target format to the next line of target index. 
            </summary>
            <param name="buffer">Target string buffer varibale.</param>
            <param name="index">Index variable to designate location to insert.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Target object args variable.</param>
            <remarks>
            Insert string to buffer as target format after new line. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.StringBuilderExtensions.InsertFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary xml:lang="ko-kr">
            대상 index 위치이후에 대상 format 형식으로 문자열을 이어붙입니다.
            </summary>
            <param name="buffer">StringBuilder 형식의 대상 문자열 buffer 변수 입니다.</param>
            <param name="index">이어붙일 위치를 지정한 index 변수 입니다.</param>
            <param name="format">대상 format 형식 입니다.</param>
            <param name="args">객체 배열 형식의 대상 args 변수 입니다.</param>
            <remarks>
            대상 format형식으로 문자열 buffer의 index 위치에 이어붙입니다.
            </remarks>
            <summary>
            Insert string as target format next to the target index. 
            </summary>
            <param name="buffer">Target StringBuilder type string buffer variable.</param>
            <param name="index">Index variable to designate location to insert.</param>
            <param name="format">Target string type format.</param>
            <param name="args">Object array type target args variable.</param>
            <remarks>
            Insert string to the designated index location as target format. 
            </remarks>
        </member>
        <member name="T:Mozart.SeePlan.StringUtility">
            <summary xml:lang="ko-kr">
            Seeplan의 문자열 데이터의 압축과 압축을 풀기위한 활용함수 집합 클래스입니다.
            </summary>
            <summary>
            Utility set class to compress/decompress SeePlan string data.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StringUtility.IdentityNull">
            <summary xml:lang="ko-kr">
            Null Value 문자열입니다.
            </summary>
            <summary>
            Null Value string.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.IsEmptyID(System.String)">
            <summary xml:lang="ko-kr">
            입력된 문자열이 null 이거나 IdentityNull 과 같은지 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="text">판별대상 문자열입니다.</param>
            <returns xml:lang="ko-kr">공백문자열인 경우 <strong>true</strong>, 그렇지 않은 경우 <strong>false</strong>를 반환합니다.</returns>
            <summary>
            Determine whether input string is null or equal to IdentityNull.
            </summary>
            <param name="text">Target string to distinguish.</param>
            <returns>If it is an empty string, return <strong>true</strong>, if not, return <strong>false</strong></returns>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Pack(System.String)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <returns xml:lang="ko-kr">압축된 문자열을 반환합니다.</returns>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <returns>Return compressed string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Pack(System.String,System.IO.Stream)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <param xml:lang="ko-kr" name="outputStream">압축된 문자열을 저장하는 Stream입니다.</param>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <param name="outputStream">Stream that saves compressed string.</param>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Pack(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary xml:lang="ko-kr">
            문자열을 압축합니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축대상 문자열입니다.</param>
            <param xml:lang="ko-kr" name="outputStream">압축된 문자열을 저장하는 Stream입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.</param>
            <summary>
            Compress string.
            </summary>
            <param name="data">Target string to compress.</param>
            <param name="outputStream">Stream that saves compressed string.</param>
            <param name="encoding">Encoding property</param>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Unpack(System.String)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="data">압축된 문자열입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="data">Compressed string.</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Unpack(System.IO.Stream)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="inputStream">Stream of compressed string.</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Unpack(System.IO.Stream,System.Text.Encoding)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.y</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param name="inputStream">Stream of compressed string.</param>
            <param name="encoding">Encoding property</param>
            <returns>Return decompressed string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StringUtility.Unpack(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary xml:lang="ko-kr">
            압축된 문자열의 압축을 풉니다.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">압축된 문자열의 Stream 입니다.</param>
            <param xml:lang="ko-kr" name="encoding">인코딩 속성입니다.</param>
            <param xml:lang="ko-kr" name="bufferSize">버퍼 사이즈입니다.</param>
            <returns xml:lang="ko-kr">압축이 풀린 문자열을 반환합니다.</returns>
            <summary>
            Target compressed string to decompress.
            </summary>
            <param xml:lang="ko-kr" name="inputStream">Stream of compressed string.</param>
            <param xml:lang="ko-kr" name="encoding">Encoding property</param>
            <param xml:lang="ko-kr" name="bufferSize">Buffer size</param>
            <returns xml:lang="ko-kr">Return decompressed string.</returns>
        </member>
        <member name="T:Mozart.SeePlan.DateUtility">
            <summary>
            	<para>This is the utility set class for date/time format.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartTimeOfNextWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the Factory start date a week after from the week of the input date . The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek)..</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start day a week after from the week of the input date.</para>
            	<para>[EX] If input date is 2014 September 1st 13:11:11, factory start day is Monday, factory start time is 06:00:00, the result 2014 September 4th 06:00:00 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartTimeOfWeekF(System.DateTime)">
            <summary>
            	<para> Calculates the Factory start date of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start date of the week of the input date. The time follows the factory start time.</para>
            	<para>[EX] If input date is 2014 September 1st 13:11:11, factory start day is Monday, factory start time is 06:00:00, the result 2014 September 1st 06:00:00 is returned</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartDayOfWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the Factory start date of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The Factory start date of the week of the input date. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input time and date is 2015 March 4th, Wenesday 05:01:02, factory start day is Monday, 2015 March 2nd, Monday, 05:02:01 is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartDayOfWeekTF(System.DateTime)">
            <summary>
            	<para></para>
            	<para>Calculates the Factory start date of the week of the input date including the Factory day boundary standard date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>Returns the Factory start date of the week including the Factory day boundary date from the input date.</para>
            	<para>[EX] If Factory start day is Monday, start time is 06:00, input date and time is 2015 March 4th 15:40, 2015 March 2nd Monday 06:00 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfWeekF(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The last day of the week follows the Factory's last day of the week.(Mozart.SeePlan.ShopCalendar.EndWeek).</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date and time is 2015 September 1st, Tuesday 05:01:02, Factory start day is Monday, 2015 September 6th, Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfWeekTF(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to.</para>
            	<para>[EX] If input date is 2015 September 1st, Tuesday 05:01:02. Factory start day is Monday, 2015 September 6th Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNameOfF(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            	<para>Calculates the week number difference among two input DateTime type dates. The week number difference is calculated based on the first day of the week of the input dates. </para>
            </summary>
            <param name="s0">The date in DateTime type. The base date to calculate week number.</param>
            <param name="now">The date in DateTime type. The target date to calcylate week number.</param>
            <param name="weeks">
            	<para>The week number to add to the result.</para>
            	<para>[TIP] Input 0 to only calculate the week number difference.</para>
            </param>
            <returns>
            	<para>Return the difference of week including the weeks value of the input DateTime type dates input through string type . The format "W00" is followed.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 5th, then result is W00.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, then result is W01.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, value of weeks is 1, then result is W02.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNameOfTF(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            	<para>Calculates the week number difference among two input DateTime type dates. The week number difference is calculated based on the first day of the week of the input dates. The week numbers are calculated by determining the dates based on Factory day boundary time.</para>
            </summary>
            <param name="s0">The date in DateTime type. The base date used to calculate week number.</param>
            <param name="now">The date in DateTime type. The target date used to calculate week number.</param>
            <param name="weeks">
            	<para>The week number to add to the result.</para>
            	<para>[TIP] Input 0 to only calculate the week number difference.</para>
            </param>
            <returns>
            	<para>Return the difference of week including the weeks value of the input DateTime type dates input through string type . The format "W00" is followed.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 5th, then result is W00.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, then result is W01.</para>
            	<para>[EX] If value of s0 is 2014 January 1st, value of now is 2014 January 8th, value of weeks is 1, then result is W02..</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearWF(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The last day of the week follows the Factory's last day of the week.(Mozart.SeePlan.ShopCalendar.EnbWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearWTF(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. 문자열은 The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearF(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearTF(System.DateTime)">
            <summary>
                <para>Calculates the week number of the first dayt of the week where input date belongs to. The first day of the week follows the Factory's first day of the week.(Mozart.SeePlan.ShopCalendar.StartWeek).</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para> Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's first day of the week is Monday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's first day of the week is Monday, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearW(System.DateTime,System.DayOfWeek)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearTW(System.DateTime,System.DayOfWeek)">
            <summary>
                <para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "W00" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, W01 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to. 주의 마지막 요일은 요일입니다.</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyWW" is followed. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            	<para>Calculates the week number of the first dayt of the week where input date belongs to.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed.</para>
            	<para>[EX] If input date is 2014 January 5th, Factory's last day of the week is Sunday, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, Factory's last day of the week is Sunday, W02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearS(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The start day of the week is Monday.</para>
            </summary>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If input date is 2014 January 5th, 201401 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 201402 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearS(System.DateTime,System.Func{System.DateTime,System.Int32})">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            </summary>
            <param name="weekOfYearFunc">The function to calculate week number from DateTime type date.</param>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If the year of input date is 2014, input week number is 1, 201401 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekNoOfYearS(System.DateTime,System.Int32)">
            <summary>
            	<para>Combines the year and week number of the input date and calculates week number in string type.</para>
            </summary>
            <param name="startDayOfWeek">
            	<para>Target date.</para>
            	<para>[TIP] Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</para>
            </param>
            <param name="week">Week number.</param>
            <returns>
            	<para>Return week number as integer type. The format "yyyyMM" is followed. If the year is changed within 6 days from the input date, the next year is used. Week number starts from 1.</para>
            	<para>[EX] If the year of input date is 2014, input week number is 1, 201401 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekName(System.String,System.String)">
            <summary>
            	<para>Calculates the week number difference among two input dates.</para>
            </summary>
            <param name="w0">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekno">Week number data type is string type. The format should follow "yyyyWW".</param>
            <returns>
            	<para>The week number difference among the two input dates is returned as string type. The format "W00" is followed. If w0 is the week begind weekno or same week, the difference is calculated as 0. If length of weekno is longer than 6, remaining strings except the first 6 digits will be added to the strings behind week number difference.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, W07 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 201529, W00 is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518ABC, W07ABC is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekName(System.String,System.String,System.Func{System.DateTime,System.String})">
            <summary>
            	<para>Calculates the week number difference among two input dates.</para>
            </summary>
            <param name="w0">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekno">Week number data type is string type. The format should follow "yyyyWW".</param>
            <param name="weekNoOfYearFunc">The function to calculate week number from DateType date.</param>
            <returns>
            	<para>The week number difference among the two input dates is returned as string type. The format "W00" is followed. If w0 is the week begind weekno or same week, the difference is calculated as 0. If length of weekno is longer than 6, remaining strings except the first 6 digits will be added to the strings behind week number difference.</para>
            	<para>If year of weekno is behind the year from w0, weekNoOfYearFunc is used to calculate the first day of the first week number of the year weekno belongs to.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, W07 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 201529, W00 is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518ABC, W07ABC is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DiffWeekNo(System.String,System.String)">
            <summary>Calculates the difference among two input week numbers.</summary>
            <param name="w0">
            	<para>Week number data type is string type. The format should follow "yyyyWW".</para>
            </param>
            <param name="w1">Week number data type is string type. The format should follow "yyyyWW".</param>
            <returns>
            	<para>The week number difference among two input dates is returned.</para>
            	<para>[EX] If w0 is 201511 and w1 is 201518, 7 is returned.</para>
            	<para>[EX] If w0 is 201530 and w1 is 2015129 -1 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            	<para>The result from Mozart.SeePlan.FactoryConfiguration,WeekOfYearFunc2 function.</para>
            	<para>Uses CultureInfo.InvariantCulture.</para>
            </summary>
            <param name="date">Target date.</param>
            <returns>
            	<para>Return week number as integer type.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	<para>Calculates the week number from the input date.</para>
            	<para>The result from Mozart.SeePlan.FactoryConfiguration,WeekOfYearFunc2 function.</para>
            </summary>
            <param name="date">Target date.</param>
            <param name="culture">The object containing the calendar and date information of other regions.</param>
            <returns>
            	<para>Return week number as integer type.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfWeek(System.DateTime)">
            <summary>
            	<para>Calculates the last day of the week from the input date. The first day of the week is Monday.</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to.. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 September 1st Tuesday 05:01:02, last day of the week is Sunday, 2015 September 6th Sunday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Calculates the last day of the week from the input date.</summary>
            <param name="date">Target date and time.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>The last day of the week where the input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 September 1st Tuesday 05:01:02, last day of the week is Sunday, 2015 September 5th Saturday 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Make sure not to put dates other than the start day of the week as the value or esle inappropriate results will be returned.</summary>
            <param name="date">Target date and time.</param>
            <param name="fense">Last day of the week.</param>
            <returns>
            	<para>The first day of the week where input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 March 4nd, Wednesday, 05:01:02, last day of the week is Sunday, 2015 March 2nd, Monday, 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.StartDayOfWeek(System.DateTime)">
            <summary>
            	<para>Calculates the first day of week where the input date belongs to. The first day of the week is Monday.</para>
            </summary>
            <param name="date">Target date and time.</param>
            <returns>
            	<para>The first day of the week where input date belongs to. The result of hour, minute, second will be the same as the input value.</para>
            	<para>[EX] If input date is 2015 March 4nd, Wednesday, 05:01:02, last day of the week is Sunday, 2015 March 2nd, Monday, 05:01:02 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DiffWeek(System.DayOfWeek,System.Int32)">
            <summary>
            	<para>Calculates the number of former days from input day.</para>
            </summary>
            <param name="dow">Target day.</param>
            <param name="d">Number of days.</param>
            <returns>
            	<para>Returns the number of former days from the input day.</para>
            	<para>[EX] If input day is Monday and number of day is 1, Sunday is returned.</para>
            	<para>[EX] If target day is Thursday and number of days is 3, Monday is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetIso8601WeekOfYear(System.DateTime)">
            <summary>
            	<para>Calculates the week number from the input date. The first day of the week is Monday. </para>
            </summary>
            <param name="date">Target date.</param>
            <remarks>
            	<para>If January 1st of the corresponding year is in between Monday~Thursday, January 1st is week 1.</para>
            	<para>If January 1st of the corresponding year is in between Friday~Sunday, The week of January 1st is the last week of the previous year.</para>
            </remarks>
            <returns>
            	<para>The week number of the input date. Week number starts from 1.</para>
            	<para>[EX] If input date is 2015 January 4th, 1 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 2 is returned.</para>
            	<para>[EX] If input date is 2013 December 31st, 1 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetIso8601WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>Calculates the week number from the input date. The first day of the week is Monday. </summary>
            <param name="time">Target date.</param>
            <param name="culture">The object containing the calendar and date information of other regions.</param>
            <remarks>
            	<para>If January 1st of the corresponding year is in between Monday~Thursday, January 1st is week 1 of the current year.</para>
            	<para>If January 1st of the corresponding year is in between Friday~Sunday, The week of January 1st is the last week of the previous year.</para>
            </remarks>
            <returns>
            	<para>The week number of the input date. Week number starts from 1.</para>
            	<para>[EX] If input date is 2015 January 4th, 1 is returned.</para>
            	<para>[EX] If input date is 2014 January 6th, 2 is returned.</para>
            	<para>[EX] If input date is 2013 December 31st, 1 is returned.</para>
            </returns>
        </member>
        <member name="P:Mozart.SeePlan.DateUtility.DbDateTimeFormat">
            <summary>Get default format for date type string including time.</summary>
            <remarks>The format is "yyyyMMdd HHmmss".</remarks>
        </member>
        <member name="P:Mozart.SeePlan.DateUtility.DbDateFormat">
            <summary>Get default format for date type string.</summary>
            <remarks>The format: "yyyyMMdd".</remarks>
        </member>
        <member name="P:Mozart.SeePlan.DateUtility.DbTimeFormat">
            <summary>Get default format for time type string.</summary>
            <remarks>The format is "HHmmss".</remarks>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbNowString">
            <summary>
            	<para>Converted the system time (DateTime.Now) to DbDateTimeFormat type string.</para>
            </summary>
            <returns>Returns the converted DbDateTimeFormat time/date string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToDate(System.String)">
            <summary>Converts date type string to DateTime format.</summary>
            <param name="value">
            	<para>The date format for conversion should be year, month, day</para>
            	<para>or year, month, day using '-' or'/' delimiter.</para>
            	<para>The string type for year should be typed in with four digits natural number. </para>
            </param>
            <remarks>
            	<para>The time will not convert and will be set as 12:00:00 AM.</para>
            	<!--EndFragment-->
            </remarks>
            <returns>Returns the converted date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToTime(System.String)">
            <summary>
            	<para>Converts string type time interval to time/date of DateTime type. The base time/date is 1900년 1월 1일 오전 12시 0분 0초입니다.</para>
            </summary>
            <param name="value">
            	<para>This is the string type time interval. The string format is "HHmmss" or "HHmm".</para>
            </param>
            <returns>This is the time/date format of converted DateTime. If the seconds of input time interval is larger than 59 seconds, the seconds will be converted to 59 seconds.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToDateTime(System.String,System.Boolean)">
            <summary>Converts date type string to DateTime format.</summary>
            <param name="value">
            	<para>The date format for conversion should be year, month, day</para>
            	<para>or year, month, day using '-' or'/' delimiter.</para>
            	<para>The string type for year should be typed in with four digits natural number. </para>
            </param>
            <param name="withTime">This determines wether to include hour, minute, second in the string for conversion</param>
            <returns>Returns the converted date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToTimeSpan(System.String)">
            <summary>Converts the string type time interval to TimeSpan type.</summary>
            <param name="value">This is the string type time interval. The string format is "HHmmss" or "HHmm".</param>
            <returns>This is the time interval format of converted TimeSpan. If the seconds of input time interval is larger than 59 seconds, the seconds will be converted to 59 seconds.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToDateString(System.DateTime)">
            <summary>Converts DateTime type date to DbDateFormat type string.</summary>
            <param name="dateTime">Target date to be converted.</param>
            <returns>Converted string to DbDateFormat type</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToTimeString(System.DateTime)">
            <summary>Converts DateTime type date to DbDateFormat type string.</summary>
            <param name="time">Target time to be converted.</param>
            <returns>Time converted string type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToString(System.DateTime,System.Boolean)">
            <summary>Converts the DateTime type to string type.</summary>
            <param name="dateTime">Target date to be converted.</param>
            <param name="withTime">This determines wether to include hour, minute, second in the string for conversion.</param>
            <returns>This is the date converted to string type. If withTime is true, convert date to DbDateTimeFormat, or else, convert date to string type of DbDateTimeFormat.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToStringTrimSec(System.DateTime)">
            <summary>Convert DateTime type time/date to string type. In here, seconds will be excluded.</summary>
            <param name="dateTime">Target time/date to be converted.</param>
            <returns>Time/Date converted to string type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToStringTrimSec(System.TimeSpan)">
            <summary>
            	<para>Convert TimeSpan type time interval to string type. In here, seconds will be excluded.</para>
            </summary>
            <param name="time">Target time interval to be converted.</param>
            <returns>This is the time interval converted to string type. If time interval is 1 day or above, time interval will be  converted to "dd.hh::mm:ss" or else, time interval will be converted to "hh:mm:ss".</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToString(System.TimeSpan)">
            <summary>
            	<para>Convert TimeSpan type time interval to string type.</para>
            	<para>Convert time format to string type, string Format: If time interval is 1 day or above, convert to dd.hh:mm:ss, or if lower than 1 day convert to hh:mm:ss.</para>
            </summary>
            <param name="time">Target time interval to be converted. </param>
            <returns>This is the time interval converted to string type. If time interval is 1 day or above, time interval will be  converted to "dd.hh::mm:ss" or else, time interval will be converted to "hh:mm:ss".</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbToTimeStringTrimSec(System.DateTime)">
            <summary>
            	<para>Convert DateTime type time to DbTimeFormat type string. In here, seconds will be excluded.</para>
            </summary>
            <param name="time">Target time to be converted.</param>
            <returns>This is the time converted to string type.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DbNullify(System.DateTime)">
            <summary>DbNullify determines whether the DateTime object is equal to minumum value(DateTime.MinValue) and returns the result. </summary>
            <param name="dt">Target DateTime object for determination</param>
            <returns>If DateTime object is equal to DateTime.MinValue return Null (DBNull.Value), or else, return the corresponding DateTime object. </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToDisplayString(System.DateTime,System.Boolean)">
            <summary>
            	<para>Convert DateTime type time/date to string type.</para>
            </summary>
            <param name="dateTime">Target time/date to be converted.</param>
            <param name="dateOnly">
            	<para>This determines wether to include hour, minute, second in the string for conversion. Default value is false.</para>
            </param>
            <returns>This is date converted to string type.If dateOnly is true, the format follows the DateFormat, or else, the format follows DateTimeFormat.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfMonth(System.DateTime)">
            <summary>
            	<para>Calculates the end time/date of Step on the last day of the month. </para>
            </summary>
            <param name="date">"date" is the target time/date.</param>
            <returns>
            	<para>The calculation result is the end time/date of the Step on the last day of the month.</para>
            	<para>[EX] If, Step start time is 06:00 AM and input date is September(9), the result is 10/1 06:00 AM.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.EndDayOfMonthT(System.DateTime)">
            <summary>The end date/time of the Step on the last day of the month is calculated based on start time/date of the Step according to the input time/date. </summary>
            <param name="date">This is the target time/date.</param>
            <returns>
            	<para>The calculation result is the end time/date of the Step on the last day of the month.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is 9/1 07:00 AM, then the result is 10/1 06:00 AM.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is 9/1 05:00 AM, then the result is 9/1 06:00 AM.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.LastDayOfMonth(System.DateTime)">
            <summary>
            	<para>This calculates the start time of the Step on the last day of the month through the input date.</para>
            </summary>
            <param name="date">This is the target time/date.</param>
            <returns>
            	<para>This is the start time of the Step on the last day of the month.</para>
            	<para>[EX] If Step start time is 06:00 AM, input time/date is September(9), then result is 9/30 06:00 AM</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetDaysInMonth(System.Int32,System.Int32)">
            <summary> This returns the number of days of the input year/month</summary>
            <param name="yy">This is the target year.</param>
            <param name="mm">This is the target month.</param>
            <returns>This is the total number of days in year/month.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.DiffMonths(System.Int32,System.Int32)">
            <summary>
            	<para>This calculates the month gap (yearMonth2-yearMonth1) among the two integer type dates </para>
            </summary>
            <param name="yearMonth1">
            	<para>The year/month integer value</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <param name="yearMonth2">
            	<para>The integer value of year/month.</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <remarks>The month gap among two input values(year/month). </remarks>
            <returns>
            	<para>This is the result of the calculated gap(month).</para>
            	<para>[EX] If yearMonth1=201406 and yearMonth2=201501, then the result value 7 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.AddMonths(System.Int32,System.Int32)">
            <summary>
            	<para>Add month(input value) to the base year/month(integer type: yyyMM) and return the result. </para>
            </summary>
            <param name="yearMonth">
            	<para>This is the integer value of year/month.</para>
            	<para>[EX]If date is January 2016, input as "201601"</para>
            </param>
            <param name="months">The number of months to add.</param>
            <returns>The calculation result of year/month.(integer)</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToYearMonth(System.String)">
            <summary>Convert string type year/month to integer type.</summary>
            <param name="yearMonth">This is the string value of year/month. The format is "yyyyMM".</param>
            <returns>This is the converted year/month to integer. The unit and ten's digit stands for month and the remaining places are year.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToYearMonth(System.DateTime)">
            <summary>Converts DateTime type date to integer type.</summary>
            <param name="now">The target date to be converted to integer.</param>
            <returns>
            	<para>This is the converted date to integer. The unit and ten's digit stands for month and the remaining places are year.</para>
            	<para>[EX] If target date is 2014/9, the result 201409 is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNextDay(System.DateTime)">
            <summary>Calculates the remaining time until the start date of the next Step.</summary>
            <param name="now">The target time used to calculate the remaining time until the start date of the next Step.</param>
            <returns>
            	<para>The remaining time until the start date of the next Step. </para>
            	<para>[EX] If Step start time is 06:00 AM, input time is 10:00 PM, then 8 hours as result is returned.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNextShift(System.DateTime)">
            <summary>
            	<para>Calculates the remaining time until the next shift.</para>
            </summary>
            <param name="now">The target time used to calculate the remaining time until the next shift.</param>
            <returns>
            	<para>The remaining time until the next shift.</para>
            	<para>[EX] If start time of Step is 06:00 AM, shift interval is 8 hours and input time is 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            	<para></para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNext(System.DateTime,System.TimeSpan)">
            <summary>
            <para>This divides a day according to the input time interval. Then, it will calculate the reamining time from the current time until the beginning of the the next time interval. </para>
            </summary>
            <param name="now">This is the target time.</param>
            <param name="ts">This is the input value for time interval.</param>
            <returns>
            	<para>This returns the remaining time from the current time untile the be</para>
            	<para>[EX] If a day start at 06:00 AM, time interval is 2 hours and current time is 2014/9/1 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetStartTimeOfInterval(System.DateTime,System.TimeSpan)">
            <summary xml:lang="ko-kr">
            공장의 일 시작 시간 기준으로 현재 시간 이후의 인터벌 시작 시간을 반환합니다. 
            </summary>
            <param name="now">현재 시간입니다.</param> 
            <param name="ts">인터벌의 간격입니다.</param>
            <returns>
                <para>다음 인터벌 시작 시간입니다. </para>
                <para>현재 시간이 인터벌 시작 시간과 동일한 경우 현재 시간을 반환합니다.</para>
                <para>그 외의 경우 다음 인터벌 시작 시간을 반환합니다.</para>
                <para>[EX] 공장의 일 시작 시간이 06:00 AM이고, 인터벌의 간격이 2시간이고, 현재 시간이 09:35 AM인 경우 반환값은 10:00 AM입니다.</para>
            </returns>
            <summary>
            Returns the DateTime of the next start time with the current DateTime and the specified interaval in reference to the factory start time.
            </summary>
            <param name="now">The current time to get the next start time of the interval.</param> 
            <param name="ts">The timespan interval to get the next start time of the specified interval from the current time in reference to the factory start time.</param>
            <returns>
                <para>Returns the next start time of the specified interval. </para>
                <para>Current time (<em>now</em>) is returned if the specified current time is same as the next start time of the specified interval.</para>
                <para>Otherwise the next start time of the specified interval is returned as the following example.</para>
                <para>[EX] If the factory start time is 06:00 AM, interval is 2 hours and current time is 09:35 AM, 10:00 AM is returned as the next start time of the interval.</para>
                <para>Since the reference time is 06:00 AM and each of the next start time of the specified interval would be 08:00, 10:00, 12:00 and so on, the closest start time of the interval from the given current time 09:35AM would be 10:00 in this example. </para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToDisplayString(Mozart.Simulation.Engine.Time,System.Boolean)">
            <summary>
            <para>Convert DateTime type time/date to string type.</para>
            </summary>
            <param name="time">Target time/date to be converted.</param>
            <param name="dateOnly">
            	<para>This determines wether to include hour, minute, second in the string for conversion. Default value is false.</para>
            </param>
            <returns>This is date converted to string type.If dateOnly is true, the format follows the DateFormat, or else, the format follows DateTimeFormat.</returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNextDay(Mozart.Simulation.Engine.Time)">
            <summary> 
            Calculates the remaining time until the next day.
            The base time is the start date of the Step and calculates the remaining time until the next start date.
            </summary>
            <param name="now">Input time</param>
            <returns>
            	<para>The remaining time until the start date of Step.</para>
            	<para>[EX] If Step start time is 06:00 AM and input time is 10:00 PM, then 8 hours is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNextShift(Mozart.Simulation.Engine.Time)">
            <summary>
            	<para>Calculates the remaining time until the next shift.</para>
            </summary>
            <param name="now">The target time used to calculate the remaining time until the next shift.</param>
            <returns>
            	<para>The remaining time until the next shift.</para>
            	<para>[EX] If start time of Step is 06:00 AM, shift interval is 8 hours and input time is 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            	<para></para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.GetSpanToNext(Mozart.Simulation.Engine.Time,Mozart.Simulation.Engine.Time)">
            <summary>
            <para>This divides a day according to the input time interval. Then, it will calculate the reamining time from the current time until the beginning of the the next time interval. </para>
            </summary>
            <param name="now">This is the target time.</param>
            <param name="ts">This is the input value for time interval.</param>
            <returns>
            	<para>This returns the remaining time from the current time untile the be</para>
            	<para>[EX] If a day start at 06:00 AM, time interval is 2 hours and current time is 2014/9/1 01:11:11 PM, then 0 hours 48 minutes 49 seconds is returned as result.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToSortableString(System.DateTime,System.Boolean)">
            <summary>Converts DateTime type time/date to string type possible for sorting.</summary>
            <param name="dateTime">The target time/date to be converted.</param>
            <param name="dateOnly">
            	<para>This determines wether to include hour, minute, second in the string for conversion. Default value is false.</para>
            </param>
            <return>This is time/date converted to string type.If dateOnly is true, the format follows the format "yyyy-MM-dd", or else, the format is "yyyy-MM-dd HH:mm:ss"</return>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.ToIdentityString(System.DateTime)">
            <summary>Converts DateTime type time/date to string type. (Format: yyyyMMdd-HHmmss)</summary>
            <param name="dt">This is the target time/date to be converted.</param>
            <returns>
            	<para>This is the time/date converted to string type. The format is "yyyyMMdd-HHmmss".</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.DateUtility.FromString(System.String)">
            <summary>
            	<para>Converts string type date to Nullable DateTime type.</para>
            	<para>Converts string to Nullable DateTime type. If the value of string is null or System.String.Empty or if data cannot be converted to DateTime type, return null.</para>
            </summary>
            <param name="value">The target string type time/date to be converted.</param>
            <returns>The time/date converted to DateTime type.If the value of string is null or System.String.Empty or if data cannot be converted to DateTime type, return null.</returns>
        </member>
        <member name="T:Mozart.SeePlan.ShiftInfo">
            <summary>
            Factory's shift rotation information class. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShiftInfo.Name">
            <summary>
            Name of Shift.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShiftInfo.Time">
            <summary>
            Shift time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShiftInfo.OrderedTime">
            <summary>
            Shift start time. 
            </summary>
            <remarks>
            If the first shift starts at 06:00, shift hours are 8 hours and is 3 rotations, the shift times are - 1st shift: 06:00, 2nd shift: 14:00, 3rd shift: 22:00.  
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShiftInfo.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            ShiftInfo constructor. 
            </summary>
            <param name="name">string type shift name</param>
            <param name="ts">TimeSpan type shift time</param>
            <param name="ats">TimeSpan type ats variable</param>
        </member>
        <member name="T:Mozart.SeePlan.Scripting.Expression">
            <summary>
            사용자 생성 코드(Expression)의 동적계산값을 구한다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Expression.Evaluate(System.String,System.Double)">
            <summary>
            사용자 정의 코드의 동적계산을 실행한다.
            </summary>
            <param name="expr">사용자 정의 코드</param>
            <param name="defaultValue">기본값</param>
            <returns>동적계산 값</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform">
            <summary>
            Generates a sample of the Uniform distribution 
            </summary>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform(System.Int32)">
            <summary>
            Generates a random value uniformly distributed on the interval [0,1), using the specified random number generator. 
            </summary>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.UniformPositive">
            <summary>
            Generates a positive random value uniformly distributed on the interval (0,1). 
            </summary>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.UniformPositive(System.Int32)">
            <summary>
            Generates a positive random value uniformly distributed on the interval (0,1), using the specified random number generator. 
            </summary>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform(System.Double)">
            <summary>
            Generates a sample of the Uniform distribution 
            </summary>
            <param name="r">the double x value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Uniform distribution 
            </summary>
            <param name="r">the double x value</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform(System.Double,System.Double)">
            <summary>
            Generates a sample of the Uniform distribution on the interval [min, max). 
            </summary>
            <param name="min"> the minimum x value</param>
            <param name="max">the maximum x value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Uniform(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Uniform distribution on the interval [min, max) using the specified random number generator.
            </summary>
            <param name="min"> the minimum x value</param>
            <param name="max">the maximum x value</param>
            <param name="nseed"> the int value </param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.UniformDiscrete(System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Discrete Uniform distribution on the interval [min, max], both min and max included! 
            </summary>
            <param name="min">the minimum x value.</param>
            <param name="max">the maximum x value.</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.UniformDiscrete(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Discrete Uniform distribution on the interval [min, max] using the specified random number generator, both 0 and max included!
            </summary>
            <param name="min">the minimum x value.</param>
            <param name="max">the maximum x value.</param>
            <param name="nseed"> the int value </param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Bernoulli(System.Double)">
            <summary>
            Generates a sample of the Bernoulli distribution, i.e. 1 with probability p and 0 with probability 1 - p. 
            </summary>
            <param name="p"> the probability of 1. </param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Bernoulli(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Bernoulli distribution using the specified random number generator. 
            </summary>
            <param name="p">the probability of 1</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Beta(System.Double,System.Double)">
            <summary>
            Generates a sample of the Beta distribution.
            </summary>
            <param name="alpha1">the lower shape parameter > 0</param>
            <param name="alpha2">the upper shape parameter > 0</param>
            <returns>the generated sample</returns>   
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Beta(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Beta distribution.
            </summary>
            <param name="alpha1">the lower shape parameter > 0</param>
            <param name="alpha2">the upper shape parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Binomial(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Binomial distribution using the specified random number generator
            </summary>
            <param name="p">the probability of the event occurrence</param>
            <param name="n">the number of trials</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Binomial(System.Double,System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Binomial distribution using the specified random number generator
            </summary>
            <param name="p">the probability of the event occurrence</param>
            <param name="n">the number of trials</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.NegativeBinomial(System.Double,System.Double)">
            <summary>
            Generates a sample of the Negative Binomial distribution
            </summary>
            <param name="p">the probability of event (in the interval [0,1])</param>
            <param name="n">the number of desired events</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.NegativeBinomial(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Negative Binomial distribution
            </summary>
            <param name="p">the probability of event (in the interval [0,1])</param>
            <param name="n">the number of desired events</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Cauchy(System.Double,System.Double)">
            <summary>
            Generates a sample of the Cauchy distribution using the specified random number generator.
            </summary>
            <param name="lambda">the scaling parameter</param>
            <param name="theta">the mode, or central peak position</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Cauchy(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Cauchy distribution using the specified random number generator.
            </summary>
            <param name="lambda">the scaling parameter</param>
            <param name="theta">the mode, or central peak position</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Chi2(System.Double)">
            <summary>
            Generates a sample of the Cauchy distribution.
            </summary>
            <param name="nu">the shape parameter</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Chi2(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Cauchy distribution.
            </summary>
            <param name="nu">the shape parameter</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Erlang(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Erlang distribution
            </summary>
            <param name="beta">the scale factor > 0</param>
            <param name="m">the shape factor (positive integer)</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Erlang(System.Double,System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Erlang distribution
            </summary>
            <param name="beta">the scale factor > 0</param>
            <param name="m">the shape factor (positive integer)</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Exponential(System.Double)">
            <summary>
            Generates a sample of the Exponential distribution. 
            </summary>
            <param name="lambda">the shape parameter</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Exponential(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Exponential distribution. 
            </summary>
            <param name="lambda">the shape parameter</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gamma(System.Double,System.Double)">
            <summary>
            Generates a sample of the Gamma distribution with min set to 0. Is equivalent to gamma(alpha, beta, 0)
            </summary>
            <param name="alpha">the shape parameter > 0</param>
            <param name="beta">the scale parameter > 0</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gamma(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Gamma distribution with min set to 0. Is equivalent to gamma(alpha, beta, 0)
            </summary>
            <param name="alpha">the shape parameter > 0</param>
            <param name="beta">the scale parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Geometric(System.Double)">
            <summary>
            Generates a sample of the Geometric distribution using the specified random number generator.
            </summary>
            <param name="p">the probability of occurrence</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Geometric(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Geometric distribution using the specified random number generator.
            </summary>
            <param name="p">the probability of occurrence</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gumbel1(System.Double,System.Double)">
            <summary>
            Generates a sample of the Type I Gumbel distribution using the specified random number generator.
            </summary>
            <param name="a">the 'a' parameter</param>
            <param name="b"> the 'b' parameter</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gumbel1(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Type I Gumbel distribution using the specified random number generator.
            </summary>
            <param name="a">the 'a' parameter</param>
            <param name="b"> the 'b' parameter</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gumbel2(System.Double,System.Double)">
            <summary>
            Generates a sample of the Type II Gumbel distribution using the specified random number generator.
            </summary>
            <param name="a">the 'a' parameter</param>
            <param name="b"> the 'b' parameter</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Gumbel2(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Type II Gumbel distribution using the specified random number generator.
            </summary>
            <param name="a">the 'a' parameter</param>
            <param name="b"> the 'b' parameter</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.HyperGeometric(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Hypergeometric distribution using the specified random number generator.
            </summary>
            <param name="n1">the sample size</param>
            <param name="n2">the number of defects in the population</param>
            <param name="t">the size of the population</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.HyperGeometric(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sample of the Hypergeometric distribution using the specified random number generator.
            </summary>
            <param name="n1">the sample size</param>
            <param name="n2">the number of defects in the population</param>
            <param name="t">the size of the population</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Laplace(System.Double)">
            <summary>
            Generates a sample of the Laplace distribution. 
            </summary>
            <param name="a">the scaling parameter</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Laplace(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Laplace distribution. 
            </summary>
            <param name="a">the scaling parameter</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.LogArithmic(System.Double)">
            <summary>
            Generates a sample of the Logistic distribution. 
            </summary>
            <param name="p">the shape/scale parameter 0r - the random number generator</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.LogArithmic(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Logistic distribution. 
            </summary>
            <param name="p">the shape/scale parameter 0r - the random number generator</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Logistic(System.Double)">
            <summary>
            Generates a sample of the Logistic distribution. 
            </summary>
            <param name="a">the scale parameter > 0</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Logistic(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Logistic distribution. 
            </summary>
            <param name="a">the scale parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Normal(System.Double,System.Double)">
            <summary>
            Generates a sample of the Normal distribution.
            </summary>
            <param name="sigma">the shape parameter = standard deviation</param>
            <param name="mean">the shift parameter = mean value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Normal(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Normal distribution.
            </summary>
            <param name="sigma">the shape parameter = standard deviation</param>
            <param name="mean">the shift parameter = mean value</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.LogNormal(System.Double,System.Double)">
            <summary>
            Generates a sample of the Lognormal distribution. 
            </summary>
            <param name="mu">the mean of the included Normal</param>
            <param name="sigma"> the standard deviation of the included Normal</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.LogNormal(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Lognormal distribution. 
            </summary>
            <param name="mu">the mean of the included Normal</param>
            <param name="sigma"> the standard deviation of the included Normal</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Pareto(System.Double)">
            <summary>
            Generates a sample of the Pareto distribution
            </summary>
            <param name="alpha">the scale parameter > 0</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Pareto(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Pareto distribution
            </summary>
            <param name="alpha">the scale parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Poisson(System.Double)">
            <summary>
            Generates a sample of the Poisson distribution.
            </summary>
            <param name="lambda">the rate of occurrence</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Poisson(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Poisson distribution.
            </summary>
            <param name="mu">the rate of occurrence</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Rayleigh(System.Double)">
            <summary>
            Generates a sample of the Rayleigh distribution with min set to 0. Is equivalent to rayleigh(sigma, 0).
            </summary>
            <param name="sigma">the scale parameter > 0</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Rayleigh(System.Double,System.Int32)">
            <summary>
            Generates a sample of the Rayleigh distribution with min set to 0. Is equivalent to rayleigh(sigma, 0).
            </summary>
            <param name="sigma">the scale parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Triangular(System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample of the Triangular distribution. 
            </summary>
            <param name="min">the minimum x value</param>
            <param name="max">the maximum x value</param>
            <param name="mode">the most likely x value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Triangular(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Triangular distribution. 
            </summary>
            <param name="min">the minimum x value</param>
            <param name="max">the maximum x value</param>
            <param name="mode">the most likely x value</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Weibull(System.Double,System.Double)">
            <summary>
            Generates a sample of the Weibull distribution with min set to 0. Is equivalent to weibull(alpha, beta, 0).
            </summary>
            <param name="alpha">the shape parameter > 0</param>
            <param name="beta">the scale parameter > 0</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Weibull(System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sample of the Weibull distribution with min set to 0. Is equivalent to weibull(alpha, beta, 0).
            </summary>
            <param name="alpha">the shape parameter > 0</param>
            <param name="beta">the scale parameter > 0</param>
            <param name="nseed">the int value</param>
            <returns>the generated sample</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Abs(System.Double)">
            <summary>
            배정밀도 부동 소수점 수의 절대 값을 반환합니다.
            </summary>
            <param name="d">System.Double.MinValue¢®Âvalue¢®ÂSystem.Double.MaxValue 범위의 숫자입니다.</param>
            <returns>0 ¢®Â x ¢®ÂSystem.Double.MaxValue 범위의 배정밀도 부동 소수점 수 x입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Acos(System.Double)">
            <summary>
            코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.
            </summary>
            <param name="d">코사인을 나타내는 -1 ¢®Âd¢®Â 1 범위의 숫자입니다.</param>
            <returns>0 ¢®Â¥è¢®Â¥©£ 범위의 각도인 ¥è(라디안 단위)입니다.- 또는 - d &lt; -1 또는 d &gt; 1이면 System.Double.NaN입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Asin(System.Double)">
            <summary>
            사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.
            </summary>
            <param name="d">사인을 나타내는 -1 ¢®Âd¢®Â 1 범위의 숫자입니다.</param>
            <returns>/2 ¢®Â¥è¢®Â¥©£/2 범위의 각도인 ¥è(라디안 단위)입니다. - 또는 - d &lt; -1 또는 d &gt; 1이면 System.Double.NaN입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Atan(System.Double)">
            <summary>
            탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.
            </summary>
            <param name="d">탄젠트를 나타내는 숫자입니다.</param>
            <returns>
            -¥©£/2 ¢®Â¥è¢®Â¥©£/2 범위의 각도인 ¥è(라디안 단위)입니다.- 또는 - d가 System.Double.NaN과 같으면
                System.Double.NaN이고, d가 System.Double.NegativeInfinity와 같으면 배정밀도로 반올림된 -¥©£/2(-1.5707963267949)이고,
                d가 System.Double.PositiveInfinity와 같으면 배정밀도로 반올림된 ¥©£/2(1.5707963267949)입니다.
                </returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Atan2(System.Double,System.Double)">
            <summary>
            탄젠트를 적용했을 때 지정된 두 숫자의 몫이 나오는 각도를 반환합니다.
            </summary>
            <param name="y">점의 y 좌표입니다.</param>
            <param name="x">점의 x 좌표입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Ceiling(System.Double)">
            <summary>
            지정된 배정밀도 부동 소수점 숫자보다 크거나 같은 최소 정수를 반환합니다.
            </summary>
            <param name="d">배정밀도 부동 소수점 숫자입니다.</param>
            <returns> a보다 크거나 같은 최소 정수입니다. a가 System.Double.NaN, System.Double.NegativeInfinity 
            또는 System.Double.PositiveInfinity와 같으면, 해당 값이 반환됩니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Cos(System.Double)">
            <summary>
            지정된 각도의 코사인을 반환합니다.
            </summary>
            <param name="d">라디안 단위의 각도입니다.</param>
            <returns>d의 코사인입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Exp(System.Double)">
            <summary>
            e를 지정된 수만큼 거듭제곱하여 반환합니다.
            </summary>
            <param name="d">거듭제곱을 지정하는 숫자입니다.</param>
            <returns>e의 d승입니다. d가 System.Double.NaN 또는 System.Double.PositiveInfinity와 같으면, 해당 
            값이 반환됩니다. d가 System.Double.NegativeInfinity와 같으면 0이 반환됩니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Floor(System.Double)">
            <summary>
            지정된 배정밀도 부동 소수점 숫자보다 작거나 같은 최대 정수를 반환합니다.
            </summary>
            <param name="d">배정밀도 부동 소수점 숫자입니다.</param>
            <returns>d보다 작거나 같은 최대 정수입니다. d가 System.Double.NaN, System.Double.NegativeInfinity
            또는 System.Double.PositiveInfinity와 같으면, 해당 값이 반환됩니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Log(System.Double)">
            <summary>
            지정된 숫자의 자연(밑 e) 로그를 반환합니다.
            </summary>
            <param name="d">로그가 있는 숫자입니다.</param>
            <returns> d의 부호반환 값 양수 d의 자연 로그 즉, ln d 또는 log ed입니다.0 System.Double.NegativeInfinity음수 
            System.Double.NaNd가 System.Double.NaN와 같으면 System.Double.NaN을 반환합니다. d가 System.Double.PositiveInfinity와
            같으면 System.Double.PositiveInfinity를 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Max(System.Double,System.Double)">
            <summary>
            두 개의 배정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.
            </summary>
            <param name="val1">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
            <param name="val2">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
            <returns>더 큰 val1 또는 val2 매개 변수입니다. val1, val2 또는 val1과 val2가 모두 System.Double.NaN과 
            같은 경우 System.Double.NaN이 반환됩니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Min(System.Double,System.Double)">
            <summary>
            두 개의 배정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.
            </summary>
            <param name="val1">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
            <param name="val2">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
            <returns>val1 또는 val2 매개 변수 중에서 더 작은 수입니다. val1, val2 또는 val1과 val2가 모두 System.Double.NaN과
            같은 경우 System.Double.NaN이 반환됩니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Pow(System.Double,System.Double)">
            <summary>
            지정된 숫자의 지정된 거듭제곱을 반환합니다.
            </summary>
            <param name="x">거듭제곱할 배정밀도 부동 소수점 숫자입니다.</param>
            <param name="y">거듭제곱을 지정하는 배정밀도 부동 소수점 숫자입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Sin(System.Double)">
            <summary>
            지정된 각도의 사인을 반환합니다.
            </summary>
            <param name="d">라디안 단위의 각도입니다.</param>
            <returns> a의 사인입니다. a가 System.Double.NaN, System.Double.NegativeInfinity 또는 System.Double.PositiveInfinity와 
            같으면 이 메서드는 System.Double.NaN을 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Sqrt(System.Double)">
            <summary>
            지정된 숫자의 제곱근을 반환합니다.
            </summary>
            <param name="d">숫자입니다.</param>
            <returns>a의 탄젠트입니다. a가 System.Double.NaN, System.Double.NegativeInfinity 또는 System.Double.PositiveInfinity와
            같으면 이 메서드는 System.Double.NaN을 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.Tan(System.Double)">
            <summary>
            지정된 각도의 탄젠트를 반환합니다.
            </summary>
            <param name="d">라디안 단위의 각도입니다.</param>
            <returns> a의 탄젠트입니다. a가 System.Double.NaN, System.Double.NegativeInfinity 또는 System.Double.PositiveInfinity와
            같으면 이 메서드는 System.Double.NaN을 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.ToDegrees(System.Double)">
            <summary>
            Radian 각도를 Degree 각도로 변환합니다.
            </summary>
            <param name="d">숫자입니다.</param>
            <returns>Degree 각도</returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.Functions.ToRadians(System.Double)">
            <summary>
            Degree 각도를 Radian 각도로 변환합니다.
            </summary>
            <param name="d">숫자입니다</param>
            <returns>Radian 각도</returns>
        </member>
        <member name="T:Mozart.SeePlan.Scripting.SnippetBuilder">
            <summary>
            Code Snippet Builder class
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.Clear">
            <summary>
            Clear all information
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddClass(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Type,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            add the class
            </summary>
            <param name="className"></param>
            <param name="statements"></param>
            <param name="returnType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddClass(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Type,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
            <summary>
            add the class
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddClass(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Type,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Type},System.Type)">
            <summary>
            Add Snippet Class
            </summary>
            <param name="className"></param>
            <param name="statements"></param>
            <param name="returnType"></param>
            <param name="parameters"></param>
            <param name="returnStmt"></param>
            <param name="fields"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddStatments(System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IDictionary{System.String,System.String},System.Type,System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
            <summary>
            add the statments
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.GenerateTo(System.String)">
            <summary>
            지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 
            지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.Generate">
            <summary>
            지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 
            지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.GenerateTo(System.IO.TextWriter)">
            <summary>
            지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 
            지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.Compile">
            <summary>
            컴파일된 어셈블리를 가져오거나 설정합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddReferences">
            <summary>
            Current Domain에 로드된 모든 Assembly를 Reference의 끝 부분에 추가합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddReference(System.Reflection.Assembly)">
            <summary>
            Assembly를 Reference의 끝 부분에 추가합니다.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Mozart.SeePlan.Scripting.SnippetBuilder.AddReference(System.String)">
            <summary>
            Assembly Location을 Reference의 끝 부분에 추가합니다.
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Mozart.SeePlan.FactoryConfiguration">
            <summary>
            The storage class that stores default environmental variables of Factory used for Planning. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.Name">
            <summary>
            Name of Configuration
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.DbDateTimeFormat">
            <summary>
            Configure string type and refer data of date + time to be stored in DB.
            </summary>
            <remarks>
            Property of DbDateTimeFormat of DateUtility calss,
            You can configure the string return type of DbToString function.
            The default value is in "yyyyMMdd HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.DbDateFormat">
            <summary>
            Configure string type and refer data of date to be stored in DB.
            </summary>
            <remarks>
            Property of DbDateTimeFormat of DateUtility calss,
            You can configure the string return type of DbToString function.
            The default value is in "yyyyMMdd HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.DbTimeFormat">
            <summary>
            Configure string type and refer data of time to be stored in DB.
            </summary>
            <remarks>
            Property of DbTimeFormat of DateUtility calss, 
            You can configure the string return type of DbToString function.
            The default value is in "HHmmss" format.
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.DateTimeFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to DateTime to string.  
            </summary>
            <remark>
            You can configure the string return type of DbDisplayString function of DateUtility calss.
            Default value is in "yyyy/MM/dd HH:mm:ss" format. 
            </remark>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.DateFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to Date Type to string. 
            </summary>
            <remark>
            You can configure the string return type of DbDisplayString function of DateUtility calss.
            Default value is in "yyyy/MM/dd" format. 
            </remark>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.TimeFormat">
            <summary>
            Configure and refer the string type that is returned when system converts to time to string. 
            </summary>
            <remarks>
            Default value is in "HH:mm:ss" format. 
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.IdentityNull">
            <summary>
            String to replace Null string from the system.
            Default value is  "-". 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.AnyString">
            <summary>
            The symbol for string to be used for searching and replacing strings. 
            Default value is  "%".
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.AnyChar">
            <summary>
            The symbol for string to be used for searching and replacing strings.
            Default value is  "_".
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.StartOffset">
            <summary>
            The time gap information between 00:00 and the Factory start time (of the day).
            The default value is 6 hours. When the factory operation hour starts at 06:00, set as StartOffset = 6hr. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.StartTime">
            <summary>
            The information of factory start time. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.EndTime">
            <summary>
            The information of factory end time.(of the day)
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.ShiftCount">
            <summary>
            The total shift counts. If there are three shifts the return value is 3. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.ShiftHours">
            <summary>
            The shift hours per shift of the factory.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.Shifts">
            <summary>
            Returns information per shift of the factory. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.ShiftNames">
            <summary>
            Returns shift name array. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.WorkCalendar">
            <summary>
            Returns WorkCalender.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.StartWeek">
            <summary>
            Returns the start day of the week. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.EndWeek">
            <summary>
            Returns the last day of the week. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.Holidays">
            <summary>
            Returns the day-offs(holidays). The format is Dictionart&lt;holiday date, holiday name%gt. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.WeekOfYearFunc">
            <summary>
            The function is to return the week information of the year with user input date. 
            </summary>
            <example>
            int week_no = FactoryConfiguration.Current.WeekOfYearFunc(DateTime.Now) 
            </example>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.WeekOfYearFunc2">
            <summary>
            The function is to return the week information of the year with user input date. 
            </summary>
            <example>
            int week_no = FactoryConfiguration.Current.WeekOfYearFunc2(DateTime.Now, Culture.InvarientCulture) 
            </example>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.TimeInfo">
            <summary>
            Configure the shift rotation and the start time of factory. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.AddHoliday(System.DateTime,System.String)">
            <summary>
            Add holidays of the factory.
            </summary>
            <param name="dt">Date of the holiday.</param>
            <param name="name">Name of the holiday. Default value is null.</param>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.IsHoliday(System.DateTime)">
            <summary>
            Determine whether input date is holiday or not. 
            </summary>
            <param name="dt">Target date</param>
            <returns>If input date is holiday, return<strong>true</strong>, if not, return<strong>false</strong></returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.RemoveHoliday(System.DateTime)">
            <summary>
            Delete holiday information. 
            </summary>
            <param name="dt">Target date</param>
            <returns>If holiday is deleted, return <strong>true</strong>, if not, return <strong>false</strong></returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.GetWorkCalendar">
            <summary xml:lang="ko-kr">
            하루 중 마지막 Shift 기준의 작업 시간 관리 개체를 반환합니다.
            </summary>
            <returns>하루 중 마지막 Shift 기준의 작업 시간 관리 개체입니다.</returns>
            <summary>
            Returns the work time management object(WorkCalendar) for the last shift of the day.
            </summary>
            <returns>Returns the work time management object(WorkCalendar) for the last shift of the day.</returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.GetWorkCalendar(System.Int32)">
            <summary xml:lang="ko-kr">
                <para>주어진 Shift 기준의 작업 시간 관리 개체를 반환합니다.</para>
            </summary>
            <param name="shiftType">대상 Shift입니다. 하루 중 첫 번째 Shift에 대한 값은 1입니다.</param>
            <returns>
                <para>주어진 Shift 기준의 작업 시간 관리 개체입니다.</para>
                <para>주어진 Shift 값이 0보다 작거나 전체 Shift의 수보다 큰 경우 null을 반환합니다.</para>
            </returns>
            <summary>
                <para>Returns the work time management object(WorkCalendar) for the specified shift of the day.</para>
            </summary>
            <param name="shiftType">The integer value of the specified shift. The first shift of the day is 1.</param>
            <returns>
                <para>Returns the work time management object(WorkCalendar) for the specified shift of the day.</para>
                <para>Null is returned if specified shift <em>shiftType</em> is less than 0 or greater than the entire shift number.</para>
            </returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.SetWorkCalendar(System.Int32,Mozart.SeePlan.TimeLibrary.WorkCalendar)">
            <summary>
            Returns WorkCalender of designated shift. 
            </summary>
            <param name="shiftType">Target shift variable</param>
            <param name="workCalendar">Target shift's WorkCalender </param>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.Default">
            <summary>
            This is the default FactoryConfiguration information. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.FactoryConfiguration.Current">
            <summary xml:lang="ko-kr">
                <para>현 시뮬레이션 대상 공장 구성 정보를 가져오거나 설정합니다.</para>
                <para>구성 정보가 설정되지 않은 경우 기본 공장 구성 정보를 반환합니다.</para>
            </summary>
            <summary>
                <para>Gets or sets the specified factory configuration information for simulation.</para>
                <para>If no factory information is configured, default factory information is returned.</para>
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.GetOrAdd(System.String)">
            <summary>
            Returns the Factory Configuration input name. 
            If there is no name matching with the input name value, 
            FactoryConfiguration same as the name in Current will be generated. 
            </summary>
            <param name="name">Target FactoryConfiguration name to be searched</param>
            <returns>FactoryConfiguration object.</returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.Get(System.String)">
            <summary>
            Returns the Factory Configuration input name 
            </summary>
            <param name="name">Target FactoryConfiguration name to be searched</param>
            <returns>FactoryConfiguration object. If there is no matching results, return Default.</returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.SetCurrent(System.String)">
            <summary>
            Configure the current FactoryConfiguration. 
            </summary>
            <param name="name">New name for FactoryConfiguration.</param>
            <returns>Returns the FactoryConfiguration with new name.</returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.ConfigSetter.#ctor(System.String)">
            <summary>
            Constructor of the current ConfigSetter class. 
            </summary>
            <param name="name">New name for ConfigSetter. </param>
            <remarks>Saves the previous name to old and changes the name input through FactoryConfiguration.</remarks>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.FactoryConfiguration.ConfigSetter.Dispose">
            <summary>
            Defines the handler to be called at the end of ConfigSetter class.
            </summary>
            <remarks>Recovers the saved previous name.</remarks>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.ShopCalendar">
            <summary>
            This shows the summary of ShopCalender. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.IsMinusStartOffset">
            <summary>
            Checks if the time gap among factory start time of the day and 00:00 is negative numeral. 
            </summary>
            <remarks>
            If the result is negative, the start time of the factory is the entire day.
            [EX] If StartOffSet = 2시간, IsMinusStartOffset = true, The factory start time of 2015/05/28 is 2015/05/27 02:00. 
            </remarks>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.StartTime">
            <summary>
            Factory's start time of the day. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.EndTime">
            <summary>
            Factory's end time of the day. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.ShiftCount">
            <summary>
            The total shift counts of the day.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.ShiftHours">
            <summary>
            Shift hours per shift.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.Shifts">
            <summary>
            Shift information.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.ShiftNames">
            <summary>
            Shift name
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.StartWeek">
            <summary>
            Start day of the week.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.ShopCalendar.EndWeek">
            <summary>
            Last day of the week.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.IsHolidayT(System.DateTime)">
            <summary>
            Distinguishes the input date and the factory start time of the day 
            Returns whether the input date is holiday or not. 
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <remarks>
            [EX] Registered holiday is 2015/03/01 and factory start time is 06:00,
            If dt is 2015/03/01 06:00:00, it is confirmed as 2015/03/01 so the return value is true. 
            If dt is 2015/03/01 02:00:00, it is confirmed as 2015/02/28 so the return value is false. 
            </remarks>
            <returns>If input time is holiday, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.IsHolidayTEnd(System.DateTime)">
            <summary>
            Distinguishes the input date and the factory end time of the day 
            Returns whether the input date is holiday or not. 
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <returns>If input time is holiday, return true, or else, return false.</returns>
            <remarks>
            [EX] Registered holiday is 2015/03/01 and factory start time is 06:00,
            If dt is 2015/03/01 06:00:00, it is confirmed as 2015/02/28 so the return value is false. 
            If dt is 2015/03/01 07:00:00, it is confirmed as 2015/03/01 so the return value is true. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.IsHoliday(System.DateTime)">
            <summary>
            Returns whether the input date is holiday or not. 
            This does not distinguish the input date with the factory operation date. Only the input date is used for handling.  
            </summary>
            <param name="dt">The variable of the DateTime type target time for distinction</param>
            <returns>If input time is holiday, return true, or else, return false.</returns>        
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.AddHoliday(System.DateTime,System.String)">
            <summary>
            Add holiday information to target date.
            </summary>
            <param name="dt">The variable of the DateTime type target date to add information.</param>
            <param name="name">String type holiday name.</param>
            <remarks>
            Only Date information is valid for target date. 
            The default value of holiday name is null.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.RemoveHoliday(System.DateTime)">
            <summary>
            Deletes a sepcific holiday information. 
            </summary>
            <param name="dt">The variable of the DateTime type target date to delete information.</param>
            <remarks>
            Only Date information is valid for target date.
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ClassifyShift(System.DateTime)">
            <summary>
            Returns index for the corresponding shift. 
            </summary>
            <param name="dt">DateTime type variable.</param>
            <remarks>
            The beginning of the shift index is 1. 
            If dt is within the boudary time of the shift, the shift index is returned referring to the Start time. 
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            yyyyMMDD 06:00 ==> Shift index:1,
            yyyyMMDD 08:00 ==> Shift index:1,
            yyyyMMDD 014:00 ==> Shift index:2
            </remarks>
            <returns>Shift index 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ClassifyShiftEnd(System.DateTime)">
            <summary>
            Returns the shift index of the target dt. 
            </summary>
            <param name="dt">DateTime type variable.</param>
            <remarks>
            The beginning of the shift index is 1. 
            If dt is within the boudary time of the shift, the shift index is returned referring to the End time.
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            yyyyMMDD 06:00 ==> Shift index:3,
            yyyyMMDD 08:00 ==> Shift index:1,
            yyyyMMDD 14:00 ==> Shift index:1
            </remarks>
            <returns>Shift index 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.GetShiftStartTime(System.DateTime,System.Int32)">
            <summary>
            Returns the shift start time of the shift index and target date. 
            </summary>
            <param name="dt">The variable of DateTime type target date.</param>
            <param name="shiftNo">Integer type target shiftNo variable.</param>
            <remarks>
            Only Date information is valid for target date.
            [EX]If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            input dt = 2015.05.20 01:00:00, shiftNo = 1 ==> , 2015.05.20 06:00:00
            </remarks>
            <returns>Returns shift start date + time. </returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ShiftStartTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the input time from the factory start time, 
            search and return shift time through the input time information.
            </summary>
            <param name="dt">The variable of DateTime type target date and time.</param>
            <remarks>
            If dt is within the boundary time of shift/factory time , distinguish dt from the shift time and factory start time.  
            [EX]
            If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3, 
            2015/05/22 05:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00
            2015/05/22 07:00:00 ==> 2015/05/22 06:00:00
            </remarks>
            <returns>Return shift start time+date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ShiftStartTimeOfDayTEnd(System.DateTime)">
            <summary>
            Distinguish the input time from the factory end time, 
            search and return shift time through the input time information.
            </summary>
            <param name="dt">The variable of DateTime type target date and time.</param>
            <returns>Integer  Integer type shift start datetime and time variable dt..</returns>
            <remarks>
            If dt is within the boundary time of shift/factory time , distinguish dt from the shift time and factory end time.
            [EX]
            If factory start time is 06:00:00, shift hours are 8 hours and shift rotation is 3,
            2015/05/22 05:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 06:00:00 ==> 2015/05/21 22:00:00
            2015/05/22 07:00:00 ==> 2015/05/22 06:00:00   
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ConvertToShiftNo(System.String)">
            <summary>
            Convert and return Shift Name to Shift index.
            </summary>
            <param name="shiftName">String type target shiftNo variable.</param>
            <returns>If there is no matching Shift result, return 0. 
            Or else, return the index which the first shift starts with index number 1. </returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.ConverToShiftName(System.Int32)">
            <summary>
            Convert and return Shift index to Shift name. 
            </summary>
            <param name="shiftNo">Integer type shiftNo variable</param>
            <remarks>
            The beginning of shift index is 1.
            </remarks>
            <returns>If there is no matching Shift Name from Shift No, Shift Name, return null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.StartTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return target date and factory start time.
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time. 
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/21 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/22 06:00:00 
            </remarks>
            <returns>Return the factory start time of the target date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.EndTimeOfDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return target date and factory start time.
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time. 
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00    
            </remarks>
            <returns>Return the factory end time of the target date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.StartTimeOfNextDayT(System.DateTime)">
            <summary>
            Distinguish the target date from the factory time, 
            and return next date and factory start time of the next date.
            </summary>
            <param name="dateTime">The variable of DateTime type target date and time.</param>
            <remarks>
            If dateTime is within the boundary of factory time, distinguish dateTime from factory start time.
            [EX]If factory start time is 06:00:00, 
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00 
            </remarks>
            <returns>Return the next day and the factory start time of the next day. </returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.StartTimeOfDay(System.DateTime)">
            <summary>
            Return the factory start time of the target date.
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time. 
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/22 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/22 06:00:00 
            </remarks>
            <returns>Return the factory start time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.EndTimeOfDay(System.DateTime)">
            <summary>
            Return the factory end time of the target date.
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time.
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 23:00:00 ==> 2015/05/23 06:00:00 
            </remarks>
            <returns>Return the factory end time of the target date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.StartTimeOfNextDay(System.DateTime)">
            <summary>
            Return the factory start time of the next day of input date. 
            </summary>
            <param name="date">The variable of DateTime type target date.</param>
            <remarks>
            date will not be distinguished from boundary of factory time.
            [EX]If factory start time is 06:00:00,
            2015/05/22 05:00:00 ==> 2015/05/23 06:00:00, 
            2015/05/22 06:00:00 ==> 2015/05/23 06:00:00, 
            </remarks>
            <returns>Return the factory start time of the next day of the target date.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.SplitDate(System.DateTime)">
            <summary>
            Distinguish the date from the input time referring the factory start time. 
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            [EX]If dt is within the boundary of factory start time, return the date of factory start time.  
            If 06:00:00 is the factory start time, 3/21 is returned when dt is 3/21 06:00:00
            </remarks>
            <returns>Returns the distinguished date data.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.SplitDateEnd(System.DateTime)">
            <summary>
            Distinguish the date from the input time referring the factory end time.
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            [EX]If 06:00:00 is the factory start time, and dt is 3/21 06:00:00, 3/20 is returned. 
            </remarks>
            <returns>Returns the distinguished date data.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.SplitDateTime(System.DateTime,System.DateTime@,System.TimeSpan@)">
            <summary>
            Seperate time and date of the factory start time. 
            </summary>
            <param name="dt">The variable of DateTime type target time</param>
            <param name="date">The variable of DateTime type target date.</param>
            <param name="time">The TimeSpan type divided time variable.</param>
            <remarks>
            The target time is seperated as time and date. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.SplitDateTimeEnd(System.DateTime,System.DateTime@,System.TimeSpan@)">
            <summary>
            Seperate time and date of the factory end time. 
            </summary>
            <param name="dt">The variable of DateTime type target time</param>
            <param name="date">The variable of DateTime type target date.</param>
            <param name="time">The TimeSpan type divided time variable.</param>
            <remarks>
            The target time is seperated as time and date. 
            </remarks>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.SplitTime(System.DateTime)">
            <summary>
            Seperate input time as time and date and return through TimeSpan
            </summary>
            <param name="dt">The variable of DateTime type target time.</param>
            <remarks>
            If dt is smaller than factory start date, add 1. 
            [EX]If factory start time is 06:00:00, 
            2015/05/22 05:00:00 ==> 1.05:00:00,
            2015/05/22 06:00:00 ==> 0.06:00:00
            </remarks>
            <returns>Return the time informatio of the input time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.AdjustSectionTime(System.TimeSpan)">
            <summary>
            Return the the adjusted SectionTime according to factory start time.
            </summary>
            <param name="time">TimeSpan type input variable.</param>
            <remarks>
            If input time is smaller than factory start time, add 1. 
            </remarks>
            <returns>Returns the adjusted TimeSpan information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.AdjustSectionDateTime(System.DateTime)">
            <summary>
            Return the the adjusted SectionTime according to factory start time.
            </summary>
            <param name="dt">The input variable of DateTime type time.</param>
            <remarks>
            If input time is smaller than factory start time, add 1 and return 
            However, in case of MinusStartOffset, subtract 1 and return.
            </remarks>
            <returns>Returns the adjusted TimeSpan information.</returns>
        </member>
        <member name="M:Mozart.SeePlan.ShopCalendar.GetWorkCalendar(System.Int32)">
            <summary>
            Return WorkCalender of target shift. 
            </summary>
            <param name="shift">Target shift information variable. </param>
            <remarks>
            Return the WorkCalender configured in FactoryConfiguration. 
            </remarks>
            <returns>Returns the Workcalendar type class</returns>
        </member>
        <member name="T:Mozart.SeePlan.Plan.DailyItem">
            <summary>
            일단위 수량 정보를 관리하는 클래스 입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItem.DateOrg">
            <summary>
            초기 입력된 계획 날짜 입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItem.Date">
            <summary>
            실제 로직에서 사용하는 계획 날짜입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItem.Quantity">
            <summary>
            수량 정보입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItem.Tag">
            <summary>
            Tag 정보입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.#ctor(System.DateTime,System.Double,System.Object)">
            <summary>
            생성자입니다.
            </summary>
            <param name="date">계획 날짜입니다.</param>
            <param name="quantity">계획 수량입니다.</param>
            <param name="tag">tage 정보입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.#ctor(System.DateTime,System.Double)">
            <summary>
            Constructor.Tag 정보가 Null로 설정됩니다.
            </summary>
            <param name="date">계획 날짜입니다.</param>
            <param name="quantity">계획 수량입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.Split(System.Double)">
            <summary>
            일수량을 주어진 qty로 Split 
            </summary>
            <param name="qty">수량</param>
            <returns>Split된 일수량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.ToString">
            <summary>
            {날짜}->{수량} 형태의 문자열
            </summary>
            <returns>{날짜}->{수량}</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.CompareTo(Mozart.SeePlan.Plan.DailyItem)">
            <summary>
            날짜 기준 오름차순 정렬시 사용되는 비교함수
            </summary>
            <param name="other">배교대상</param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItem.Print(System.Text.StringBuilder)">
            <summary>
            Log를 씀
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:Mozart.SeePlan.Plan.DailyItem.TagComparer">
            <summary>
            날짜 + Tag 기준 오름차순 정렬시 사용되는 비교함수
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Plan.DailyItemList`1">
            <summary>일단위 계획 수량 정보들의 추가, 삭제, 합계, 차감등의 관리 유지하는 Class 입니다.</summary>
            <typeparam name="TItem">관리하고자하는 Class Type 입니다.</typeparam>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.#ctor">
            <summary>
            생성자입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.#ctor(System.Boolean)">
            <summary>
            생성자 입니다.
            </summary>
            <param name="allowMultiple">동일 정보를 다중으로 담고 싶을 경우 true, 수량만 합산할 경우 false 입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            생성자입니다.
            </summary>
            <param name="comparer">TItem 을 비교할 Comparer입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            생성자입니다.
            </summary>
            <param name="comparer">TItem 을 비교할 Comparer입니다.</param>
            <param name="allowMultiple">동일 정보를 다중으로 담고 싶을 경우 true, 수량만 합산할 경우 false 입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItemList`1.Item(System.DateTime)">
            <summary>
            날짜(key)에 대한 TItem 을 반환합니다.
            </summary>
            <param name="key">검색하고자하는 날짜입니다.</param>
            <returns>검색한 TItem 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.IndexOf(`0)">
            <summary>
            대상 TItem의 Index 정보입니다.
            </summary>
            <param name="item">대상 TItem 입니다.</param>
            <returns>Index 정보를 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Insert(System.Int32,`0)">
            <summary>
            현재 버전에서는 Insert 기능을 지원하지 않습니다.
            </summary>
            <remarks>수행 시 NotSupportedException이 발생합니다.</remarks>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.RemoveAt(System.Int32)">
            <summary>
            특정 Index의 TItem을 삭제합니다.
            </summary>
            <param name="index">삭제하고자 하는 index 정보입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.Plan.DailyItemList`1.Item(System.Int32)">
            <summary>
            특정 Idex의 TItem을 반환합니다.
            </summary>
            <param name="index">찾고자 하는 Index 정보입니다.</param>
            <returns>찾은 DaliyItem 값입니다.</returns>
            <remarks>특정 Index에 접근하여 설정하고자 할 떄는 NotSupportedException 이 발생합니다.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <summary>
            TItem 형식의 값TItem을 추가합니다.
            </summary>
            <param name="item">대상 TItem 형식의 값입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Clear">
            <summary>
            TItemList를 Clear 합니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Contains(`0)">
            <summary>
            TItem이 List에 존재여부를 확인합니다.
            </summary>
            <param name="item">대상 TItem 형식의 값입니다.</param>
            <returns>List에 포함되어 있을 경우 true, 아닐 경우 false 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Add(`0)">
            <summary>
            	<para>정렬된 위치에 TItem 추가합니다.</para>
            	<para></para>
            </summary>
            <param name="item">TItem</param>
            <returns>AllowMultiple을 true로 설정하지 않을 경우, 수량을 합산하는 방법으로 저장합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Add(System.DateTime,System.Double)">
            <summary>정렬된 위치에 DailyQuantity 생성 및 추가합니다.</summary>
            <param name="key">날짜</param>
            <param name="quantity">수량</param>
            <returns>TItem</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Add(System.DateTime)">
            <summary>정렬된 위치에 DailyQuantity 생성 및 추가합니다.</summary>
            <param name="key">날짜</param>
            <returns>TItem 형식의 </returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Add(System.DateTime,System.Double,System.Object)">
            <summary>정렬된 위치에 DailyQuantity 생성 및 추가합니다.</summary>
            <param name="key">날짜</param>
            <param name="quantity">수량</param>
            <param name="tag">tag</param>
            <returns>DailyQuantity</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            정렬된 위치에 DailyQuantity들을 추가
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.RemoveZero">
            <summary>DailyItem 중 Quantity 값이 0인 경우를 찾아 삭제합니다.</summary>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.MergeIfLessThan(System.Double)">
            <summary>
            일수량이 minQty이하인 경우 다음 일수량으로 Merge 
            </summary>
            <param name="minQty">자투리 기준 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Exists(System.Double)">
            <summary>
            일수량이 size보다 큰 멤버 존재 유무를 확인합니다.
            </summary>
            <returns>size 보다 큰 Item이 있을 경우 true, 아닐 경우 false 입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.GetFirst(System.DateTime)">
            <summary>
            검색 시작일 이후 첫번째 DailyQuantity
            </summary>
            <param name="from">검색 시작일</param>
            <returns>DailyQuantity</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.SubtractTo(System.DateTime,System.Double,System.Boolean,System.Object)">
            <summary>
            특정일 까지 차감
            </summary>
            <param name="to">검색 시작일</param>
            <param name="qty">차감 수량</param>
            <param name="includesTo">True이면 to Date까지아니면 'to' Date보다 작은 날까지</param>
            <param name="tag">차감 대상</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.SubtractTo(System.DateTime,System.Double,System.Boolean)">
            <summary>
            특정일 까지 차감
            </summary>
            <param name="to">검색 시작일</param>
            <param name="qty">차감 수량</param>
            <param name="includesTo">True이면 to Date까지아니면 'to' Date보다 작은 날까지</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.DateTime,System.DateTime,System.Double,System.Boolean,System.Object)">
            <summary>
            시작일에서 종료일 범위 일내의 차감
            </summary>
            <param name="from">시작일</param>
            <param name="to">종료일</param>
            <param name="qty">차감 수량</param>
            <param name="includesTo">True이면 to Date까지아니면 'to' Date보다 작은 날까지</param>
            <param name="tag">차감 대상 조건</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.DateTime,System.DateTime,System.Double,System.Boolean)">
            <summary>
            시작일에서 종료일 범위 일내의 차감
            </summary>
            <param name="from">시작일</param>
            <param name="to">종료일</param>
            <param name="qty">차감 수량</param>
            <param name="includesTo">True이면 to Date까지아니면 'to' Date보다 작은 날까지</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.Double)">
            <summary>
            일수량 차감
            </summary>
            <param name="qty">차감 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.DateTime,System.Double)">
            <summary>
            특정일 부터 일단위 수량 차감
            </summary>
            <param name="from">시작일</param>
            <param name="qty">차감 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.DateTime,System.Double,System.IComparable)">
            <summary>
            특정일 부터 일단위 수량 차감
            </summary>
            <param name="from">시작일</param>
            <param name="qty">차감 수량</param>
            <param name="tag">차감 대상</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.Int32,System.Double)">
            <summary>
            Collection에서 수량만큼 삭제
            </summary>
            <param name="index">시작 Index</param>
            <param name="qty">차감 수량</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Subtract(System.Int32,System.Double,System.IComparable)">
            <summary>
            Collection에서 수량만큼 삭제
            </summary>
            <param name="index">시작 Index</param>
            <param name="qty">차감 수량</param>       
            <param name="tag">차감 대상</param>
            <returns>차감후 차감 수량 잔량</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.SubtractReverse(System.Double)">
            <summary>
            Collection에서 수량만큼 역순으로 차감
            </summary>
            <param name="qty">차감 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Divide(System.Double)">
            <summary>
            Collection 전체에 scalar수량으로 나누기 적용
            </summary>
            <param name="scalar">나누기 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Multiply(System.Double)">
            <summary>
            Collection 전체에 scalar수량으로 곱하기 적용
            </summary>
            <param name="scalar">곱하기 수량</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Shift(System.Double)">
            <summary>
            Collection 전체 시각을 leadtime 시간(hour)만큼 이동
            </summary>
            <param name="leadtime">이동시간</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Shift(System.Double,Mozart.SeePlan.Plan.DailyItemList{`0})">
            <summary>
            Result에 leadtime 시간(hour)만큼 이동 시킨 결과를 복제
            </summary>
            <param name="leadtime">이동시간</param>
            <param name="result">이동 결과</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.AddHours(System.Double,System.Boolean)">
            <summary>
            Collection 전체 시각을 hours만큼 이동
            </summary>
            <param name="hours">이동시간</param>
            <param name="withOrg">DateOrg에 적용여부</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Cut(System.DateTime)">
            <summary>
            DueDate 기준으로 basis 시간 이후 삭제합니다.
            </summary>
            <param name="basis">삭제 기준일입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Cut(System.DateTime,System.Boolean)">
            <summary>
            DueDate 기준으로 basis 시간 이후 삭제합니다.
            </summary>
            <param name="basis">삭제 기준일입니다.</param>
            <param name="includeEq">True이면 basis Date 포함해서 삭제합니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Cut(System.DateTime,System.Boolean,System.IComparable)">
            <summary>
            DueDate 기준으로 basis 시간 이후 삭제
            </summary>
            <param name="basis">삭제 기준일</param>
            <param name="includeEq">True이면 basis Date 포함</param>
            <param name="tag">삭제 대상</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Divide(System.Double,Mozart.SeePlan.Plan.DailyItemList{`0})">
            <summary>
            Result에 scalar수량으로 나누기 적용하여 복제
            </summary>
            <param name="scalar">나누기 수량</param>
            <param name="results">나누기 결과</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateIn(System.DateTime,System.Double[])">
            <summary>
            시작일 부터 In기준으로 일단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateIn(System.DateTime,System.Double[],System.Boolean)">
            <summary>
            시작일 부터 In기준으로 일단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
            <param name="skipBacklog">시작일 이전일 집계 제외 여부</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateShift(System.DateTime,System.Double[])">
            <summary>
            시작일 부터 In기준으로 Shift단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="shiftQtys">누적수량 저장하는 곳</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateShift(System.DateTime,System.Double[],System.Boolean)">
            <summary>
            시작일 부터 In기준으로 Shift단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="shiftQtys">누적수량 저장하는 곳</param>
            <param name="skipBacklog">시작일 이전일 집계 제외 여부</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateOut(System.DateTime,System.Double[])">
            <summary>
            시작일 부터 Out기준으로 일단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateOut(System.DateTime,System.Double[],System.Boolean)">
            <summary>
            시작일 부터 Out기준으로 일단위 누적
            </summary>
            <param name="startDt">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
            <param name="skipBacklog">시작일 이전일 집계 제외 여부</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateEnd(System.DateTime,System.Double[])">
            <summary>
            일 시작시간 수량을 전날 수량으로 합산하고, 다른 누적 함수와 동일
            </summary>
            <param name="endDT">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CumulateEnd(System.DateTime,System.Double[],System.Boolean)">
            <summary>
            일 시작시간 수량을 전날 수량으로 합산하고, 다른 누적 함수와 동일
            </summary>
            <param name="endDT">시작일</param>
            <param name="dailyQtys">누적수량 저장하는 곳</param>
            <param name="skipBacklog">시작일 이전일 집계 제외 여부</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum">
            <summary>전체 수량 합계를 반환합니다.</summary>
            <returns>합계</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.IComparable)">
            <summary>
            	<strong>
            		<em>tag</em>
            	</strong>와 일치하는 수량 합계를 반환합니다.</summary>
            <param name="tag">ICmpareable 형식의 집계 대상입니다.</param>
            <returns>
            	<em>
            		<strong>tag</strong>
            	</em> 와 일치하는 DailyItem의 Quantity의 합계를 반환합니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime)">
            <summary>시작일 부터 수량 합계를 반환합니다.</summary>
            <param name="to">시작일</param>
            <returns>합계</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime,System.Boolean)">
            <summary>종료일 까지 수량 합계를 반환합니다.</summary>
            <param name="to">종료일입니다</param>
            <param name="includeTo">종료일 포함 여부를 설정합니다.</param>
            <returns>합계 결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime,System.Boolean,System.Object)">
            <summary>종료일 까지 수량 합계를 반환합니다.</summary>
            <param name="to">종료일입니다</param>
            <param name="includeTo">종료일 포함 여부를 설정합니다.</param>
            <param name="tag">합계 대상 tag 정보입니다.</param>
            <returns>합계 결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime,System.DateTime)">
            <summary>시작일 부터 종료일 까지 수량 합계를 반환합니다.</summary>
            <param name="fr">시작일입니다</param>
            <param name="to">종료일입니다</param>
            <returns>합계 결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime,System.DateTime,System.Boolean)">
            <summary>시작일 부터 종료일 까지 수량 합계를 반환합니다.</summary>
            <param name="fr">시작일입니다</param>
            <param name="to">종료일입니다</param>
            <param name="includeTo">종료일 포함 여부를 설정합니다.</param>
            <returns>합계 결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Sum(System.DateTime,System.DateTime,System.Boolean,System.Object)">
            <summary>시작일 부터 종료일 까지 일수량 합계를 반환합니다.</summary>
            <param name="fr">시작일입니다.</param>
            <param name="to">종료일입니다.</param>
            <param name="includeTo">종료일 포함 여부를 설정합니다. </param>
            <param name="tag">합계 대상 tag 정보입니다.</param>
            <returns>합계 결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.CopyTo(Mozart.SeePlan.Plan.DailyItemList{`0})">
            <summary>
            DailyItem을 복사합니다.
            </summary>
            <param name="results">복사 하고자 하는 List 입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Clone">
            <summary>
            DailyItemList를 복제합니다. 깊은복사를 수행합니다.
            </summary>
            <returns>복제결과입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Plan.DailyItemList`1.Print">
            <summary>
            Log를 작성합니다. List에 속한 DailyItem을 모두 연결해서 출력합니다.
            </summary>
            <returns>문자열 형태의 LOG 결과입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.LogExtensions">
            <summary>
            Helper class used for writing logs. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.LogExtensions.WriteTable(Mozart.Logging.ILog,System.String,System.Data.DataTable)">
            <summary>
            Write data from DataTable to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="dt">DataTable type DataTable class.</param>
            <remarks>DataRow is classifed by Tab.</remarks>
        </member>
        <member name="M:Mozart.SeePlan.LogExtensions.WriteTable(Mozart.Logging.ILog,System.String,System.Data.DataTable,System.String)">
            <summary>
            Write data from DataTable to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="dt">DataTable type DataTable class.</param>
            <param name="separator">Seperator among string type DataRow</param>
        </member>
        <member name="M:Mozart.SeePlan.LogExtensions.WriteSet(Mozart.Logging.ILog,System.String,System.Data.DataSet)">
            <summary>
            Write data from DataSet to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="ds">DataSet type ds variable.</param>
        </member>
        <member name="M:Mozart.SeePlan.LogExtensions.WriteSet(Mozart.Logging.ILog,System.String,System.Data.DataSet,System.String)">
            <summary>
            Write data from DataSet to target log. 
            </summary>
            <param name="log">ILog type Logger class.</param>
            <param name="title">String type Title variable</param>
            <param name="ds">DataSet type ds variable.</param>
            <param name="separator">Seperator among string type DataSet</param>
        </member>
        <member name="T:Mozart.SeePlan.Tools">
            <summary xml:lang="ko-kr">
            Object간의 Compare 클래스입니다.
            </summary>
            <summary>
            Class to compare objects.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.Tools.ObjEquals(System.Object,System.Object)">
            <summary xml:lang="ko-kr">
            두 Object간의 Equals 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="x">비교할 대상 x 객체 입니다.</param>
            <param xml:lang="ko-kr" name="y">비교할 대상 y 객체 입니다.</param>
            <returns xml:lang="ko-kr">Equals 여부를 반환합니다.</returns>
            <summary>
            Check for equals among two objects.
            </summary>
            <param name="x">Target object x for comparison</param>
            <param name="y">Target object y for comparison</param>
            <returns>Return whether two objects are equal or not.</returns>
        </member>
        <member name="M:Mozart.SeePlan.Tools.ObjCompare(System.Object,System.Object)">
            <summary xml:lang="ko-kr">
            두 Object간의 비교 여부를 판별합니다.
            </summary>
            <param xml:lang="ko-kr" name="x">비교할 대상 x 객체 입니다.</param>
            <param xml:lang="ko-kr" name="y">비교할 대상 y 객체 입니다.</param>
            <remarks>
            비교한 결과를 1, 0, -1중에 하나의 값을 반환합니다.
            </remarks>
            <returns xml:lang="ko-kr">비교한 결과를 반환합니다.</returns>
            <summary>
            Determine whether to compare two objects.
            </summary>
            <param name="x">Target object x for comparison</param>
            <param name="y">Target object y for comparison</param>
            <remarks>
            Returns one of the following values: 1, 0, -1
            </remarks>
            <returns>Return comparison result.</returns>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.AggregateType">
            <summary>
            통계수집 컬럼의 Aggregate 형입니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.IStatManager">
            <summary>
            StatSheet 을 관리하기 위한 기능을 노출합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatManager.Sheets">
            <summary>
            등록된 전체 StatSheet 열거형입니다.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.IStatManager.Register``1(Mozart.SeePlan.StatModel.StatSheet{``0})">
            <summary>
            StatSheet 을 등록합니다.
            </summary>
            <typeparam name="T">StatSheet 의 Output data type 입니다.</typeparam>
            <param name="sheet">StatSheet 객체입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.IStatManager.UnRegister``1(Mozart.SeePlan.StatModel.StatSheet{``0})">
            <summary>
            StatSheet 을 제거합니다.
            </summary>
            <typeparam name="T">StatSheet 의 Output data type 입니다.</typeparam>
            <param name="sheet">StatSheet 객체입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.IStatManager.GetSheet``1">
            <summary>
            특정 Output data type 의 Statsheet 을 찾아 반환합니다.
            </summary>
            <typeparam name="T">StatSheet 의 Output data type 입니다.</typeparam>
            <returns>StatSheet 객체입니다.</returns>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.StatSheetHandler`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EntityStatHandler`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EntityStatRowAction`1">
            <summary>
             row updater
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="entity"></param>
            <param name="row"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EquipmentStatHandler`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="entity"></param>
            <param name="aeqp"></param>
            <param name="state"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EquipmentStatFilter`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="entity"></param>
            <param name="aeqp"></param>
            <param name="state"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EquipmentStatRowAction`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="aeqp"></param>
            <param name="time"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.EquipmentStatGetKey`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="aeqp"></param>
            <param name="index"></param>
            <param name="time"></param>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.LoadHistGetPackingData`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sheet"></param>
            <param name="aeqp"></param>
            <param name="state"></param>
            <param name="time"></param>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.IStatColumn">
            <summary>
            Interface of StatSheet.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatColumn.ColumnName">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatColumn.AggregateType">
            <summary>
            Aggergate type of column.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatColumn.IsPacking">
            <summary>
            Determines whether to add during Packing.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatColumn.IsKey">
            <summary>
            Determines Key column.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.IStatColumn.DefaultValue">
            <summary>
            Default value of column.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.StatColumn">
            <summary>
            StatSheet data column class.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.ColumnName">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.DefaultValue">
            <summary>
            Default value of column.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.AggregateType">
            <summary>
            Aggergate type of column.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.IsAggregate">
            <summary>
            Deternubes Aggergate type.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.IsStatSheet">
            <summary>
            Determines whether if the column includes Output data type of Statsheet.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.IsPacking">
            <summary>
            Determines whether to add during Packing.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.IsKey">
             <summary>
            Determines Key column.
             </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatColumn.DataType">
            <summary>
            Column data type.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.StatSheet`1">
            <summary>
            The class that handles the statistics aggregation from the Simulation.
            </summary>
            <typeparam name="T">통계수집 저장 클래스 타입입니다.</typeparam>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.Clock">
            <summary>
            Simulation Clock.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.Config">
            <summary>
            The class to configure Statsheet.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.Keys">
            <summary>
            The Key column array of the statistics aggregation data.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.IsDone">
            <summary>
            Done called
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.#ctor(Mozart.SeePlan.StatModel.StatSheetCfg{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Snapshot">
            <summary>
            The statistics data table where aggregated data is stored. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetGroup(System.String)">
            <summary>
            Statistic data View with name.
            </summary>
            <param name="name">The name of the View.</param>
            <returns>Returns the statistics data View.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Rolling">
            <summary>
            Reset the values of Aggregate type column and writes data through designated Output.
            </summary>
            <returns>If all tasks are performed, return true, or else, return false.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.WriteOutput">
            <summary>
            Write data to Output table (T). 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.Table">
            <summary>
            The current table used for writing data.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.ClearRows">
            <summary>
            Clear the result writing table. 
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Rolling(`0)">
            <summary>
            Reset value of Aggregate colunm of a specific data row in Stat Sheet. 
            </summary>
            <param name="row">Target row to reset. </param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Wrap">
            <summary>
            Configures the value of Aggregate column.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Wrap(`0)">
            <summary>
            Configures the value of Aggregate column of a specific Row. 
            </summary>
            <param name="row">Target Row.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.FindRow(System.Object[])">
            <summary>
            Searches and returns data Row of the Key from data storage table. 
            </summary>
            <param name="keys">Key value array.</param>
            <returns>Returns the searched Row(T). If there is no matchin results, return null.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetColumn(System.String)">
            <summary>
            Returns a specific column from statistics result data table. 
            </summary>
            <param name="columnName">Column name to be returned.</param>
            <returns>Returns the statistics column.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetRow(System.Object[])">
            <summary>
            Searches and returns data Row of the Key from data storage table.
            </summary>
            <param name="keys">Key value array</param>
            <returns>Returns the searched Row(T).  
            If there is not matching result, new data is added, creates and returns the row.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetUnbound``1(`0,System.String)">
            <summary>
            Returns the configured value of specific Row, Column from result table. 
            </summary>
            <typeparam name="V">Type of column value.</typeparam>
            <param name="row">Target Row.</param>
            <param name="columnName">Target column name..</param>
            <returns>Returns the column vakye.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetUnbound``1(`0,Mozart.SeePlan.StatModel.IStatColumn)">
            <summary>
            Returns the configured value of specific Row, Column from result table. 
            </summary>
            <typeparam name="V">Type of column value.</typeparam>
            <param name="row">Target Row.</param>
            <param name="column">Target column.</param>
            <returns>Returns the target column value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.SetUnbound(`0,Mozart.SeePlan.StatModel.IStatColumn,System.Object)">
            <summary>
            Set specific Row, Column as input value. 
            </summary>
            <param name="row">Target Row.</param>
            <param name="column">Target column.</param>
            <param name="value">Returns the target column value.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.DeleteUnbound(`0)">
            <summary>
            Clear Unbound column of a specific row.
            </summary>
            <param name="row">Target row to clear.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetAggregate(`0,Mozart.SeePlan.StatModel.StatColumn)">
            <summary>
            Return aggregate function of a specific Row, Column.
            </summary>
            <param name="row"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetValue(`0,Mozart.SeePlan.StatModel.IStatColumn)">
            <summary>
            Return the value of specific Row, Column of result table.
            </summary>
            <param name="row">Target Row.</param>
            <param name="column">Target column.</param>
            <returns>Return saved value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Update(`0,System.Linq.Expressions.Expression{System.Action{`0}},System.Object)">
            <summary>
            Update value of specific Row, Column.
            </summary>
            <param name="row">Target Row.</param>
            <param name="memberExpression">컬럼 표현식입니다.</param>
            <param name="value">설정값입니다.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Update(`0,System.String,System.Object)">
            <summary>
            Update value of specific Row, Column. 
            </summary>
            <param name="row">Target Row.</param>
            <param name="columnName">Column name.</param>
            <param name="value">Configured value.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Update(`0,Mozart.SeePlan.StatModel.IStatColumn,System.Object)">
            <summary>
            Update value of specific Row, Column. 
            </summary>
            <param name="row">Target Row.</param>
            <param name="column">Column</param>
            <param name="value">Configured value.</param>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.Pack(`0)">
            <summary>
            Return column value with ',' as delimeter, from a specific row in the statistics data table.
            </summary>
            <param name="row">Target Row.</param>
            <returns>Return result string.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheet`1.GetEnumerator">
            <summary>
            The implemented function of IEnumerable. Returns saved data.
            </summary>
            <returns>Returns the saved statistics data as enumuration type.</returns>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.Now">
            <summary>
            Current time of Simulation. Type is Time.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheet`1.NowDT">
            <summary>
            Current time of Simulation. Type is DateTime.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.StatModel.StatSheetCfg`1">
            <summary>
            시뮬레이션 통계수집 처리를 위한 클래스(Statsheet)의 설정 및 관리를 위한 클래스입니다.
            </summary>
            <typeparam name="T">통계수집 저장 클래스 타입입니다.</typeparam>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.#ctor">
            <summary>
            생성자입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.Columns">
            <summary>
            통계수집 데이터의 컬럼 정보콜렉션입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.Keys">
            <summary>
            통계수집 데이터 테이블의 Key 컬럼 배열입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.Duration">
            <summary>
            통계수집 주기입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.Timing">
            <summary>
            통계수집을 동시간대 Event 에서 수행하기 위한 순서입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.EventPrority">
            <summary>
            통계수집 관련 Event 에 대한 우선순위입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.FireAtFirst">
            <summary>
            시뮬레이션 시작 시 Event 수행 여부입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.KeepRows">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.AddGroup(System.String,System.String[])">
            <summary>
            통계수집 데이터에 대한 그룹(View) 정보를 등록합니다.
            </summary>
            <param name="name">그룹(view)명입니다.</param>
            <param name="columnNames">그룹을 구성하는 Key 컬럼 명 파라미터 배열입니다.</param>
            <returns>설정된 데이터 그룹객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.AddGroup(System.String,Mozart.Data.Entity.IndexType,System.String[])">
            <summary>
            통계수집 데이터에 대한 그룹(View) 정보를 등록합니다.
            </summary>
            <param name="name">그룹(view)명입니다.</param>
            <param name="indexType">데이터 View 를 구성하기 위한 Index Type 입니다.
            BinaryTree / Hashtable / Trie 를 지원합니다.
            </param>
            <param name="columnNames">그룹을 구성하는 Key 컬럼 명 파라미터 배열입니다.</param>
            <returns>설정된 데이터 그룹객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.GetColumn(System.String)">
            <summary>
            대상 이름의 컬럼을 반환합니다.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>검색된 컬럼객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.AddColumn(System.String)">
            <summary>
            컬럼을 추가합니다.
            </summary>
            <param name="columnName">컬럼명 입니다.</param>
            <returns>추가된 컬럼 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.AddColumn(System.String,System.Type)">
            <summary>
            데이터형을 지정하여 컬럼을 추가합니다.
            </summary>
            <param name="columnName">컬럼명 입니다.</param>
            <param name="dataType">컬럼의 데이터형 입니다.</param>
            <returns>추가된 컬럼 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.SetAggregate(Mozart.SeePlan.StatModel.IStatColumn,Mozart.SeePlan.StatModel.AggregateType)">
            <summary>
            특정 컬럼을 Aggregate 형으로 지정합니다. 
            </summary>
            <param name="column">Target column.</param>
            <param name="aggregate">Aggregate 형입니다. </param>
            <returns>StatSheetCfg 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.SetPacking(Mozart.SeePlan.StatModel.IStatColumn,System.Boolean)">
            <summary>
            특정 컬럼값에 대한 Packing 여부를 지정합니다.
            </summary>
            <param name="column">Target column.</param>
            <param name="value">true 인 경우 packing 시 포함되며, false 인경우 포함하지 않습니다.</param>
            <returns>StatSheetCfg 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.SetKey(Mozart.SeePlan.StatModel.IStatColumn,System.Boolean)">
            <summary>
            통계수집 데이터테이블의 특정 컬럼을 Key 로 지정/해제합니다.
            </summary>
            <param name="column">Target column.</param>
            <param name="value">Key 로 지정하는 경우 true, 그렇지 않은 경우 false 입니다.</param>
            <returns>StatSheetCfg 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.SetDefaultValue(Mozart.SeePlan.StatModel.IStatColumn,System.Object)">
            <summary>
            특정 컬럼의 기본값을 설정합니다.
            </summary>
            <param name="column">대상컬럼입니다.</param>
            <param name="value">설정값입니다.</param>
            <returns>StatSheetCfg 객체입니다.</returns>
        </member>
        <member name="M:Mozart.SeePlan.StatModel.StatSheetCfg`1.SetKey(System.String[])">
            <summary>
            컬럼 Key 를 지정합니다.  
            </summary>
            <param name="columnNames">Key 지정될 컬럼명 Parameter 배열입니다.</param>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.OnWriteOutput">
            <summary>
            통계 Output 저장 테이블에 데이터를 기록하는 시점에 로직 처리를 위한 Delegate 입니다. 
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.OnRolling">
            <summary>
            Statsheet Rolling 이벤트 직후 로직 처리를 위한 Delegate 입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.OnWrap">
            <summary>
            Statsheet Wrap 이벤트 직후 로직 처리를 위한 Delegate 입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.TransferIn">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 이동을 시작하는 시점에 통계치 수집을 위한 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.TransferOut">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 이동을 완료하는 시점에 통계치 수집을 위한 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.TrackIn">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 장비에 투입되는 시점에 통계치 수집을 위한 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.TrackOut">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 장비에서 작업을 마치고 Unload 되는 시점에 통계치 수집을 위한 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.HoldIn">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 Hold 상태 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.HoldOut">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 Hold 이후 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.CancelWait">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 작업대기 상태가 취소되는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.DispatchIn">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 선택된 직후 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.DispatchOut">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 선택된 직후 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.OutWaitIn">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 Out후  대기하기 시작하는 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.OutWaitOut">
            <summary>
            작업물 상태에 따른 통계치 수집 이벤트 처리 Delegate 입니다. 
            작업물이 Out 후 대기를 마치는 시점에 발생하는 이벤트처리 핸들러입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.StatModel.StatSheetCfg`1.StateChanged">
            <summary>
            장비기반 통계 수집을 위한 이벤트 처리핸들러입니다. 
            장비상태 변경시 사용자가 통계치 수집을 수행할 수 있도록 구성됩니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.Strings">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_COMMON">
            <summary>
              Common과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_PEG_BUILD">
            <summary>
              Pegging-Build과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_PEG_RUN">
            <summary>
              Pegging-Run과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_PERSIST_INPUT">
            <summary>
              Persist-Input과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_PERSIST_OUTPUT">
            <summary>
              Persist-Output과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_BOP">
            <summary>
              SIM-Bop과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_BUCKETING">
            <summary>
              SIM-Bucketing과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_DISPATCHING">
            <summary>
              SIM-Dispatching과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_EQUIPMENT">
            <summary>
              SIM-Equipment과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_FACTORY">
            <summary>
              SIM-Factory과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_GENERAL">
            <summary>
              SIM-General과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_INIT">
            <summary>
              SIM-Init과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_JOBCHANGEAGENT">
            <summary>
              SIM-JobChangeAgent과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_SECONDRESOURCE">
            <summary>
              SIM-SecondResource과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.CAT_SIM_TRANSFER">
            <summary>
              SIM-Transfer과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_AOBUCKETER">
            <summary>
              The base class of BUCKETER to perform BUCKETING task과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_AOEQUIPMENT">
            <summary>
              The base class of Simulation Equipment과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_BATCH_SPEC">
            <summary>
              The Batch composition constraint of Batch type equipment과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_CAPACITYBUCKET">
            <summary>
              The base class of BUCKET used during BUCKETING task과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_DEDICEQP_INFO">
            <summary>
              The data model for Equipment Dedication constraint information과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_DISPATCHINGAGENT">
            <summary>
              The class used for managing entity QUEUE and DISPATCHING과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_EQP">
            <summary>
              The data class for Simulation equipment 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_EQPARRANGE">
            <summary>
              The data model of constraint information of the equipment available for loading per Step과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_IMATERIAL">
            <summary>
              The class for Pegging target WIP and output 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_INOUTAGENT">
            <summary>
              The class to select entity to release from a specific area 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_ITOOLDATA">
            <summary>
              The data set of Second Resource required for processing과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_LOTBATCH">
            <summary>
              The data model of Batch entity 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_MCP_PART">
            <summary>
              The data class of parts composing MCP과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_MCP_PRODUCT">
            <summary>
              The class of MCP final(end) product과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_MOMASTER">
            <summary>
              The data model of Demand sets per product과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_MOPLAN">
            <summary>
              The data model of Demand of the plan(daily, weekly) per product과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PEGPART">
            <summary>
              The data model of Pegging Target sets per Demand for Pegging 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PEGTARGET">
            <summary>
              The data model of Pegging target Demand(Target) unit.  과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PLANINFO">
            <summary>
              The data model of equipment loading information per Step 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PLANWIP">
            <summary>
              The data model of Pegging target WIP information 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PROCESS">
            <summary>
              The data model of manufacture Step flow. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_PRODUCT">
            <summary>
              The data model of product information 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_QTIMEINFO">
            <summary>
              The data model of Step wait time constraint information 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_RESOURCE">
            <summary>
              The data model of Simulation equipment information 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_RETICLE">
            <summary>
              The data model of Reticle information used in Photo Step 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_RETICLEARRANGE">
            <summary>
              The data model of constraint information of the available Reticle per Step 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_SEMIFABLOT">
            <summary>
              The data model of Simulation Entity for Semicon Fab과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_SMOOTHER">
            <summary>
              The class to generate daily plan from weekly plan 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_STEP">
            <summary>
              Step data class (Parts hierarchy of processing unit, Step code, Step name, Processing time, etc)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_STEPTARGET">
            <summary>
              Information of production target per STEP 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_SUBEQP">
            <summary>
              The data model of equipment unit class composing equipment과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_WEIGHTPRESET">
            <summary>
              Preset information used by Weight Factor based Dispatcher 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_WIPINFO">
            <summary>
              Data Interface of the initial WIP information 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_FEBASE_WORKLOT">
            <summary>
              The information of target entity inflow to be used from JobChangeAgent과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_BUCKETING_ADD_BUCKET_MOVE_DEF">
            <summary>
              Adds the UnitQty of IHandlingBatch to the MoveQty of CapacityBucket과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_BUCKETING_BUCKET_ROLLING_DEF">
            <summary>
              Initializes CumulatedQty, MoveQty of Capacitiy Bucket to 0 by RollingHours. For Inner Rolling, MoveQty is set as PreviousQty and add MoveQty to CumulatedQty. Then MoveQty is initialized to 0. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_BUCKETING_GET_BUCKET_INPUT_DELAY_DEF">
            <summary>
              Calculates Delay Time(Hour) by RollingHours / Bucket.CapaQty * Bucket.SlotCount과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_ADD_DISPATCH_WIP_LOG_DEF">
            <summary>
              Saves as LotID/UnitQty/WeightValue1/WeightValue2 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_DO_FILTER_DEF">
            <summary>
              Filters the entity by verifying SecondResource, SetupCrew, IsLoadable과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_DO_SELECT_DEF">
            <summary>
              Evaluates the priority of the entities and selects the entity according to the priority 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_EVALUATE_DEF">
            <summary>
              Calculates the weight factor of the entity according to FactorType and sort the entities in higher priority order과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_GET_SELECTED_WIP_LOG_DEF">
            <summary>
              Write as LotID01/LotID02/LotID03과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_SELECT_DEF">
            <summary>
              Selects the first entity from the list sorted by priority 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_DISPATCHING_SORT_LOT_GROUP_CONTENTS_DEF">
            <summary>
              Calculate the Weight Factor only for FactorType=LOTTYPE entities and sort in higher priority order.   과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_COMPARE_LOT_DEF">
            <summary>
              Sorts the entities in faster ReleaseTime order과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_COMPARE_WIP_DEF">
            <summary>
              Sort in RUN -&gt; INBUF -&gt; WAIT -&gt; HOLD order 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_DO_RESERVE_DEF">
            <summary>
              Recursive call ReserveOne as much as entity quantity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_FIX_BATCH_DEF">
            <summary>
              Create entities that are not Batch Type to Batch Type from BatchType equipment 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_FIX_START_TIME_DEF">
            <summary>
              Set as the current time of the equipment (Simulation start time)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_GET_NEXT_STEP_DEF">
            <summary>
              Returns Default Next Step과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_IS_DONE_DEF">
            <summary>
              Returns the IsFinished value of the entity 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_LOCATE_FOR_DISPATCH_DEF">
            <summary>
              If entity is IsFinished, initialize entity from Router. If not, search for DispatchingAgent and Take.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_LOCATE_FOR_RUN_DEF">
            <summary>
              Searches for equipment in Run state and initializes. Sends to Bucketer in case equipment is no registered to Factory과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_ENTITY_RESERVE_ONE_DEF">
            <summary>
              Searches entities from the list correspondent to the index and call Reserve 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_GET_DISPATCHER_TYPE_DEF">
            <summary>
              Returns the DispatcherType of the equipment model과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_GET_EQP_SIM_TYPE_DEF">
            <summary>
              Returns the SimType value of the equipment model 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_GET_LOADABLE_CHAMBERS_DEF">
            <summary>
              Returns the list of Chambers where available time of the Chamber is before the current time 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_GET_PROCESS_UNIT_SIZE_DEF">
            <summary>
              Uses UnitQty in case equipment type is not Batch Type and uses LotUnitSize from SeeplanConfiguration if equipment type is Batch Type과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_IsBatchType">
            <summary>
              Determines only LotBatch and BatchInline Type as Batch type equipment 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_ON_PM_EVENT_DEF">
            <summary>
              Blocks Loader when PM occurs. Processes the currently processing entities and blocks new entity input과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_PM_PREVENT_LOADING_DEF">
            <summary>
              Blocks Loader when PM occurs. Processes the currently processing entities and blocks new entity input과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_EQUIPMENT_PM_PREVENT_PROCESSING_DEF">
            <summary>
              Stops all work immediately when PM occurs 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_ADD_WORK_LOT_DEF">
            <summary>
              Searches the WorkAgent, WorkGroup and WorkStep of the entity and creates WorkLot과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_CAN_UP_DEF">
            <summary>
              Calculates the job retention time when 1 equipment is added to WorkStep and if the retention time is larger than NewUpInterval time, it is considered the equipment to go UP과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_COMPARE_PROFILE_EQP_DEF">
            <summary>
              Sorts the equipment in faster faster AvailableTime order 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_COMPARE_UP_STEP_PRIORITY_DEF">
            <summary>
              Sorts WorkStep in higher Priority value order 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_INITIALIZE_WORK_MANAGER_DEF">
            <summary>
              Creates Agent with the name received by calling GetLoadableEqps FEAction 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_INITIALIZE_WORK_STEP_DEF">
            <summary>
              Configures LoadableEqp of WorkStep by calling GetLoadableEqps FEAction 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_IS_NEED_DOWN_STEP_DEF">
            <summary>
              Searches for the WorkLot satisfying DownInterval, AllowedArrivalGap conditions from the Profile of WorkStep, and if entities  could not be input within DownInterval time, it is considered the corresponding Step needs to be Down.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_IS_NEED_UP_STEP_DEF">
            <summary>
              Searches for WorkLot not loaded to equipment and meeting the UpInterval, AllowedArrivalGap condition of WorkStep and determines whether the task can be maintained until UpInterval time과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SELECT_ASSIGN_EQP_DEF">
            <summary>
              Returns the equipment with the highest priority by calling CopareAssignEqp FEAction과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SELECT_DOWN_EQP_DEF">
            <summary>
              Returns the first equipment from LoadedEqps .과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SELECT_DOWN_EQP_T_DEF">
            <summary>
              Returns the first equipment from the equipment that is loaded .과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SELECT_PROFILE_EQP_DEF">
            <summary>
              Returns the equipment with the highest priority by calling CopareProfileEqp FEAction과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SELECT_UP_STEP_DEF">
            <summary>
              Sorts all the WorkSteps which could go UP and returns the WorkStep with the highest priority by calling CompareUpStep FEAction 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_JOBCHANGEAGENT_SORT_PROFILE_LOT_DEF">
            <summary>
              Sorts WorkLot in faster AvailableTime order과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_CHECK_MAXQTIME_END">
            <summary>
              Resets the MaxQtime of the entity. Calls SemiconLot.ResetMaxQTimeInfo()과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_CHECK_MAXQTIME_START">
            <summary>
              Configures the MaxQtime to SemiconLot.ActiveQConsts by calling GetMinQtimeConstraint FEAction. If Qtime is configured larger than SemiconConfiguration.ValidQTimeCriteria, the corresponding Qtime information is excluded.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_DO_RELEASE">
            <summary>
              Sets the ReleaseTime of entity as the current time.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_END_MINQTIME_HOLD">
            <summary>
              Initialize Min Qtime information by calling SemiconLot.ResetMinQTimeInfo().과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_FILTER_EQP_DEDICATION">
            <summary>
              Searches equipment information which belongs to Dedication and returns the equipment ID only. The entire list is returned if there is no matching result.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_FIX_LAST_TRACK_IN_TIME_DEF">
            <summary>
              Returns the WipInfo.LastTrackInTime of SemiconLot. If LastTrackTime is either the max/min value of DateTime or smaller than Simulation start time, it is corrected to the Simulation start time.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_GENERATE_STEP_TARGET">
            <summary>
              Creates StepTarget using TargetManager.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_GET_BUCKET_TIME_SEMI_DEF">
            <summary>
              Verifies the TAT information set in CurrentStep of the entity, and if TAT is set larger than 0, TAT is converted to seconds and used. Or else, TAT is set using StepTatMinutes of SeePlanConfiguration .과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_GET_EQP_MONITOR">
            <summary>
              Adds LoadingHistory Monitor.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_GET_LOADING_EQP">
            <summary>
              Returns EqpId using WipInfo.InitialEqp of SemiconLot.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_GET_WIPS_BATCH">
            <summary>
              Creates and adds Batch entity if WIP is in Run state and Wipinfo.InitialEqp is Batch Type equipment. If the entity is not Batch type, the entity is processed as single unit.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_INIT_DEDICATION_INFO">
            <summary>
              Configures Dedication information to ActiveDedicConsts of SemiconLot by calling GetInitialDedicInfo FEAction.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_INSTANCING_INPLAN">
            <summary>
              Calculates the release cycle in InPlan ( 24 / InPlan.InputQty / InPlan.BatchQty ) and release by splitting to InPlan.BatchQty.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_IS_MINQTIME_HOLD">
            <summary>
              Configures the MinQtime to SemiconLot.ActiveQConsts by calling GetMinQtimeConstraint FEAction. If Qtime constraint is larger than SemiconConfiguration.ValidQTimeCriteria, the corresponding Qtime is excluded.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_IS_SEND_BUCKETING">
            <summary>
              If the current status of entity is &quot;Send&quot; and destination Line is not part of Simulation, returns &quot;SendBucket&quot;. If the conditions are not met, string.Empty value is returned.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_MIN_QUEUE_HOLDTIME">
            <summary>
              Searches Max LimitTime from MIN Qtime information set in SemiconLot.ActiveQConsts and calculates the time {Max LimiTime - (CurrentTime-LastTrackOutTime)} required for Hold.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_NOARRANGE_HANDLER">
            <summary>
              Sends the entity to Bucketer if there is no equipment available for allocation and NoArrangeMove is enabled from SemiconConfiguration. If NoArrangeMove is not enabled, no further tasks are continued .과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_PROCESS_SKIP">
            <summary>
              Skips Step according to IsSKipStep result. The start/end time of the skipped Step is set to the current time.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_SET_DEDICATION_INFO">
            <summary>
              Configures Dedication information to ActiveDedicConsts of SemiconLot by calling GetDedicationConstraints FEAction.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_SET_NEXT_LOCATION">
            <summary>
              Searches for the equipment available for loading and moves the entities to the corresponding equipment. The Location information is set in SemiconLot.DestLocation.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_SF_ADD_DISPATCH_WIP_LOG">
            <summary>
              Adds logs as LotID/CurrentProductID/CurrentStepID/UnitQty/DueDate(yyyyMMddHHmmss&quot;)/WeightValue1/WeightValue2&quot;.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_SF_LOTBATCH_TYPE">
            <summary>
              Returns LotBatch Type.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_SEMIFAB_SF_SELECT_BATCH">
            <summary>
              Composes Set that could form as Batch, evaluates priority in Set unit and selects entities according to the priority .과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_TRANSFER_GET_TRASFER_TIME_DEF">
            <summary>
              Uses Default TransferTime configured through SeePlanConfiguration.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_PREDEF_TRANSFER_ON_DELIVERED_DEF">
            <summary>
              Move entities Out from Transfer.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_RULE_BUILD_INPLAN">
            <summary>
              Build InPlan from Target for input step과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_RULE_MANIPULATE_DEMAND">
            <summary>
              Manipulate demand과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_RULE_PREPARE_TARGET">
            <summary>
              Prepare stage target과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.DESC_RULE_PREPARE_WIP">
            <summary>
              Prepare target wip과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_ADDINITIAL_FAIL_ENTER">
            <summary>
              [E32001] Initial run wip &apos;{0}&apos; can not add processing wip, because equipment can&apos;t be entered과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_CAN_NOT_FIND_STAGETEMPLATE">
            <summary>
              [E20001] Fail to find stage stage template ({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_CURRENTPLAN_IS_NULL">
            <summary>
              [E31001] Currentplan of lot &apos;{0}&apos; is null but try to start or end task at {1}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_DUPLICATE_LOT_WIPMANAGER">
            <summary>
              [E30001] Wip is aleady added to WipManager, Check your wip initialize code.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_DUPLICATE_PEGGING_BLOCK">
            <summary>
              [E20002] Duplicated block name: {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_FACTOR_IS_NULL">
            <summary>
              [E33001] Factor argument is null, it must not be null check your code.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_INVALID_DISPATCHER_TYPE">
            <summary>
              [E30002] Dispatcher type key:&apos;{0}&apos; is not defined in library과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_INVALID_PEGGING_BLOCK_NAME">
            <summary>
              [E20003] Pegging block name ({0}) is invalid. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NO_REGISTERD_SETUPCREW_RESOURCES">
            <summary>
              [E34001] no registerd setup crew resources, check second resource registration code!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NO_REGISTERED_MONITORCONTROL">
            <summary>
              [E33002] MonitorControl is not registerd!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NO_REGISTERED_RESOURCEPOOL">
            <summary>
              [E34002] There is no registered second resource pool for setupcrew과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NO_REGISTERED_STAGETEMPLATE">
            <summary>
              [E20004] no registered stage template ({0}), check template name!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_DEFINED_PRESETID">
            <summary>
              [E30003] Preset ID of equipment({0}) is not defined과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_IMPLEMENTED_FEACTION">
            <summary>
              [E0001] FEAction:{0}  is not implemented or implemented wrong!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_REGISTERDWIP_WIPMANAGER">
            <summary>
              Try to delete unregistered wip ({0}) in wipmanager. Check your lot split/merge logic.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_REGISTERED_WEIGHTMETHODS">
            <summary>
              [E33003] There is no registered weight factor method. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_SET_CHAMBERIDS">
            <summary>
              [E32002] Chamber IDs argument is null, ParallelChamber type eqp({0}) needs chamber id infomation. Check Equipment/Misc/GetChamberIDs implementation과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NOT_SET_CURRENTSTEP">
            <summary>
              [E30004] Current step is not set for lot ({0}), check your process routing info or &apos;Route/CreateLoadInfo&apos; implementation과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NULL_ARGUMENT">
            <summary>
              [E40001] The argument (&apos;{0}&apos;) is null, it may be reason of invalid operation.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_NULL_WORKLOT">
            <summary>
              [E37001] Update Action returns Null WorkLot과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_TOOL_ITEM_COUNT_MISMATCH">
            <summary>
              [E34003] Item count({0}) of argument &apos;tool&apos; mismatch ItemCount({1})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_TRANSFER_NOT_FOUND_DESTINATION">
            <summary>
              [E35001] {0} : Not found destination for ({1}) {2}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.ERROR_TRY_MOVENEXT_ON_CURRENTSTEP_NOT_END">
            <summary>
              [E31002] Lot &apos;{0}&apos; is trying to movenext in the state of not ended current step &apos;{1}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ALEADY_SEIZED">
            <summary>
              Second Reource ({0}) is aleady seized by other(s)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_CANNOT_BE_FOUND">
            <summary>
              The element cannot be found.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_DOES_NOT_SPECIFY_HOUR">
            <summary>
              startTime does not specify an hour과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_IS_NOT_DYNAMIC_OBJECT">
            <summary>
              Component is not of the DynamicObject type과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_IS_NOT_OBJECT_ARRAY">
            <summary>
              The array is not object array type.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_MISMATCH_GENERIC_TYPE">
            <summary>
              The value \&quot;{0}\&quot; isn&apos;t of type \&quot;{1}\&quot; and can&apos;t be used in this generic collection.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_NULL">
            <summary>
              {0}: Invalid parameter {1} passed to method: null과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_RANGE">
            <summary>
              Value of argument ({0}) must greater than 0 and less then count of InnerList.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_VIOLATE_MAX_SIZE">
            <summary>
              Value of argument ({0}) is too big. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_VIOLATE_MIN_SIZE">
            <summary>
              Value of argument ({0}) must be greater then {1}. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARG_WRONG_INDEX">
            <summary>
              wrong index in remove과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ARRAY_ARG_NO_CONTENTS">
            <summary>
              The length of argument ({0}) must be greater than 0. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_AT_RUNFAST">
            <summary>
              Exception occur at RunFast과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_AT_START">
            <summary>
              Exception occur at Start과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_CANNOT_CAST_TO_ENTITY">
            <summary>
              NewType paramter should be message class derived from Entity. \nPleases pecify Entity in parameter &apos;Base class&apos; for your message class.\nDetailed error: {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_CANNOT_CREATE_INSTANCE">
            <summary>
              Can not create new instance of &apos;{0}&apos;. \nCheck constructor code. \n Detailed error : {1}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_CANNOT_MODIFY_CFG">
            <summary>
              Can not modifiy StatSheetCfg과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_CHILD_ALEADY_HAS_PARENT">
            <summary>
              Can&apos;t add child active-object, parent already assigned, remove first과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_COLLECTION_WAS_MODIFIED">
            <summary>
              The collection was modified.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_COLUMN_DUPLICATED">
            <summary>
              Column ({0}) is already exists.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_COLUMN_SHOULD_BE_BOUNDED">
            <summary>
              Column ({0)} should be bounded과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_COULD_NOT_COMPILE">
            <summary>
              Could not compile: {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DBNULL_TYPE_CAST">
            <summary>
              Cannot cast DBNull.Value to type &apos;{0}&apos;. Please use a nullable type.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DISPATCHINPORT_CAN_CONNECT_ONE_OBJECT">
            <summary>
              DispatchInPort can only be connected to one Dispatch object과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DISPATCHINPORT_CAN_CONNECT_ONLY_DISPATCHOUTPORT">
            <summary>
              DispatchInPort can only be connected to another DispatchOutPort과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DISPATCHOUTPORT_CAN_CONNECT_ONLY_DISPATCHINPORT">
            <summary>
              DispatchOutPort can only be connected to another DispatchInPort과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DISPATCHOUTPORT_CAN_RECEIVE_REGMSG">
            <summary>
              DispatchOutPort can only be received RegistrationMessage과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_DUPLICATE_BLOCK_NAME">
            <summary>
              duplicated block name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ENDTIME_NOT_SPECIFY_AN_HOUR">
            <summary>
              endTime does not specify an hour과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ENTITY_ALEADY_IN_QUEUE">
            <summary>
              entity &apos;{0}&apos; of step &apos;{1}&apos; is aleady in queue at {2}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ENUMERATION_FINISHED">
            <summary>
              The enumeration has finished.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ENUMERATION_NOT_STARTED">
            <summary>
              The enumeration has not started.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_FLOW_IS_NOT_SPECIFIED">
            <summary>
              Flow name is now specified.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_HAS_ALREADY_NEXT_BLOCK">
            <summary>
              {0} block already has next block.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_ARG">
            <summary>
              Argument({0}) must be grater than agrument ({1})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_ARG_ARRAY_ORDER">
            <summary>
              Argument &apos;times&apos; array items has time conflict (next item&apos;s StartTime &lt; prev item&apos;s EndTime)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_AVAILABLE_TIME">
            <summary>
              JobChangeControl.Advance returns WorkLot with invalid available time과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_BASE_CAL_ARG">
            <summary>
              specified base calendar is not a base calendar과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_BASE_CAL_SAME">
            <summary>
              The base calendar cannot be this calendar과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_ENTITY_STATE">
            <summary>
              Invalid Entity State &apos;{0}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_EQUIPMENT_TYPE">
            <summary>
              Equipment type is not configured과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_PRESET_SETTING">
            <summary>
              There is no registered weight factor for preset (&apos;{0}&apos;)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_PROCESSTIME">
            <summary>
              Processing Time must be greater than 0. Resource id is {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_STAGE_BLOCK">
            <summary>
              selected block is not stage block: {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_STATE_TRANSITION">
            <summary>
              Invalid state-transition for current state &apos;{0}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_TIMEOUT_EVENT">
            <summary>
              Invaild timeout event(negative timeout) : Equipment ({0}), lotid ({1}), step ({2}), eventtime ({3})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_TRANSITION">
            <summary>
              Part to Part direct transition is invalid 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_TRY_TO_CHANGE">
            <summary>
              Changing this calendar is not allowed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_INVALID_UTILIZATION">
            <summary>
              Utilization Value must be greater than 0. Resource id is {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_MODEL_IS_EMPTY">
            <summary>
              Pegger Model is empty.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NO_REGISTERED_DISPATCHINGAGENT">
            <summary>
              There is no registed dispatching-agent과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NON_POSITIVE_ARG">
            <summary>
              Cannot take the log of a non-positive number: 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_CALL_STARTTASK">
            <summary>
              Lot &apos;{0}&apos; of step &apos;{1}&apos; is not started in equipment &apos;{2}&apos;, but try to end task at &apos;{3}&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_FOUND_DISPATCHINGAGENT">
            <summary>
              DispatchingAgent is not found, check &apos;Route/GetDispatchingKey&apos; implementation. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_REGISTERED_PEGGING_RULE">
            <summary>
              There is no registered pegging rule.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_RUNNING">
            <summary>
              Model is not running.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_SUPPORTED_TYPE">
            <summary>
              Type ({0}) is not supported type for this operator과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_NOT_UNBOUND_COLUMN">
            <summary>
              Columns ({0}) is not unbounded.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_QUEUE_COUNT_IS_NOT_ZERO">
            <summary>
              Queue is empty, but Count is not zero! 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_QUEUE_COUNT_IS_NOT_ZERO2">
            <summary>
              Queue is empty, but Count is not zero! Count is :{0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_REMOVE_TARGET_IS_NOT_CONTAINS">
            <summary>
              Can&apos;t remove child active-object, not contains과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ROUTERINPORT_CAN_CONNECT_ONE_OBJECT">
            <summary>
              RouterInPort can only be connected to one Router object과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ROUTERINPORT_ONLY_CAN_CONNECT_ROUTEROUTPORT">
            <summary>
              RouterInPort can only be connected to another RouterOutPort과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ROUTEROUTPORT_ONLY_CAN_CONNECT_ROUTERINPORT">
            <summary>
              RouterOutPort can only be connected to another RouterInPort과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_ROUTEROUTPORT_ONLY_CAN_RECEIVE_REGMSG">
            <summary>
              RouterOutPort can only be received RegistrationMessage과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_SORT_PROFILE_STEP_IS_EMPTY">
            <summary>
              the result of SortProfileStep is empty.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_STAGE_IS_NOT_REGISTERD">
            <summary>
              invalid stageTemplate: {0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_STARTTIME_CANNOT_BE_OVER_ENDTIME">
            <summary>
              startTime cannot be bigger or equal to endTime과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_STARTTIME_NOT_SPECIFY_AN_HOUR">
            <summary>
              startTime does not specify an hour과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.EXCEPTION_TIMESPAN_MUST_BE_POSITIVE">
            <summary>
              duration must not be negative과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_AREA_PEGGING">
            <summary>
              Start area ({0}) pegging과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_FLOW_PEGGING">
            <summary>
              Execute flow ({0}) pegging과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_MAINFLOW">
            <summary>
              Execute main flow과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_NEXT_MODEL">
            <summary>
              Execute next pegger model과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_POSTFLOW">
            <summary>
              Execute post flow과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_EXECUTE_PREFLOW">
            <summary>
              Execute pre flow과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_FAIL_HAVE_ENTITY">
            <summary>
              AoDispatchQ.HaveEntity Fail과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_FINISH_AREA_PEGGING">
            <summary>
              Finish area ({0}) pegging과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_RULE_BUILD_INPLAN">
            <summary>
              BUILD_INPLAN과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_RULE_MANIPULATE_DEMAND">
            <summary>
              MANIPULATE_DEMAND과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_RULE_PREPARE_TARGET">
            <summary>
              PREPARE_TARGET과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_RULE_PREPARE_WIP">
            <summary>
              PREPARE_WIP과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_START_PEGGING">
            <summary>
              Start pegging for model ({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.STR_STOP_PEGGING_NO_TARGET">
            <summary>
              Stop executing model ({0}) because no-target과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_APPLY_DEFAULT_DISPATCHER">
            <summary>
              [W30001] Equipment:{0} is set default dispatcher type &apos;Fifo&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_BOP_NO_FIRST_STEP">
            <summary>
              [W31001] {0} : First step is NULL과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_CAN_NOT_FIND_CAPACITYBUCKET">
            <summary>
              [W36001] Capacity bucket for key () is not provided. automatically substitute dummy bucket. Check your implementation for &apos;BucketControl/GetCapacityBucket&apos;과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_CAN_NOT_FIND_DA">
            <summary>
              [W31002] Can&apos;t find dispatching agent  for lot ({0}) on step ({1})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_EQPDATA_EMPTY">
            <summary>
              [W30002] EQP table is invalid. check!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_IMPLEMENTATION">
            <summary>
              [W40001] {0} is invalid implementation. Check it.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_INITIAL_EQP">
            <summary>
              [W30003] Initial run eqp ({0}) of lot ({1}) is invalid. running wip is processed to dummy bucket. check input data!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_INNERROLLINGHOUR">
            <summary>
              [W36002] Bucket InnerRollingMinutes shoud not be zero, automatically set bucet inner rolling hour to 1 hour. Check Factory/BucketInit.InnerRollingMinutes property setting!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_RELEASETIME">
            <summary>
              [W30004] Release time for new release lot is invalid or not set. Ignore release plan for lot ({0}), release time = {1}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_ROLLINGHOUR">
            <summary>
              [W36003] Bucket RollingHour shoud not be zero, automatically set bucket rolling to 8 hours. Check Factory/BucketInit.RollingHour property setting!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_INVALID_SIMTYPE">
            <summary>
              [W30005] SimType({0}) is invalid. Check your equipment input data!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_EXECUTABLE_PEGGERMODEL">
            <summary>
              no executable pegger model, terminate pegging run과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_GETBUCKETTIME">
            <summary>
              [W36004] BucketControl/GetBucketTime is not implemented, default bucket time is zero. Check implementation!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_GETLASTPEGGINGSTEP">
            <summary>
              [W21001] ModelRun/GetLastPeggingStep is not implemented, return null !과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_GETLASTTOOLSETTINGS">
            <summary>
              [W34001] SecondResource/ToolControl/GetLastToolSettings is not implemented. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_GETPROCESSTIME">
            <summary>
              [W32001] Equipment/ProcessControl/GetProcessTime is not implemented. default process time is 0. Check implementation!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_GETTRANSFERTIME">
            <summary>
              [W35001] TransferControl/GetTransferTime is not implemented. apply default transfer time : 1 minute. !과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_IMPLE_NODESTINATION">
            <summary>
              [W33001] Dispatching/QueueControl/OnNotFoundDestination is not implemented. Check implemantation!과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_PEGGING_TARGET">
            <summary>
              no pegging target data, terminate pegging run과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_REGISTERED_WEIGHTMETHOD">
            <summary>
              [W39001] There is no registered weight method, check FactoryInit/GetWeigtPresets action and factor method implementations !과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NO_WIP_FOR_INITIALIZE">
            <summary>
              [W30006] There is no wip for initialization, check you &apos;WipInit/GetWips&apos; implementation or input data과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_NOT_FOUND_EQUIPMENT">
            <summary>
              [W40002] Equipment (&apos;{0}&apos;) is not found in factory. 과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_PEGGING_OVER_FLOW">
            <summary>
              too many pegging execution, terminate pegging run과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:Mozart.SeePlan.Strings.WARN_SKIP_PEGPART_NO_LAST_STEP">
            <summary>
              [W21002] No last pegging step. Skip pegpart for product ({0}).과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.TimeUnit">
            <summary>
            Defines units of time. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Century">
            <summary>
            100 year
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Decade">
            <summary>
            10 year
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Year">
            <summary>
            1 year
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.HalfYear">
            <summary>
            6 month
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Quarter">
            <summary>
            3 month
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Month">
            <summary>
            1 month
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Week">
            <summary>
            week
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Day">
            <summary>
            day
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.HalfDay">
            <summary>
            12 hours
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Hour">
            <summary>
            hour
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Minute">
            <summary>
            miniute
            </summary> 
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Second">
            <summary>
            second
            </summary> 
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.Millisecond">
            <summary>
            millisecond
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUnit.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mozart.SeePlan.TimeUtility">
            <summary xml:lang="ko-kr">
            시간 형식 데이터에 대한 활용함수 클래스입니다.
            </summary>
            <summary>
            The data class of time type data function. 
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.MillisPerDay">
            <summary xml:lang="ko-kr">
            하루의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Day converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.MillisPerHour">
            <summary xml:lang="ko-kr">
            한 시간의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Hour converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.MillisPerMinute">
            <summary xml:lang="ko-kr">
            1분의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Minute converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.MillisPerSecond">
            <summary xml:lang="ko-kr">
            1초의 천분의 1초 환산값입니다.
            </summary>
            <summary>
            Second converted to milliseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.TicksPerDay">
            <summary xml:lang="ko-kr">
            하루의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Day converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.TicksPerHour">
            <summary xml:lang="ko-kr">
            한시간의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Hour converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.TicksPerMinute">
            <summary xml:lang="ko-kr">
            1분의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Minute converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.TicksPerSecond">
            <summary xml:lang="ko-kr">
            1초의 천만분의 1초 환산값입니다.
            </summary>
            <summary>
            Second converted to 10 microseconds.
            </summary>
        </member>
        <member name="F:Mozart.SeePlan.TimeUtility.TicksPerMillisecond">
            <summary xml:lang="ko-kr">
            천분의 1초를 천만분의 1초로 환산한 값입니다.
            </summary>
            <summary>
            Microsecond converted to 10 microseconds.
            </summary>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.AddTime(System.DateTime,System.Int64)">
            <summary xml:lang="ko-kr">
            입력된 시간에 천만분의 1초 단위의 시간을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time" >대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="ticks">더해지는 시간입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add 10 microsecond time unit to input time.
            </summary>
            <param name="time">Target time.</param>
            <param name="ticks">Time to be added</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.AddTime(System.DateTime,Mozart.SeePlan.TimeUnit,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 설정된 단위의 시간을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">시간 단위입니다.</param>
            <param xml:lang="ko-kr" name="count">더해지는 시간입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add configured time unit to input time..
            </summary>
            <param name="time">Target time.</param>
            <param name="unit">Time unit.</param>
            <param name="count">Time to be added.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.AddTime(System.DateTime,System.TimeSpan,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 시간간격을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unitDuration">더해지는 시간간격입니다.</param>
            <param xml:lang="ko-kr" name="count">unitDuration 의 배율입니다.
            양수인경우 대상시간에 unitDuration*배율의 시간을 더합니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add time interval to input time. 
            </summary>
            <param name="time">Target time.</param>
            <param name="unitDuration">Time interval to be added.</param>
            <param name="count">Scale factor of unitDuration.
            If it is positive number add unitDuration*scale factor to target time.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.AddTime(System.DateTime,System.Globalization.Calendar,Mozart.SeePlan.TimeUnit,System.Int32)">
            <summary xml:lang="ko-kr">
            입력된 시간에 시간간격을 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="time">대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="calendar">Calender 타입의 Base 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">시간단위입니다.</param>
            <param xml:lang="ko-kr" name="count">더하는 값입니다.</param>
            <returns xml:lang="ko-kr">시간을 더한 결과값을 반환합니다.</returns>
            <summary>
            Add time interval to input time.
            </summary>
            <param name="time">Target time.</param>
            <param name="calendar">Base time of Calender type.</param>
            <param name="unit">Time unit.</param>
            <param name="count">Value to be added.</param>
            <returns>Return added time.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.GetTicksPerUnit(Mozart.SeePlan.TimeUnit)">
            <summary xml:lang="ko-kr">
            시간단위를 천만분의 1초 기준의 단위로 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="unit">시간단위 유형입니다.</param>
            <returns xml:lang="ko-kr">천만분의 1초 단위 환산시간을 반환합니다.</returns>
            <summary>
            Return time unit to 10 microseconds. 
            </summary>
            <param name="unit">Type of time unit.</param>
            <returns>Return time converted to 10 microseconds.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.GetTimeUnit(System.Int64)">
            <summary xml:lang="ko-kr">
            입력된 천만분의 1단위 시간을 TimeUnit 유형으로 반환합니다. 
            </summary>
            <param xml:lang="ko-kr" name="ticks">입력된 시간입니다.</param>
            <returns xml:lang="ko-kr">결과 시간 단위를 반환합니다.</returns>
            <summary>
            Return input 10 microseconds unit to TimeUnit type
            </summary>
            <param name="ticks">Input time</param>
            <returns>Return time unit result</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.GetTimeUnit(System.TimeSpan)">
            <summary xml:lang="ko-kr">
            입력된 시간간격에 대한 TimeUnit 을 반환합니다. 
            </summary>
            <param xml:lang="ko-kr" name="duration">입력된 시간간격입니다.</param>
            <returns xml:lang="ko-kr">결과 시간 단위를 반환합니다.</returns>
            <summary>
            Return TimeUnit of the input time interval.
            </summary>
            <param name="duration">Input time interval</param>
            <returns>Return time unit result.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.Max(System.DateTime,System.DateTime)">
            <summary xml:lang="ko-kr">
            입력된 시간중 더 큰값을 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="t1">비교대상 시간 1입니다. </param>
            <param xml:lang="ko-kr" name="t2">비교대상 시간 2입니다.</param>
            <returns xml:lang="ko-kr">두값중 더 큰값을 반환합니다.</returns>
            <summary>
            Compare two input time and return larger value.
            </summary>
            <param name="t1">Target time 1 for comparison.</param>
            <param name="t2">Target time 2 for comparison.</param>
            <returns>Return larger value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.Min(System.DateTime,System.DateTime)">
            <summary xml:lang="ko-kr">
            입력된 시간중 더 작은값을 반환합니다.
            </summary>
            <param xml:lang="ko-kr" name="t1">비교대상 시간 1입니다. </param>
            <param xml:lang="ko-kr" name="t2">비교대상 시간 2입니다.</param>
            <returns xml:lang="ko-kr">두 값중 더 작은값을 반환합니다.</returns>
            <summary>
            Compare two input time and return smaller value. 
            </summary>
            <param name="t1">Target time 1 for comparison.</param>
            <param name="t2">Target time 2 for comparison.</param>
            <returns>Return smaller value.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.TrimTime(System.DateTime,System.DateTime,System.Int64)">
            <summary xml:lang="ko-kr">
            reference시각을 duration간격으로 대상 시간까지 더합니다. 
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 반환합니다.</returns>
            <summary>
            Add duration interval to reference time until target time. 
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="duration"></param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time. 
            </remarks>
            <returns>Return time value result.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.TrimTime(System.DateTime,System.DateTime,System.TimeSpan,System.Int32)">
            <summary xml:lang="ko-kr">
            reference시각을 unitDuration * steps간격으로 대상 시간까지 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unitDuration">tick단위로 더해지는 시간입니다.</param>
            /// <param name="steps">더해지는 steps 수 입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 반환합니다.</returns>
            <summary>
            Add unitDuration*steps interval to reference time until target time. 
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="unitDuration">Time added in tick unit.</param>
            <param name="steps">Number of steps count to be added.</param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time.
            </remarks>
            <returns>Return time value result.</returns>
        </member>
        <member name="M:Mozart.SeePlan.TimeUtility.TrimTime(System.DateTime,System.DateTime,Mozart.SeePlan.TimeUnit,System.Int32,System.Globalization.DateTimeFormatInfo)">
            <summary xml:lang="ko-kr">
            reference시각을 unitDuration * steps간격으로 대상 시간까지 더합니다.
            </summary>
            <param xml:lang="ko-kr" name="reference">시간이 더해지는 reference 시간입니다.</param>
            <param xml:lang="ko-kr" name="time">목표 대상 시간입니다.</param>
            <param xml:lang="ko-kr" name="unit">tick단위로 더해지는 시간입니다.</param>
            <param xml:lang="ko-kr" name="steps">더해지는 steps 수 입니다.</param>
            <param xml:lang="ko-kr" name="dateFormat">반환하는 결과 시간 포맷입니다.</param>
            <remarks xml:lang="ko-kr">
            duration이 0이하인 경우, ArgumentOutOfRangeException 예외를 호출합니다.
            목표 대상 시간인 time 값 이상 더해지지 않습니다.
            </remarks>
            <returns xml:lang="ko-kr">결과 시간 값을 dateFormat 형식으로 반환합니다.</returns>
            <summary>
            Add unitDuration*steps interval to reference time until target time.
            </summary>
            <param name="reference">Reference time to be added by.</param>
            <param name="time">Target time.</param>
            <param name="unit">Time added in tick unit.</param>
            <param name="steps">Number of steps count to be added.</param>
            <param name="dateFormat">Format of the returned time.</param>
            <remarks>
            Call ArgumentOutofRangeException(exception handler) when duration is lower than 0.
            The time won't be added more than target time.
            </remarks>
            <returns>Return time value result as dateFormat type.</returns>
        </member>
    </members>
</doc>
