/*------------------------------------------------------------------------------------------------------------------------------------------------------------
 <auto-generated>
     This code was generated by a mozart.

     Changes to this file may cause incorrect behavior and will be lost if
     the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using Mozart.SeePlan.General.Pegging;
using System.ComponentModel;
using Mozart.SeePlan.DataModel;
using Mozart.SeePlan.General.DataModel;
using Mozart.SeePlan.General.Simulation;
using Mozart.SeePlan.Simulation;

namespace SmartAPS.DataModel
{
    
    [System.SerializableAttribute()]
    public partial class SmartAPSMoMaster : Mozart.SeePlan.General.Pegging.GeneralMoMaster, IEntityObject, IEditableObject
    {
        public SmartAPSMoMaster()
        {
        }
        public SmartAPSMoMaster(Mozart.SeePlan.General.DataModel.Product prod, string customer) : 
                base(prod, customer)
        {
        }
        public virtual string DemandID { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSMoPlan : Mozart.SeePlan.General.Pegging.GeneralMoPlan, IEntityObject, IEditableObject
    {
        public SmartAPSMoPlan()
        {
        }
        public SmartAPSMoPlan(Mozart.SeePlan.General.Pegging.GeneralMoMaster mm, float qty, System.DateTime dueDate) : 
                base(mm, qty, dueDate)
        {
        }
        public virtual string CustomerID { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPegPart : Mozart.SeePlan.General.Pegging.GeneralPegPart, IEntityObject, IEditableObject
    {
        public SmartAPSPegPart()
        {
        }
        public SmartAPSPegPart(Mozart.SeePlan.General.Pegging.GeneralMoMaster moMaster, Mozart.SeePlan.General.DataModel.Product product) : 
                base(moMaster, product)
        {
        }
        public virtual string DemandID { get; set; }

        private bool _IsPartStepChanged = false;
        public virtual bool IsPartStepChanged
        {
            get
            {
                return this._IsPartStepChanged;
            }
            set
            {
                _IsPartStepChanged = value;
            }
        }
        public virtual string ToProductId { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPegTarget : Mozart.SeePlan.General.Pegging.GeneralPegTarget, IEntityObject, IEditableObject
    {
        public SmartAPSPegTarget(Mozart.SeePlan.General.Pegging.GeneralPegPart pp, Mozart.SeePlan.General.Pegging.GeneralMoPlan mp) : 
                base(pp, mp)
        {
        }
        public SmartAPSPegTarget()
        {
        }
        public virtual string DemandID { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPlanWip : Mozart.SeePlan.General.Pegging.PlanWip, IEntityObject, IEditableObject
    {
        public SmartAPSPlanWip()
        {
        }
        public SmartAPSPlanWip(Mozart.SeePlan.General.DataModel.IWipInfo wip) : 
                base(wip)
        {
        }
        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSStepTarget : Mozart.SeePlan.DataModel.StepTarget, IEntityObject, IEditableObject
    {
        public SmartAPSStepTarget(object key, Mozart.SeePlan.DataModel.Step step, double qty, System.DateTime dueDate, bool isRun) : 
                base(key, step, qty, dueDate, isRun)
        {
        }
        public virtual SmartAPS.DataModel.SmartAPSMoPlan MoPlan { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSStep : Mozart.SeePlan.General.DataModel.GeneralStep, IEntityObject, IEditableObject
    {
        public SmartAPSStep()
        {
        }
        public SmartAPSStep(string id) : 
                base(id)
        {
        }
        public virtual SmartAPS.DataModel.SmartAPSStdStep StdStep { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSWipInfo : EntityObject, Mozart.SeePlan.General.DataModel.IWipInfo
    {
        public virtual string LotID { get; set; }

        public virtual double UnitQty { get; set; }

        public virtual Mozart.SeePlan.General.DataModel.Product Product { get; set; }

        public virtual Mozart.SeePlan.General.DataModel.Process Process { get; set; }

        public virtual Mozart.SeePlan.General.DataModel.GeneralStep InitialStep { get; set; }

        public virtual Mozart.SeePlan.General.DataModel.Eqp InitialEqp { get; set; }

        public virtual Mozart.SeePlan.Simulation.EntityState CurrentState { get; set; }

        public virtual string WipProductID { get; set; }

        public virtual string WipProcessID { get; set; }

        public virtual string WipStepID { get; set; }

        public virtual string WipEqpID { get; set; }

        public virtual string WipState { get; set; }

        public virtual DateTime WipStateTime { get; set; }

        public virtual DateTime LastTrackInTime { get; set; }

        public virtual DateTime LastProcessStartTime { get; set; }

        public virtual DateTime LastTrackOutTime { get; set; }

        public virtual string LineID { get; set; }

        public virtual DateTime LineInTime { get; set; }

        public virtual DateTime StepArrivalTime { get; set; }

        public virtual double OutQty { get; set; }

        public virtual string DemandID { get; set; }

        private Dictionary<string, SmartAPS.DataModel.SmartAPSFirmPlan> _FirmPlans =  new Dictionary<string,SmartAPS.DataModel.SmartAPSFirmPlan>();
        public virtual Dictionary<string, SmartAPS.DataModel.SmartAPSFirmPlan> FirmPlans
        {
            get
            {
                return this._FirmPlans;
            }
            set
            {
                _FirmPlans = value;
            }
        }
        public virtual string KitID { get; set; }

        public virtual DateTime PrepEffEndTime { get; set; }

        private bool _SplitCheck = false;
        public virtual bool SplitCheck
        {
            get
            {
                return this._SplitCheck;
            }
            set
            {
                _SplitCheck = value;
            }
        }
        public virtual SmartAPSWipInfo ParentsLot { get; set; }

        public SmartAPSWipInfo ShallowCopy()
        {
			var x = (SmartAPSWipInfo) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSProcess : Mozart.SeePlan.General.DataModel.Process, IEntityObject, IEditableObject
    {
        public SmartAPSProcess()
        {
        }
        public SmartAPSProcess(string processID) : 
                base(processID)
        {
        }
        public virtual StepType StepType { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSProduct : Mozart.SeePlan.General.DataModel.Product, IEntityObject, IEditableObject
    {
        public SmartAPSProduct()
        {
        }
        public SmartAPSProduct(string prodCode, Mozart.SeePlan.General.DataModel.Process proc) : 
                base(prodCode, proc)
        {
        }
        public virtual int LotSize { get; set; }

        public virtual int InputBatchSize { get; set; }

        public virtual ProductType ProductType { get; set; }

        [Column(Name="PRODUCT_NAME")]
        public virtual string ProductName { get; set; }

        public virtual Dictionary<string,object> Property { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSStdStep : EntityObject
    {
        public virtual string StdStepID { get; set; }

        public virtual string StepName { get; set; }

        public virtual double StepTAT { get; set; }

        public virtual double StepYield { get; set; }

        public virtual double StepSetup { get; set; }

        public virtual double Capacity { get; set; }

        public virtual double TransferTime { get; set; }

        public virtual double StepSeq { get; set; }

        public SmartAPSStdStep ShallowCopy()
        {
			var x = (SmartAPSStdStep) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPMList : EntityObject
    {
        public virtual string LineID { get; set; }

        public virtual DateTime PM_Start_Time { get; set; }

        public virtual DateTime PM_End_Time { get; set; }

        public virtual TimeSpan PM_Run_Time { get; set; }

        public SmartAPSPMList ShallowCopy()
        {
			var x = (SmartAPSPMList) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSProductRoute : EntityObject
    {
        public virtual string FromProductId { get; set; }

        public virtual string StepId { get; set; }

        public virtual string ToProductId { get; set; }

        public virtual string MoDemandId { get; set; }

        public virtual string MoProductId { get; set; }

        public SmartAPSProductRoute ShallowCopy()
        {
			var x = (SmartAPSProductRoute) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSMat : EntityObject
    {
        public virtual string Key { get; set; }

        public virtual string MatID { get; set; }

        public virtual string MatType { get; set; }

        public virtual string Supplier { get; set; }

        public virtual string MatDiv { get; set; }

        public SmartAPSMat ShallowCopy()
        {
			var x = (SmartAPSMat) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSLotBatch : Mozart.SeePlan.General.Simulation.LotBatch, IEntityObject, IEditableObject
    {
        public SmartAPSLotBatch()
        {
        }
        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSLot : Mozart.SeePlan.General.Simulation.Lot, IEntityObject, IEditableObject
    {
        public SmartAPSLot()
        {
        }
        public SmartAPSLot(Mozart.SeePlan.General.DataModel.IWipInfo wip) : 
                base(wip)
        {
        }
        public SmartAPSLot(string lotID, Mozart.SeePlan.General.DataModel.Product prod, string lineID) : 
                base(lotID, prod, lineID)
        {
        }
        private string _MergeKey = string.Empty;
        public virtual string MergeKey
        {
            get
            {
                return this._MergeKey;
            }
            set
            {
                _MergeKey = value;
            }
        }
        private System.DateTime _MergeInTime = SimHelper.MinDateTime;
        public virtual System.DateTime MergeInTime
        {
            get
            {
                return this._MergeInTime;
            }
            set
            {
                _MergeInTime = value;
            }
        }
        private int _MergeCnt = 0;
        public virtual int MergeCnt
        {
            get
            {
                return this._MergeCnt;
            }
            set
            {
                _MergeCnt = value;
            }
        }
        private int _OrgQty = 0;
        public virtual int OrgQty
        {
            get
            {
                return this._OrgQty;
            }
            set
            {
                _OrgQty = value;
            }
        }
        private bool _IsFirmPlanSplit = false;
        public virtual bool IsFirmPlanSplit
        {
            get
            {
                return this._IsFirmPlanSplit;
            }
            set
            {
                _IsFirmPlanSplit = value;
            }
        }
        public virtual SmartAPS.DataModel.SmartAPSLot ParentLot { get; set; }

        private List<SmartAPS.DataModel.SmartAPSLot> _ChildLots =  new List<SmartAPS.DataModel.SmartAPSLot>();
        public virtual List<SmartAPS.DataModel.SmartAPSLot> ChildLots
        {
            get
            {
                return this._ChildLots;
            }
            set
            {
                _ChildLots = value;
            }
        }
        public virtual SmartAPS.DataModel.SmartAPSFirmPlan FirmPlan { get; set; }

        private bool _IsCarryOverSplit = false;
        public virtual bool IsCarryOverSplit
        {
            get
            {
                return this._IsCarryOverSplit;
            }
            set
            {
                _IsCarryOverSplit = value;
            }
        }
        private System.DateTime _PrepEffEndTime = SimHelper.MinDateTime;
        public virtual System.DateTime PrepEffEndTime
        {
            get
            {
                return this._PrepEffEndTime;
            }
            set
            {
                _PrepEffEndTime = value;
            }
        }
        // Input 정보로 부터 구한 proc time
        public virtual double InputProcTime { get; set; }

        // Input 정보로 부터 구한 tact time
        public virtual double InputTactTime { get; set; }

        // 생산능력
        public virtual double Utilization { get; set; }

        // 적용효율
        public virtual double Efficiency { get; set; }

        // 생산능력, 적용효율이 반영된 proc time. InputProcTime*(100/Utilization)*(100/Efficiency) 
        public virtual double ApplyProcTime { get; set; }

        // 생산능력, 적용효율이 반영된 tact time. InputTactTime*(100/Utilization)*(100/Efficiency) 
        public virtual double ApplyTactTime { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPlanInfo : Mozart.SeePlan.General.DataModel.PlanInfo, IEntityObject, IEditableObject
    {
        public SmartAPSPlanInfo(Mozart.SeePlan.General.DataModel.GeneralStep task) : 
                base(task)
        {
        }
        public SmartAPSPlanInfo()
        {
        }
        public virtual SmartAPS.DataModel.SmartAPSLot Lot { get; set; }

        private List<IMatBom> _MatBom =  new List<SmartAPS.DataModel.IMatBom>();
        public virtual List<IMatBom> MatBom
        {
            get
            {
                return this._MatBom;
            }
            set
            {
                _MatBom = value;
            }
        }
        public virtual string Supplier { get; set; }

        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSFirmPlan
    {
        public virtual string LotID { get; set; }

        public virtual string StepID { get; set; }

        public virtual string EqpID { get; set; }

        public virtual DateTime StartTime { get; set; }

        public virtual DateTime EndTime { get; set; }

        private FirmType _FirmType = FirmType.NORMAL;
        public virtual FirmType FirmType
        {
            get
            {
                return this._FirmType;
            }
            set
            {
                _FirmType = value;
            }
        }
        public virtual string Key { get; set; }

        private List<IHandlingBatch> _SplitLots =  new List<Mozart.SeePlan.Simulation.IHandlingBatch>();
        public virtual List<IHandlingBatch> SplitLots
        {
            get
            {
                return this._SplitLots;
            }
            set
            {
                _SplitLots = value;
            }
        }
        public SmartAPSFirmPlan ShallowCopy()
        {
			var x = (SmartAPSFirmPlan) this.MemberwiseClone();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSInTarget : EntityObject
    {
        public virtual SmartAPS.DataModel.SmartAPSProduct Product { get; set; }

        public virtual DateTime TargetDate { get; set; }

        public virtual int TargetQty { get; set; }

        public virtual string DemandID { get; set; }

        public virtual string MoProductID { get; set; }

        public SmartAPSInTarget ShallowCopy()
        {
			var x = (SmartAPSInTarget) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSOutAct : EntityObject
    {
        public virtual SmartAPS.DataModel.SmartAPSProduct Product { get; set; }

        private double _InQty = 0;
        public virtual double InQty
        {
            get
            {
                return this._InQty;
            }
            set
            {
                _InQty = value;
            }
        }
        private System.DateTime _InDate = SimHelper.MinDateTime;
        public virtual System.DateTime InDate
        {
            get
            {
                return this._InDate;
            }
            set
            {
                _InDate = value;
            }
        }
        public SmartAPSOutAct ShallowCopy()
        {
			var x = (SmartAPSOutAct) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSPsi : EntityObject
    {
        public virtual string customerId { get; set; }

        public virtual string productId { get; set; }

        public virtual string productName { get; set; }

        public virtual string item { get; set; }

        public virtual double qty { get; set; }

        public virtual string date { get; set; }

        public SmartAPSPsi ShallowCopy()
        {
			var x = (SmartAPSPsi) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSTool : EntityObject, Mozart.SeePlan.Simulation.IToolData
    {
        public virtual List<string> Tools { get; set; }

        public SmartAPSTool ShallowCopy()
        {
			var x = (SmartAPSTool) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSWeightPreset : Mozart.SeePlan.DataModel.WeightPreset, IEntityObject, IEditableObject
    {
        public SmartAPSWeightPreset(string name) : 
                base(name)
        {
        }
        public SmartAPSWeightPreset()
        {
        }
        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSEqp : Mozart.SeePlan.General.DataModel.Eqp, IEntityObject, IEditableObject
    {
        public SmartAPSEqp()
        {
        }
        public SmartAPSEqp(string eqpID, System.DateTime startTime, System.DateTime endTime, string simType) : 
                base(eqpID, startTime, endTime, simType)
        {
        }
        private string _FifoType = "FIFO";
        public virtual string FifoType
        {
            get
            {
                return this._FifoType;
            }
            set
            {
                _FifoType = value;
            }
        }
        private string _Automation = "AUTO";
        public virtual string Automation
        {
            get
            {
                return this._Automation;
            }
            set
            {
                _Automation = value;
            }
        }
        public virtual string StateCode { get; set; }

        public virtual int MaxLotBatchSize { get; set; }

        private List<PMSchedule> _BreakList =  new List<Mozart.SeePlan.DataModel.PMSchedule>();
        public virtual List<PMSchedule> BreakList
        {
            get
            {
                return this._BreakList;
            }
            set
            {
                _BreakList = value;
            }
        }
        public virtual LoadingStates LoadingState { get; set; }

        private Dictionary<string, SmartAPS.DataModel.SmartAPSFirmPlan> _FirmPlans =  new Dictionary<string,SmartAPS.DataModel.SmartAPSFirmPlan>();
        public virtual Dictionary<string, SmartAPS.DataModel.SmartAPSFirmPlan> FirmPlans
        {
            get
            {
                return this._FirmPlans;
            }
            set
            {
                _FirmPlans = value;
            }
        }
        private List<SmartAPS.Inputs.SETUP_INFO> _SetupInfo =  new List<SmartAPS.Inputs.SETUP_INFO>();
        public virtual List<SmartAPS.Inputs.SETUP_INFO> SetupInfo
        {
            get
            {
                return this._SetupInfo;
            }
            set
            {
                _SetupInfo = value;
            }
        }
        #region IEntityObject implementations
        [System.NonSerializedAttribute()]
        private int rbtreeNodeId;
        [System.NonSerializedAttribute()]
        private long rowID = -1;
        [System.NonSerializedAttribute()]
        private Mozart.Data.Entity.IEntityChangeTracker tracker = Mozart.Data.Entity.EntityObject.DetachedTracker;
        Mozart.Data.Entity.EntityState IEntityObject.ObjectState
        {
            get
            {
                return this.tracker.GetObjectState(this);
            }
        }
        long IEntityObject.RowID
        {
            get
            {
                return this.rowID;
            }
            set
            {
                this.rowID = value;
            }
        }
        int IEntityObject.NodeCache
        {
            get
            {
                return this.rbtreeNodeId;
            }
            set
            {
                this.rbtreeNodeId = value;
            }
        }
        Mozart.Data.Entity.IEntityChangeTracker IEntityObject.ChangeTracker
        {
            get
            {
                return this.tracker;
            }
            set
            {
                this.tracker = value ?? EntityObject.DetachedTracker;
            }
        }
        protected virtual void InitCopy()
        {
rbtreeNodeId = 0;
rowID = -1;
tracker = EntityObject.DetachedTracker;
        }
        #endregion
        #region IEditableObject implements
        public virtual void BeginEdit()
        {
            tracker.BeginEdit(this);
        }
        public virtual void CancelEdit()
        {
            tracker.CancelEdit(this);
        }
        public virtual void EndEdit()
        {
            tracker.EndEdit(this);
        }
        #endregion
    }
    [System.SerializableAttribute()]
    public partial class SmartAPSFactoryBreakTime : EntityObject
    {
        public virtual DateTime StartTime { get; set; }

        public virtual DateTime EndTime { get; set; }

        public SmartAPSFactoryBreakTime ShallowCopy()
        {
			var x = (SmartAPSFactoryBreakTime) this.MemberwiseClone();
			x.InitCopy();
            return x;
        }
    }
}
